
tilt_controlled_controller_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007a08  08007a08  00017a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c10  08007c10  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08007c10  08007c10  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c10  08007c10  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007c18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000100  08007d18  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08007d18  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc26  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002122  00000000  00000000  0002dd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002975  00000000  00000000  000312f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb77  00000000  00000000  00033c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a180e  00000000  00000000  000427e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3ff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cdc  00000000  00000000  000e4044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080079f0 	.word	0x080079f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	080079f0 	.word	0x080079f0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f001 fa2f 	bl	80016a4 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 f97f 	bl	8001554 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 fa21 	bl	80016a4 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fa17 	bl	80016a4 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f9a7 	bl	80015d8 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 f99d 	bl	80015d8 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f002 f86f 	bl	80023a4 <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f001 fcb8 	bl	8001c44 <__aeabi_dsub>
 80002d4:	f002 f866 	bl	80023a4 <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__aeabi_fadd>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	46c6      	mov	lr, r8
 80002ec:	0243      	lsls	r3, r0, #9
 80002ee:	0a5b      	lsrs	r3, r3, #9
 80002f0:	024e      	lsls	r6, r1, #9
 80002f2:	0045      	lsls	r5, r0, #1
 80002f4:	004f      	lsls	r7, r1, #1
 80002f6:	00da      	lsls	r2, r3, #3
 80002f8:	0fc4      	lsrs	r4, r0, #31
 80002fa:	469c      	mov	ip, r3
 80002fc:	0a70      	lsrs	r0, r6, #9
 80002fe:	4690      	mov	r8, r2
 8000300:	b500      	push	{lr}
 8000302:	0e2d      	lsrs	r5, r5, #24
 8000304:	0e3f      	lsrs	r7, r7, #24
 8000306:	0fc9      	lsrs	r1, r1, #31
 8000308:	09b6      	lsrs	r6, r6, #6
 800030a:	428c      	cmp	r4, r1
 800030c:	d04b      	beq.n	80003a6 <__aeabi_fadd+0xbe>
 800030e:	1bea      	subs	r2, r5, r7
 8000310:	2a00      	cmp	r2, #0
 8000312:	dd36      	ble.n	8000382 <__aeabi_fadd+0x9a>
 8000314:	2f00      	cmp	r7, #0
 8000316:	d061      	beq.n	80003dc <__aeabi_fadd+0xf4>
 8000318:	2dff      	cmp	r5, #255	; 0xff
 800031a:	d100      	bne.n	800031e <__aeabi_fadd+0x36>
 800031c:	e0ad      	b.n	800047a <__aeabi_fadd+0x192>
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	04db      	lsls	r3, r3, #19
 8000322:	431e      	orrs	r6, r3
 8000324:	2a1b      	cmp	r2, #27
 8000326:	dc00      	bgt.n	800032a <__aeabi_fadd+0x42>
 8000328:	e0d3      	b.n	80004d2 <__aeabi_fadd+0x1ea>
 800032a:	2001      	movs	r0, #1
 800032c:	4643      	mov	r3, r8
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	0143      	lsls	r3, r0, #5
 8000332:	d400      	bmi.n	8000336 <__aeabi_fadd+0x4e>
 8000334:	e08c      	b.n	8000450 <__aeabi_fadd+0x168>
 8000336:	0180      	lsls	r0, r0, #6
 8000338:	0987      	lsrs	r7, r0, #6
 800033a:	0038      	movs	r0, r7
 800033c:	f002 f8be 	bl	80024bc <__clzsi2>
 8000340:	3805      	subs	r0, #5
 8000342:	4087      	lsls	r7, r0
 8000344:	4285      	cmp	r5, r0
 8000346:	dc00      	bgt.n	800034a <__aeabi_fadd+0x62>
 8000348:	e0b6      	b.n	80004b8 <__aeabi_fadd+0x1d0>
 800034a:	1a2d      	subs	r5, r5, r0
 800034c:	48b3      	ldr	r0, [pc, #716]	; (800061c <__aeabi_fadd+0x334>)
 800034e:	4038      	ands	r0, r7
 8000350:	0743      	lsls	r3, r0, #29
 8000352:	d004      	beq.n	800035e <__aeabi_fadd+0x76>
 8000354:	230f      	movs	r3, #15
 8000356:	4003      	ands	r3, r0
 8000358:	2b04      	cmp	r3, #4
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0x76>
 800035c:	3004      	adds	r0, #4
 800035e:	0143      	lsls	r3, r0, #5
 8000360:	d400      	bmi.n	8000364 <__aeabi_fadd+0x7c>
 8000362:	e078      	b.n	8000456 <__aeabi_fadd+0x16e>
 8000364:	1c6a      	adds	r2, r5, #1
 8000366:	2dfe      	cmp	r5, #254	; 0xfe
 8000368:	d065      	beq.n	8000436 <__aeabi_fadd+0x14e>
 800036a:	0180      	lsls	r0, r0, #6
 800036c:	0a43      	lsrs	r3, r0, #9
 800036e:	469c      	mov	ip, r3
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	4663      	mov	r3, ip
 8000374:	05d0      	lsls	r0, r2, #23
 8000376:	4318      	orrs	r0, r3
 8000378:	07e4      	lsls	r4, r4, #31
 800037a:	4320      	orrs	r0, r4
 800037c:	bc80      	pop	{r7}
 800037e:	46b8      	mov	r8, r7
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	2a00      	cmp	r2, #0
 8000384:	d035      	beq.n	80003f2 <__aeabi_fadd+0x10a>
 8000386:	1b7a      	subs	r2, r7, r5
 8000388:	2d00      	cmp	r5, #0
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xa6>
 800038c:	e0af      	b.n	80004ee <__aeabi_fadd+0x206>
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d100      	bne.n	8000396 <__aeabi_fadd+0xae>
 8000394:	e0a7      	b.n	80004e6 <__aeabi_fadd+0x1fe>
 8000396:	1e53      	subs	r3, r2, #1
 8000398:	2a01      	cmp	r2, #1
 800039a:	d100      	bne.n	800039e <__aeabi_fadd+0xb6>
 800039c:	e12f      	b.n	80005fe <__aeabi_fadd+0x316>
 800039e:	2aff      	cmp	r2, #255	; 0xff
 80003a0:	d069      	beq.n	8000476 <__aeabi_fadd+0x18e>
 80003a2:	001a      	movs	r2, r3
 80003a4:	e0aa      	b.n	80004fc <__aeabi_fadd+0x214>
 80003a6:	1be9      	subs	r1, r5, r7
 80003a8:	2900      	cmp	r1, #0
 80003aa:	dd70      	ble.n	800048e <__aeabi_fadd+0x1a6>
 80003ac:	2f00      	cmp	r7, #0
 80003ae:	d037      	beq.n	8000420 <__aeabi_fadd+0x138>
 80003b0:	2dff      	cmp	r5, #255	; 0xff
 80003b2:	d062      	beq.n	800047a <__aeabi_fadd+0x192>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	04db      	lsls	r3, r3, #19
 80003b8:	431e      	orrs	r6, r3
 80003ba:	291b      	cmp	r1, #27
 80003bc:	dc00      	bgt.n	80003c0 <__aeabi_fadd+0xd8>
 80003be:	e0b0      	b.n	8000522 <__aeabi_fadd+0x23a>
 80003c0:	2001      	movs	r0, #1
 80003c2:	4440      	add	r0, r8
 80003c4:	0143      	lsls	r3, r0, #5
 80003c6:	d543      	bpl.n	8000450 <__aeabi_fadd+0x168>
 80003c8:	3501      	adds	r5, #1
 80003ca:	2dff      	cmp	r5, #255	; 0xff
 80003cc:	d033      	beq.n	8000436 <__aeabi_fadd+0x14e>
 80003ce:	2301      	movs	r3, #1
 80003d0:	4a93      	ldr	r2, [pc, #588]	; (8000620 <__aeabi_fadd+0x338>)
 80003d2:	4003      	ands	r3, r0
 80003d4:	0840      	lsrs	r0, r0, #1
 80003d6:	4010      	ands	r0, r2
 80003d8:	4318      	orrs	r0, r3
 80003da:	e7b9      	b.n	8000350 <__aeabi_fadd+0x68>
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d100      	bne.n	80003e2 <__aeabi_fadd+0xfa>
 80003e0:	e083      	b.n	80004ea <__aeabi_fadd+0x202>
 80003e2:	1e51      	subs	r1, r2, #1
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	d100      	bne.n	80003ea <__aeabi_fadd+0x102>
 80003e8:	e0d8      	b.n	800059c <__aeabi_fadd+0x2b4>
 80003ea:	2aff      	cmp	r2, #255	; 0xff
 80003ec:	d045      	beq.n	800047a <__aeabi_fadd+0x192>
 80003ee:	000a      	movs	r2, r1
 80003f0:	e798      	b.n	8000324 <__aeabi_fadd+0x3c>
 80003f2:	27fe      	movs	r7, #254	; 0xfe
 80003f4:	1c6a      	adds	r2, r5, #1
 80003f6:	4217      	tst	r7, r2
 80003f8:	d000      	beq.n	80003fc <__aeabi_fadd+0x114>
 80003fa:	e086      	b.n	800050a <__aeabi_fadd+0x222>
 80003fc:	2d00      	cmp	r5, #0
 80003fe:	d000      	beq.n	8000402 <__aeabi_fadd+0x11a>
 8000400:	e0b7      	b.n	8000572 <__aeabi_fadd+0x28a>
 8000402:	4643      	mov	r3, r8
 8000404:	2b00      	cmp	r3, #0
 8000406:	d100      	bne.n	800040a <__aeabi_fadd+0x122>
 8000408:	e0f3      	b.n	80005f2 <__aeabi_fadd+0x30a>
 800040a:	2200      	movs	r2, #0
 800040c:	2e00      	cmp	r6, #0
 800040e:	d0b0      	beq.n	8000372 <__aeabi_fadd+0x8a>
 8000410:	1b98      	subs	r0, r3, r6
 8000412:	0143      	lsls	r3, r0, #5
 8000414:	d400      	bmi.n	8000418 <__aeabi_fadd+0x130>
 8000416:	e0fa      	b.n	800060e <__aeabi_fadd+0x326>
 8000418:	4643      	mov	r3, r8
 800041a:	000c      	movs	r4, r1
 800041c:	1af0      	subs	r0, r6, r3
 800041e:	e797      	b.n	8000350 <__aeabi_fadd+0x68>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_fadd+0x13e>
 8000424:	e0c8      	b.n	80005b8 <__aeabi_fadd+0x2d0>
 8000426:	1e4a      	subs	r2, r1, #1
 8000428:	2901      	cmp	r1, #1
 800042a:	d100      	bne.n	800042e <__aeabi_fadd+0x146>
 800042c:	e0ae      	b.n	800058c <__aeabi_fadd+0x2a4>
 800042e:	29ff      	cmp	r1, #255	; 0xff
 8000430:	d023      	beq.n	800047a <__aeabi_fadd+0x192>
 8000432:	0011      	movs	r1, r2
 8000434:	e7c1      	b.n	80003ba <__aeabi_fadd+0xd2>
 8000436:	2300      	movs	r3, #0
 8000438:	22ff      	movs	r2, #255	; 0xff
 800043a:	469c      	mov	ip, r3
 800043c:	e799      	b.n	8000372 <__aeabi_fadd+0x8a>
 800043e:	21fe      	movs	r1, #254	; 0xfe
 8000440:	1c6a      	adds	r2, r5, #1
 8000442:	4211      	tst	r1, r2
 8000444:	d077      	beq.n	8000536 <__aeabi_fadd+0x24e>
 8000446:	2aff      	cmp	r2, #255	; 0xff
 8000448:	d0f5      	beq.n	8000436 <__aeabi_fadd+0x14e>
 800044a:	0015      	movs	r5, r2
 800044c:	4446      	add	r6, r8
 800044e:	0870      	lsrs	r0, r6, #1
 8000450:	0743      	lsls	r3, r0, #29
 8000452:	d000      	beq.n	8000456 <__aeabi_fadd+0x16e>
 8000454:	e77e      	b.n	8000354 <__aeabi_fadd+0x6c>
 8000456:	08c3      	lsrs	r3, r0, #3
 8000458:	2dff      	cmp	r5, #255	; 0xff
 800045a:	d00e      	beq.n	800047a <__aeabi_fadd+0x192>
 800045c:	025b      	lsls	r3, r3, #9
 800045e:	0a5b      	lsrs	r3, r3, #9
 8000460:	469c      	mov	ip, r3
 8000462:	b2ea      	uxtb	r2, r5
 8000464:	e785      	b.n	8000372 <__aeabi_fadd+0x8a>
 8000466:	2e00      	cmp	r6, #0
 8000468:	d007      	beq.n	800047a <__aeabi_fadd+0x192>
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	03d2      	lsls	r2, r2, #15
 800046e:	4213      	tst	r3, r2
 8000470:	d003      	beq.n	800047a <__aeabi_fadd+0x192>
 8000472:	4210      	tst	r0, r2
 8000474:	d101      	bne.n	800047a <__aeabi_fadd+0x192>
 8000476:	000c      	movs	r4, r1
 8000478:	0003      	movs	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0db      	beq.n	8000436 <__aeabi_fadd+0x14e>
 800047e:	2080      	movs	r0, #128	; 0x80
 8000480:	03c0      	lsls	r0, r0, #15
 8000482:	4318      	orrs	r0, r3
 8000484:	0240      	lsls	r0, r0, #9
 8000486:	0a43      	lsrs	r3, r0, #9
 8000488:	469c      	mov	ip, r3
 800048a:	22ff      	movs	r2, #255	; 0xff
 800048c:	e771      	b.n	8000372 <__aeabi_fadd+0x8a>
 800048e:	2900      	cmp	r1, #0
 8000490:	d0d5      	beq.n	800043e <__aeabi_fadd+0x156>
 8000492:	1b7a      	subs	r2, r7, r5
 8000494:	2d00      	cmp	r5, #0
 8000496:	d160      	bne.n	800055a <__aeabi_fadd+0x272>
 8000498:	4643      	mov	r3, r8
 800049a:	2b00      	cmp	r3, #0
 800049c:	d024      	beq.n	80004e8 <__aeabi_fadd+0x200>
 800049e:	1e53      	subs	r3, r2, #1
 80004a0:	2a01      	cmp	r2, #1
 80004a2:	d073      	beq.n	800058c <__aeabi_fadd+0x2a4>
 80004a4:	2aff      	cmp	r2, #255	; 0xff
 80004a6:	d0e7      	beq.n	8000478 <__aeabi_fadd+0x190>
 80004a8:	001a      	movs	r2, r3
 80004aa:	2a1b      	cmp	r2, #27
 80004ac:	dc00      	bgt.n	80004b0 <__aeabi_fadd+0x1c8>
 80004ae:	e085      	b.n	80005bc <__aeabi_fadd+0x2d4>
 80004b0:	2001      	movs	r0, #1
 80004b2:	003d      	movs	r5, r7
 80004b4:	1980      	adds	r0, r0, r6
 80004b6:	e785      	b.n	80003c4 <__aeabi_fadd+0xdc>
 80004b8:	2320      	movs	r3, #32
 80004ba:	003a      	movs	r2, r7
 80004bc:	1b45      	subs	r5, r0, r5
 80004be:	0038      	movs	r0, r7
 80004c0:	3501      	adds	r5, #1
 80004c2:	40ea      	lsrs	r2, r5
 80004c4:	1b5d      	subs	r5, r3, r5
 80004c6:	40a8      	lsls	r0, r5
 80004c8:	1e43      	subs	r3, r0, #1
 80004ca:	4198      	sbcs	r0, r3
 80004cc:	2500      	movs	r5, #0
 80004ce:	4310      	orrs	r0, r2
 80004d0:	e73e      	b.n	8000350 <__aeabi_fadd+0x68>
 80004d2:	2320      	movs	r3, #32
 80004d4:	0030      	movs	r0, r6
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	0031      	movs	r1, r6
 80004da:	4098      	lsls	r0, r3
 80004dc:	40d1      	lsrs	r1, r2
 80004de:	1e43      	subs	r3, r0, #1
 80004e0:	4198      	sbcs	r0, r3
 80004e2:	4308      	orrs	r0, r1
 80004e4:	e722      	b.n	800032c <__aeabi_fadd+0x44>
 80004e6:	000c      	movs	r4, r1
 80004e8:	0003      	movs	r3, r0
 80004ea:	0015      	movs	r5, r2
 80004ec:	e7b4      	b.n	8000458 <__aeabi_fadd+0x170>
 80004ee:	2fff      	cmp	r7, #255	; 0xff
 80004f0:	d0c1      	beq.n	8000476 <__aeabi_fadd+0x18e>
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	4640      	mov	r0, r8
 80004f6:	04db      	lsls	r3, r3, #19
 80004f8:	4318      	orrs	r0, r3
 80004fa:	4680      	mov	r8, r0
 80004fc:	2a1b      	cmp	r2, #27
 80004fe:	dd51      	ble.n	80005a4 <__aeabi_fadd+0x2bc>
 8000500:	2001      	movs	r0, #1
 8000502:	000c      	movs	r4, r1
 8000504:	003d      	movs	r5, r7
 8000506:	1a30      	subs	r0, r6, r0
 8000508:	e712      	b.n	8000330 <__aeabi_fadd+0x48>
 800050a:	4643      	mov	r3, r8
 800050c:	1b9f      	subs	r7, r3, r6
 800050e:	017b      	lsls	r3, r7, #5
 8000510:	d42b      	bmi.n	800056a <__aeabi_fadd+0x282>
 8000512:	2f00      	cmp	r7, #0
 8000514:	d000      	beq.n	8000518 <__aeabi_fadd+0x230>
 8000516:	e710      	b.n	800033a <__aeabi_fadd+0x52>
 8000518:	2300      	movs	r3, #0
 800051a:	2400      	movs	r4, #0
 800051c:	2200      	movs	r2, #0
 800051e:	469c      	mov	ip, r3
 8000520:	e727      	b.n	8000372 <__aeabi_fadd+0x8a>
 8000522:	2320      	movs	r3, #32
 8000524:	0032      	movs	r2, r6
 8000526:	0030      	movs	r0, r6
 8000528:	40ca      	lsrs	r2, r1
 800052a:	1a59      	subs	r1, r3, r1
 800052c:	4088      	lsls	r0, r1
 800052e:	1e43      	subs	r3, r0, #1
 8000530:	4198      	sbcs	r0, r3
 8000532:	4310      	orrs	r0, r2
 8000534:	e745      	b.n	80003c2 <__aeabi_fadd+0xda>
 8000536:	2d00      	cmp	r5, #0
 8000538:	d14a      	bne.n	80005d0 <__aeabi_fadd+0x2e8>
 800053a:	4643      	mov	r3, r8
 800053c:	2b00      	cmp	r3, #0
 800053e:	d063      	beq.n	8000608 <__aeabi_fadd+0x320>
 8000540:	2200      	movs	r2, #0
 8000542:	2e00      	cmp	r6, #0
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x260>
 8000546:	e714      	b.n	8000372 <__aeabi_fadd+0x8a>
 8000548:	0030      	movs	r0, r6
 800054a:	4440      	add	r0, r8
 800054c:	0143      	lsls	r3, r0, #5
 800054e:	d400      	bmi.n	8000552 <__aeabi_fadd+0x26a>
 8000550:	e77e      	b.n	8000450 <__aeabi_fadd+0x168>
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <__aeabi_fadd+0x334>)
 8000554:	3501      	adds	r5, #1
 8000556:	4018      	ands	r0, r3
 8000558:	e77a      	b.n	8000450 <__aeabi_fadd+0x168>
 800055a:	2fff      	cmp	r7, #255	; 0xff
 800055c:	d08c      	beq.n	8000478 <__aeabi_fadd+0x190>
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	4641      	mov	r1, r8
 8000562:	04db      	lsls	r3, r3, #19
 8000564:	4319      	orrs	r1, r3
 8000566:	4688      	mov	r8, r1
 8000568:	e79f      	b.n	80004aa <__aeabi_fadd+0x1c2>
 800056a:	4643      	mov	r3, r8
 800056c:	000c      	movs	r4, r1
 800056e:	1af7      	subs	r7, r6, r3
 8000570:	e6e3      	b.n	800033a <__aeabi_fadd+0x52>
 8000572:	4642      	mov	r2, r8
 8000574:	2a00      	cmp	r2, #0
 8000576:	d000      	beq.n	800057a <__aeabi_fadd+0x292>
 8000578:	e775      	b.n	8000466 <__aeabi_fadd+0x17e>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d000      	beq.n	8000580 <__aeabi_fadd+0x298>
 800057e:	e77a      	b.n	8000476 <__aeabi_fadd+0x18e>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	03db      	lsls	r3, r3, #15
 8000584:	2400      	movs	r4, #0
 8000586:	469c      	mov	ip, r3
 8000588:	22ff      	movs	r2, #255	; 0xff
 800058a:	e6f2      	b.n	8000372 <__aeabi_fadd+0x8a>
 800058c:	0030      	movs	r0, r6
 800058e:	4440      	add	r0, r8
 8000590:	2501      	movs	r5, #1
 8000592:	0143      	lsls	r3, r0, #5
 8000594:	d400      	bmi.n	8000598 <__aeabi_fadd+0x2b0>
 8000596:	e75b      	b.n	8000450 <__aeabi_fadd+0x168>
 8000598:	2502      	movs	r5, #2
 800059a:	e718      	b.n	80003ce <__aeabi_fadd+0xe6>
 800059c:	4643      	mov	r3, r8
 800059e:	2501      	movs	r5, #1
 80005a0:	1b98      	subs	r0, r3, r6
 80005a2:	e6c5      	b.n	8000330 <__aeabi_fadd+0x48>
 80005a4:	2320      	movs	r3, #32
 80005a6:	4644      	mov	r4, r8
 80005a8:	4640      	mov	r0, r8
 80005aa:	40d4      	lsrs	r4, r2
 80005ac:	1a9a      	subs	r2, r3, r2
 80005ae:	4090      	lsls	r0, r2
 80005b0:	1e43      	subs	r3, r0, #1
 80005b2:	4198      	sbcs	r0, r3
 80005b4:	4320      	orrs	r0, r4
 80005b6:	e7a4      	b.n	8000502 <__aeabi_fadd+0x21a>
 80005b8:	000d      	movs	r5, r1
 80005ba:	e74d      	b.n	8000458 <__aeabi_fadd+0x170>
 80005bc:	2320      	movs	r3, #32
 80005be:	4641      	mov	r1, r8
 80005c0:	4640      	mov	r0, r8
 80005c2:	40d1      	lsrs	r1, r2
 80005c4:	1a9a      	subs	r2, r3, r2
 80005c6:	4090      	lsls	r0, r2
 80005c8:	1e43      	subs	r3, r0, #1
 80005ca:	4198      	sbcs	r0, r3
 80005cc:	4308      	orrs	r0, r1
 80005ce:	e770      	b.n	80004b2 <__aeabi_fadd+0x1ca>
 80005d0:	4642      	mov	r2, r8
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x2f0>
 80005d6:	e74f      	b.n	8000478 <__aeabi_fadd+0x190>
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x2f6>
 80005dc:	e74d      	b.n	800047a <__aeabi_fadd+0x192>
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	03d2      	lsls	r2, r2, #15
 80005e2:	4213      	tst	r3, r2
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x300>
 80005e6:	e748      	b.n	800047a <__aeabi_fadd+0x192>
 80005e8:	4210      	tst	r0, r2
 80005ea:	d000      	beq.n	80005ee <__aeabi_fadd+0x306>
 80005ec:	e745      	b.n	800047a <__aeabi_fadd+0x192>
 80005ee:	0003      	movs	r3, r0
 80005f0:	e743      	b.n	800047a <__aeabi_fadd+0x192>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d090      	beq.n	8000518 <__aeabi_fadd+0x230>
 80005f6:	000c      	movs	r4, r1
 80005f8:	4684      	mov	ip, r0
 80005fa:	2200      	movs	r2, #0
 80005fc:	e6b9      	b.n	8000372 <__aeabi_fadd+0x8a>
 80005fe:	4643      	mov	r3, r8
 8000600:	000c      	movs	r4, r1
 8000602:	1af0      	subs	r0, r6, r3
 8000604:	3501      	adds	r5, #1
 8000606:	e693      	b.n	8000330 <__aeabi_fadd+0x48>
 8000608:	4684      	mov	ip, r0
 800060a:	2200      	movs	r2, #0
 800060c:	e6b1      	b.n	8000372 <__aeabi_fadd+0x8a>
 800060e:	2800      	cmp	r0, #0
 8000610:	d000      	beq.n	8000614 <__aeabi_fadd+0x32c>
 8000612:	e71d      	b.n	8000450 <__aeabi_fadd+0x168>
 8000614:	2300      	movs	r3, #0
 8000616:	2400      	movs	r4, #0
 8000618:	469c      	mov	ip, r3
 800061a:	e6aa      	b.n	8000372 <__aeabi_fadd+0x8a>
 800061c:	fbffffff 	.word	0xfbffffff
 8000620:	7dffffff 	.word	0x7dffffff

08000624 <__aeabi_fdiv>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	464f      	mov	r7, r9
 8000628:	4646      	mov	r6, r8
 800062a:	46d6      	mov	lr, sl
 800062c:	0245      	lsls	r5, r0, #9
 800062e:	b5c0      	push	{r6, r7, lr}
 8000630:	0047      	lsls	r7, r0, #1
 8000632:	1c0c      	adds	r4, r1, #0
 8000634:	0a6d      	lsrs	r5, r5, #9
 8000636:	0e3f      	lsrs	r7, r7, #24
 8000638:	0fc6      	lsrs	r6, r0, #31
 800063a:	2f00      	cmp	r7, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fdiv+0x1c>
 800063e:	e070      	b.n	8000722 <__aeabi_fdiv+0xfe>
 8000640:	2fff      	cmp	r7, #255	; 0xff
 8000642:	d100      	bne.n	8000646 <__aeabi_fdiv+0x22>
 8000644:	e075      	b.n	8000732 <__aeabi_fdiv+0x10e>
 8000646:	00eb      	lsls	r3, r5, #3
 8000648:	2580      	movs	r5, #128	; 0x80
 800064a:	04ed      	lsls	r5, r5, #19
 800064c:	431d      	orrs	r5, r3
 800064e:	2300      	movs	r3, #0
 8000650:	4699      	mov	r9, r3
 8000652:	469a      	mov	sl, r3
 8000654:	3f7f      	subs	r7, #127	; 0x7f
 8000656:	0260      	lsls	r0, r4, #9
 8000658:	0a43      	lsrs	r3, r0, #9
 800065a:	4698      	mov	r8, r3
 800065c:	0063      	lsls	r3, r4, #1
 800065e:	0e1b      	lsrs	r3, r3, #24
 8000660:	0fe4      	lsrs	r4, r4, #31
 8000662:	2b00      	cmp	r3, #0
 8000664:	d04e      	beq.n	8000704 <__aeabi_fdiv+0xe0>
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d046      	beq.n	80006f8 <__aeabi_fdiv+0xd4>
 800066a:	4642      	mov	r2, r8
 800066c:	00d0      	lsls	r0, r2, #3
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	04d2      	lsls	r2, r2, #19
 8000672:	4302      	orrs	r2, r0
 8000674:	4690      	mov	r8, r2
 8000676:	2200      	movs	r2, #0
 8000678:	3b7f      	subs	r3, #127	; 0x7f
 800067a:	0031      	movs	r1, r6
 800067c:	1aff      	subs	r7, r7, r3
 800067e:	464b      	mov	r3, r9
 8000680:	4061      	eors	r1, r4
 8000682:	b2c9      	uxtb	r1, r1
 8000684:	4313      	orrs	r3, r2
 8000686:	2b0f      	cmp	r3, #15
 8000688:	d900      	bls.n	800068c <__aeabi_fdiv+0x68>
 800068a:	e0b5      	b.n	80007f8 <__aeabi_fdiv+0x1d4>
 800068c:	486e      	ldr	r0, [pc, #440]	; (8000848 <__aeabi_fdiv+0x224>)
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	58c3      	ldr	r3, [r0, r3]
 8000692:	469f      	mov	pc, r3
 8000694:	2300      	movs	r3, #0
 8000696:	4698      	mov	r8, r3
 8000698:	0026      	movs	r6, r4
 800069a:	4645      	mov	r5, r8
 800069c:	4692      	mov	sl, r2
 800069e:	4653      	mov	r3, sl
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fdiv+0x82>
 80006a4:	e089      	b.n	80007ba <__aeabi_fdiv+0x196>
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d100      	bne.n	80006ac <__aeabi_fdiv+0x88>
 80006aa:	e09e      	b.n	80007ea <__aeabi_fdiv+0x1c6>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d018      	beq.n	80006e2 <__aeabi_fdiv+0xbe>
 80006b0:	003b      	movs	r3, r7
 80006b2:	337f      	adds	r3, #127	; 0x7f
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dd69      	ble.n	800078c <__aeabi_fdiv+0x168>
 80006b8:	076a      	lsls	r2, r5, #29
 80006ba:	d004      	beq.n	80006c6 <__aeabi_fdiv+0xa2>
 80006bc:	220f      	movs	r2, #15
 80006be:	402a      	ands	r2, r5
 80006c0:	2a04      	cmp	r2, #4
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fdiv+0xa2>
 80006c4:	3504      	adds	r5, #4
 80006c6:	012a      	lsls	r2, r5, #4
 80006c8:	d503      	bpl.n	80006d2 <__aeabi_fdiv+0xae>
 80006ca:	4b60      	ldr	r3, [pc, #384]	; (800084c <__aeabi_fdiv+0x228>)
 80006cc:	401d      	ands	r5, r3
 80006ce:	003b      	movs	r3, r7
 80006d0:	3380      	adds	r3, #128	; 0x80
 80006d2:	2bfe      	cmp	r3, #254	; 0xfe
 80006d4:	dd00      	ble.n	80006d8 <__aeabi_fdiv+0xb4>
 80006d6:	e070      	b.n	80007ba <__aeabi_fdiv+0x196>
 80006d8:	01ad      	lsls	r5, r5, #6
 80006da:	0a6d      	lsrs	r5, r5, #9
 80006dc:	b2d8      	uxtb	r0, r3
 80006de:	e002      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80006e0:	000e      	movs	r6, r1
 80006e2:	2000      	movs	r0, #0
 80006e4:	2500      	movs	r5, #0
 80006e6:	05c0      	lsls	r0, r0, #23
 80006e8:	4328      	orrs	r0, r5
 80006ea:	07f6      	lsls	r6, r6, #31
 80006ec:	4330      	orrs	r0, r6
 80006ee:	bce0      	pop	{r5, r6, r7}
 80006f0:	46ba      	mov	sl, r7
 80006f2:	46b1      	mov	r9, r6
 80006f4:	46a8      	mov	r8, r5
 80006f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f8:	4643      	mov	r3, r8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d13f      	bne.n	800077e <__aeabi_fdiv+0x15a>
 80006fe:	2202      	movs	r2, #2
 8000700:	3fff      	subs	r7, #255	; 0xff
 8000702:	e003      	b.n	800070c <__aeabi_fdiv+0xe8>
 8000704:	4643      	mov	r3, r8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d12d      	bne.n	8000766 <__aeabi_fdiv+0x142>
 800070a:	2201      	movs	r2, #1
 800070c:	0031      	movs	r1, r6
 800070e:	464b      	mov	r3, r9
 8000710:	4061      	eors	r1, r4
 8000712:	b2c9      	uxtb	r1, r1
 8000714:	4313      	orrs	r3, r2
 8000716:	2b0f      	cmp	r3, #15
 8000718:	d834      	bhi.n	8000784 <__aeabi_fdiv+0x160>
 800071a:	484d      	ldr	r0, [pc, #308]	; (8000850 <__aeabi_fdiv+0x22c>)
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	58c3      	ldr	r3, [r0, r3]
 8000720:	469f      	mov	pc, r3
 8000722:	2d00      	cmp	r5, #0
 8000724:	d113      	bne.n	800074e <__aeabi_fdiv+0x12a>
 8000726:	2304      	movs	r3, #4
 8000728:	4699      	mov	r9, r3
 800072a:	3b03      	subs	r3, #3
 800072c:	2700      	movs	r7, #0
 800072e:	469a      	mov	sl, r3
 8000730:	e791      	b.n	8000656 <__aeabi_fdiv+0x32>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d105      	bne.n	8000742 <__aeabi_fdiv+0x11e>
 8000736:	2308      	movs	r3, #8
 8000738:	4699      	mov	r9, r3
 800073a:	3b06      	subs	r3, #6
 800073c:	27ff      	movs	r7, #255	; 0xff
 800073e:	469a      	mov	sl, r3
 8000740:	e789      	b.n	8000656 <__aeabi_fdiv+0x32>
 8000742:	230c      	movs	r3, #12
 8000744:	4699      	mov	r9, r3
 8000746:	3b09      	subs	r3, #9
 8000748:	27ff      	movs	r7, #255	; 0xff
 800074a:	469a      	mov	sl, r3
 800074c:	e783      	b.n	8000656 <__aeabi_fdiv+0x32>
 800074e:	0028      	movs	r0, r5
 8000750:	f001 feb4 	bl	80024bc <__clzsi2>
 8000754:	2776      	movs	r7, #118	; 0x76
 8000756:	1f43      	subs	r3, r0, #5
 8000758:	409d      	lsls	r5, r3
 800075a:	2300      	movs	r3, #0
 800075c:	427f      	negs	r7, r7
 800075e:	4699      	mov	r9, r3
 8000760:	469a      	mov	sl, r3
 8000762:	1a3f      	subs	r7, r7, r0
 8000764:	e777      	b.n	8000656 <__aeabi_fdiv+0x32>
 8000766:	4640      	mov	r0, r8
 8000768:	f001 fea8 	bl	80024bc <__clzsi2>
 800076c:	4642      	mov	r2, r8
 800076e:	1f43      	subs	r3, r0, #5
 8000770:	409a      	lsls	r2, r3
 8000772:	2376      	movs	r3, #118	; 0x76
 8000774:	425b      	negs	r3, r3
 8000776:	4690      	mov	r8, r2
 8000778:	1a1b      	subs	r3, r3, r0
 800077a:	2200      	movs	r2, #0
 800077c:	e77d      	b.n	800067a <__aeabi_fdiv+0x56>
 800077e:	23ff      	movs	r3, #255	; 0xff
 8000780:	2203      	movs	r2, #3
 8000782:	e77a      	b.n	800067a <__aeabi_fdiv+0x56>
 8000784:	000e      	movs	r6, r1
 8000786:	20ff      	movs	r0, #255	; 0xff
 8000788:	2500      	movs	r5, #0
 800078a:	e7ac      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 800078c:	2001      	movs	r0, #1
 800078e:	1ac0      	subs	r0, r0, r3
 8000790:	281b      	cmp	r0, #27
 8000792:	dca6      	bgt.n	80006e2 <__aeabi_fdiv+0xbe>
 8000794:	379e      	adds	r7, #158	; 0x9e
 8000796:	002a      	movs	r2, r5
 8000798:	40bd      	lsls	r5, r7
 800079a:	40c2      	lsrs	r2, r0
 800079c:	1e6b      	subs	r3, r5, #1
 800079e:	419d      	sbcs	r5, r3
 80007a0:	4315      	orrs	r5, r2
 80007a2:	076b      	lsls	r3, r5, #29
 80007a4:	d004      	beq.n	80007b0 <__aeabi_fdiv+0x18c>
 80007a6:	230f      	movs	r3, #15
 80007a8:	402b      	ands	r3, r5
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fdiv+0x18c>
 80007ae:	3504      	adds	r5, #4
 80007b0:	016b      	lsls	r3, r5, #5
 80007b2:	d544      	bpl.n	800083e <__aeabi_fdiv+0x21a>
 80007b4:	2001      	movs	r0, #1
 80007b6:	2500      	movs	r5, #0
 80007b8:	e795      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	2500      	movs	r5, #0
 80007be:	e792      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007c0:	2580      	movs	r5, #128	; 0x80
 80007c2:	2600      	movs	r6, #0
 80007c4:	20ff      	movs	r0, #255	; 0xff
 80007c6:	03ed      	lsls	r5, r5, #15
 80007c8:	e78d      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007ca:	2300      	movs	r3, #0
 80007cc:	4698      	mov	r8, r3
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	03c0      	lsls	r0, r0, #15
 80007d2:	4205      	tst	r5, r0
 80007d4:	d009      	beq.n	80007ea <__aeabi_fdiv+0x1c6>
 80007d6:	4643      	mov	r3, r8
 80007d8:	4203      	tst	r3, r0
 80007da:	d106      	bne.n	80007ea <__aeabi_fdiv+0x1c6>
 80007dc:	4645      	mov	r5, r8
 80007de:	4305      	orrs	r5, r0
 80007e0:	026d      	lsls	r5, r5, #9
 80007e2:	0026      	movs	r6, r4
 80007e4:	20ff      	movs	r0, #255	; 0xff
 80007e6:	0a6d      	lsrs	r5, r5, #9
 80007e8:	e77d      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007ea:	2080      	movs	r0, #128	; 0x80
 80007ec:	03c0      	lsls	r0, r0, #15
 80007ee:	4305      	orrs	r5, r0
 80007f0:	026d      	lsls	r5, r5, #9
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	e776      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007f8:	4642      	mov	r2, r8
 80007fa:	016b      	lsls	r3, r5, #5
 80007fc:	0150      	lsls	r0, r2, #5
 80007fe:	4283      	cmp	r3, r0
 8000800:	d219      	bcs.n	8000836 <__aeabi_fdiv+0x212>
 8000802:	221b      	movs	r2, #27
 8000804:	2500      	movs	r5, #0
 8000806:	3f01      	subs	r7, #1
 8000808:	2601      	movs	r6, #1
 800080a:	001c      	movs	r4, r3
 800080c:	006d      	lsls	r5, r5, #1
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2c00      	cmp	r4, #0
 8000812:	db01      	blt.n	8000818 <__aeabi_fdiv+0x1f4>
 8000814:	4298      	cmp	r0, r3
 8000816:	d801      	bhi.n	800081c <__aeabi_fdiv+0x1f8>
 8000818:	1a1b      	subs	r3, r3, r0
 800081a:	4335      	orrs	r5, r6
 800081c:	3a01      	subs	r2, #1
 800081e:	2a00      	cmp	r2, #0
 8000820:	d1f3      	bne.n	800080a <__aeabi_fdiv+0x1e6>
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	4193      	sbcs	r3, r2
 8000826:	431d      	orrs	r5, r3
 8000828:	003b      	movs	r3, r7
 800082a:	337f      	adds	r3, #127	; 0x7f
 800082c:	000e      	movs	r6, r1
 800082e:	2b00      	cmp	r3, #0
 8000830:	dd00      	ble.n	8000834 <__aeabi_fdiv+0x210>
 8000832:	e741      	b.n	80006b8 <__aeabi_fdiv+0x94>
 8000834:	e7aa      	b.n	800078c <__aeabi_fdiv+0x168>
 8000836:	221a      	movs	r2, #26
 8000838:	2501      	movs	r5, #1
 800083a:	1a1b      	subs	r3, r3, r0
 800083c:	e7e4      	b.n	8000808 <__aeabi_fdiv+0x1e4>
 800083e:	01ad      	lsls	r5, r5, #6
 8000840:	2000      	movs	r0, #0
 8000842:	0a6d      	lsrs	r5, r5, #9
 8000844:	e74f      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	08007a34 	.word	0x08007a34
 800084c:	f7ffffff 	.word	0xf7ffffff
 8000850:	08007a74 	.word	0x08007a74

08000854 <__aeabi_i2f>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	2800      	cmp	r0, #0
 8000858:	d013      	beq.n	8000882 <__aeabi_i2f+0x2e>
 800085a:	17c3      	asrs	r3, r0, #31
 800085c:	18c6      	adds	r6, r0, r3
 800085e:	405e      	eors	r6, r3
 8000860:	0fc4      	lsrs	r4, r0, #31
 8000862:	0030      	movs	r0, r6
 8000864:	f001 fe2a 	bl	80024bc <__clzsi2>
 8000868:	239e      	movs	r3, #158	; 0x9e
 800086a:	0005      	movs	r5, r0
 800086c:	1a1b      	subs	r3, r3, r0
 800086e:	2b96      	cmp	r3, #150	; 0x96
 8000870:	dc0f      	bgt.n	8000892 <__aeabi_i2f+0x3e>
 8000872:	2808      	cmp	r0, #8
 8000874:	dd01      	ble.n	800087a <__aeabi_i2f+0x26>
 8000876:	3d08      	subs	r5, #8
 8000878:	40ae      	lsls	r6, r5
 800087a:	0276      	lsls	r6, r6, #9
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	e002      	b.n	8000888 <__aeabi_i2f+0x34>
 8000882:	2400      	movs	r4, #0
 8000884:	2000      	movs	r0, #0
 8000886:	2600      	movs	r6, #0
 8000888:	05c0      	lsls	r0, r0, #23
 800088a:	4330      	orrs	r0, r6
 800088c:	07e4      	lsls	r4, r4, #31
 800088e:	4320      	orrs	r0, r4
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000892:	2b99      	cmp	r3, #153	; 0x99
 8000894:	dd0c      	ble.n	80008b0 <__aeabi_i2f+0x5c>
 8000896:	2205      	movs	r2, #5
 8000898:	0031      	movs	r1, r6
 800089a:	1a12      	subs	r2, r2, r0
 800089c:	40d1      	lsrs	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	0001      	movs	r1, r0
 80008a2:	0030      	movs	r0, r6
 80008a4:	311b      	adds	r1, #27
 80008a6:	4088      	lsls	r0, r1
 80008a8:	1e41      	subs	r1, r0, #1
 80008aa:	4188      	sbcs	r0, r1
 80008ac:	4302      	orrs	r2, r0
 80008ae:	0016      	movs	r6, r2
 80008b0:	2d05      	cmp	r5, #5
 80008b2:	dc12      	bgt.n	80008da <__aeabi_i2f+0x86>
 80008b4:	0031      	movs	r1, r6
 80008b6:	4f0d      	ldr	r7, [pc, #52]	; (80008ec <__aeabi_i2f+0x98>)
 80008b8:	4039      	ands	r1, r7
 80008ba:	0772      	lsls	r2, r6, #29
 80008bc:	d009      	beq.n	80008d2 <__aeabi_i2f+0x7e>
 80008be:	200f      	movs	r0, #15
 80008c0:	4030      	ands	r0, r6
 80008c2:	2804      	cmp	r0, #4
 80008c4:	d005      	beq.n	80008d2 <__aeabi_i2f+0x7e>
 80008c6:	3104      	adds	r1, #4
 80008c8:	014a      	lsls	r2, r1, #5
 80008ca:	d502      	bpl.n	80008d2 <__aeabi_i2f+0x7e>
 80008cc:	239f      	movs	r3, #159	; 0x9f
 80008ce:	4039      	ands	r1, r7
 80008d0:	1b5b      	subs	r3, r3, r5
 80008d2:	0189      	lsls	r1, r1, #6
 80008d4:	0a4e      	lsrs	r6, r1, #9
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	e7d6      	b.n	8000888 <__aeabi_i2f+0x34>
 80008da:	1f6a      	subs	r2, r5, #5
 80008dc:	4096      	lsls	r6, r2
 80008de:	0031      	movs	r1, r6
 80008e0:	4f02      	ldr	r7, [pc, #8]	; (80008ec <__aeabi_i2f+0x98>)
 80008e2:	4039      	ands	r1, r7
 80008e4:	0772      	lsls	r2, r6, #29
 80008e6:	d0f4      	beq.n	80008d2 <__aeabi_i2f+0x7e>
 80008e8:	e7e9      	b.n	80008be <__aeabi_i2f+0x6a>
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	fbffffff 	.word	0xfbffffff

080008f0 <__aeabi_dadd>:
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f2:	464f      	mov	r7, r9
 80008f4:	4646      	mov	r6, r8
 80008f6:	46d6      	mov	lr, sl
 80008f8:	000d      	movs	r5, r1
 80008fa:	0004      	movs	r4, r0
 80008fc:	b5c0      	push	{r6, r7, lr}
 80008fe:	001f      	movs	r7, r3
 8000900:	0011      	movs	r1, r2
 8000902:	0328      	lsls	r0, r5, #12
 8000904:	0f62      	lsrs	r2, r4, #29
 8000906:	0a40      	lsrs	r0, r0, #9
 8000908:	4310      	orrs	r0, r2
 800090a:	007a      	lsls	r2, r7, #1
 800090c:	0d52      	lsrs	r2, r2, #21
 800090e:	00e3      	lsls	r3, r4, #3
 8000910:	033c      	lsls	r4, r7, #12
 8000912:	4691      	mov	r9, r2
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0ffa      	lsrs	r2, r7, #31
 8000918:	0f4f      	lsrs	r7, r1, #29
 800091a:	006e      	lsls	r6, r5, #1
 800091c:	4327      	orrs	r7, r4
 800091e:	4692      	mov	sl, r2
 8000920:	46b8      	mov	r8, r7
 8000922:	0d76      	lsrs	r6, r6, #21
 8000924:	0fed      	lsrs	r5, r5, #31
 8000926:	00c9      	lsls	r1, r1, #3
 8000928:	4295      	cmp	r5, r2
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x3e>
 800092c:	e099      	b.n	8000a62 <__aeabi_dadd+0x172>
 800092e:	464c      	mov	r4, r9
 8000930:	1b34      	subs	r4, r6, r4
 8000932:	46a4      	mov	ip, r4
 8000934:	2c00      	cmp	r4, #0
 8000936:	dc00      	bgt.n	800093a <__aeabi_dadd+0x4a>
 8000938:	e07c      	b.n	8000a34 <__aeabi_dadd+0x144>
 800093a:	464a      	mov	r2, r9
 800093c:	2a00      	cmp	r2, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x52>
 8000940:	e0b8      	b.n	8000ab4 <__aeabi_dadd+0x1c4>
 8000942:	4ac5      	ldr	r2, [pc, #788]	; (8000c58 <__aeabi_dadd+0x368>)
 8000944:	4296      	cmp	r6, r2
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x5a>
 8000948:	e11c      	b.n	8000b84 <__aeabi_dadd+0x294>
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	003c      	movs	r4, r7
 800094e:	0412      	lsls	r2, r2, #16
 8000950:	4314      	orrs	r4, r2
 8000952:	46a0      	mov	r8, r4
 8000954:	4662      	mov	r2, ip
 8000956:	2a38      	cmp	r2, #56	; 0x38
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x6c>
 800095a:	e161      	b.n	8000c20 <__aeabi_dadd+0x330>
 800095c:	2a1f      	cmp	r2, #31
 800095e:	dd00      	ble.n	8000962 <__aeabi_dadd+0x72>
 8000960:	e1cc      	b.n	8000cfc <__aeabi_dadd+0x40c>
 8000962:	4664      	mov	r4, ip
 8000964:	2220      	movs	r2, #32
 8000966:	1b12      	subs	r2, r2, r4
 8000968:	4644      	mov	r4, r8
 800096a:	4094      	lsls	r4, r2
 800096c:	000f      	movs	r7, r1
 800096e:	46a1      	mov	r9, r4
 8000970:	4664      	mov	r4, ip
 8000972:	4091      	lsls	r1, r2
 8000974:	40e7      	lsrs	r7, r4
 8000976:	464c      	mov	r4, r9
 8000978:	1e4a      	subs	r2, r1, #1
 800097a:	4191      	sbcs	r1, r2
 800097c:	433c      	orrs	r4, r7
 800097e:	4642      	mov	r2, r8
 8000980:	4321      	orrs	r1, r4
 8000982:	4664      	mov	r4, ip
 8000984:	40e2      	lsrs	r2, r4
 8000986:	1a80      	subs	r0, r0, r2
 8000988:	1a5c      	subs	r4, r3, r1
 800098a:	42a3      	cmp	r3, r4
 800098c:	419b      	sbcs	r3, r3
 800098e:	425f      	negs	r7, r3
 8000990:	1bc7      	subs	r7, r0, r7
 8000992:	023b      	lsls	r3, r7, #8
 8000994:	d400      	bmi.n	8000998 <__aeabi_dadd+0xa8>
 8000996:	e0d0      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000998:	027f      	lsls	r7, r7, #9
 800099a:	0a7f      	lsrs	r7, r7, #9
 800099c:	2f00      	cmp	r7, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0xb2>
 80009a0:	e0ff      	b.n	8000ba2 <__aeabi_dadd+0x2b2>
 80009a2:	0038      	movs	r0, r7
 80009a4:	f001 fd8a 	bl	80024bc <__clzsi2>
 80009a8:	0001      	movs	r1, r0
 80009aa:	3908      	subs	r1, #8
 80009ac:	2320      	movs	r3, #32
 80009ae:	0022      	movs	r2, r4
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	408f      	lsls	r7, r1
 80009b4:	40da      	lsrs	r2, r3
 80009b6:	408c      	lsls	r4, r1
 80009b8:	4317      	orrs	r7, r2
 80009ba:	42b1      	cmp	r1, r6
 80009bc:	da00      	bge.n	80009c0 <__aeabi_dadd+0xd0>
 80009be:	e0ff      	b.n	8000bc0 <__aeabi_dadd+0x2d0>
 80009c0:	1b89      	subs	r1, r1, r6
 80009c2:	1c4b      	adds	r3, r1, #1
 80009c4:	2b1f      	cmp	r3, #31
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0xda>
 80009c8:	e0a8      	b.n	8000b1c <__aeabi_dadd+0x22c>
 80009ca:	2220      	movs	r2, #32
 80009cc:	0039      	movs	r1, r7
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	0020      	movs	r0, r4
 80009d2:	4094      	lsls	r4, r2
 80009d4:	4091      	lsls	r1, r2
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	1e62      	subs	r2, r4, #1
 80009da:	4194      	sbcs	r4, r2
 80009dc:	40df      	lsrs	r7, r3
 80009de:	2600      	movs	r6, #0
 80009e0:	4301      	orrs	r1, r0
 80009e2:	430c      	orrs	r4, r1
 80009e4:	0763      	lsls	r3, r4, #29
 80009e6:	d009      	beq.n	80009fc <__aeabi_dadd+0x10c>
 80009e8:	230f      	movs	r3, #15
 80009ea:	4023      	ands	r3, r4
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d005      	beq.n	80009fc <__aeabi_dadd+0x10c>
 80009f0:	1d23      	adds	r3, r4, #4
 80009f2:	42a3      	cmp	r3, r4
 80009f4:	41a4      	sbcs	r4, r4
 80009f6:	4264      	negs	r4, r4
 80009f8:	193f      	adds	r7, r7, r4
 80009fa:	001c      	movs	r4, r3
 80009fc:	023b      	lsls	r3, r7, #8
 80009fe:	d400      	bmi.n	8000a02 <__aeabi_dadd+0x112>
 8000a00:	e09e      	b.n	8000b40 <__aeabi_dadd+0x250>
 8000a02:	4b95      	ldr	r3, [pc, #596]	; (8000c58 <__aeabi_dadd+0x368>)
 8000a04:	3601      	adds	r6, #1
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x11c>
 8000a0a:	e0b7      	b.n	8000b7c <__aeabi_dadd+0x28c>
 8000a0c:	4a93      	ldr	r2, [pc, #588]	; (8000c5c <__aeabi_dadd+0x36c>)
 8000a0e:	08e4      	lsrs	r4, r4, #3
 8000a10:	4017      	ands	r7, r2
 8000a12:	077b      	lsls	r3, r7, #29
 8000a14:	0571      	lsls	r1, r6, #21
 8000a16:	027f      	lsls	r7, r7, #9
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	0b3f      	lsrs	r7, r7, #12
 8000a1c:	0d4a      	lsrs	r2, r1, #21
 8000a1e:	0512      	lsls	r2, r2, #20
 8000a20:	433a      	orrs	r2, r7
 8000a22:	07ed      	lsls	r5, r5, #31
 8000a24:	432a      	orrs	r2, r5
 8000a26:	0018      	movs	r0, r3
 8000a28:	0011      	movs	r1, r2
 8000a2a:	bce0      	pop	{r5, r6, r7}
 8000a2c:	46ba      	mov	sl, r7
 8000a2e:	46b1      	mov	r9, r6
 8000a30:	46a8      	mov	r8, r5
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d04b      	beq.n	8000ad0 <__aeabi_dadd+0x1e0>
 8000a38:	464c      	mov	r4, r9
 8000a3a:	1ba4      	subs	r4, r4, r6
 8000a3c:	46a4      	mov	ip, r4
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x154>
 8000a42:	e123      	b.n	8000c8c <__aeabi_dadd+0x39c>
 8000a44:	0004      	movs	r4, r0
 8000a46:	431c      	orrs	r4, r3
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x15c>
 8000a4a:	e1af      	b.n	8000dac <__aeabi_dadd+0x4bc>
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	1e54      	subs	r4, r2, #1
 8000a50:	2a01      	cmp	r2, #1
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x166>
 8000a54:	e215      	b.n	8000e82 <__aeabi_dadd+0x592>
 8000a56:	4d80      	ldr	r5, [pc, #512]	; (8000c58 <__aeabi_dadd+0x368>)
 8000a58:	45ac      	cmp	ip, r5
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x16e>
 8000a5c:	e1c8      	b.n	8000df0 <__aeabi_dadd+0x500>
 8000a5e:	46a4      	mov	ip, r4
 8000a60:	e11b      	b.n	8000c9a <__aeabi_dadd+0x3aa>
 8000a62:	464a      	mov	r2, r9
 8000a64:	1ab2      	subs	r2, r6, r2
 8000a66:	4694      	mov	ip, r2
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dadd+0x17e>
 8000a6c:	e0ac      	b.n	8000bc8 <__aeabi_dadd+0x2d8>
 8000a6e:	464a      	mov	r2, r9
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d043      	beq.n	8000afc <__aeabi_dadd+0x20c>
 8000a74:	4a78      	ldr	r2, [pc, #480]	; (8000c58 <__aeabi_dadd+0x368>)
 8000a76:	4296      	cmp	r6, r2
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x18c>
 8000a7a:	e1af      	b.n	8000ddc <__aeabi_dadd+0x4ec>
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	003c      	movs	r4, r7
 8000a80:	0412      	lsls	r2, r2, #16
 8000a82:	4314      	orrs	r4, r2
 8000a84:	46a0      	mov	r8, r4
 8000a86:	4662      	mov	r2, ip
 8000a88:	2a38      	cmp	r2, #56	; 0x38
 8000a8a:	dc67      	bgt.n	8000b5c <__aeabi_dadd+0x26c>
 8000a8c:	2a1f      	cmp	r2, #31
 8000a8e:	dc00      	bgt.n	8000a92 <__aeabi_dadd+0x1a2>
 8000a90:	e15f      	b.n	8000d52 <__aeabi_dadd+0x462>
 8000a92:	4647      	mov	r7, r8
 8000a94:	3a20      	subs	r2, #32
 8000a96:	40d7      	lsrs	r7, r2
 8000a98:	4662      	mov	r2, ip
 8000a9a:	2a20      	cmp	r2, #32
 8000a9c:	d005      	beq.n	8000aaa <__aeabi_dadd+0x1ba>
 8000a9e:	4664      	mov	r4, ip
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	1b12      	subs	r2, r2, r4
 8000aa4:	4644      	mov	r4, r8
 8000aa6:	4094      	lsls	r4, r2
 8000aa8:	4321      	orrs	r1, r4
 8000aaa:	1e4a      	subs	r2, r1, #1
 8000aac:	4191      	sbcs	r1, r2
 8000aae:	000c      	movs	r4, r1
 8000ab0:	433c      	orrs	r4, r7
 8000ab2:	e057      	b.n	8000b64 <__aeabi_dadd+0x274>
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x1cc>
 8000aba:	e105      	b.n	8000cc8 <__aeabi_dadd+0x3d8>
 8000abc:	0022      	movs	r2, r4
 8000abe:	3a01      	subs	r2, #1
 8000ac0:	2c01      	cmp	r4, #1
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x1d6>
 8000ac4:	e182      	b.n	8000dcc <__aeabi_dadd+0x4dc>
 8000ac6:	4c64      	ldr	r4, [pc, #400]	; (8000c58 <__aeabi_dadd+0x368>)
 8000ac8:	45a4      	cmp	ip, r4
 8000aca:	d05b      	beq.n	8000b84 <__aeabi_dadd+0x294>
 8000acc:	4694      	mov	ip, r2
 8000ace:	e741      	b.n	8000954 <__aeabi_dadd+0x64>
 8000ad0:	4c63      	ldr	r4, [pc, #396]	; (8000c60 <__aeabi_dadd+0x370>)
 8000ad2:	1c77      	adds	r7, r6, #1
 8000ad4:	4227      	tst	r7, r4
 8000ad6:	d000      	beq.n	8000ada <__aeabi_dadd+0x1ea>
 8000ad8:	e0c4      	b.n	8000c64 <__aeabi_dadd+0x374>
 8000ada:	0004      	movs	r4, r0
 8000adc:	431c      	orrs	r4, r3
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_dadd+0x1f4>
 8000ae2:	e169      	b.n	8000db8 <__aeabi_dadd+0x4c8>
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x1fa>
 8000ae8:	e1bf      	b.n	8000e6a <__aeabi_dadd+0x57a>
 8000aea:	4644      	mov	r4, r8
 8000aec:	430c      	orrs	r4, r1
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x202>
 8000af0:	e1d0      	b.n	8000e94 <__aeabi_dadd+0x5a4>
 8000af2:	0742      	lsls	r2, r0, #29
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	08c0      	lsrs	r0, r0, #3
 8000afa:	e029      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000afc:	003a      	movs	r2, r7
 8000afe:	430a      	orrs	r2, r1
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dadd+0x214>
 8000b02:	e170      	b.n	8000de6 <__aeabi_dadd+0x4f6>
 8000b04:	4662      	mov	r2, ip
 8000b06:	4664      	mov	r4, ip
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	2c01      	cmp	r4, #1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x220>
 8000b0e:	e0e0      	b.n	8000cd2 <__aeabi_dadd+0x3e2>
 8000b10:	4c51      	ldr	r4, [pc, #324]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x228>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x4ec>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	e7b4      	b.n	8000a86 <__aeabi_dadd+0x196>
 8000b1c:	003a      	movs	r2, r7
 8000b1e:	391f      	subs	r1, #31
 8000b20:	40ca      	lsrs	r2, r1
 8000b22:	0011      	movs	r1, r2
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	d003      	beq.n	8000b30 <__aeabi_dadd+0x240>
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	409f      	lsls	r7, r3
 8000b2e:	433c      	orrs	r4, r7
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	2700      	movs	r7, #0
 8000b36:	2600      	movs	r6, #0
 8000b38:	430c      	orrs	r4, r1
 8000b3a:	0763      	lsls	r3, r4, #29
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dadd+0x250>
 8000b3e:	e753      	b.n	80009e8 <__aeabi_dadd+0xf8>
 8000b40:	46b4      	mov	ip, r6
 8000b42:	08e4      	lsrs	r4, r4, #3
 8000b44:	077b      	lsls	r3, r7, #29
 8000b46:	4323      	orrs	r3, r4
 8000b48:	08f8      	lsrs	r0, r7, #3
 8000b4a:	4a43      	ldr	r2, [pc, #268]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b4c:	4594      	cmp	ip, r2
 8000b4e:	d01d      	beq.n	8000b8c <__aeabi_dadd+0x29c>
 8000b50:	4662      	mov	r2, ip
 8000b52:	0307      	lsls	r7, r0, #12
 8000b54:	0552      	lsls	r2, r2, #21
 8000b56:	0b3f      	lsrs	r7, r7, #12
 8000b58:	0d52      	lsrs	r2, r2, #21
 8000b5a:	e760      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000b5c:	4644      	mov	r4, r8
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	1e62      	subs	r2, r4, #1
 8000b62:	4194      	sbcs	r4, r2
 8000b64:	18e4      	adds	r4, r4, r3
 8000b66:	429c      	cmp	r4, r3
 8000b68:	419b      	sbcs	r3, r3
 8000b6a:	425f      	negs	r7, r3
 8000b6c:	183f      	adds	r7, r7, r0
 8000b6e:	023b      	lsls	r3, r7, #8
 8000b70:	d5e3      	bpl.n	8000b3a <__aeabi_dadd+0x24a>
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b74:	3601      	adds	r6, #1
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d000      	beq.n	8000b7c <__aeabi_dadd+0x28c>
 8000b7a:	e0b5      	b.n	8000ce8 <__aeabi_dadd+0x3f8>
 8000b7c:	0032      	movs	r2, r6
 8000b7e:	2700      	movs	r7, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e74c      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000b84:	0742      	lsls	r2, r0, #29
 8000b86:	08db      	lsrs	r3, r3, #3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	08c0      	lsrs	r0, r0, #3
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4302      	orrs	r2, r0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x2a4>
 8000b92:	e1e1      	b.n	8000f58 <__aeabi_dadd+0x668>
 8000b94:	2780      	movs	r7, #128	; 0x80
 8000b96:	033f      	lsls	r7, r7, #12
 8000b98:	4307      	orrs	r7, r0
 8000b9a:	033f      	lsls	r7, r7, #12
 8000b9c:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b9e:	0b3f      	lsrs	r7, r7, #12
 8000ba0:	e73d      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f001 fc8a 	bl	80024bc <__clzsi2>
 8000ba8:	0001      	movs	r1, r0
 8000baa:	3118      	adds	r1, #24
 8000bac:	291f      	cmp	r1, #31
 8000bae:	dc00      	bgt.n	8000bb2 <__aeabi_dadd+0x2c2>
 8000bb0:	e6fc      	b.n	80009ac <__aeabi_dadd+0xbc>
 8000bb2:	3808      	subs	r0, #8
 8000bb4:	4084      	lsls	r4, r0
 8000bb6:	0027      	movs	r7, r4
 8000bb8:	2400      	movs	r4, #0
 8000bba:	42b1      	cmp	r1, r6
 8000bbc:	db00      	blt.n	8000bc0 <__aeabi_dadd+0x2d0>
 8000bbe:	e6ff      	b.n	80009c0 <__aeabi_dadd+0xd0>
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <__aeabi_dadd+0x36c>)
 8000bc2:	1a76      	subs	r6, r6, r1
 8000bc4:	4017      	ands	r7, r2
 8000bc6:	e70d      	b.n	80009e4 <__aeabi_dadd+0xf4>
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d02f      	beq.n	8000c2c <__aeabi_dadd+0x33c>
 8000bcc:	464a      	mov	r2, r9
 8000bce:	1b92      	subs	r2, r2, r6
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x2e8>
 8000bd6:	e0ad      	b.n	8000d34 <__aeabi_dadd+0x444>
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <__aeabi_dadd+0x368>)
 8000bda:	4591      	cmp	r9, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x2f0>
 8000bde:	e10f      	b.n	8000e00 <__aeabi_dadd+0x510>
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	0412      	lsls	r2, r2, #16
 8000be4:	4310      	orrs	r0, r2
 8000be6:	4662      	mov	r2, ip
 8000be8:	2a38      	cmp	r2, #56	; 0x38
 8000bea:	dd00      	ble.n	8000bee <__aeabi_dadd+0x2fe>
 8000bec:	e10f      	b.n	8000e0e <__aeabi_dadd+0x51e>
 8000bee:	2a1f      	cmp	r2, #31
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_dadd+0x304>
 8000bf2:	e180      	b.n	8000ef6 <__aeabi_dadd+0x606>
 8000bf4:	4664      	mov	r4, ip
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	001e      	movs	r6, r3
 8000bfa:	1b12      	subs	r2, r2, r4
 8000bfc:	4667      	mov	r7, ip
 8000bfe:	0004      	movs	r4, r0
 8000c00:	4093      	lsls	r3, r2
 8000c02:	4094      	lsls	r4, r2
 8000c04:	40fe      	lsrs	r6, r7
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	4193      	sbcs	r3, r2
 8000c0a:	40f8      	lsrs	r0, r7
 8000c0c:	4334      	orrs	r4, r6
 8000c0e:	431c      	orrs	r4, r3
 8000c10:	4480      	add	r8, r0
 8000c12:	1864      	adds	r4, r4, r1
 8000c14:	428c      	cmp	r4, r1
 8000c16:	41bf      	sbcs	r7, r7
 8000c18:	427f      	negs	r7, r7
 8000c1a:	464e      	mov	r6, r9
 8000c1c:	4447      	add	r7, r8
 8000c1e:	e7a6      	b.n	8000b6e <__aeabi_dadd+0x27e>
 8000c20:	4642      	mov	r2, r8
 8000c22:	430a      	orrs	r2, r1
 8000c24:	0011      	movs	r1, r2
 8000c26:	1e4a      	subs	r2, r1, #1
 8000c28:	4191      	sbcs	r1, r2
 8000c2a:	e6ad      	b.n	8000988 <__aeabi_dadd+0x98>
 8000c2c:	4c0c      	ldr	r4, [pc, #48]	; (8000c60 <__aeabi_dadd+0x370>)
 8000c2e:	1c72      	adds	r2, r6, #1
 8000c30:	4222      	tst	r2, r4
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x346>
 8000c34:	e0a1      	b.n	8000d7a <__aeabi_dadd+0x48a>
 8000c36:	0002      	movs	r2, r0
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_dadd+0x350>
 8000c3e:	e0fa      	b.n	8000e36 <__aeabi_dadd+0x546>
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x356>
 8000c44:	e145      	b.n	8000ed2 <__aeabi_dadd+0x5e2>
 8000c46:	003a      	movs	r2, r7
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dadd+0x35e>
 8000c4c:	e146      	b.n	8000edc <__aeabi_dadd+0x5ec>
 8000c4e:	0742      	lsls	r2, r0, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	08c0      	lsrs	r0, r0, #3
 8000c56:	e77b      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000c58:	000007ff 	.word	0x000007ff
 8000c5c:	ff7fffff 	.word	0xff7fffff
 8000c60:	000007fe 	.word	0x000007fe
 8000c64:	4647      	mov	r7, r8
 8000c66:	1a5c      	subs	r4, r3, r1
 8000c68:	1bc2      	subs	r2, r0, r7
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	41bf      	sbcs	r7, r7
 8000c6e:	427f      	negs	r7, r7
 8000c70:	46b9      	mov	r9, r7
 8000c72:	0017      	movs	r7, r2
 8000c74:	464a      	mov	r2, r9
 8000c76:	1abf      	subs	r7, r7, r2
 8000c78:	023a      	lsls	r2, r7, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x38e>
 8000c7c:	e08d      	b.n	8000d9a <__aeabi_dadd+0x4aa>
 8000c7e:	0023      	movs	r3, r4
 8000c80:	433b      	orrs	r3, r7
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x396>
 8000c84:	e68a      	b.n	800099c <__aeabi_dadd+0xac>
 8000c86:	2000      	movs	r0, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e761      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000c8c:	4cb4      	ldr	r4, [pc, #720]	; (8000f60 <__aeabi_dadd+0x670>)
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x3a4>
 8000c92:	e0ad      	b.n	8000df0 <__aeabi_dadd+0x500>
 8000c94:	2480      	movs	r4, #128	; 0x80
 8000c96:	0424      	lsls	r4, r4, #16
 8000c98:	4320      	orrs	r0, r4
 8000c9a:	4664      	mov	r4, ip
 8000c9c:	2c38      	cmp	r4, #56	; 0x38
 8000c9e:	dc3d      	bgt.n	8000d1c <__aeabi_dadd+0x42c>
 8000ca0:	4662      	mov	r2, ip
 8000ca2:	2c1f      	cmp	r4, #31
 8000ca4:	dd00      	ble.n	8000ca8 <__aeabi_dadd+0x3b8>
 8000ca6:	e0b7      	b.n	8000e18 <__aeabi_dadd+0x528>
 8000ca8:	2520      	movs	r5, #32
 8000caa:	001e      	movs	r6, r3
 8000cac:	1b2d      	subs	r5, r5, r4
 8000cae:	0004      	movs	r4, r0
 8000cb0:	40ab      	lsls	r3, r5
 8000cb2:	40ac      	lsls	r4, r5
 8000cb4:	40d6      	lsrs	r6, r2
 8000cb6:	40d0      	lsrs	r0, r2
 8000cb8:	4642      	mov	r2, r8
 8000cba:	1e5d      	subs	r5, r3, #1
 8000cbc:	41ab      	sbcs	r3, r5
 8000cbe:	4334      	orrs	r4, r6
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	4323      	orrs	r3, r4
 8000cc6:	e02c      	b.n	8000d22 <__aeabi_dadd+0x432>
 8000cc8:	0742      	lsls	r2, r0, #29
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	e73b      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000cd2:	185c      	adds	r4, r3, r1
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	4440      	add	r0, r8
 8000cda:	425b      	negs	r3, r3
 8000cdc:	18c7      	adds	r7, r0, r3
 8000cde:	2601      	movs	r6, #1
 8000ce0:	023b      	lsls	r3, r7, #8
 8000ce2:	d400      	bmi.n	8000ce6 <__aeabi_dadd+0x3f6>
 8000ce4:	e729      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000ce6:	2602      	movs	r6, #2
 8000ce8:	4a9e      	ldr	r2, [pc, #632]	; (8000f64 <__aeabi_dadd+0x674>)
 8000cea:	0863      	lsrs	r3, r4, #1
 8000cec:	4017      	ands	r7, r2
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4014      	ands	r4, r2
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	07fb      	lsls	r3, r7, #31
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	087f      	lsrs	r7, r7, #1
 8000cfa:	e673      	b.n	80009e4 <__aeabi_dadd+0xf4>
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	3a20      	subs	r2, #32
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	4662      	mov	r2, ip
 8000d04:	2a20      	cmp	r2, #32
 8000d06:	d005      	beq.n	8000d14 <__aeabi_dadd+0x424>
 8000d08:	4667      	mov	r7, ip
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	1bd2      	subs	r2, r2, r7
 8000d0e:	4647      	mov	r7, r8
 8000d10:	4097      	lsls	r7, r2
 8000d12:	4339      	orrs	r1, r7
 8000d14:	1e4a      	subs	r2, r1, #1
 8000d16:	4191      	sbcs	r1, r2
 8000d18:	4321      	orrs	r1, r4
 8000d1a:	e635      	b.n	8000988 <__aeabi_dadd+0x98>
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	1e58      	subs	r0, r3, #1
 8000d20:	4183      	sbcs	r3, r0
 8000d22:	1acc      	subs	r4, r1, r3
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	41bf      	sbcs	r7, r7
 8000d28:	4643      	mov	r3, r8
 8000d2a:	427f      	negs	r7, r7
 8000d2c:	4655      	mov	r5, sl
 8000d2e:	464e      	mov	r6, r9
 8000d30:	1bdf      	subs	r7, r3, r7
 8000d32:	e62e      	b.n	8000992 <__aeabi_dadd+0xa2>
 8000d34:	0002      	movs	r2, r0
 8000d36:	431a      	orrs	r2, r3
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x44c>
 8000d3a:	e0bd      	b.n	8000eb8 <__aeabi_dadd+0x5c8>
 8000d3c:	4662      	mov	r2, ip
 8000d3e:	4664      	mov	r4, ip
 8000d40:	3a01      	subs	r2, #1
 8000d42:	2c01      	cmp	r4, #1
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x458>
 8000d46:	e0e5      	b.n	8000f14 <__aeabi_dadd+0x624>
 8000d48:	4c85      	ldr	r4, [pc, #532]	; (8000f60 <__aeabi_dadd+0x670>)
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d058      	beq.n	8000e00 <__aeabi_dadd+0x510>
 8000d4e:	4694      	mov	ip, r2
 8000d50:	e749      	b.n	8000be6 <__aeabi_dadd+0x2f6>
 8000d52:	4664      	mov	r4, ip
 8000d54:	2220      	movs	r2, #32
 8000d56:	1b12      	subs	r2, r2, r4
 8000d58:	4644      	mov	r4, r8
 8000d5a:	4094      	lsls	r4, r2
 8000d5c:	000f      	movs	r7, r1
 8000d5e:	46a1      	mov	r9, r4
 8000d60:	4664      	mov	r4, ip
 8000d62:	4091      	lsls	r1, r2
 8000d64:	40e7      	lsrs	r7, r4
 8000d66:	464c      	mov	r4, r9
 8000d68:	1e4a      	subs	r2, r1, #1
 8000d6a:	4191      	sbcs	r1, r2
 8000d6c:	433c      	orrs	r4, r7
 8000d6e:	4642      	mov	r2, r8
 8000d70:	430c      	orrs	r4, r1
 8000d72:	4661      	mov	r1, ip
 8000d74:	40ca      	lsrs	r2, r1
 8000d76:	1880      	adds	r0, r0, r2
 8000d78:	e6f4      	b.n	8000b64 <__aeabi_dadd+0x274>
 8000d7a:	4c79      	ldr	r4, [pc, #484]	; (8000f60 <__aeabi_dadd+0x670>)
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x492>
 8000d80:	e6fd      	b.n	8000b7e <__aeabi_dadd+0x28e>
 8000d82:	1859      	adds	r1, r3, r1
 8000d84:	4299      	cmp	r1, r3
 8000d86:	419b      	sbcs	r3, r3
 8000d88:	4440      	add	r0, r8
 8000d8a:	425f      	negs	r7, r3
 8000d8c:	19c7      	adds	r7, r0, r7
 8000d8e:	07fc      	lsls	r4, r7, #31
 8000d90:	0849      	lsrs	r1, r1, #1
 8000d92:	0016      	movs	r6, r2
 8000d94:	430c      	orrs	r4, r1
 8000d96:	087f      	lsrs	r7, r7, #1
 8000d98:	e6cf      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000d9a:	1acc      	subs	r4, r1, r3
 8000d9c:	42a1      	cmp	r1, r4
 8000d9e:	41bf      	sbcs	r7, r7
 8000da0:	4643      	mov	r3, r8
 8000da2:	427f      	negs	r7, r7
 8000da4:	1a18      	subs	r0, r3, r0
 8000da6:	4655      	mov	r5, sl
 8000da8:	1bc7      	subs	r7, r0, r7
 8000daa:	e5f7      	b.n	800099c <__aeabi_dadd+0xac>
 8000dac:	08c9      	lsrs	r1, r1, #3
 8000dae:	077b      	lsls	r3, r7, #29
 8000db0:	4655      	mov	r5, sl
 8000db2:	430b      	orrs	r3, r1
 8000db4:	08f8      	lsrs	r0, r7, #3
 8000db6:	e6c8      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d000      	beq.n	8000dbe <__aeabi_dadd+0x4ce>
 8000dbc:	e081      	b.n	8000ec2 <__aeabi_dadd+0x5d2>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	d115      	bne.n	8000df0 <__aeabi_dadd+0x500>
 8000dc4:	2080      	movs	r0, #128	; 0x80
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	0300      	lsls	r0, r0, #12
 8000dca:	e6e3      	b.n	8000b94 <__aeabi_dadd+0x2a4>
 8000dcc:	1a5c      	subs	r4, r3, r1
 8000dce:	42a3      	cmp	r3, r4
 8000dd0:	419b      	sbcs	r3, r3
 8000dd2:	1bc7      	subs	r7, r0, r7
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	1aff      	subs	r7, r7, r3
 8000dda:	e5da      	b.n	8000992 <__aeabi_dadd+0xa2>
 8000ddc:	0742      	lsls	r2, r0, #29
 8000dde:	08db      	lsrs	r3, r3, #3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	08c0      	lsrs	r0, r0, #3
 8000de4:	e6d2      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000de6:	0742      	lsls	r2, r0, #29
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	08c0      	lsrs	r0, r0, #3
 8000dee:	e6ac      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000df0:	4643      	mov	r3, r8
 8000df2:	4642      	mov	r2, r8
 8000df4:	08c9      	lsrs	r1, r1, #3
 8000df6:	075b      	lsls	r3, r3, #29
 8000df8:	4655      	mov	r5, sl
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	08d0      	lsrs	r0, r2, #3
 8000dfe:	e6c5      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000e00:	4643      	mov	r3, r8
 8000e02:	4642      	mov	r2, r8
 8000e04:	075b      	lsls	r3, r3, #29
 8000e06:	08c9      	lsrs	r1, r1, #3
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	08d0      	lsrs	r0, r2, #3
 8000e0c:	e6be      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000e0e:	4303      	orrs	r3, r0
 8000e10:	001c      	movs	r4, r3
 8000e12:	1e63      	subs	r3, r4, #1
 8000e14:	419c      	sbcs	r4, r3
 8000e16:	e6fc      	b.n	8000c12 <__aeabi_dadd+0x322>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	3c20      	subs	r4, #32
 8000e1c:	40e2      	lsrs	r2, r4
 8000e1e:	0014      	movs	r4, r2
 8000e20:	4662      	mov	r2, ip
 8000e22:	2a20      	cmp	r2, #32
 8000e24:	d003      	beq.n	8000e2e <__aeabi_dadd+0x53e>
 8000e26:	2540      	movs	r5, #64	; 0x40
 8000e28:	1aad      	subs	r5, r5, r2
 8000e2a:	40a8      	lsls	r0, r5
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	1e58      	subs	r0, r3, #1
 8000e30:	4183      	sbcs	r3, r0
 8000e32:	4323      	orrs	r3, r4
 8000e34:	e775      	b.n	8000d22 <__aeabi_dadd+0x432>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d0e2      	beq.n	8000e00 <__aeabi_dadd+0x510>
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	d0cd      	beq.n	8000ddc <__aeabi_dadd+0x4ec>
 8000e40:	0742      	lsls	r2, r0, #29
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0312      	lsls	r2, r2, #12
 8000e4c:	4210      	tst	r0, r2
 8000e4e:	d006      	beq.n	8000e5e <__aeabi_dadd+0x56e>
 8000e50:	08fc      	lsrs	r4, r7, #3
 8000e52:	4214      	tst	r4, r2
 8000e54:	d103      	bne.n	8000e5e <__aeabi_dadd+0x56e>
 8000e56:	0020      	movs	r0, r4
 8000e58:	08cb      	lsrs	r3, r1, #3
 8000e5a:	077a      	lsls	r2, r7, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	0752      	lsls	r2, r2, #29
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e690      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000e6a:	4643      	mov	r3, r8
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x582>
 8000e70:	e709      	b.n	8000c86 <__aeabi_dadd+0x396>
 8000e72:	4643      	mov	r3, r8
 8000e74:	4642      	mov	r2, r8
 8000e76:	08c9      	lsrs	r1, r1, #3
 8000e78:	075b      	lsls	r3, r3, #29
 8000e7a:	4655      	mov	r5, sl
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	08d0      	lsrs	r0, r2, #3
 8000e80:	e666      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000e82:	1acc      	subs	r4, r1, r3
 8000e84:	42a1      	cmp	r1, r4
 8000e86:	4189      	sbcs	r1, r1
 8000e88:	1a3f      	subs	r7, r7, r0
 8000e8a:	4249      	negs	r1, r1
 8000e8c:	4655      	mov	r5, sl
 8000e8e:	2601      	movs	r6, #1
 8000e90:	1a7f      	subs	r7, r7, r1
 8000e92:	e57e      	b.n	8000992 <__aeabi_dadd+0xa2>
 8000e94:	4642      	mov	r2, r8
 8000e96:	1a5c      	subs	r4, r3, r1
 8000e98:	1a87      	subs	r7, r0, r2
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	1abf      	subs	r7, r7, r2
 8000ea2:	023a      	lsls	r2, r7, #8
 8000ea4:	d53d      	bpl.n	8000f22 <__aeabi_dadd+0x632>
 8000ea6:	1acc      	subs	r4, r1, r3
 8000ea8:	42a1      	cmp	r1, r4
 8000eaa:	4189      	sbcs	r1, r1
 8000eac:	4643      	mov	r3, r8
 8000eae:	4249      	negs	r1, r1
 8000eb0:	1a1f      	subs	r7, r3, r0
 8000eb2:	4655      	mov	r5, sl
 8000eb4:	1a7f      	subs	r7, r7, r1
 8000eb6:	e595      	b.n	80009e4 <__aeabi_dadd+0xf4>
 8000eb8:	077b      	lsls	r3, r7, #29
 8000eba:	08c9      	lsrs	r1, r1, #3
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	08f8      	lsrs	r0, r7, #3
 8000ec0:	e643      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000ec2:	4644      	mov	r4, r8
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	430c      	orrs	r4, r1
 8000ec8:	d130      	bne.n	8000f2c <__aeabi_dadd+0x63c>
 8000eca:	0742      	lsls	r2, r0, #29
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	08c0      	lsrs	r0, r0, #3
 8000ed0:	e65c      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000ed2:	077b      	lsls	r3, r7, #29
 8000ed4:	08c9      	lsrs	r1, r1, #3
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	08f8      	lsrs	r0, r7, #3
 8000eda:	e639      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000edc:	185c      	adds	r4, r3, r1
 8000ede:	429c      	cmp	r4, r3
 8000ee0:	419b      	sbcs	r3, r3
 8000ee2:	4440      	add	r0, r8
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	18c7      	adds	r7, r0, r3
 8000ee8:	023b      	lsls	r3, r7, #8
 8000eea:	d400      	bmi.n	8000eee <__aeabi_dadd+0x5fe>
 8000eec:	e625      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <__aeabi_dadd+0x674>)
 8000ef0:	2601      	movs	r6, #1
 8000ef2:	401f      	ands	r7, r3
 8000ef4:	e621      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000ef6:	0004      	movs	r4, r0
 8000ef8:	3a20      	subs	r2, #32
 8000efa:	40d4      	lsrs	r4, r2
 8000efc:	4662      	mov	r2, ip
 8000efe:	2a20      	cmp	r2, #32
 8000f00:	d004      	beq.n	8000f0c <__aeabi_dadd+0x61c>
 8000f02:	2240      	movs	r2, #64	; 0x40
 8000f04:	4666      	mov	r6, ip
 8000f06:	1b92      	subs	r2, r2, r6
 8000f08:	4090      	lsls	r0, r2
 8000f0a:	4303      	orrs	r3, r0
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	4193      	sbcs	r3, r2
 8000f10:	431c      	orrs	r4, r3
 8000f12:	e67e      	b.n	8000c12 <__aeabi_dadd+0x322>
 8000f14:	185c      	adds	r4, r3, r1
 8000f16:	428c      	cmp	r4, r1
 8000f18:	4189      	sbcs	r1, r1
 8000f1a:	4440      	add	r0, r8
 8000f1c:	4249      	negs	r1, r1
 8000f1e:	1847      	adds	r7, r0, r1
 8000f20:	e6dd      	b.n	8000cde <__aeabi_dadd+0x3ee>
 8000f22:	0023      	movs	r3, r4
 8000f24:	433b      	orrs	r3, r7
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x63a>
 8000f28:	e6ad      	b.n	8000c86 <__aeabi_dadd+0x396>
 8000f2a:	e606      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000f2c:	0744      	lsls	r4, r0, #29
 8000f2e:	4323      	orrs	r3, r4
 8000f30:	2480      	movs	r4, #128	; 0x80
 8000f32:	08c0      	lsrs	r0, r0, #3
 8000f34:	0324      	lsls	r4, r4, #12
 8000f36:	4220      	tst	r0, r4
 8000f38:	d008      	beq.n	8000f4c <__aeabi_dadd+0x65c>
 8000f3a:	4642      	mov	r2, r8
 8000f3c:	08d6      	lsrs	r6, r2, #3
 8000f3e:	4226      	tst	r6, r4
 8000f40:	d104      	bne.n	8000f4c <__aeabi_dadd+0x65c>
 8000f42:	4655      	mov	r5, sl
 8000f44:	0030      	movs	r0, r6
 8000f46:	08cb      	lsrs	r3, r1, #3
 8000f48:	0751      	lsls	r1, r2, #29
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	0f5a      	lsrs	r2, r3, #29
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	0752      	lsls	r2, r2, #29
 8000f54:	4313      	orrs	r3, r2
 8000f56:	e619      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4a01      	ldr	r2, [pc, #4]	; (8000f60 <__aeabi_dadd+0x670>)
 8000f5c:	001f      	movs	r7, r3
 8000f5e:	e55e      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000f60:	000007ff 	.word	0x000007ff
 8000f64:	ff7fffff 	.word	0xff7fffff

08000f68 <__aeabi_ddiv>:
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	4657      	mov	r7, sl
 8000f6c:	464e      	mov	r6, r9
 8000f6e:	4645      	mov	r5, r8
 8000f70:	46de      	mov	lr, fp
 8000f72:	b5e0      	push	{r5, r6, r7, lr}
 8000f74:	4681      	mov	r9, r0
 8000f76:	0005      	movs	r5, r0
 8000f78:	030c      	lsls	r4, r1, #12
 8000f7a:	0048      	lsls	r0, r1, #1
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	001f      	movs	r7, r3
 8000f80:	b085      	sub	sp, #20
 8000f82:	0b24      	lsrs	r4, r4, #12
 8000f84:	0d40      	lsrs	r0, r0, #21
 8000f86:	0fce      	lsrs	r6, r1, #31
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x26>
 8000f8c:	e156      	b.n	800123c <__aeabi_ddiv+0x2d4>
 8000f8e:	4bd4      	ldr	r3, [pc, #848]	; (80012e0 <__aeabi_ddiv+0x378>)
 8000f90:	4298      	cmp	r0, r3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x2e>
 8000f94:	e172      	b.n	800127c <__aeabi_ddiv+0x314>
 8000f96:	0f6b      	lsrs	r3, r5, #29
 8000f98:	00e4      	lsls	r4, r4, #3
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4bcf      	ldr	r3, [pc, #828]	; (80012e4 <__aeabi_ddiv+0x37c>)
 8000fa6:	00ed      	lsls	r5, r5, #3
 8000fa8:	469b      	mov	fp, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	4699      	mov	r9, r3
 8000fae:	4483      	add	fp, r0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	033c      	lsls	r4, r7, #12
 8000fb4:	007b      	lsls	r3, r7, #1
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	0b24      	lsrs	r4, r4, #12
 8000fba:	0d5b      	lsrs	r3, r3, #21
 8000fbc:	0fff      	lsrs	r7, r7, #31
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_ddiv+0x5c>
 8000fc2:	e11f      	b.n	8001204 <__aeabi_ddiv+0x29c>
 8000fc4:	4ac6      	ldr	r2, [pc, #792]	; (80012e0 <__aeabi_ddiv+0x378>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x64>
 8000fca:	e162      	b.n	8001292 <__aeabi_ddiv+0x32a>
 8000fcc:	49c5      	ldr	r1, [pc, #788]	; (80012e4 <__aeabi_ddiv+0x37c>)
 8000fce:	0f42      	lsrs	r2, r0, #29
 8000fd0:	468c      	mov	ip, r1
 8000fd2:	00e4      	lsls	r4, r4, #3
 8000fd4:	4659      	mov	r1, fp
 8000fd6:	4314      	orrs	r4, r2
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	4463      	add	r3, ip
 8000fdc:	0412      	lsls	r2, r2, #16
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	4314      	orrs	r4, r2
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	00c2      	lsls	r2, r0, #3
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	0033      	movs	r3, r6
 8000fea:	407b      	eors	r3, r7
 8000fec:	469a      	mov	sl, r3
 8000fee:	464b      	mov	r3, r9
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d827      	bhi.n	8001044 <__aeabi_ddiv+0xdc>
 8000ff4:	49bc      	ldr	r1, [pc, #752]	; (80012e8 <__aeabi_ddiv+0x380>)
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	58cb      	ldr	r3, [r1, r3]
 8000ffa:	469f      	mov	pc, r3
 8000ffc:	46b2      	mov	sl, r6
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d016      	beq.n	8001032 <__aeabi_ddiv+0xca>
 8001004:	2b03      	cmp	r3, #3
 8001006:	d100      	bne.n	800100a <__aeabi_ddiv+0xa2>
 8001008:	e28e      	b.n	8001528 <__aeabi_ddiv+0x5c0>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d000      	beq.n	8001010 <__aeabi_ddiv+0xa8>
 800100e:	e0d9      	b.n	80011c4 <__aeabi_ddiv+0x25c>
 8001010:	2300      	movs	r3, #0
 8001012:	2400      	movs	r4, #0
 8001014:	2500      	movs	r5, #0
 8001016:	4652      	mov	r2, sl
 8001018:	051b      	lsls	r3, r3, #20
 800101a:	4323      	orrs	r3, r4
 800101c:	07d2      	lsls	r2, r2, #31
 800101e:	4313      	orrs	r3, r2
 8001020:	0028      	movs	r0, r5
 8001022:	0019      	movs	r1, r3
 8001024:	b005      	add	sp, #20
 8001026:	bcf0      	pop	{r4, r5, r6, r7}
 8001028:	46bb      	mov	fp, r7
 800102a:	46b2      	mov	sl, r6
 800102c:	46a9      	mov	r9, r5
 800102e:	46a0      	mov	r8, r4
 8001030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001032:	2400      	movs	r4, #0
 8001034:	2500      	movs	r5, #0
 8001036:	4baa      	ldr	r3, [pc, #680]	; (80012e0 <__aeabi_ddiv+0x378>)
 8001038:	e7ed      	b.n	8001016 <__aeabi_ddiv+0xae>
 800103a:	46ba      	mov	sl, r7
 800103c:	46a0      	mov	r8, r4
 800103e:	0015      	movs	r5, r2
 8001040:	9000      	str	r0, [sp, #0]
 8001042:	e7dc      	b.n	8000ffe <__aeabi_ddiv+0x96>
 8001044:	4544      	cmp	r4, r8
 8001046:	d200      	bcs.n	800104a <__aeabi_ddiv+0xe2>
 8001048:	e1c7      	b.n	80013da <__aeabi_ddiv+0x472>
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0xe6>
 800104c:	e1c2      	b.n	80013d4 <__aeabi_ddiv+0x46c>
 800104e:	2301      	movs	r3, #1
 8001050:	425b      	negs	r3, r3
 8001052:	469c      	mov	ip, r3
 8001054:	002e      	movs	r6, r5
 8001056:	4640      	mov	r0, r8
 8001058:	2500      	movs	r5, #0
 800105a:	44e3      	add	fp, ip
 800105c:	0223      	lsls	r3, r4, #8
 800105e:	0e14      	lsrs	r4, r2, #24
 8001060:	431c      	orrs	r4, r3
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	4699      	mov	r9, r3
 8001066:	0423      	lsls	r3, r4, #16
 8001068:	0c1f      	lsrs	r7, r3, #16
 800106a:	0212      	lsls	r2, r2, #8
 800106c:	4649      	mov	r1, r9
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	9701      	str	r7, [sp, #4]
 8001072:	f7ff f8d7 	bl	8000224 <__aeabi_uidivmod>
 8001076:	0002      	movs	r2, r0
 8001078:	437a      	muls	r2, r7
 800107a:	040b      	lsls	r3, r1, #16
 800107c:	0c31      	lsrs	r1, r6, #16
 800107e:	4680      	mov	r8, r0
 8001080:	4319      	orrs	r1, r3
 8001082:	428a      	cmp	r2, r1
 8001084:	d907      	bls.n	8001096 <__aeabi_ddiv+0x12e>
 8001086:	2301      	movs	r3, #1
 8001088:	425b      	negs	r3, r3
 800108a:	469c      	mov	ip, r3
 800108c:	1909      	adds	r1, r1, r4
 800108e:	44e0      	add	r8, ip
 8001090:	428c      	cmp	r4, r1
 8001092:	d800      	bhi.n	8001096 <__aeabi_ddiv+0x12e>
 8001094:	e207      	b.n	80014a6 <__aeabi_ddiv+0x53e>
 8001096:	1a88      	subs	r0, r1, r2
 8001098:	4649      	mov	r1, r9
 800109a:	f7ff f8c3 	bl	8000224 <__aeabi_uidivmod>
 800109e:	0409      	lsls	r1, r1, #16
 80010a0:	468c      	mov	ip, r1
 80010a2:	0431      	lsls	r1, r6, #16
 80010a4:	4666      	mov	r6, ip
 80010a6:	9a01      	ldr	r2, [sp, #4]
 80010a8:	0c09      	lsrs	r1, r1, #16
 80010aa:	4342      	muls	r2, r0
 80010ac:	0003      	movs	r3, r0
 80010ae:	4331      	orrs	r1, r6
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d904      	bls.n	80010be <__aeabi_ddiv+0x156>
 80010b4:	1909      	adds	r1, r1, r4
 80010b6:	3b01      	subs	r3, #1
 80010b8:	428c      	cmp	r4, r1
 80010ba:	d800      	bhi.n	80010be <__aeabi_ddiv+0x156>
 80010bc:	e1ed      	b.n	800149a <__aeabi_ddiv+0x532>
 80010be:	1a88      	subs	r0, r1, r2
 80010c0:	4642      	mov	r2, r8
 80010c2:	0412      	lsls	r2, r2, #16
 80010c4:	431a      	orrs	r2, r3
 80010c6:	4690      	mov	r8, r2
 80010c8:	4641      	mov	r1, r8
 80010ca:	9b00      	ldr	r3, [sp, #0]
 80010cc:	040e      	lsls	r6, r1, #16
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	001f      	movs	r7, r3
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	0c36      	lsrs	r6, r6, #16
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	0c19      	lsrs	r1, r3, #16
 80010dc:	000b      	movs	r3, r1
 80010de:	4373      	muls	r3, r6
 80010e0:	0c12      	lsrs	r2, r2, #16
 80010e2:	437e      	muls	r6, r7
 80010e4:	9103      	str	r1, [sp, #12]
 80010e6:	4351      	muls	r1, r2
 80010e8:	437a      	muls	r2, r7
 80010ea:	0c1f      	lsrs	r7, r3, #16
 80010ec:	46bc      	mov	ip, r7
 80010ee:	1876      	adds	r6, r6, r1
 80010f0:	4466      	add	r6, ip
 80010f2:	42b1      	cmp	r1, r6
 80010f4:	d903      	bls.n	80010fe <__aeabi_ddiv+0x196>
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	0249      	lsls	r1, r1, #9
 80010fa:	468c      	mov	ip, r1
 80010fc:	4462      	add	r2, ip
 80010fe:	0c31      	lsrs	r1, r6, #16
 8001100:	188a      	adds	r2, r1, r2
 8001102:	0431      	lsls	r1, r6, #16
 8001104:	041e      	lsls	r6, r3, #16
 8001106:	0c36      	lsrs	r6, r6, #16
 8001108:	198e      	adds	r6, r1, r6
 800110a:	4290      	cmp	r0, r2
 800110c:	d302      	bcc.n	8001114 <__aeabi_ddiv+0x1ac>
 800110e:	d112      	bne.n	8001136 <__aeabi_ddiv+0x1ce>
 8001110:	42b5      	cmp	r5, r6
 8001112:	d210      	bcs.n	8001136 <__aeabi_ddiv+0x1ce>
 8001114:	4643      	mov	r3, r8
 8001116:	1e59      	subs	r1, r3, #1
 8001118:	9b00      	ldr	r3, [sp, #0]
 800111a:	469c      	mov	ip, r3
 800111c:	4465      	add	r5, ip
 800111e:	001f      	movs	r7, r3
 8001120:	429d      	cmp	r5, r3
 8001122:	419b      	sbcs	r3, r3
 8001124:	425b      	negs	r3, r3
 8001126:	191b      	adds	r3, r3, r4
 8001128:	18c0      	adds	r0, r0, r3
 800112a:	4284      	cmp	r4, r0
 800112c:	d200      	bcs.n	8001130 <__aeabi_ddiv+0x1c8>
 800112e:	e1a0      	b.n	8001472 <__aeabi_ddiv+0x50a>
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x1cc>
 8001132:	e19b      	b.n	800146c <__aeabi_ddiv+0x504>
 8001134:	4688      	mov	r8, r1
 8001136:	1bae      	subs	r6, r5, r6
 8001138:	42b5      	cmp	r5, r6
 800113a:	41ad      	sbcs	r5, r5
 800113c:	1a80      	subs	r0, r0, r2
 800113e:	426d      	negs	r5, r5
 8001140:	1b40      	subs	r0, r0, r5
 8001142:	4284      	cmp	r4, r0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x1e0>
 8001146:	e1d5      	b.n	80014f4 <__aeabi_ddiv+0x58c>
 8001148:	4649      	mov	r1, r9
 800114a:	f7ff f86b 	bl	8000224 <__aeabi_uidivmod>
 800114e:	9a01      	ldr	r2, [sp, #4]
 8001150:	040b      	lsls	r3, r1, #16
 8001152:	4342      	muls	r2, r0
 8001154:	0c31      	lsrs	r1, r6, #16
 8001156:	0005      	movs	r5, r0
 8001158:	4319      	orrs	r1, r3
 800115a:	428a      	cmp	r2, r1
 800115c:	d900      	bls.n	8001160 <__aeabi_ddiv+0x1f8>
 800115e:	e16c      	b.n	800143a <__aeabi_ddiv+0x4d2>
 8001160:	1a88      	subs	r0, r1, r2
 8001162:	4649      	mov	r1, r9
 8001164:	f7ff f85e 	bl	8000224 <__aeabi_uidivmod>
 8001168:	9a01      	ldr	r2, [sp, #4]
 800116a:	0436      	lsls	r6, r6, #16
 800116c:	4342      	muls	r2, r0
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	0c36      	lsrs	r6, r6, #16
 8001172:	0003      	movs	r3, r0
 8001174:	430e      	orrs	r6, r1
 8001176:	42b2      	cmp	r2, r6
 8001178:	d900      	bls.n	800117c <__aeabi_ddiv+0x214>
 800117a:	e153      	b.n	8001424 <__aeabi_ddiv+0x4bc>
 800117c:	9803      	ldr	r0, [sp, #12]
 800117e:	1ab6      	subs	r6, r6, r2
 8001180:	0002      	movs	r2, r0
 8001182:	042d      	lsls	r5, r5, #16
 8001184:	431d      	orrs	r5, r3
 8001186:	9f02      	ldr	r7, [sp, #8]
 8001188:	042b      	lsls	r3, r5, #16
 800118a:	0c1b      	lsrs	r3, r3, #16
 800118c:	435a      	muls	r2, r3
 800118e:	437b      	muls	r3, r7
 8001190:	469c      	mov	ip, r3
 8001192:	0c29      	lsrs	r1, r5, #16
 8001194:	4348      	muls	r0, r1
 8001196:	0c13      	lsrs	r3, r2, #16
 8001198:	4484      	add	ip, r0
 800119a:	4463      	add	r3, ip
 800119c:	4379      	muls	r1, r7
 800119e:	4298      	cmp	r0, r3
 80011a0:	d903      	bls.n	80011aa <__aeabi_ddiv+0x242>
 80011a2:	2080      	movs	r0, #128	; 0x80
 80011a4:	0240      	lsls	r0, r0, #9
 80011a6:	4684      	mov	ip, r0
 80011a8:	4461      	add	r1, ip
 80011aa:	0c18      	lsrs	r0, r3, #16
 80011ac:	0412      	lsls	r2, r2, #16
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	0c12      	lsrs	r2, r2, #16
 80011b2:	1841      	adds	r1, r0, r1
 80011b4:	189b      	adds	r3, r3, r2
 80011b6:	428e      	cmp	r6, r1
 80011b8:	d200      	bcs.n	80011bc <__aeabi_ddiv+0x254>
 80011ba:	e0ff      	b.n	80013bc <__aeabi_ddiv+0x454>
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x258>
 80011be:	e0fa      	b.n	80013b6 <__aeabi_ddiv+0x44e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	431d      	orrs	r5, r3
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <__aeabi_ddiv+0x384>)
 80011c6:	445a      	add	r2, fp
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	dc00      	bgt.n	80011ce <__aeabi_ddiv+0x266>
 80011cc:	e0aa      	b.n	8001324 <__aeabi_ddiv+0x3bc>
 80011ce:	076b      	lsls	r3, r5, #29
 80011d0:	d000      	beq.n	80011d4 <__aeabi_ddiv+0x26c>
 80011d2:	e13d      	b.n	8001450 <__aeabi_ddiv+0x4e8>
 80011d4:	08ed      	lsrs	r5, r5, #3
 80011d6:	4643      	mov	r3, r8
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	d506      	bpl.n	80011ea <__aeabi_ddiv+0x282>
 80011dc:	4642      	mov	r2, r8
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <__aeabi_ddiv+0x388>)
 80011e0:	401a      	ands	r2, r3
 80011e2:	4690      	mov	r8, r2
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	445a      	add	r2, fp
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <__aeabi_ddiv+0x38c>)
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dd00      	ble.n	80011f2 <__aeabi_ddiv+0x28a>
 80011f0:	e71f      	b.n	8001032 <__aeabi_ddiv+0xca>
 80011f2:	4643      	mov	r3, r8
 80011f4:	075b      	lsls	r3, r3, #29
 80011f6:	431d      	orrs	r5, r3
 80011f8:	4643      	mov	r3, r8
 80011fa:	0552      	lsls	r2, r2, #21
 80011fc:	025c      	lsls	r4, r3, #9
 80011fe:	0b24      	lsrs	r4, r4, #12
 8001200:	0d53      	lsrs	r3, r2, #21
 8001202:	e708      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001204:	4652      	mov	r2, sl
 8001206:	4322      	orrs	r2, r4
 8001208:	d100      	bne.n	800120c <__aeabi_ddiv+0x2a4>
 800120a:	e07b      	b.n	8001304 <__aeabi_ddiv+0x39c>
 800120c:	2c00      	cmp	r4, #0
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0x2aa>
 8001210:	e0fa      	b.n	8001408 <__aeabi_ddiv+0x4a0>
 8001212:	0020      	movs	r0, r4
 8001214:	f001 f952 	bl	80024bc <__clzsi2>
 8001218:	0002      	movs	r2, r0
 800121a:	3a0b      	subs	r2, #11
 800121c:	231d      	movs	r3, #29
 800121e:	0001      	movs	r1, r0
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	4652      	mov	r2, sl
 8001224:	3908      	subs	r1, #8
 8001226:	40da      	lsrs	r2, r3
 8001228:	408c      	lsls	r4, r1
 800122a:	4314      	orrs	r4, r2
 800122c:	4652      	mov	r2, sl
 800122e:	408a      	lsls	r2, r1
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <__aeabi_ddiv+0x390>)
 8001232:	4458      	add	r0, fp
 8001234:	469b      	mov	fp, r3
 8001236:	4483      	add	fp, r0
 8001238:	2000      	movs	r0, #0
 800123a:	e6d5      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 800123c:	464b      	mov	r3, r9
 800123e:	4323      	orrs	r3, r4
 8001240:	4698      	mov	r8, r3
 8001242:	d044      	beq.n	80012ce <__aeabi_ddiv+0x366>
 8001244:	2c00      	cmp	r4, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x2e2>
 8001248:	e0ce      	b.n	80013e8 <__aeabi_ddiv+0x480>
 800124a:	0020      	movs	r0, r4
 800124c:	f001 f936 	bl	80024bc <__clzsi2>
 8001250:	0001      	movs	r1, r0
 8001252:	0002      	movs	r2, r0
 8001254:	390b      	subs	r1, #11
 8001256:	231d      	movs	r3, #29
 8001258:	1a5b      	subs	r3, r3, r1
 800125a:	4649      	mov	r1, r9
 800125c:	0010      	movs	r0, r2
 800125e:	40d9      	lsrs	r1, r3
 8001260:	3808      	subs	r0, #8
 8001262:	4084      	lsls	r4, r0
 8001264:	000b      	movs	r3, r1
 8001266:	464d      	mov	r5, r9
 8001268:	4323      	orrs	r3, r4
 800126a:	4698      	mov	r8, r3
 800126c:	4085      	lsls	r5, r0
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <__aeabi_ddiv+0x394>)
 8001270:	1a83      	subs	r3, r0, r2
 8001272:	469b      	mov	fp, r3
 8001274:	2300      	movs	r3, #0
 8001276:	4699      	mov	r9, r3
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	e69a      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 800127c:	464b      	mov	r3, r9
 800127e:	4323      	orrs	r3, r4
 8001280:	4698      	mov	r8, r3
 8001282:	d11d      	bne.n	80012c0 <__aeabi_ddiv+0x358>
 8001284:	2308      	movs	r3, #8
 8001286:	4699      	mov	r9, r3
 8001288:	3b06      	subs	r3, #6
 800128a:	2500      	movs	r5, #0
 800128c:	4683      	mov	fp, r0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	e68f      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 8001292:	4652      	mov	r2, sl
 8001294:	4322      	orrs	r2, r4
 8001296:	d109      	bne.n	80012ac <__aeabi_ddiv+0x344>
 8001298:	2302      	movs	r3, #2
 800129a:	4649      	mov	r1, r9
 800129c:	4319      	orrs	r1, r3
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <__aeabi_ddiv+0x398>)
 80012a0:	4689      	mov	r9, r1
 80012a2:	469c      	mov	ip, r3
 80012a4:	2400      	movs	r4, #0
 80012a6:	2002      	movs	r0, #2
 80012a8:	44e3      	add	fp, ip
 80012aa:	e69d      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 80012ac:	2303      	movs	r3, #3
 80012ae:	464a      	mov	r2, r9
 80012b0:	431a      	orrs	r2, r3
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <__aeabi_ddiv+0x398>)
 80012b4:	4691      	mov	r9, r2
 80012b6:	469c      	mov	ip, r3
 80012b8:	4652      	mov	r2, sl
 80012ba:	2003      	movs	r0, #3
 80012bc:	44e3      	add	fp, ip
 80012be:	e693      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 80012c0:	230c      	movs	r3, #12
 80012c2:	4699      	mov	r9, r3
 80012c4:	3b09      	subs	r3, #9
 80012c6:	46a0      	mov	r8, r4
 80012c8:	4683      	mov	fp, r0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	e671      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 80012ce:	2304      	movs	r3, #4
 80012d0:	4699      	mov	r9, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	469b      	mov	fp, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	2500      	movs	r5, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	e669      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000007ff 	.word	0x000007ff
 80012e4:	fffffc01 	.word	0xfffffc01
 80012e8:	08007ab4 	.word	0x08007ab4
 80012ec:	000003ff 	.word	0x000003ff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	000003f3 	.word	0x000003f3
 80012fc:	fffffc0d 	.word	0xfffffc0d
 8001300:	fffff801 	.word	0xfffff801
 8001304:	4649      	mov	r1, r9
 8001306:	2301      	movs	r3, #1
 8001308:	4319      	orrs	r1, r3
 800130a:	4689      	mov	r9, r1
 800130c:	2400      	movs	r4, #0
 800130e:	2001      	movs	r0, #1
 8001310:	e66a      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 8001312:	2300      	movs	r3, #0
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	469a      	mov	sl, r3
 8001318:	2500      	movs	r5, #0
 800131a:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <__aeabi_ddiv+0x5dc>)
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	e67a      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001320:	2501      	movs	r5, #1
 8001322:	426d      	negs	r5, r5
 8001324:	2301      	movs	r3, #1
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	2b38      	cmp	r3, #56	; 0x38
 800132a:	dd00      	ble.n	800132e <__aeabi_ddiv+0x3c6>
 800132c:	e670      	b.n	8001010 <__aeabi_ddiv+0xa8>
 800132e:	2b1f      	cmp	r3, #31
 8001330:	dc00      	bgt.n	8001334 <__aeabi_ddiv+0x3cc>
 8001332:	e0bf      	b.n	80014b4 <__aeabi_ddiv+0x54c>
 8001334:	211f      	movs	r1, #31
 8001336:	4249      	negs	r1, r1
 8001338:	1a8a      	subs	r2, r1, r2
 800133a:	4641      	mov	r1, r8
 800133c:	40d1      	lsrs	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	2b20      	cmp	r3, #32
 8001342:	d004      	beq.n	800134e <__aeabi_ddiv+0x3e6>
 8001344:	4641      	mov	r1, r8
 8001346:	4b80      	ldr	r3, [pc, #512]	; (8001548 <__aeabi_ddiv+0x5e0>)
 8001348:	445b      	add	r3, fp
 800134a:	4099      	lsls	r1, r3
 800134c:	430d      	orrs	r5, r1
 800134e:	1e6b      	subs	r3, r5, #1
 8001350:	419d      	sbcs	r5, r3
 8001352:	2307      	movs	r3, #7
 8001354:	432a      	orrs	r2, r5
 8001356:	001d      	movs	r5, r3
 8001358:	2400      	movs	r4, #0
 800135a:	4015      	ands	r5, r2
 800135c:	4213      	tst	r3, r2
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x3fa>
 8001360:	e0d4      	b.n	800150c <__aeabi_ddiv+0x5a4>
 8001362:	210f      	movs	r1, #15
 8001364:	2300      	movs	r3, #0
 8001366:	4011      	ands	r1, r2
 8001368:	2904      	cmp	r1, #4
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0x406>
 800136c:	e0cb      	b.n	8001506 <__aeabi_ddiv+0x59e>
 800136e:	1d11      	adds	r1, r2, #4
 8001370:	4291      	cmp	r1, r2
 8001372:	4192      	sbcs	r2, r2
 8001374:	4252      	negs	r2, r2
 8001376:	189b      	adds	r3, r3, r2
 8001378:	000a      	movs	r2, r1
 800137a:	0219      	lsls	r1, r3, #8
 800137c:	d400      	bmi.n	8001380 <__aeabi_ddiv+0x418>
 800137e:	e0c2      	b.n	8001506 <__aeabi_ddiv+0x59e>
 8001380:	2301      	movs	r3, #1
 8001382:	2400      	movs	r4, #0
 8001384:	2500      	movs	r5, #0
 8001386:	e646      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	4641      	mov	r1, r8
 800138c:	031b      	lsls	r3, r3, #12
 800138e:	4219      	tst	r1, r3
 8001390:	d008      	beq.n	80013a4 <__aeabi_ddiv+0x43c>
 8001392:	421c      	tst	r4, r3
 8001394:	d106      	bne.n	80013a4 <__aeabi_ddiv+0x43c>
 8001396:	431c      	orrs	r4, r3
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	46ba      	mov	sl, r7
 800139c:	0015      	movs	r5, r2
 800139e:	4b69      	ldr	r3, [pc, #420]	; (8001544 <__aeabi_ddiv+0x5dc>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e638      	b.n	8001016 <__aeabi_ddiv+0xae>
 80013a4:	2480      	movs	r4, #128	; 0x80
 80013a6:	4643      	mov	r3, r8
 80013a8:	0324      	lsls	r4, r4, #12
 80013aa:	431c      	orrs	r4, r3
 80013ac:	0324      	lsls	r4, r4, #12
 80013ae:	46b2      	mov	sl, r6
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <__aeabi_ddiv+0x5dc>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	e62f      	b.n	8001016 <__aeabi_ddiv+0xae>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_ddiv+0x454>
 80013ba:	e703      	b.n	80011c4 <__aeabi_ddiv+0x25c>
 80013bc:	19a6      	adds	r6, r4, r6
 80013be:	1e68      	subs	r0, r5, #1
 80013c0:	42a6      	cmp	r6, r4
 80013c2:	d200      	bcs.n	80013c6 <__aeabi_ddiv+0x45e>
 80013c4:	e08d      	b.n	80014e2 <__aeabi_ddiv+0x57a>
 80013c6:	428e      	cmp	r6, r1
 80013c8:	d200      	bcs.n	80013cc <__aeabi_ddiv+0x464>
 80013ca:	e0a3      	b.n	8001514 <__aeabi_ddiv+0x5ac>
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x468>
 80013ce:	e0b3      	b.n	8001538 <__aeabi_ddiv+0x5d0>
 80013d0:	0005      	movs	r5, r0
 80013d2:	e6f5      	b.n	80011c0 <__aeabi_ddiv+0x258>
 80013d4:	42aa      	cmp	r2, r5
 80013d6:	d900      	bls.n	80013da <__aeabi_ddiv+0x472>
 80013d8:	e639      	b.n	800104e <__aeabi_ddiv+0xe6>
 80013da:	4643      	mov	r3, r8
 80013dc:	07de      	lsls	r6, r3, #31
 80013de:	0858      	lsrs	r0, r3, #1
 80013e0:	086b      	lsrs	r3, r5, #1
 80013e2:	431e      	orrs	r6, r3
 80013e4:	07ed      	lsls	r5, r5, #31
 80013e6:	e639      	b.n	800105c <__aeabi_ddiv+0xf4>
 80013e8:	4648      	mov	r0, r9
 80013ea:	f001 f867 	bl	80024bc <__clzsi2>
 80013ee:	0001      	movs	r1, r0
 80013f0:	0002      	movs	r2, r0
 80013f2:	3115      	adds	r1, #21
 80013f4:	3220      	adds	r2, #32
 80013f6:	291c      	cmp	r1, #28
 80013f8:	dc00      	bgt.n	80013fc <__aeabi_ddiv+0x494>
 80013fa:	e72c      	b.n	8001256 <__aeabi_ddiv+0x2ee>
 80013fc:	464b      	mov	r3, r9
 80013fe:	3808      	subs	r0, #8
 8001400:	4083      	lsls	r3, r0
 8001402:	2500      	movs	r5, #0
 8001404:	4698      	mov	r8, r3
 8001406:	e732      	b.n	800126e <__aeabi_ddiv+0x306>
 8001408:	f001 f858 	bl	80024bc <__clzsi2>
 800140c:	0003      	movs	r3, r0
 800140e:	001a      	movs	r2, r3
 8001410:	3215      	adds	r2, #21
 8001412:	3020      	adds	r0, #32
 8001414:	2a1c      	cmp	r2, #28
 8001416:	dc00      	bgt.n	800141a <__aeabi_ddiv+0x4b2>
 8001418:	e700      	b.n	800121c <__aeabi_ddiv+0x2b4>
 800141a:	4654      	mov	r4, sl
 800141c:	3b08      	subs	r3, #8
 800141e:	2200      	movs	r2, #0
 8001420:	409c      	lsls	r4, r3
 8001422:	e705      	b.n	8001230 <__aeabi_ddiv+0x2c8>
 8001424:	1936      	adds	r6, r6, r4
 8001426:	3b01      	subs	r3, #1
 8001428:	42b4      	cmp	r4, r6
 800142a:	d900      	bls.n	800142e <__aeabi_ddiv+0x4c6>
 800142c:	e6a6      	b.n	800117c <__aeabi_ddiv+0x214>
 800142e:	42b2      	cmp	r2, r6
 8001430:	d800      	bhi.n	8001434 <__aeabi_ddiv+0x4cc>
 8001432:	e6a3      	b.n	800117c <__aeabi_ddiv+0x214>
 8001434:	1e83      	subs	r3, r0, #2
 8001436:	1936      	adds	r6, r6, r4
 8001438:	e6a0      	b.n	800117c <__aeabi_ddiv+0x214>
 800143a:	1909      	adds	r1, r1, r4
 800143c:	3d01      	subs	r5, #1
 800143e:	428c      	cmp	r4, r1
 8001440:	d900      	bls.n	8001444 <__aeabi_ddiv+0x4dc>
 8001442:	e68d      	b.n	8001160 <__aeabi_ddiv+0x1f8>
 8001444:	428a      	cmp	r2, r1
 8001446:	d800      	bhi.n	800144a <__aeabi_ddiv+0x4e2>
 8001448:	e68a      	b.n	8001160 <__aeabi_ddiv+0x1f8>
 800144a:	1e85      	subs	r5, r0, #2
 800144c:	1909      	adds	r1, r1, r4
 800144e:	e687      	b.n	8001160 <__aeabi_ddiv+0x1f8>
 8001450:	230f      	movs	r3, #15
 8001452:	402b      	ands	r3, r5
 8001454:	2b04      	cmp	r3, #4
 8001456:	d100      	bne.n	800145a <__aeabi_ddiv+0x4f2>
 8001458:	e6bc      	b.n	80011d4 <__aeabi_ddiv+0x26c>
 800145a:	2305      	movs	r3, #5
 800145c:	425b      	negs	r3, r3
 800145e:	42ab      	cmp	r3, r5
 8001460:	419b      	sbcs	r3, r3
 8001462:	3504      	adds	r5, #4
 8001464:	425b      	negs	r3, r3
 8001466:	08ed      	lsrs	r5, r5, #3
 8001468:	4498      	add	r8, r3
 800146a:	e6b4      	b.n	80011d6 <__aeabi_ddiv+0x26e>
 800146c:	42af      	cmp	r7, r5
 800146e:	d900      	bls.n	8001472 <__aeabi_ddiv+0x50a>
 8001470:	e660      	b.n	8001134 <__aeabi_ddiv+0x1cc>
 8001472:	4282      	cmp	r2, r0
 8001474:	d804      	bhi.n	8001480 <__aeabi_ddiv+0x518>
 8001476:	d000      	beq.n	800147a <__aeabi_ddiv+0x512>
 8001478:	e65c      	b.n	8001134 <__aeabi_ddiv+0x1cc>
 800147a:	42ae      	cmp	r6, r5
 800147c:	d800      	bhi.n	8001480 <__aeabi_ddiv+0x518>
 800147e:	e659      	b.n	8001134 <__aeabi_ddiv+0x1cc>
 8001480:	2302      	movs	r3, #2
 8001482:	425b      	negs	r3, r3
 8001484:	469c      	mov	ip, r3
 8001486:	9b00      	ldr	r3, [sp, #0]
 8001488:	44e0      	add	r8, ip
 800148a:	469c      	mov	ip, r3
 800148c:	4465      	add	r5, ip
 800148e:	429d      	cmp	r5, r3
 8001490:	419b      	sbcs	r3, r3
 8001492:	425b      	negs	r3, r3
 8001494:	191b      	adds	r3, r3, r4
 8001496:	18c0      	adds	r0, r0, r3
 8001498:	e64d      	b.n	8001136 <__aeabi_ddiv+0x1ce>
 800149a:	428a      	cmp	r2, r1
 800149c:	d800      	bhi.n	80014a0 <__aeabi_ddiv+0x538>
 800149e:	e60e      	b.n	80010be <__aeabi_ddiv+0x156>
 80014a0:	1e83      	subs	r3, r0, #2
 80014a2:	1909      	adds	r1, r1, r4
 80014a4:	e60b      	b.n	80010be <__aeabi_ddiv+0x156>
 80014a6:	428a      	cmp	r2, r1
 80014a8:	d800      	bhi.n	80014ac <__aeabi_ddiv+0x544>
 80014aa:	e5f4      	b.n	8001096 <__aeabi_ddiv+0x12e>
 80014ac:	1e83      	subs	r3, r0, #2
 80014ae:	4698      	mov	r8, r3
 80014b0:	1909      	adds	r1, r1, r4
 80014b2:	e5f0      	b.n	8001096 <__aeabi_ddiv+0x12e>
 80014b4:	4925      	ldr	r1, [pc, #148]	; (800154c <__aeabi_ddiv+0x5e4>)
 80014b6:	0028      	movs	r0, r5
 80014b8:	4459      	add	r1, fp
 80014ba:	408d      	lsls	r5, r1
 80014bc:	4642      	mov	r2, r8
 80014be:	408a      	lsls	r2, r1
 80014c0:	1e69      	subs	r1, r5, #1
 80014c2:	418d      	sbcs	r5, r1
 80014c4:	4641      	mov	r1, r8
 80014c6:	40d8      	lsrs	r0, r3
 80014c8:	40d9      	lsrs	r1, r3
 80014ca:	4302      	orrs	r2, r0
 80014cc:	432a      	orrs	r2, r5
 80014ce:	000b      	movs	r3, r1
 80014d0:	0751      	lsls	r1, r2, #29
 80014d2:	d100      	bne.n	80014d6 <__aeabi_ddiv+0x56e>
 80014d4:	e751      	b.n	800137a <__aeabi_ddiv+0x412>
 80014d6:	210f      	movs	r1, #15
 80014d8:	4011      	ands	r1, r2
 80014da:	2904      	cmp	r1, #4
 80014dc:	d000      	beq.n	80014e0 <__aeabi_ddiv+0x578>
 80014de:	e746      	b.n	800136e <__aeabi_ddiv+0x406>
 80014e0:	e74b      	b.n	800137a <__aeabi_ddiv+0x412>
 80014e2:	0005      	movs	r5, r0
 80014e4:	428e      	cmp	r6, r1
 80014e6:	d000      	beq.n	80014ea <__aeabi_ddiv+0x582>
 80014e8:	e66a      	b.n	80011c0 <__aeabi_ddiv+0x258>
 80014ea:	9a00      	ldr	r2, [sp, #0]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d000      	beq.n	80014f2 <__aeabi_ddiv+0x58a>
 80014f0:	e666      	b.n	80011c0 <__aeabi_ddiv+0x258>
 80014f2:	e667      	b.n	80011c4 <__aeabi_ddiv+0x25c>
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <__aeabi_ddiv+0x5e8>)
 80014f6:	445a      	add	r2, fp
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	dc00      	bgt.n	80014fe <__aeabi_ddiv+0x596>
 80014fc:	e710      	b.n	8001320 <__aeabi_ddiv+0x3b8>
 80014fe:	2301      	movs	r3, #1
 8001500:	2500      	movs	r5, #0
 8001502:	4498      	add	r8, r3
 8001504:	e667      	b.n	80011d6 <__aeabi_ddiv+0x26e>
 8001506:	075d      	lsls	r5, r3, #29
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	0b1c      	lsrs	r4, r3, #12
 800150c:	08d2      	lsrs	r2, r2, #3
 800150e:	2300      	movs	r3, #0
 8001510:	4315      	orrs	r5, r2
 8001512:	e580      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001514:	9800      	ldr	r0, [sp, #0]
 8001516:	3d02      	subs	r5, #2
 8001518:	0042      	lsls	r2, r0, #1
 800151a:	4282      	cmp	r2, r0
 800151c:	41bf      	sbcs	r7, r7
 800151e:	427f      	negs	r7, r7
 8001520:	193c      	adds	r4, r7, r4
 8001522:	1936      	adds	r6, r6, r4
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	e7dd      	b.n	80014e4 <__aeabi_ddiv+0x57c>
 8001528:	2480      	movs	r4, #128	; 0x80
 800152a:	4643      	mov	r3, r8
 800152c:	0324      	lsls	r4, r4, #12
 800152e:	431c      	orrs	r4, r3
 8001530:	0324      	lsls	r4, r4, #12
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__aeabi_ddiv+0x5dc>)
 8001534:	0b24      	lsrs	r4, r4, #12
 8001536:	e56e      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001538:	9a00      	ldr	r2, [sp, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d3ea      	bcc.n	8001514 <__aeabi_ddiv+0x5ac>
 800153e:	0005      	movs	r5, r0
 8001540:	e7d3      	b.n	80014ea <__aeabi_ddiv+0x582>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff
 8001548:	0000043e 	.word	0x0000043e
 800154c:	0000041e 	.word	0x0000041e
 8001550:	000003ff 	.word	0x000003ff

08001554 <__eqdf2>:
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	464e      	mov	r6, r9
 8001558:	4645      	mov	r5, r8
 800155a:	46de      	mov	lr, fp
 800155c:	4657      	mov	r7, sl
 800155e:	4690      	mov	r8, r2
 8001560:	b5e0      	push	{r5, r6, r7, lr}
 8001562:	0017      	movs	r7, r2
 8001564:	031a      	lsls	r2, r3, #12
 8001566:	0b12      	lsrs	r2, r2, #12
 8001568:	0005      	movs	r5, r0
 800156a:	4684      	mov	ip, r0
 800156c:	4819      	ldr	r0, [pc, #100]	; (80015d4 <__eqdf2+0x80>)
 800156e:	030e      	lsls	r6, r1, #12
 8001570:	004c      	lsls	r4, r1, #1
 8001572:	4691      	mov	r9, r2
 8001574:	005a      	lsls	r2, r3, #1
 8001576:	0fdb      	lsrs	r3, r3, #31
 8001578:	469b      	mov	fp, r3
 800157a:	0b36      	lsrs	r6, r6, #12
 800157c:	0d64      	lsrs	r4, r4, #21
 800157e:	0fc9      	lsrs	r1, r1, #31
 8001580:	0d52      	lsrs	r2, r2, #21
 8001582:	4284      	cmp	r4, r0
 8001584:	d019      	beq.n	80015ba <__eqdf2+0x66>
 8001586:	4282      	cmp	r2, r0
 8001588:	d010      	beq.n	80015ac <__eqdf2+0x58>
 800158a:	2001      	movs	r0, #1
 800158c:	4294      	cmp	r4, r2
 800158e:	d10e      	bne.n	80015ae <__eqdf2+0x5a>
 8001590:	454e      	cmp	r6, r9
 8001592:	d10c      	bne.n	80015ae <__eqdf2+0x5a>
 8001594:	2001      	movs	r0, #1
 8001596:	45c4      	cmp	ip, r8
 8001598:	d109      	bne.n	80015ae <__eqdf2+0x5a>
 800159a:	4559      	cmp	r1, fp
 800159c:	d017      	beq.n	80015ce <__eqdf2+0x7a>
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d105      	bne.n	80015ae <__eqdf2+0x5a>
 80015a2:	0030      	movs	r0, r6
 80015a4:	4328      	orrs	r0, r5
 80015a6:	1e43      	subs	r3, r0, #1
 80015a8:	4198      	sbcs	r0, r3
 80015aa:	e000      	b.n	80015ae <__eqdf2+0x5a>
 80015ac:	2001      	movs	r0, #1
 80015ae:	bcf0      	pop	{r4, r5, r6, r7}
 80015b0:	46bb      	mov	fp, r7
 80015b2:	46b2      	mov	sl, r6
 80015b4:	46a9      	mov	r9, r5
 80015b6:	46a0      	mov	r8, r4
 80015b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ba:	0033      	movs	r3, r6
 80015bc:	2001      	movs	r0, #1
 80015be:	432b      	orrs	r3, r5
 80015c0:	d1f5      	bne.n	80015ae <__eqdf2+0x5a>
 80015c2:	42a2      	cmp	r2, r4
 80015c4:	d1f3      	bne.n	80015ae <__eqdf2+0x5a>
 80015c6:	464b      	mov	r3, r9
 80015c8:	433b      	orrs	r3, r7
 80015ca:	d1f0      	bne.n	80015ae <__eqdf2+0x5a>
 80015cc:	e7e2      	b.n	8001594 <__eqdf2+0x40>
 80015ce:	2000      	movs	r0, #0
 80015d0:	e7ed      	b.n	80015ae <__eqdf2+0x5a>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	000007ff 	.word	0x000007ff

080015d8 <__gedf2>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4647      	mov	r7, r8
 80015dc:	46ce      	mov	lr, r9
 80015de:	0004      	movs	r4, r0
 80015e0:	0018      	movs	r0, r3
 80015e2:	0016      	movs	r6, r2
 80015e4:	031b      	lsls	r3, r3, #12
 80015e6:	0b1b      	lsrs	r3, r3, #12
 80015e8:	4d2d      	ldr	r5, [pc, #180]	; (80016a0 <__gedf2+0xc8>)
 80015ea:	004a      	lsls	r2, r1, #1
 80015ec:	4699      	mov	r9, r3
 80015ee:	b580      	push	{r7, lr}
 80015f0:	0043      	lsls	r3, r0, #1
 80015f2:	030f      	lsls	r7, r1, #12
 80015f4:	46a4      	mov	ip, r4
 80015f6:	46b0      	mov	r8, r6
 80015f8:	0b3f      	lsrs	r7, r7, #12
 80015fa:	0d52      	lsrs	r2, r2, #21
 80015fc:	0fc9      	lsrs	r1, r1, #31
 80015fe:	0d5b      	lsrs	r3, r3, #21
 8001600:	0fc0      	lsrs	r0, r0, #31
 8001602:	42aa      	cmp	r2, r5
 8001604:	d021      	beq.n	800164a <__gedf2+0x72>
 8001606:	42ab      	cmp	r3, r5
 8001608:	d013      	beq.n	8001632 <__gedf2+0x5a>
 800160a:	2a00      	cmp	r2, #0
 800160c:	d122      	bne.n	8001654 <__gedf2+0x7c>
 800160e:	433c      	orrs	r4, r7
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <__gedf2+0x42>
 8001614:	464d      	mov	r5, r9
 8001616:	432e      	orrs	r6, r5
 8001618:	d022      	beq.n	8001660 <__gedf2+0x88>
 800161a:	2c00      	cmp	r4, #0
 800161c:	d010      	beq.n	8001640 <__gedf2+0x68>
 800161e:	4281      	cmp	r1, r0
 8001620:	d022      	beq.n	8001668 <__gedf2+0x90>
 8001622:	2002      	movs	r0, #2
 8001624:	3901      	subs	r1, #1
 8001626:	4008      	ands	r0, r1
 8001628:	3801      	subs	r0, #1
 800162a:	bcc0      	pop	{r6, r7}
 800162c:	46b9      	mov	r9, r7
 800162e:	46b0      	mov	r8, r6
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001632:	464d      	mov	r5, r9
 8001634:	432e      	orrs	r6, r5
 8001636:	d129      	bne.n	800168c <__gedf2+0xb4>
 8001638:	2a00      	cmp	r2, #0
 800163a:	d1f0      	bne.n	800161e <__gedf2+0x46>
 800163c:	433c      	orrs	r4, r7
 800163e:	d1ee      	bne.n	800161e <__gedf2+0x46>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1f2      	bne.n	800162a <__gedf2+0x52>
 8001644:	2001      	movs	r0, #1
 8001646:	4240      	negs	r0, r0
 8001648:	e7ef      	b.n	800162a <__gedf2+0x52>
 800164a:	003d      	movs	r5, r7
 800164c:	4325      	orrs	r5, r4
 800164e:	d11d      	bne.n	800168c <__gedf2+0xb4>
 8001650:	4293      	cmp	r3, r2
 8001652:	d0ee      	beq.n	8001632 <__gedf2+0x5a>
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e2      	bne.n	800161e <__gedf2+0x46>
 8001658:	464c      	mov	r4, r9
 800165a:	4326      	orrs	r6, r4
 800165c:	d1df      	bne.n	800161e <__gedf2+0x46>
 800165e:	e7e0      	b.n	8001622 <__gedf2+0x4a>
 8001660:	2000      	movs	r0, #0
 8001662:	2c00      	cmp	r4, #0
 8001664:	d0e1      	beq.n	800162a <__gedf2+0x52>
 8001666:	e7dc      	b.n	8001622 <__gedf2+0x4a>
 8001668:	429a      	cmp	r2, r3
 800166a:	dc0a      	bgt.n	8001682 <__gedf2+0xaa>
 800166c:	dbe8      	blt.n	8001640 <__gedf2+0x68>
 800166e:	454f      	cmp	r7, r9
 8001670:	d8d7      	bhi.n	8001622 <__gedf2+0x4a>
 8001672:	d00e      	beq.n	8001692 <__gedf2+0xba>
 8001674:	2000      	movs	r0, #0
 8001676:	454f      	cmp	r7, r9
 8001678:	d2d7      	bcs.n	800162a <__gedf2+0x52>
 800167a:	2900      	cmp	r1, #0
 800167c:	d0e2      	beq.n	8001644 <__gedf2+0x6c>
 800167e:	0008      	movs	r0, r1
 8001680:	e7d3      	b.n	800162a <__gedf2+0x52>
 8001682:	4243      	negs	r3, r0
 8001684:	4158      	adcs	r0, r3
 8001686:	0040      	lsls	r0, r0, #1
 8001688:	3801      	subs	r0, #1
 800168a:	e7ce      	b.n	800162a <__gedf2+0x52>
 800168c:	2002      	movs	r0, #2
 800168e:	4240      	negs	r0, r0
 8001690:	e7cb      	b.n	800162a <__gedf2+0x52>
 8001692:	45c4      	cmp	ip, r8
 8001694:	d8c5      	bhi.n	8001622 <__gedf2+0x4a>
 8001696:	2000      	movs	r0, #0
 8001698:	45c4      	cmp	ip, r8
 800169a:	d2c6      	bcs.n	800162a <__gedf2+0x52>
 800169c:	e7ed      	b.n	800167a <__gedf2+0xa2>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	000007ff 	.word	0x000007ff

080016a4 <__ledf2>:
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	4647      	mov	r7, r8
 80016a8:	46ce      	mov	lr, r9
 80016aa:	0004      	movs	r4, r0
 80016ac:	0018      	movs	r0, r3
 80016ae:	0016      	movs	r6, r2
 80016b0:	031b      	lsls	r3, r3, #12
 80016b2:	0b1b      	lsrs	r3, r3, #12
 80016b4:	4d2c      	ldr	r5, [pc, #176]	; (8001768 <__ledf2+0xc4>)
 80016b6:	004a      	lsls	r2, r1, #1
 80016b8:	4699      	mov	r9, r3
 80016ba:	b580      	push	{r7, lr}
 80016bc:	0043      	lsls	r3, r0, #1
 80016be:	030f      	lsls	r7, r1, #12
 80016c0:	46a4      	mov	ip, r4
 80016c2:	46b0      	mov	r8, r6
 80016c4:	0b3f      	lsrs	r7, r7, #12
 80016c6:	0d52      	lsrs	r2, r2, #21
 80016c8:	0fc9      	lsrs	r1, r1, #31
 80016ca:	0d5b      	lsrs	r3, r3, #21
 80016cc:	0fc0      	lsrs	r0, r0, #31
 80016ce:	42aa      	cmp	r2, r5
 80016d0:	d00d      	beq.n	80016ee <__ledf2+0x4a>
 80016d2:	42ab      	cmp	r3, r5
 80016d4:	d010      	beq.n	80016f8 <__ledf2+0x54>
 80016d6:	2a00      	cmp	r2, #0
 80016d8:	d127      	bne.n	800172a <__ledf2+0x86>
 80016da:	433c      	orrs	r4, r7
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <__ledf2+0x60>
 80016e0:	464d      	mov	r5, r9
 80016e2:	432e      	orrs	r6, r5
 80016e4:	d10e      	bne.n	8001704 <__ledf2+0x60>
 80016e6:	2000      	movs	r0, #0
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d015      	beq.n	8001718 <__ledf2+0x74>
 80016ec:	e00e      	b.n	800170c <__ledf2+0x68>
 80016ee:	003d      	movs	r5, r7
 80016f0:	4325      	orrs	r5, r4
 80016f2:	d110      	bne.n	8001716 <__ledf2+0x72>
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d118      	bne.n	800172a <__ledf2+0x86>
 80016f8:	464d      	mov	r5, r9
 80016fa:	432e      	orrs	r6, r5
 80016fc:	d10b      	bne.n	8001716 <__ledf2+0x72>
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d102      	bne.n	8001708 <__ledf2+0x64>
 8001702:	433c      	orrs	r4, r7
 8001704:	2c00      	cmp	r4, #0
 8001706:	d00b      	beq.n	8001720 <__ledf2+0x7c>
 8001708:	4281      	cmp	r1, r0
 800170a:	d014      	beq.n	8001736 <__ledf2+0x92>
 800170c:	2002      	movs	r0, #2
 800170e:	3901      	subs	r1, #1
 8001710:	4008      	ands	r0, r1
 8001712:	3801      	subs	r0, #1
 8001714:	e000      	b.n	8001718 <__ledf2+0x74>
 8001716:	2002      	movs	r0, #2
 8001718:	bcc0      	pop	{r6, r7}
 800171a:	46b9      	mov	r9, r7
 800171c:	46b0      	mov	r8, r6
 800171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001720:	2800      	cmp	r0, #0
 8001722:	d1f9      	bne.n	8001718 <__ledf2+0x74>
 8001724:	2001      	movs	r0, #1
 8001726:	4240      	negs	r0, r0
 8001728:	e7f6      	b.n	8001718 <__ledf2+0x74>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ec      	bne.n	8001708 <__ledf2+0x64>
 800172e:	464c      	mov	r4, r9
 8001730:	4326      	orrs	r6, r4
 8001732:	d1e9      	bne.n	8001708 <__ledf2+0x64>
 8001734:	e7ea      	b.n	800170c <__ledf2+0x68>
 8001736:	429a      	cmp	r2, r3
 8001738:	dd04      	ble.n	8001744 <__ledf2+0xa0>
 800173a:	4243      	negs	r3, r0
 800173c:	4158      	adcs	r0, r3
 800173e:	0040      	lsls	r0, r0, #1
 8001740:	3801      	subs	r0, #1
 8001742:	e7e9      	b.n	8001718 <__ledf2+0x74>
 8001744:	429a      	cmp	r2, r3
 8001746:	dbeb      	blt.n	8001720 <__ledf2+0x7c>
 8001748:	454f      	cmp	r7, r9
 800174a:	d8df      	bhi.n	800170c <__ledf2+0x68>
 800174c:	d006      	beq.n	800175c <__ledf2+0xb8>
 800174e:	2000      	movs	r0, #0
 8001750:	454f      	cmp	r7, r9
 8001752:	d2e1      	bcs.n	8001718 <__ledf2+0x74>
 8001754:	2900      	cmp	r1, #0
 8001756:	d0e5      	beq.n	8001724 <__ledf2+0x80>
 8001758:	0008      	movs	r0, r1
 800175a:	e7dd      	b.n	8001718 <__ledf2+0x74>
 800175c:	45c4      	cmp	ip, r8
 800175e:	d8d5      	bhi.n	800170c <__ledf2+0x68>
 8001760:	2000      	movs	r0, #0
 8001762:	45c4      	cmp	ip, r8
 8001764:	d2d8      	bcs.n	8001718 <__ledf2+0x74>
 8001766:	e7f5      	b.n	8001754 <__ledf2+0xb0>
 8001768:	000007ff 	.word	0x000007ff

0800176c <__aeabi_dmul>:
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	4657      	mov	r7, sl
 8001770:	464e      	mov	r6, r9
 8001772:	4645      	mov	r5, r8
 8001774:	46de      	mov	lr, fp
 8001776:	b5e0      	push	{r5, r6, r7, lr}
 8001778:	4698      	mov	r8, r3
 800177a:	030c      	lsls	r4, r1, #12
 800177c:	004b      	lsls	r3, r1, #1
 800177e:	0006      	movs	r6, r0
 8001780:	4692      	mov	sl, r2
 8001782:	b087      	sub	sp, #28
 8001784:	0b24      	lsrs	r4, r4, #12
 8001786:	0d5b      	lsrs	r3, r3, #21
 8001788:	0fcf      	lsrs	r7, r1, #31
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_dmul+0x24>
 800178e:	e15c      	b.n	8001a4a <__aeabi_dmul+0x2de>
 8001790:	4ad9      	ldr	r2, [pc, #868]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d100      	bne.n	8001798 <__aeabi_dmul+0x2c>
 8001796:	e175      	b.n	8001a84 <__aeabi_dmul+0x318>
 8001798:	0f42      	lsrs	r2, r0, #29
 800179a:	00e4      	lsls	r4, r4, #3
 800179c:	4314      	orrs	r4, r2
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	0412      	lsls	r2, r2, #16
 80017a2:	4314      	orrs	r4, r2
 80017a4:	4ad5      	ldr	r2, [pc, #852]	; (8001afc <__aeabi_dmul+0x390>)
 80017a6:	00c5      	lsls	r5, r0, #3
 80017a8:	4694      	mov	ip, r2
 80017aa:	4463      	add	r3, ip
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2300      	movs	r3, #0
 80017b0:	4699      	mov	r9, r3
 80017b2:	469b      	mov	fp, r3
 80017b4:	4643      	mov	r3, r8
 80017b6:	4642      	mov	r2, r8
 80017b8:	031e      	lsls	r6, r3, #12
 80017ba:	0fd2      	lsrs	r2, r2, #31
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4650      	mov	r0, sl
 80017c0:	4690      	mov	r8, r2
 80017c2:	0b36      	lsrs	r6, r6, #12
 80017c4:	0d5b      	lsrs	r3, r3, #21
 80017c6:	d100      	bne.n	80017ca <__aeabi_dmul+0x5e>
 80017c8:	e120      	b.n	8001a0c <__aeabi_dmul+0x2a0>
 80017ca:	4acb      	ldr	r2, [pc, #812]	; (8001af8 <__aeabi_dmul+0x38c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0x66>
 80017d0:	e162      	b.n	8001a98 <__aeabi_dmul+0x32c>
 80017d2:	49ca      	ldr	r1, [pc, #808]	; (8001afc <__aeabi_dmul+0x390>)
 80017d4:	0f42      	lsrs	r2, r0, #29
 80017d6:	468c      	mov	ip, r1
 80017d8:	9900      	ldr	r1, [sp, #0]
 80017da:	4463      	add	r3, ip
 80017dc:	00f6      	lsls	r6, r6, #3
 80017de:	468c      	mov	ip, r1
 80017e0:	4316      	orrs	r6, r2
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	449c      	add	ip, r3
 80017e6:	0412      	lsls	r2, r2, #16
 80017e8:	4663      	mov	r3, ip
 80017ea:	4316      	orrs	r6, r2
 80017ec:	00c2      	lsls	r2, r0, #3
 80017ee:	2000      	movs	r0, #0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	9900      	ldr	r1, [sp, #0]
 80017f4:	4643      	mov	r3, r8
 80017f6:	3101      	adds	r1, #1
 80017f8:	468c      	mov	ip, r1
 80017fa:	4649      	mov	r1, r9
 80017fc:	407b      	eors	r3, r7
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	290f      	cmp	r1, #15
 8001802:	d826      	bhi.n	8001852 <__aeabi_dmul+0xe6>
 8001804:	4bbe      	ldr	r3, [pc, #760]	; (8001b00 <__aeabi_dmul+0x394>)
 8001806:	0089      	lsls	r1, r1, #2
 8001808:	5859      	ldr	r1, [r3, r1]
 800180a:	468f      	mov	pc, r1
 800180c:	4643      	mov	r3, r8
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	0034      	movs	r4, r6
 8001812:	0015      	movs	r5, r2
 8001814:	4683      	mov	fp, r0
 8001816:	465b      	mov	r3, fp
 8001818:	2b02      	cmp	r3, #2
 800181a:	d016      	beq.n	800184a <__aeabi_dmul+0xde>
 800181c:	2b03      	cmp	r3, #3
 800181e:	d100      	bne.n	8001822 <__aeabi_dmul+0xb6>
 8001820:	e203      	b.n	8001c2a <__aeabi_dmul+0x4be>
 8001822:	2b01      	cmp	r3, #1
 8001824:	d000      	beq.n	8001828 <__aeabi_dmul+0xbc>
 8001826:	e0cd      	b.n	80019c4 <__aeabi_dmul+0x258>
 8001828:	2200      	movs	r2, #0
 800182a:	2400      	movs	r4, #0
 800182c:	2500      	movs	r5, #0
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	0512      	lsls	r2, r2, #20
 8001832:	4322      	orrs	r2, r4
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	431a      	orrs	r2, r3
 8001838:	0028      	movs	r0, r5
 800183a:	0011      	movs	r1, r2
 800183c:	b007      	add	sp, #28
 800183e:	bcf0      	pop	{r4, r5, r6, r7}
 8001840:	46bb      	mov	fp, r7
 8001842:	46b2      	mov	sl, r6
 8001844:	46a9      	mov	r9, r5
 8001846:	46a0      	mov	r8, r4
 8001848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184a:	2400      	movs	r4, #0
 800184c:	2500      	movs	r5, #0
 800184e:	4aaa      	ldr	r2, [pc, #680]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001850:	e7ed      	b.n	800182e <__aeabi_dmul+0xc2>
 8001852:	0c28      	lsrs	r0, r5, #16
 8001854:	042d      	lsls	r5, r5, #16
 8001856:	0c2d      	lsrs	r5, r5, #16
 8001858:	002b      	movs	r3, r5
 800185a:	0c11      	lsrs	r1, r2, #16
 800185c:	0412      	lsls	r2, r2, #16
 800185e:	0c12      	lsrs	r2, r2, #16
 8001860:	4353      	muls	r3, r2
 8001862:	4698      	mov	r8, r3
 8001864:	0013      	movs	r3, r2
 8001866:	002f      	movs	r7, r5
 8001868:	4343      	muls	r3, r0
 800186a:	4699      	mov	r9, r3
 800186c:	434f      	muls	r7, r1
 800186e:	444f      	add	r7, r9
 8001870:	46bb      	mov	fp, r7
 8001872:	4647      	mov	r7, r8
 8001874:	000b      	movs	r3, r1
 8001876:	0c3f      	lsrs	r7, r7, #16
 8001878:	46ba      	mov	sl, r7
 800187a:	4343      	muls	r3, r0
 800187c:	44da      	add	sl, fp
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	45d1      	cmp	r9, sl
 8001882:	d904      	bls.n	800188e <__aeabi_dmul+0x122>
 8001884:	2780      	movs	r7, #128	; 0x80
 8001886:	027f      	lsls	r7, r7, #9
 8001888:	46b9      	mov	r9, r7
 800188a:	444b      	add	r3, r9
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4653      	mov	r3, sl
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469b      	mov	fp, r3
 8001894:	4653      	mov	r3, sl
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	4643      	mov	r3, r8
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	4698      	mov	r8, r3
 80018a0:	003b      	movs	r3, r7
 80018a2:	4443      	add	r3, r8
 80018a4:	9304      	str	r3, [sp, #16]
 80018a6:	0c33      	lsrs	r3, r6, #16
 80018a8:	0436      	lsls	r6, r6, #16
 80018aa:	0c36      	lsrs	r6, r6, #16
 80018ac:	4698      	mov	r8, r3
 80018ae:	0033      	movs	r3, r6
 80018b0:	4343      	muls	r3, r0
 80018b2:	4699      	mov	r9, r3
 80018b4:	4643      	mov	r3, r8
 80018b6:	4343      	muls	r3, r0
 80018b8:	002f      	movs	r7, r5
 80018ba:	469a      	mov	sl, r3
 80018bc:	4643      	mov	r3, r8
 80018be:	4377      	muls	r7, r6
 80018c0:	435d      	muls	r5, r3
 80018c2:	0c38      	lsrs	r0, r7, #16
 80018c4:	444d      	add	r5, r9
 80018c6:	1945      	adds	r5, r0, r5
 80018c8:	45a9      	cmp	r9, r5
 80018ca:	d903      	bls.n	80018d4 <__aeabi_dmul+0x168>
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	4699      	mov	r9, r3
 80018d2:	44ca      	add	sl, r9
 80018d4:	043f      	lsls	r7, r7, #16
 80018d6:	0c28      	lsrs	r0, r5, #16
 80018d8:	0c3f      	lsrs	r7, r7, #16
 80018da:	042d      	lsls	r5, r5, #16
 80018dc:	19ed      	adds	r5, r5, r7
 80018de:	0c27      	lsrs	r7, r4, #16
 80018e0:	0424      	lsls	r4, r4, #16
 80018e2:	0c24      	lsrs	r4, r4, #16
 80018e4:	0003      	movs	r3, r0
 80018e6:	0020      	movs	r0, r4
 80018e8:	4350      	muls	r0, r2
 80018ea:	437a      	muls	r2, r7
 80018ec:	4691      	mov	r9, r2
 80018ee:	003a      	movs	r2, r7
 80018f0:	4453      	add	r3, sl
 80018f2:	9305      	str	r3, [sp, #20]
 80018f4:	0c03      	lsrs	r3, r0, #16
 80018f6:	469a      	mov	sl, r3
 80018f8:	434a      	muls	r2, r1
 80018fa:	4361      	muls	r1, r4
 80018fc:	4449      	add	r1, r9
 80018fe:	4451      	add	r1, sl
 8001900:	44ab      	add	fp, r5
 8001902:	4589      	cmp	r9, r1
 8001904:	d903      	bls.n	800190e <__aeabi_dmul+0x1a2>
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4699      	mov	r9, r3
 800190c:	444a      	add	r2, r9
 800190e:	0400      	lsls	r0, r0, #16
 8001910:	0c0b      	lsrs	r3, r1, #16
 8001912:	0c00      	lsrs	r0, r0, #16
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	1809      	adds	r1, r1, r0
 8001918:	0020      	movs	r0, r4
 800191a:	4699      	mov	r9, r3
 800191c:	4643      	mov	r3, r8
 800191e:	4370      	muls	r0, r6
 8001920:	435c      	muls	r4, r3
 8001922:	437e      	muls	r6, r7
 8001924:	435f      	muls	r7, r3
 8001926:	0c03      	lsrs	r3, r0, #16
 8001928:	4698      	mov	r8, r3
 800192a:	19a4      	adds	r4, r4, r6
 800192c:	4444      	add	r4, r8
 800192e:	444a      	add	r2, r9
 8001930:	9703      	str	r7, [sp, #12]
 8001932:	42a6      	cmp	r6, r4
 8001934:	d904      	bls.n	8001940 <__aeabi_dmul+0x1d4>
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	4698      	mov	r8, r3
 800193c:	4447      	add	r7, r8
 800193e:	9703      	str	r7, [sp, #12]
 8001940:	0423      	lsls	r3, r4, #16
 8001942:	9e02      	ldr	r6, [sp, #8]
 8001944:	469a      	mov	sl, r3
 8001946:	9b05      	ldr	r3, [sp, #20]
 8001948:	445e      	add	r6, fp
 800194a:	4698      	mov	r8, r3
 800194c:	42ae      	cmp	r6, r5
 800194e:	41ad      	sbcs	r5, r5
 8001950:	1876      	adds	r6, r6, r1
 8001952:	428e      	cmp	r6, r1
 8001954:	4189      	sbcs	r1, r1
 8001956:	0400      	lsls	r0, r0, #16
 8001958:	0c00      	lsrs	r0, r0, #16
 800195a:	4450      	add	r0, sl
 800195c:	4440      	add	r0, r8
 800195e:	426d      	negs	r5, r5
 8001960:	1947      	adds	r7, r0, r5
 8001962:	46b8      	mov	r8, r7
 8001964:	4693      	mov	fp, r2
 8001966:	4249      	negs	r1, r1
 8001968:	4689      	mov	r9, r1
 800196a:	44c3      	add	fp, r8
 800196c:	44d9      	add	r9, fp
 800196e:	4298      	cmp	r0, r3
 8001970:	4180      	sbcs	r0, r0
 8001972:	45a8      	cmp	r8, r5
 8001974:	41ad      	sbcs	r5, r5
 8001976:	4593      	cmp	fp, r2
 8001978:	4192      	sbcs	r2, r2
 800197a:	4589      	cmp	r9, r1
 800197c:	4189      	sbcs	r1, r1
 800197e:	426d      	negs	r5, r5
 8001980:	4240      	negs	r0, r0
 8001982:	4328      	orrs	r0, r5
 8001984:	0c24      	lsrs	r4, r4, #16
 8001986:	4252      	negs	r2, r2
 8001988:	4249      	negs	r1, r1
 800198a:	430a      	orrs	r2, r1
 800198c:	9b03      	ldr	r3, [sp, #12]
 800198e:	1900      	adds	r0, r0, r4
 8001990:	1880      	adds	r0, r0, r2
 8001992:	18c7      	adds	r7, r0, r3
 8001994:	464b      	mov	r3, r9
 8001996:	0ddc      	lsrs	r4, r3, #23
 8001998:	9b04      	ldr	r3, [sp, #16]
 800199a:	0275      	lsls	r5, r6, #9
 800199c:	431d      	orrs	r5, r3
 800199e:	1e6a      	subs	r2, r5, #1
 80019a0:	4195      	sbcs	r5, r2
 80019a2:	464b      	mov	r3, r9
 80019a4:	0df6      	lsrs	r6, r6, #23
 80019a6:	027f      	lsls	r7, r7, #9
 80019a8:	4335      	orrs	r5, r6
 80019aa:	025a      	lsls	r2, r3, #9
 80019ac:	433c      	orrs	r4, r7
 80019ae:	4315      	orrs	r5, r2
 80019b0:	01fb      	lsls	r3, r7, #7
 80019b2:	d400      	bmi.n	80019b6 <__aeabi_dmul+0x24a>
 80019b4:	e11c      	b.n	8001bf0 <__aeabi_dmul+0x484>
 80019b6:	2101      	movs	r1, #1
 80019b8:	086a      	lsrs	r2, r5, #1
 80019ba:	400d      	ands	r5, r1
 80019bc:	4315      	orrs	r5, r2
 80019be:	07e2      	lsls	r2, r4, #31
 80019c0:	4315      	orrs	r5, r2
 80019c2:	0864      	lsrs	r4, r4, #1
 80019c4:	494f      	ldr	r1, [pc, #316]	; (8001b04 <__aeabi_dmul+0x398>)
 80019c6:	4461      	add	r1, ip
 80019c8:	2900      	cmp	r1, #0
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_dmul+0x262>
 80019cc:	e0b0      	b.n	8001b30 <__aeabi_dmul+0x3c4>
 80019ce:	076b      	lsls	r3, r5, #29
 80019d0:	d009      	beq.n	80019e6 <__aeabi_dmul+0x27a>
 80019d2:	220f      	movs	r2, #15
 80019d4:	402a      	ands	r2, r5
 80019d6:	2a04      	cmp	r2, #4
 80019d8:	d005      	beq.n	80019e6 <__aeabi_dmul+0x27a>
 80019da:	1d2a      	adds	r2, r5, #4
 80019dc:	42aa      	cmp	r2, r5
 80019de:	41ad      	sbcs	r5, r5
 80019e0:	426d      	negs	r5, r5
 80019e2:	1964      	adds	r4, r4, r5
 80019e4:	0015      	movs	r5, r2
 80019e6:	01e3      	lsls	r3, r4, #7
 80019e8:	d504      	bpl.n	80019f4 <__aeabi_dmul+0x288>
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <__aeabi_dmul+0x39c>)
 80019ee:	00c9      	lsls	r1, r1, #3
 80019f0:	4014      	ands	r4, r2
 80019f2:	4461      	add	r1, ip
 80019f4:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <__aeabi_dmul+0x3a0>)
 80019f6:	4291      	cmp	r1, r2
 80019f8:	dd00      	ble.n	80019fc <__aeabi_dmul+0x290>
 80019fa:	e726      	b.n	800184a <__aeabi_dmul+0xde>
 80019fc:	0762      	lsls	r2, r4, #29
 80019fe:	08ed      	lsrs	r5, r5, #3
 8001a00:	0264      	lsls	r4, r4, #9
 8001a02:	0549      	lsls	r1, r1, #21
 8001a04:	4315      	orrs	r5, r2
 8001a06:	0b24      	lsrs	r4, r4, #12
 8001a08:	0d4a      	lsrs	r2, r1, #21
 8001a0a:	e710      	b.n	800182e <__aeabi_dmul+0xc2>
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	4332      	orrs	r2, r6
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dmul+0x2a8>
 8001a12:	e07f      	b.n	8001b14 <__aeabi_dmul+0x3a8>
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dmul+0x2ae>
 8001a18:	e0dc      	b.n	8001bd4 <__aeabi_dmul+0x468>
 8001a1a:	0030      	movs	r0, r6
 8001a1c:	f000 fd4e 	bl	80024bc <__clzsi2>
 8001a20:	0002      	movs	r2, r0
 8001a22:	3a0b      	subs	r2, #11
 8001a24:	231d      	movs	r3, #29
 8001a26:	0001      	movs	r1, r0
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	4652      	mov	r2, sl
 8001a2c:	3908      	subs	r1, #8
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	408e      	lsls	r6, r1
 8001a32:	4316      	orrs	r6, r2
 8001a34:	4652      	mov	r2, sl
 8001a36:	408a      	lsls	r2, r1
 8001a38:	9b00      	ldr	r3, [sp, #0]
 8001a3a:	4935      	ldr	r1, [pc, #212]	; (8001b10 <__aeabi_dmul+0x3a4>)
 8001a3c:	1a18      	subs	r0, r3, r0
 8001a3e:	0003      	movs	r3, r0
 8001a40:	468c      	mov	ip, r1
 8001a42:	4463      	add	r3, ip
 8001a44:	2000      	movs	r0, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	e6d3      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001a4a:	0025      	movs	r5, r4
 8001a4c:	4305      	orrs	r5, r0
 8001a4e:	d04a      	beq.n	8001ae6 <__aeabi_dmul+0x37a>
 8001a50:	2c00      	cmp	r4, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x2ea>
 8001a54:	e0b0      	b.n	8001bb8 <__aeabi_dmul+0x44c>
 8001a56:	0020      	movs	r0, r4
 8001a58:	f000 fd30 	bl	80024bc <__clzsi2>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	0002      	movs	r2, r0
 8001a60:	390b      	subs	r1, #11
 8001a62:	231d      	movs	r3, #29
 8001a64:	0010      	movs	r0, r2
 8001a66:	1a5b      	subs	r3, r3, r1
 8001a68:	0031      	movs	r1, r6
 8001a6a:	0035      	movs	r5, r6
 8001a6c:	3808      	subs	r0, #8
 8001a6e:	4084      	lsls	r4, r0
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	4085      	lsls	r5, r0
 8001a74:	430c      	orrs	r4, r1
 8001a76:	4826      	ldr	r0, [pc, #152]	; (8001b10 <__aeabi_dmul+0x3a4>)
 8001a78:	1a83      	subs	r3, r0, r2
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	469b      	mov	fp, r3
 8001a82:	e697      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001a84:	0005      	movs	r5, r0
 8001a86:	4325      	orrs	r5, r4
 8001a88:	d126      	bne.n	8001ad8 <__aeabi_dmul+0x36c>
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	2400      	movs	r4, #0
 8001a92:	4691      	mov	r9, r2
 8001a94:	469b      	mov	fp, r3
 8001a96:	e68d      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001a98:	4652      	mov	r2, sl
 8001a9a:	9b00      	ldr	r3, [sp, #0]
 8001a9c:	4332      	orrs	r2, r6
 8001a9e:	d110      	bne.n	8001ac2 <__aeabi_dmul+0x356>
 8001aa0:	4915      	ldr	r1, [pc, #84]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	468c      	mov	ip, r1
 8001aa6:	4463      	add	r3, ip
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2302      	movs	r3, #2
 8001aae:	4319      	orrs	r1, r3
 8001ab0:	4689      	mov	r9, r1
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	e69d      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001ab6:	465b      	mov	r3, fp
 8001ab8:	9701      	str	r7, [sp, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dmul+0x354>
 8001abe:	e6ad      	b.n	800181c <__aeabi_dmul+0xb0>
 8001ac0:	e6c3      	b.n	800184a <__aeabi_dmul+0xde>
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	4694      	mov	ip, r2
 8001ac8:	4463      	add	r3, ip
 8001aca:	464a      	mov	r2, r9
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2303      	movs	r3, #3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	4691      	mov	r9, r2
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	e68c      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001ad8:	220c      	movs	r2, #12
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2303      	movs	r3, #3
 8001ade:	0005      	movs	r5, r0
 8001ae0:	4691      	mov	r9, r2
 8001ae2:	469b      	mov	fp, r3
 8001ae4:	e666      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	4699      	mov	r9, r3
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	2400      	movs	r4, #0
 8001af2:	469b      	mov	fp, r3
 8001af4:	e65e      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	000007ff 	.word	0x000007ff
 8001afc:	fffffc01 	.word	0xfffffc01
 8001b00:	08007af4 	.word	0x08007af4
 8001b04:	000003ff 	.word	0x000003ff
 8001b08:	feffffff 	.word	0xfeffffff
 8001b0c:	000007fe 	.word	0x000007fe
 8001b10:	fffffc0d 	.word	0xfffffc0d
 8001b14:	4649      	mov	r1, r9
 8001b16:	2301      	movs	r3, #1
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	2001      	movs	r0, #1
 8001b20:	e667      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2480      	movs	r4, #128	; 0x80
 8001b26:	2500      	movs	r5, #0
 8001b28:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	0324      	lsls	r4, r4, #12
 8001b2e:	e67e      	b.n	800182e <__aeabi_dmul+0xc2>
 8001b30:	2001      	movs	r0, #1
 8001b32:	1a40      	subs	r0, r0, r1
 8001b34:	2838      	cmp	r0, #56	; 0x38
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dmul+0x3ce>
 8001b38:	e676      	b.n	8001828 <__aeabi_dmul+0xbc>
 8001b3a:	281f      	cmp	r0, #31
 8001b3c:	dd5b      	ble.n	8001bf6 <__aeabi_dmul+0x48a>
 8001b3e:	221f      	movs	r2, #31
 8001b40:	0023      	movs	r3, r4
 8001b42:	4252      	negs	r2, r2
 8001b44:	1a51      	subs	r1, r2, r1
 8001b46:	40cb      	lsrs	r3, r1
 8001b48:	0019      	movs	r1, r3
 8001b4a:	2820      	cmp	r0, #32
 8001b4c:	d003      	beq.n	8001b56 <__aeabi_dmul+0x3ea>
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <__aeabi_dmul+0x4d0>)
 8001b50:	4462      	add	r2, ip
 8001b52:	4094      	lsls	r4, r2
 8001b54:	4325      	orrs	r5, r4
 8001b56:	1e6a      	subs	r2, r5, #1
 8001b58:	4195      	sbcs	r5, r2
 8001b5a:	002a      	movs	r2, r5
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	2107      	movs	r1, #7
 8001b60:	000d      	movs	r5, r1
 8001b62:	2400      	movs	r4, #0
 8001b64:	4015      	ands	r5, r2
 8001b66:	4211      	tst	r1, r2
 8001b68:	d05b      	beq.n	8001c22 <__aeabi_dmul+0x4b6>
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	4011      	ands	r1, r2
 8001b70:	2904      	cmp	r1, #4
 8001b72:	d053      	beq.n	8001c1c <__aeabi_dmul+0x4b0>
 8001b74:	1d11      	adds	r1, r2, #4
 8001b76:	4291      	cmp	r1, r2
 8001b78:	4192      	sbcs	r2, r2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	18a4      	adds	r4, r4, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	0223      	lsls	r3, r4, #8
 8001b82:	d54b      	bpl.n	8001c1c <__aeabi_dmul+0x4b0>
 8001b84:	2201      	movs	r2, #1
 8001b86:	2400      	movs	r4, #0
 8001b88:	2500      	movs	r5, #0
 8001b8a:	e650      	b.n	800182e <__aeabi_dmul+0xc2>
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	031b      	lsls	r3, r3, #12
 8001b90:	421c      	tst	r4, r3
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_dmul+0x43c>
 8001b94:	421e      	tst	r6, r3
 8001b96:	d107      	bne.n	8001ba8 <__aeabi_dmul+0x43c>
 8001b98:	4333      	orrs	r3, r6
 8001b9a:	031c      	lsls	r4, r3, #12
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	0b24      	lsrs	r4, r4, #12
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	e642      	b.n	800182e <__aeabi_dmul+0xc2>
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0312      	lsls	r2, r2, #12
 8001bac:	4314      	orrs	r4, r2
 8001bae:	0324      	lsls	r4, r4, #12
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	9701      	str	r7, [sp, #4]
 8001bb6:	e63a      	b.n	800182e <__aeabi_dmul+0xc2>
 8001bb8:	f000 fc80 	bl	80024bc <__clzsi2>
 8001bbc:	0001      	movs	r1, r0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	3115      	adds	r1, #21
 8001bc2:	3220      	adds	r2, #32
 8001bc4:	291c      	cmp	r1, #28
 8001bc6:	dc00      	bgt.n	8001bca <__aeabi_dmul+0x45e>
 8001bc8:	e74b      	b.n	8001a62 <__aeabi_dmul+0x2f6>
 8001bca:	0034      	movs	r4, r6
 8001bcc:	3808      	subs	r0, #8
 8001bce:	2500      	movs	r5, #0
 8001bd0:	4084      	lsls	r4, r0
 8001bd2:	e750      	b.n	8001a76 <__aeabi_dmul+0x30a>
 8001bd4:	f000 fc72 	bl	80024bc <__clzsi2>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	001a      	movs	r2, r3
 8001bdc:	3215      	adds	r2, #21
 8001bde:	3020      	adds	r0, #32
 8001be0:	2a1c      	cmp	r2, #28
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x47a>
 8001be4:	e71e      	b.n	8001a24 <__aeabi_dmul+0x2b8>
 8001be6:	4656      	mov	r6, sl
 8001be8:	3b08      	subs	r3, #8
 8001bea:	2200      	movs	r2, #0
 8001bec:	409e      	lsls	r6, r3
 8001bee:	e723      	b.n	8001a38 <__aeabi_dmul+0x2cc>
 8001bf0:	9b00      	ldr	r3, [sp, #0]
 8001bf2:	469c      	mov	ip, r3
 8001bf4:	e6e6      	b.n	80019c4 <__aeabi_dmul+0x258>
 8001bf6:	4912      	ldr	r1, [pc, #72]	; (8001c40 <__aeabi_dmul+0x4d4>)
 8001bf8:	0022      	movs	r2, r4
 8001bfa:	4461      	add	r1, ip
 8001bfc:	002e      	movs	r6, r5
 8001bfe:	408d      	lsls	r5, r1
 8001c00:	408a      	lsls	r2, r1
 8001c02:	40c6      	lsrs	r6, r0
 8001c04:	1e69      	subs	r1, r5, #1
 8001c06:	418d      	sbcs	r5, r1
 8001c08:	4332      	orrs	r2, r6
 8001c0a:	432a      	orrs	r2, r5
 8001c0c:	40c4      	lsrs	r4, r0
 8001c0e:	0753      	lsls	r3, r2, #29
 8001c10:	d0b6      	beq.n	8001b80 <__aeabi_dmul+0x414>
 8001c12:	210f      	movs	r1, #15
 8001c14:	4011      	ands	r1, r2
 8001c16:	2904      	cmp	r1, #4
 8001c18:	d1ac      	bne.n	8001b74 <__aeabi_dmul+0x408>
 8001c1a:	e7b1      	b.n	8001b80 <__aeabi_dmul+0x414>
 8001c1c:	0765      	lsls	r5, r4, #29
 8001c1e:	0264      	lsls	r4, r4, #9
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	08d2      	lsrs	r2, r2, #3
 8001c24:	4315      	orrs	r5, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	e601      	b.n	800182e <__aeabi_dmul+0xc2>
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0312      	lsls	r2, r2, #12
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	4a01      	ldr	r2, [pc, #4]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001c34:	0b24      	lsrs	r4, r4, #12
 8001c36:	e5fa      	b.n	800182e <__aeabi_dmul+0xc2>
 8001c38:	000007ff 	.word	0x000007ff
 8001c3c:	0000043e 	.word	0x0000043e
 8001c40:	0000041e 	.word	0x0000041e

08001c44 <__aeabi_dsub>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	4657      	mov	r7, sl
 8001c48:	464e      	mov	r6, r9
 8001c4a:	4645      	mov	r5, r8
 8001c4c:	46de      	mov	lr, fp
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	001e      	movs	r6, r3
 8001c52:	0017      	movs	r7, r2
 8001c54:	004a      	lsls	r2, r1, #1
 8001c56:	030b      	lsls	r3, r1, #12
 8001c58:	0d52      	lsrs	r2, r2, #21
 8001c5a:	0a5b      	lsrs	r3, r3, #9
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	0f42      	lsrs	r2, r0, #29
 8001c60:	431a      	orrs	r2, r3
 8001c62:	0fcd      	lsrs	r5, r1, #31
 8001c64:	4ccd      	ldr	r4, [pc, #820]	; (8001f9c <__aeabi_dsub+0x358>)
 8001c66:	0331      	lsls	r1, r6, #12
 8001c68:	00c3      	lsls	r3, r0, #3
 8001c6a:	4694      	mov	ip, r2
 8001c6c:	0070      	lsls	r0, r6, #1
 8001c6e:	0f7a      	lsrs	r2, r7, #29
 8001c70:	0a49      	lsrs	r1, r1, #9
 8001c72:	00ff      	lsls	r7, r7, #3
 8001c74:	469a      	mov	sl, r3
 8001c76:	46b9      	mov	r9, r7
 8001c78:	0d40      	lsrs	r0, r0, #21
 8001c7a:	0ff6      	lsrs	r6, r6, #31
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	42a0      	cmp	r0, r4
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x40>
 8001c82:	e0b1      	b.n	8001de8 <__aeabi_dsub+0x1a4>
 8001c84:	2201      	movs	r2, #1
 8001c86:	4056      	eors	r6, r2
 8001c88:	46b3      	mov	fp, r6
 8001c8a:	42b5      	cmp	r5, r6
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x4c>
 8001c8e:	e088      	b.n	8001da2 <__aeabi_dsub+0x15e>
 8001c90:	4642      	mov	r2, r8
 8001c92:	1a12      	subs	r2, r2, r0
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dsub+0x56>
 8001c98:	e0ae      	b.n	8001df8 <__aeabi_dsub+0x1b4>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x5c>
 8001c9e:	e0c1      	b.n	8001e24 <__aeabi_dsub+0x1e0>
 8001ca0:	48be      	ldr	r0, [pc, #760]	; (8001f9c <__aeabi_dsub+0x358>)
 8001ca2:	4580      	cmp	r8, r0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x64>
 8001ca6:	e151      	b.n	8001f4c <__aeabi_dsub+0x308>
 8001ca8:	2080      	movs	r0, #128	; 0x80
 8001caa:	0400      	lsls	r0, r0, #16
 8001cac:	4301      	orrs	r1, r0
 8001cae:	2a38      	cmp	r2, #56	; 0x38
 8001cb0:	dd00      	ble.n	8001cb4 <__aeabi_dsub+0x70>
 8001cb2:	e17b      	b.n	8001fac <__aeabi_dsub+0x368>
 8001cb4:	2a1f      	cmp	r2, #31
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x76>
 8001cb8:	e1ee      	b.n	8002098 <__aeabi_dsub+0x454>
 8001cba:	2020      	movs	r0, #32
 8001cbc:	003e      	movs	r6, r7
 8001cbe:	1a80      	subs	r0, r0, r2
 8001cc0:	000c      	movs	r4, r1
 8001cc2:	40d6      	lsrs	r6, r2
 8001cc4:	40d1      	lsrs	r1, r2
 8001cc6:	4087      	lsls	r7, r0
 8001cc8:	4662      	mov	r2, ip
 8001cca:	4084      	lsls	r4, r0
 8001ccc:	1a52      	subs	r2, r2, r1
 8001cce:	1e78      	subs	r0, r7, #1
 8001cd0:	4187      	sbcs	r7, r0
 8001cd2:	4694      	mov	ip, r2
 8001cd4:	4334      	orrs	r4, r6
 8001cd6:	4327      	orrs	r7, r4
 8001cd8:	1bdc      	subs	r4, r3, r7
 8001cda:	42a3      	cmp	r3, r4
 8001cdc:	419b      	sbcs	r3, r3
 8001cde:	4662      	mov	r2, ip
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	d400      	bmi.n	8001cee <__aeabi_dsub+0xaa>
 8001cec:	e118      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	0258      	lsls	r0, r3, #9
 8001cf2:	0a43      	lsrs	r3, r0, #9
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0xba>
 8001cfc:	e137      	b.n	8001f6e <__aeabi_dsub+0x32a>
 8001cfe:	4648      	mov	r0, r9
 8001d00:	f000 fbdc 	bl	80024bc <__clzsi2>
 8001d04:	0001      	movs	r1, r0
 8001d06:	3908      	subs	r1, #8
 8001d08:	2320      	movs	r3, #32
 8001d0a:	0022      	movs	r2, r4
 8001d0c:	4648      	mov	r0, r9
 8001d0e:	1a5b      	subs	r3, r3, r1
 8001d10:	40da      	lsrs	r2, r3
 8001d12:	4088      	lsls	r0, r1
 8001d14:	408c      	lsls	r4, r1
 8001d16:	4643      	mov	r3, r8
 8001d18:	4310      	orrs	r0, r2
 8001d1a:	4588      	cmp	r8, r1
 8001d1c:	dd00      	ble.n	8001d20 <__aeabi_dsub+0xdc>
 8001d1e:	e136      	b.n	8001f8e <__aeabi_dsub+0x34a>
 8001d20:	1ac9      	subs	r1, r1, r3
 8001d22:	1c4b      	adds	r3, r1, #1
 8001d24:	2b1f      	cmp	r3, #31
 8001d26:	dd00      	ble.n	8001d2a <__aeabi_dsub+0xe6>
 8001d28:	e0ea      	b.n	8001f00 <__aeabi_dsub+0x2bc>
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	0026      	movs	r6, r4
 8001d2e:	1ad2      	subs	r2, r2, r3
 8001d30:	0001      	movs	r1, r0
 8001d32:	4094      	lsls	r4, r2
 8001d34:	40de      	lsrs	r6, r3
 8001d36:	40d8      	lsrs	r0, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4091      	lsls	r1, r2
 8001d3c:	1e62      	subs	r2, r4, #1
 8001d3e:	4194      	sbcs	r4, r2
 8001d40:	4681      	mov	r9, r0
 8001d42:	4698      	mov	r8, r3
 8001d44:	4331      	orrs	r1, r6
 8001d46:	430c      	orrs	r4, r1
 8001d48:	0763      	lsls	r3, r4, #29
 8001d4a:	d009      	beq.n	8001d60 <__aeabi_dsub+0x11c>
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	4023      	ands	r3, r4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d005      	beq.n	8001d60 <__aeabi_dsub+0x11c>
 8001d54:	1d23      	adds	r3, r4, #4
 8001d56:	42a3      	cmp	r3, r4
 8001d58:	41a4      	sbcs	r4, r4
 8001d5a:	4264      	negs	r4, r4
 8001d5c:	44a1      	add	r9, r4
 8001d5e:	001c      	movs	r4, r3
 8001d60:	464b      	mov	r3, r9
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	d400      	bmi.n	8001d68 <__aeabi_dsub+0x124>
 8001d66:	e0de      	b.n	8001f26 <__aeabi_dsub+0x2e2>
 8001d68:	4641      	mov	r1, r8
 8001d6a:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <__aeabi_dsub+0x358>)
 8001d6c:	3101      	adds	r1, #1
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x130>
 8001d72:	e0e7      	b.n	8001f44 <__aeabi_dsub+0x300>
 8001d74:	464b      	mov	r3, r9
 8001d76:	488a      	ldr	r0, [pc, #552]	; (8001fa0 <__aeabi_dsub+0x35c>)
 8001d78:	08e4      	lsrs	r4, r4, #3
 8001d7a:	4003      	ands	r3, r0
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	0549      	lsls	r1, r1, #21
 8001d80:	075b      	lsls	r3, r3, #29
 8001d82:	0240      	lsls	r0, r0, #9
 8001d84:	4323      	orrs	r3, r4
 8001d86:	0d4a      	lsrs	r2, r1, #21
 8001d88:	0b04      	lsrs	r4, r0, #12
 8001d8a:	0512      	lsls	r2, r2, #20
 8001d8c:	07ed      	lsls	r5, r5, #31
 8001d8e:	4322      	orrs	r2, r4
 8001d90:	432a      	orrs	r2, r5
 8001d92:	0018      	movs	r0, r3
 8001d94:	0011      	movs	r1, r2
 8001d96:	bcf0      	pop	{r4, r5, r6, r7}
 8001d98:	46bb      	mov	fp, r7
 8001d9a:	46b2      	mov	sl, r6
 8001d9c:	46a9      	mov	r9, r5
 8001d9e:	46a0      	mov	r8, r4
 8001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da2:	4642      	mov	r2, r8
 8001da4:	1a12      	subs	r2, r2, r0
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	dd52      	ble.n	8001e50 <__aeabi_dsub+0x20c>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x16c>
 8001dae:	e09c      	b.n	8001eea <__aeabi_dsub+0x2a6>
 8001db0:	45a0      	cmp	r8, r4
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x172>
 8001db4:	e0ca      	b.n	8001f4c <__aeabi_dsub+0x308>
 8001db6:	2080      	movs	r0, #128	; 0x80
 8001db8:	0400      	lsls	r0, r0, #16
 8001dba:	4301      	orrs	r1, r0
 8001dbc:	2a38      	cmp	r2, #56	; 0x38
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x17e>
 8001dc0:	e149      	b.n	8002056 <__aeabi_dsub+0x412>
 8001dc2:	2a1f      	cmp	r2, #31
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_dsub+0x184>
 8001dc6:	e197      	b.n	80020f8 <__aeabi_dsub+0x4b4>
 8001dc8:	0010      	movs	r0, r2
 8001dca:	000e      	movs	r6, r1
 8001dcc:	3820      	subs	r0, #32
 8001dce:	40c6      	lsrs	r6, r0
 8001dd0:	2a20      	cmp	r2, #32
 8001dd2:	d004      	beq.n	8001dde <__aeabi_dsub+0x19a>
 8001dd4:	2040      	movs	r0, #64	; 0x40
 8001dd6:	1a82      	subs	r2, r0, r2
 8001dd8:	4091      	lsls	r1, r2
 8001dda:	430f      	orrs	r7, r1
 8001ddc:	46b9      	mov	r9, r7
 8001dde:	464c      	mov	r4, r9
 8001de0:	1e62      	subs	r2, r4, #1
 8001de2:	4194      	sbcs	r4, r2
 8001de4:	4334      	orrs	r4, r6
 8001de6:	e13a      	b.n	800205e <__aeabi_dsub+0x41a>
 8001de8:	000a      	movs	r2, r1
 8001dea:	433a      	orrs	r2, r7
 8001dec:	d028      	beq.n	8001e40 <__aeabi_dsub+0x1fc>
 8001dee:	46b3      	mov	fp, r6
 8001df0:	42b5      	cmp	r5, r6
 8001df2:	d02b      	beq.n	8001e4c <__aeabi_dsub+0x208>
 8001df4:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <__aeabi_dsub+0x360>)
 8001df6:	4442      	add	r2, r8
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d05d      	beq.n	8001eb8 <__aeabi_dsub+0x274>
 8001dfc:	4642      	mov	r2, r8
 8001dfe:	4644      	mov	r4, r8
 8001e00:	1a82      	subs	r2, r0, r2
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x1c4>
 8001e06:	e0f5      	b.n	8001ff4 <__aeabi_dsub+0x3b0>
 8001e08:	4665      	mov	r5, ip
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x1cc>
 8001e0e:	e19c      	b.n	800214a <__aeabi_dsub+0x506>
 8001e10:	1e55      	subs	r5, r2, #1
 8001e12:	2a01      	cmp	r2, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x1d4>
 8001e16:	e1fb      	b.n	8002210 <__aeabi_dsub+0x5cc>
 8001e18:	4c60      	ldr	r4, [pc, #384]	; (8001f9c <__aeabi_dsub+0x358>)
 8001e1a:	42a2      	cmp	r2, r4
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x1dc>
 8001e1e:	e1bd      	b.n	800219c <__aeabi_dsub+0x558>
 8001e20:	002a      	movs	r2, r5
 8001e22:	e0f0      	b.n	8002006 <__aeabi_dsub+0x3c2>
 8001e24:	0008      	movs	r0, r1
 8001e26:	4338      	orrs	r0, r7
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x1e8>
 8001e2a:	e0c3      	b.n	8001fb4 <__aeabi_dsub+0x370>
 8001e2c:	1e50      	subs	r0, r2, #1
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x1f0>
 8001e32:	e1a8      	b.n	8002186 <__aeabi_dsub+0x542>
 8001e34:	4c59      	ldr	r4, [pc, #356]	; (8001f9c <__aeabi_dsub+0x358>)
 8001e36:	42a2      	cmp	r2, r4
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x1f8>
 8001e3a:	e087      	b.n	8001f4c <__aeabi_dsub+0x308>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	e736      	b.n	8001cae <__aeabi_dsub+0x6a>
 8001e40:	2201      	movs	r2, #1
 8001e42:	4056      	eors	r6, r2
 8001e44:	46b3      	mov	fp, r6
 8001e46:	42b5      	cmp	r5, r6
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x208>
 8001e4a:	e721      	b.n	8001c90 <__aeabi_dsub+0x4c>
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <__aeabi_dsub+0x360>)
 8001e4e:	4442      	add	r2, r8
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x212>
 8001e54:	e0b5      	b.n	8001fc2 <__aeabi_dsub+0x37e>
 8001e56:	4642      	mov	r2, r8
 8001e58:	4644      	mov	r4, r8
 8001e5a:	1a82      	subs	r2, r0, r2
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x21e>
 8001e60:	e138      	b.n	80020d4 <__aeabi_dsub+0x490>
 8001e62:	4e4e      	ldr	r6, [pc, #312]	; (8001f9c <__aeabi_dsub+0x358>)
 8001e64:	42b0      	cmp	r0, r6
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x226>
 8001e68:	e1de      	b.n	8002228 <__aeabi_dsub+0x5e4>
 8001e6a:	2680      	movs	r6, #128	; 0x80
 8001e6c:	4664      	mov	r4, ip
 8001e6e:	0436      	lsls	r6, r6, #16
 8001e70:	4334      	orrs	r4, r6
 8001e72:	46a4      	mov	ip, r4
 8001e74:	2a38      	cmp	r2, #56	; 0x38
 8001e76:	dd00      	ble.n	8001e7a <__aeabi_dsub+0x236>
 8001e78:	e196      	b.n	80021a8 <__aeabi_dsub+0x564>
 8001e7a:	2a1f      	cmp	r2, #31
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dsub+0x23c>
 8001e7e:	e224      	b.n	80022ca <__aeabi_dsub+0x686>
 8001e80:	2620      	movs	r6, #32
 8001e82:	1ab4      	subs	r4, r6, r2
 8001e84:	46a2      	mov	sl, r4
 8001e86:	4664      	mov	r4, ip
 8001e88:	4656      	mov	r6, sl
 8001e8a:	40b4      	lsls	r4, r6
 8001e8c:	46a1      	mov	r9, r4
 8001e8e:	001c      	movs	r4, r3
 8001e90:	464e      	mov	r6, r9
 8001e92:	40d4      	lsrs	r4, r2
 8001e94:	4326      	orrs	r6, r4
 8001e96:	0034      	movs	r4, r6
 8001e98:	4656      	mov	r6, sl
 8001e9a:	40b3      	lsls	r3, r6
 8001e9c:	1e5e      	subs	r6, r3, #1
 8001e9e:	41b3      	sbcs	r3, r6
 8001ea0:	431c      	orrs	r4, r3
 8001ea2:	4663      	mov	r3, ip
 8001ea4:	40d3      	lsrs	r3, r2
 8001ea6:	18c9      	adds	r1, r1, r3
 8001ea8:	19e4      	adds	r4, r4, r7
 8001eaa:	42bc      	cmp	r4, r7
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	427f      	negs	r7, r7
 8001eb0:	46b9      	mov	r9, r7
 8001eb2:	4680      	mov	r8, r0
 8001eb4:	4489      	add	r9, r1
 8001eb6:	e0d8      	b.n	800206a <__aeabi_dsub+0x426>
 8001eb8:	4640      	mov	r0, r8
 8001eba:	4c3b      	ldr	r4, [pc, #236]	; (8001fa8 <__aeabi_dsub+0x364>)
 8001ebc:	3001      	adds	r0, #1
 8001ebe:	4220      	tst	r0, r4
 8001ec0:	d000      	beq.n	8001ec4 <__aeabi_dsub+0x280>
 8001ec2:	e0b4      	b.n	800202e <__aeabi_dsub+0x3ea>
 8001ec4:	4640      	mov	r0, r8
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dsub+0x288>
 8001eca:	e144      	b.n	8002156 <__aeabi_dsub+0x512>
 8001ecc:	4660      	mov	r0, ip
 8001ece:	4318      	orrs	r0, r3
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x290>
 8001ed2:	e190      	b.n	80021f6 <__aeabi_dsub+0x5b2>
 8001ed4:	0008      	movs	r0, r1
 8001ed6:	4338      	orrs	r0, r7
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dsub+0x298>
 8001eda:	e1aa      	b.n	8002232 <__aeabi_dsub+0x5ee>
 8001edc:	4661      	mov	r1, ip
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	0749      	lsls	r1, r1, #29
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	4661      	mov	r1, ip
 8001ee6:	08cc      	lsrs	r4, r1, #3
 8001ee8:	e027      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 8001eea:	0008      	movs	r0, r1
 8001eec:	4338      	orrs	r0, r7
 8001eee:	d061      	beq.n	8001fb4 <__aeabi_dsub+0x370>
 8001ef0:	1e50      	subs	r0, r2, #1
 8001ef2:	2a01      	cmp	r2, #1
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x2b4>
 8001ef6:	e139      	b.n	800216c <__aeabi_dsub+0x528>
 8001ef8:	42a2      	cmp	r2, r4
 8001efa:	d027      	beq.n	8001f4c <__aeabi_dsub+0x308>
 8001efc:	0002      	movs	r2, r0
 8001efe:	e75d      	b.n	8001dbc <__aeabi_dsub+0x178>
 8001f00:	0002      	movs	r2, r0
 8001f02:	391f      	subs	r1, #31
 8001f04:	40ca      	lsrs	r2, r1
 8001f06:	0011      	movs	r1, r2
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d003      	beq.n	8001f14 <__aeabi_dsub+0x2d0>
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4098      	lsls	r0, r3
 8001f12:	4304      	orrs	r4, r0
 8001f14:	1e63      	subs	r3, r4, #1
 8001f16:	419c      	sbcs	r4, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4698      	mov	r8, r3
 8001f1e:	430c      	orrs	r4, r1
 8001f20:	0763      	lsls	r3, r4, #29
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x2e2>
 8001f24:	e712      	b.n	8001d4c <__aeabi_dsub+0x108>
 8001f26:	464b      	mov	r3, r9
 8001f28:	464a      	mov	r2, r9
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	075b      	lsls	r3, r3, #29
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	08d4      	lsrs	r4, r2, #3
 8001f32:	4642      	mov	r2, r8
 8001f34:	4919      	ldr	r1, [pc, #100]	; (8001f9c <__aeabi_dsub+0x358>)
 8001f36:	428a      	cmp	r2, r1
 8001f38:	d00e      	beq.n	8001f58 <__aeabi_dsub+0x314>
 8001f3a:	0324      	lsls	r4, r4, #12
 8001f3c:	0552      	lsls	r2, r2, #21
 8001f3e:	0b24      	lsrs	r4, r4, #12
 8001f40:	0d52      	lsrs	r2, r2, #21
 8001f42:	e722      	b.n	8001d8a <__aeabi_dsub+0x146>
 8001f44:	000a      	movs	r2, r1
 8001f46:	2400      	movs	r4, #0
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e71e      	b.n	8001d8a <__aeabi_dsub+0x146>
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4662      	mov	r2, ip
 8001f50:	0752      	lsls	r2, r2, #29
 8001f52:	4313      	orrs	r3, r2
 8001f54:	4662      	mov	r2, ip
 8001f56:	08d4      	lsrs	r4, r2, #3
 8001f58:	001a      	movs	r2, r3
 8001f5a:	4322      	orrs	r2, r4
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x31c>
 8001f5e:	e1fc      	b.n	800235a <__aeabi_dsub+0x716>
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	0312      	lsls	r2, r2, #12
 8001f64:	4314      	orrs	r4, r2
 8001f66:	0324      	lsls	r4, r4, #12
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <__aeabi_dsub+0x358>)
 8001f6a:	0b24      	lsrs	r4, r4, #12
 8001f6c:	e70d      	b.n	8001d8a <__aeabi_dsub+0x146>
 8001f6e:	0020      	movs	r0, r4
 8001f70:	f000 faa4 	bl	80024bc <__clzsi2>
 8001f74:	0001      	movs	r1, r0
 8001f76:	3118      	adds	r1, #24
 8001f78:	291f      	cmp	r1, #31
 8001f7a:	dc00      	bgt.n	8001f7e <__aeabi_dsub+0x33a>
 8001f7c:	e6c4      	b.n	8001d08 <__aeabi_dsub+0xc4>
 8001f7e:	3808      	subs	r0, #8
 8001f80:	4084      	lsls	r4, r0
 8001f82:	4643      	mov	r3, r8
 8001f84:	0020      	movs	r0, r4
 8001f86:	2400      	movs	r4, #0
 8001f88:	4588      	cmp	r8, r1
 8001f8a:	dc00      	bgt.n	8001f8e <__aeabi_dsub+0x34a>
 8001f8c:	e6c8      	b.n	8001d20 <__aeabi_dsub+0xdc>
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__aeabi_dsub+0x35c>)
 8001f90:	1a5b      	subs	r3, r3, r1
 8001f92:	4010      	ands	r0, r2
 8001f94:	4698      	mov	r8, r3
 8001f96:	4681      	mov	r9, r0
 8001f98:	e6d6      	b.n	8001d48 <__aeabi_dsub+0x104>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	000007ff 	.word	0x000007ff
 8001fa0:	ff7fffff 	.word	0xff7fffff
 8001fa4:	fffff801 	.word	0xfffff801
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	430f      	orrs	r7, r1
 8001fae:	1e7a      	subs	r2, r7, #1
 8001fb0:	4197      	sbcs	r7, r2
 8001fb2:	e691      	b.n	8001cd8 <__aeabi_dsub+0x94>
 8001fb4:	4661      	mov	r1, ip
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	0749      	lsls	r1, r1, #29
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	4661      	mov	r1, ip
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e7b8      	b.n	8001f34 <__aeabi_dsub+0x2f0>
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	4cd3      	ldr	r4, [pc, #844]	; (8002314 <__aeabi_dsub+0x6d0>)
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	4220      	tst	r0, r4
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x38a>
 8001fcc:	e0a2      	b.n	8002114 <__aeabi_dsub+0x4d0>
 8001fce:	4640      	mov	r0, r8
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x392>
 8001fd4:	e101      	b.n	80021da <__aeabi_dsub+0x596>
 8001fd6:	4660      	mov	r0, ip
 8001fd8:	4318      	orrs	r0, r3
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x39a>
 8001fdc:	e15e      	b.n	800229c <__aeabi_dsub+0x658>
 8001fde:	0008      	movs	r0, r1
 8001fe0:	4338      	orrs	r0, r7
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_dsub+0x3a2>
 8001fe4:	e15f      	b.n	80022a6 <__aeabi_dsub+0x662>
 8001fe6:	4661      	mov	r1, ip
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	0749      	lsls	r1, r1, #29
 8001fec:	430b      	orrs	r3, r1
 8001fee:	4661      	mov	r1, ip
 8001ff0:	08cc      	lsrs	r4, r1, #3
 8001ff2:	e7a2      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 8001ff4:	4dc8      	ldr	r5, [pc, #800]	; (8002318 <__aeabi_dsub+0x6d4>)
 8001ff6:	42a8      	cmp	r0, r5
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x3b8>
 8001ffa:	e0cf      	b.n	800219c <__aeabi_dsub+0x558>
 8001ffc:	2580      	movs	r5, #128	; 0x80
 8001ffe:	4664      	mov	r4, ip
 8002000:	042d      	lsls	r5, r5, #16
 8002002:	432c      	orrs	r4, r5
 8002004:	46a4      	mov	ip, r4
 8002006:	2a38      	cmp	r2, #56	; 0x38
 8002008:	dc56      	bgt.n	80020b8 <__aeabi_dsub+0x474>
 800200a:	2a1f      	cmp	r2, #31
 800200c:	dd00      	ble.n	8002010 <__aeabi_dsub+0x3cc>
 800200e:	e0d1      	b.n	80021b4 <__aeabi_dsub+0x570>
 8002010:	2520      	movs	r5, #32
 8002012:	001e      	movs	r6, r3
 8002014:	1aad      	subs	r5, r5, r2
 8002016:	4664      	mov	r4, ip
 8002018:	40ab      	lsls	r3, r5
 800201a:	40ac      	lsls	r4, r5
 800201c:	40d6      	lsrs	r6, r2
 800201e:	1e5d      	subs	r5, r3, #1
 8002020:	41ab      	sbcs	r3, r5
 8002022:	4334      	orrs	r4, r6
 8002024:	4323      	orrs	r3, r4
 8002026:	4664      	mov	r4, ip
 8002028:	40d4      	lsrs	r4, r2
 800202a:	1b09      	subs	r1, r1, r4
 800202c:	e049      	b.n	80020c2 <__aeabi_dsub+0x47e>
 800202e:	4660      	mov	r0, ip
 8002030:	1bdc      	subs	r4, r3, r7
 8002032:	1a46      	subs	r6, r0, r1
 8002034:	42a3      	cmp	r3, r4
 8002036:	4180      	sbcs	r0, r0
 8002038:	4240      	negs	r0, r0
 800203a:	4681      	mov	r9, r0
 800203c:	0030      	movs	r0, r6
 800203e:	464e      	mov	r6, r9
 8002040:	1b80      	subs	r0, r0, r6
 8002042:	4681      	mov	r9, r0
 8002044:	0200      	lsls	r0, r0, #8
 8002046:	d476      	bmi.n	8002136 <__aeabi_dsub+0x4f2>
 8002048:	464b      	mov	r3, r9
 800204a:	4323      	orrs	r3, r4
 800204c:	d000      	beq.n	8002050 <__aeabi_dsub+0x40c>
 800204e:	e652      	b.n	8001cf6 <__aeabi_dsub+0xb2>
 8002050:	2400      	movs	r4, #0
 8002052:	2500      	movs	r5, #0
 8002054:	e771      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 8002056:	4339      	orrs	r1, r7
 8002058:	000c      	movs	r4, r1
 800205a:	1e62      	subs	r2, r4, #1
 800205c:	4194      	sbcs	r4, r2
 800205e:	18e4      	adds	r4, r4, r3
 8002060:	429c      	cmp	r4, r3
 8002062:	419b      	sbcs	r3, r3
 8002064:	425b      	negs	r3, r3
 8002066:	4463      	add	r3, ip
 8002068:	4699      	mov	r9, r3
 800206a:	464b      	mov	r3, r9
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	d400      	bmi.n	8002072 <__aeabi_dsub+0x42e>
 8002070:	e756      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002072:	2301      	movs	r3, #1
 8002074:	469c      	mov	ip, r3
 8002076:	4ba8      	ldr	r3, [pc, #672]	; (8002318 <__aeabi_dsub+0x6d4>)
 8002078:	44e0      	add	r8, ip
 800207a:	4598      	cmp	r8, r3
 800207c:	d038      	beq.n	80020f0 <__aeabi_dsub+0x4ac>
 800207e:	464b      	mov	r3, r9
 8002080:	48a6      	ldr	r0, [pc, #664]	; (800231c <__aeabi_dsub+0x6d8>)
 8002082:	2201      	movs	r2, #1
 8002084:	4003      	ands	r3, r0
 8002086:	0018      	movs	r0, r3
 8002088:	0863      	lsrs	r3, r4, #1
 800208a:	4014      	ands	r4, r2
 800208c:	431c      	orrs	r4, r3
 800208e:	07c3      	lsls	r3, r0, #31
 8002090:	431c      	orrs	r4, r3
 8002092:	0843      	lsrs	r3, r0, #1
 8002094:	4699      	mov	r9, r3
 8002096:	e657      	b.n	8001d48 <__aeabi_dsub+0x104>
 8002098:	0010      	movs	r0, r2
 800209a:	000e      	movs	r6, r1
 800209c:	3820      	subs	r0, #32
 800209e:	40c6      	lsrs	r6, r0
 80020a0:	2a20      	cmp	r2, #32
 80020a2:	d004      	beq.n	80020ae <__aeabi_dsub+0x46a>
 80020a4:	2040      	movs	r0, #64	; 0x40
 80020a6:	1a82      	subs	r2, r0, r2
 80020a8:	4091      	lsls	r1, r2
 80020aa:	430f      	orrs	r7, r1
 80020ac:	46b9      	mov	r9, r7
 80020ae:	464f      	mov	r7, r9
 80020b0:	1e7a      	subs	r2, r7, #1
 80020b2:	4197      	sbcs	r7, r2
 80020b4:	4337      	orrs	r7, r6
 80020b6:	e60f      	b.n	8001cd8 <__aeabi_dsub+0x94>
 80020b8:	4662      	mov	r2, ip
 80020ba:	431a      	orrs	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	4193      	sbcs	r3, r2
 80020c2:	1afc      	subs	r4, r7, r3
 80020c4:	42a7      	cmp	r7, r4
 80020c6:	41bf      	sbcs	r7, r7
 80020c8:	427f      	negs	r7, r7
 80020ca:	1bcb      	subs	r3, r1, r7
 80020cc:	4699      	mov	r9, r3
 80020ce:	465d      	mov	r5, fp
 80020d0:	4680      	mov	r8, r0
 80020d2:	e608      	b.n	8001ce6 <__aeabi_dsub+0xa2>
 80020d4:	4666      	mov	r6, ip
 80020d6:	431e      	orrs	r6, r3
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x498>
 80020da:	e0be      	b.n	800225a <__aeabi_dsub+0x616>
 80020dc:	1e56      	subs	r6, r2, #1
 80020de:	2a01      	cmp	r2, #1
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x4a0>
 80020e2:	e109      	b.n	80022f8 <__aeabi_dsub+0x6b4>
 80020e4:	4c8c      	ldr	r4, [pc, #560]	; (8002318 <__aeabi_dsub+0x6d4>)
 80020e6:	42a2      	cmp	r2, r4
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x4a8>
 80020ea:	e119      	b.n	8002320 <__aeabi_dsub+0x6dc>
 80020ec:	0032      	movs	r2, r6
 80020ee:	e6c1      	b.n	8001e74 <__aeabi_dsub+0x230>
 80020f0:	4642      	mov	r2, r8
 80020f2:	2400      	movs	r4, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	e648      	b.n	8001d8a <__aeabi_dsub+0x146>
 80020f8:	2020      	movs	r0, #32
 80020fa:	000c      	movs	r4, r1
 80020fc:	1a80      	subs	r0, r0, r2
 80020fe:	003e      	movs	r6, r7
 8002100:	4087      	lsls	r7, r0
 8002102:	4084      	lsls	r4, r0
 8002104:	40d6      	lsrs	r6, r2
 8002106:	1e78      	subs	r0, r7, #1
 8002108:	4187      	sbcs	r7, r0
 800210a:	40d1      	lsrs	r1, r2
 800210c:	4334      	orrs	r4, r6
 800210e:	433c      	orrs	r4, r7
 8002110:	448c      	add	ip, r1
 8002112:	e7a4      	b.n	800205e <__aeabi_dsub+0x41a>
 8002114:	4a80      	ldr	r2, [pc, #512]	; (8002318 <__aeabi_dsub+0x6d4>)
 8002116:	4290      	cmp	r0, r2
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x4d8>
 800211a:	e0e9      	b.n	80022f0 <__aeabi_dsub+0x6ac>
 800211c:	19df      	adds	r7, r3, r7
 800211e:	429f      	cmp	r7, r3
 8002120:	419b      	sbcs	r3, r3
 8002122:	4461      	add	r1, ip
 8002124:	425b      	negs	r3, r3
 8002126:	18c9      	adds	r1, r1, r3
 8002128:	07cc      	lsls	r4, r1, #31
 800212a:	087f      	lsrs	r7, r7, #1
 800212c:	084b      	lsrs	r3, r1, #1
 800212e:	4699      	mov	r9, r3
 8002130:	4680      	mov	r8, r0
 8002132:	433c      	orrs	r4, r7
 8002134:	e6f4      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002136:	1afc      	subs	r4, r7, r3
 8002138:	42a7      	cmp	r7, r4
 800213a:	41bf      	sbcs	r7, r7
 800213c:	4663      	mov	r3, ip
 800213e:	427f      	negs	r7, r7
 8002140:	1ac9      	subs	r1, r1, r3
 8002142:	1bcb      	subs	r3, r1, r7
 8002144:	4699      	mov	r9, r3
 8002146:	465d      	mov	r5, fp
 8002148:	e5d5      	b.n	8001cf6 <__aeabi_dsub+0xb2>
 800214a:	08ff      	lsrs	r7, r7, #3
 800214c:	074b      	lsls	r3, r1, #29
 800214e:	465d      	mov	r5, fp
 8002150:	433b      	orrs	r3, r7
 8002152:	08cc      	lsrs	r4, r1, #3
 8002154:	e6ee      	b.n	8001f34 <__aeabi_dsub+0x2f0>
 8002156:	4662      	mov	r2, ip
 8002158:	431a      	orrs	r2, r3
 800215a:	d000      	beq.n	800215e <__aeabi_dsub+0x51a>
 800215c:	e082      	b.n	8002264 <__aeabi_dsub+0x620>
 800215e:	000b      	movs	r3, r1
 8002160:	433b      	orrs	r3, r7
 8002162:	d11b      	bne.n	800219c <__aeabi_dsub+0x558>
 8002164:	2480      	movs	r4, #128	; 0x80
 8002166:	2500      	movs	r5, #0
 8002168:	0324      	lsls	r4, r4, #12
 800216a:	e6f9      	b.n	8001f60 <__aeabi_dsub+0x31c>
 800216c:	19dc      	adds	r4, r3, r7
 800216e:	429c      	cmp	r4, r3
 8002170:	419b      	sbcs	r3, r3
 8002172:	4461      	add	r1, ip
 8002174:	4689      	mov	r9, r1
 8002176:	425b      	negs	r3, r3
 8002178:	4499      	add	r9, r3
 800217a:	464b      	mov	r3, r9
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	d444      	bmi.n	800220a <__aeabi_dsub+0x5c6>
 8002180:	2301      	movs	r3, #1
 8002182:	4698      	mov	r8, r3
 8002184:	e6cc      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002186:	1bdc      	subs	r4, r3, r7
 8002188:	4662      	mov	r2, ip
 800218a:	42a3      	cmp	r3, r4
 800218c:	419b      	sbcs	r3, r3
 800218e:	1a51      	subs	r1, r2, r1
 8002190:	425b      	negs	r3, r3
 8002192:	1acb      	subs	r3, r1, r3
 8002194:	4699      	mov	r9, r3
 8002196:	2301      	movs	r3, #1
 8002198:	4698      	mov	r8, r3
 800219a:	e5a4      	b.n	8001ce6 <__aeabi_dsub+0xa2>
 800219c:	08ff      	lsrs	r7, r7, #3
 800219e:	074b      	lsls	r3, r1, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	433b      	orrs	r3, r7
 80021a4:	08cc      	lsrs	r4, r1, #3
 80021a6:	e6d7      	b.n	8001f58 <__aeabi_dsub+0x314>
 80021a8:	4662      	mov	r2, ip
 80021aa:	431a      	orrs	r2, r3
 80021ac:	0014      	movs	r4, r2
 80021ae:	1e63      	subs	r3, r4, #1
 80021b0:	419c      	sbcs	r4, r3
 80021b2:	e679      	b.n	8001ea8 <__aeabi_dsub+0x264>
 80021b4:	0015      	movs	r5, r2
 80021b6:	4664      	mov	r4, ip
 80021b8:	3d20      	subs	r5, #32
 80021ba:	40ec      	lsrs	r4, r5
 80021bc:	46a0      	mov	r8, r4
 80021be:	2a20      	cmp	r2, #32
 80021c0:	d005      	beq.n	80021ce <__aeabi_dsub+0x58a>
 80021c2:	2540      	movs	r5, #64	; 0x40
 80021c4:	4664      	mov	r4, ip
 80021c6:	1aaa      	subs	r2, r5, r2
 80021c8:	4094      	lsls	r4, r2
 80021ca:	4323      	orrs	r3, r4
 80021cc:	469a      	mov	sl, r3
 80021ce:	4654      	mov	r4, sl
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	419c      	sbcs	r4, r3
 80021d4:	4643      	mov	r3, r8
 80021d6:	4323      	orrs	r3, r4
 80021d8:	e773      	b.n	80020c2 <__aeabi_dsub+0x47e>
 80021da:	4662      	mov	r2, ip
 80021dc:	431a      	orrs	r2, r3
 80021de:	d023      	beq.n	8002228 <__aeabi_dsub+0x5e4>
 80021e0:	000a      	movs	r2, r1
 80021e2:	433a      	orrs	r2, r7
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x5a4>
 80021e6:	e0a0      	b.n	800232a <__aeabi_dsub+0x6e6>
 80021e8:	4662      	mov	r2, ip
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	0752      	lsls	r2, r2, #29
 80021ee:	4313      	orrs	r3, r2
 80021f0:	4662      	mov	r2, ip
 80021f2:	08d4      	lsrs	r4, r2, #3
 80021f4:	e6b0      	b.n	8001f58 <__aeabi_dsub+0x314>
 80021f6:	000b      	movs	r3, r1
 80021f8:	433b      	orrs	r3, r7
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x5ba>
 80021fc:	e728      	b.n	8002050 <__aeabi_dsub+0x40c>
 80021fe:	08ff      	lsrs	r7, r7, #3
 8002200:	074b      	lsls	r3, r1, #29
 8002202:	465d      	mov	r5, fp
 8002204:	433b      	orrs	r3, r7
 8002206:	08cc      	lsrs	r4, r1, #3
 8002208:	e697      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 800220a:	2302      	movs	r3, #2
 800220c:	4698      	mov	r8, r3
 800220e:	e736      	b.n	800207e <__aeabi_dsub+0x43a>
 8002210:	1afc      	subs	r4, r7, r3
 8002212:	42a7      	cmp	r7, r4
 8002214:	41bf      	sbcs	r7, r7
 8002216:	4663      	mov	r3, ip
 8002218:	427f      	negs	r7, r7
 800221a:	1ac9      	subs	r1, r1, r3
 800221c:	1bcb      	subs	r3, r1, r7
 800221e:	4699      	mov	r9, r3
 8002220:	2301      	movs	r3, #1
 8002222:	465d      	mov	r5, fp
 8002224:	4698      	mov	r8, r3
 8002226:	e55e      	b.n	8001ce6 <__aeabi_dsub+0xa2>
 8002228:	074b      	lsls	r3, r1, #29
 800222a:	08ff      	lsrs	r7, r7, #3
 800222c:	433b      	orrs	r3, r7
 800222e:	08cc      	lsrs	r4, r1, #3
 8002230:	e692      	b.n	8001f58 <__aeabi_dsub+0x314>
 8002232:	1bdc      	subs	r4, r3, r7
 8002234:	4660      	mov	r0, ip
 8002236:	42a3      	cmp	r3, r4
 8002238:	41b6      	sbcs	r6, r6
 800223a:	1a40      	subs	r0, r0, r1
 800223c:	4276      	negs	r6, r6
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	4681      	mov	r9, r0
 8002242:	0200      	lsls	r0, r0, #8
 8002244:	d560      	bpl.n	8002308 <__aeabi_dsub+0x6c4>
 8002246:	1afc      	subs	r4, r7, r3
 8002248:	42a7      	cmp	r7, r4
 800224a:	41bf      	sbcs	r7, r7
 800224c:	4663      	mov	r3, ip
 800224e:	427f      	negs	r7, r7
 8002250:	1ac9      	subs	r1, r1, r3
 8002252:	1bcb      	subs	r3, r1, r7
 8002254:	4699      	mov	r9, r3
 8002256:	465d      	mov	r5, fp
 8002258:	e576      	b.n	8001d48 <__aeabi_dsub+0x104>
 800225a:	08ff      	lsrs	r7, r7, #3
 800225c:	074b      	lsls	r3, r1, #29
 800225e:	433b      	orrs	r3, r7
 8002260:	08cc      	lsrs	r4, r1, #3
 8002262:	e667      	b.n	8001f34 <__aeabi_dsub+0x2f0>
 8002264:	000a      	movs	r2, r1
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	433a      	orrs	r2, r7
 800226a:	d100      	bne.n	800226e <__aeabi_dsub+0x62a>
 800226c:	e66f      	b.n	8001f4e <__aeabi_dsub+0x30a>
 800226e:	4662      	mov	r2, ip
 8002270:	0752      	lsls	r2, r2, #29
 8002272:	4313      	orrs	r3, r2
 8002274:	4662      	mov	r2, ip
 8002276:	08d4      	lsrs	r4, r2, #3
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	0312      	lsls	r2, r2, #12
 800227c:	4214      	tst	r4, r2
 800227e:	d007      	beq.n	8002290 <__aeabi_dsub+0x64c>
 8002280:	08c8      	lsrs	r0, r1, #3
 8002282:	4210      	tst	r0, r2
 8002284:	d104      	bne.n	8002290 <__aeabi_dsub+0x64c>
 8002286:	465d      	mov	r5, fp
 8002288:	0004      	movs	r4, r0
 800228a:	08fb      	lsrs	r3, r7, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	0f5a      	lsrs	r2, r3, #29
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	0752      	lsls	r2, r2, #29
 8002298:	4313      	orrs	r3, r2
 800229a:	e65d      	b.n	8001f58 <__aeabi_dsub+0x314>
 800229c:	074b      	lsls	r3, r1, #29
 800229e:	08ff      	lsrs	r7, r7, #3
 80022a0:	433b      	orrs	r3, r7
 80022a2:	08cc      	lsrs	r4, r1, #3
 80022a4:	e649      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 80022a6:	19dc      	adds	r4, r3, r7
 80022a8:	429c      	cmp	r4, r3
 80022aa:	419b      	sbcs	r3, r3
 80022ac:	4461      	add	r1, ip
 80022ae:	4689      	mov	r9, r1
 80022b0:	425b      	negs	r3, r3
 80022b2:	4499      	add	r9, r3
 80022b4:	464b      	mov	r3, r9
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	d400      	bmi.n	80022bc <__aeabi_dsub+0x678>
 80022ba:	e631      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 80022bc:	464a      	mov	r2, r9
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <__aeabi_dsub+0x6d8>)
 80022c0:	401a      	ands	r2, r3
 80022c2:	2301      	movs	r3, #1
 80022c4:	4691      	mov	r9, r2
 80022c6:	4698      	mov	r8, r3
 80022c8:	e62a      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 80022ca:	0016      	movs	r6, r2
 80022cc:	4664      	mov	r4, ip
 80022ce:	3e20      	subs	r6, #32
 80022d0:	40f4      	lsrs	r4, r6
 80022d2:	46a0      	mov	r8, r4
 80022d4:	2a20      	cmp	r2, #32
 80022d6:	d005      	beq.n	80022e4 <__aeabi_dsub+0x6a0>
 80022d8:	2640      	movs	r6, #64	; 0x40
 80022da:	4664      	mov	r4, ip
 80022dc:	1ab2      	subs	r2, r6, r2
 80022de:	4094      	lsls	r4, r2
 80022e0:	4323      	orrs	r3, r4
 80022e2:	469a      	mov	sl, r3
 80022e4:	4654      	mov	r4, sl
 80022e6:	1e63      	subs	r3, r4, #1
 80022e8:	419c      	sbcs	r4, r3
 80022ea:	4643      	mov	r3, r8
 80022ec:	431c      	orrs	r4, r3
 80022ee:	e5db      	b.n	8001ea8 <__aeabi_dsub+0x264>
 80022f0:	0002      	movs	r2, r0
 80022f2:	2400      	movs	r4, #0
 80022f4:	2300      	movs	r3, #0
 80022f6:	e548      	b.n	8001d8a <__aeabi_dsub+0x146>
 80022f8:	19dc      	adds	r4, r3, r7
 80022fa:	42bc      	cmp	r4, r7
 80022fc:	41bf      	sbcs	r7, r7
 80022fe:	4461      	add	r1, ip
 8002300:	4689      	mov	r9, r1
 8002302:	427f      	negs	r7, r7
 8002304:	44b9      	add	r9, r7
 8002306:	e738      	b.n	800217a <__aeabi_dsub+0x536>
 8002308:	464b      	mov	r3, r9
 800230a:	4323      	orrs	r3, r4
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x6cc>
 800230e:	e69f      	b.n	8002050 <__aeabi_dsub+0x40c>
 8002310:	e606      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007fe 	.word	0x000007fe
 8002318:	000007ff 	.word	0x000007ff
 800231c:	ff7fffff 	.word	0xff7fffff
 8002320:	08ff      	lsrs	r7, r7, #3
 8002322:	074b      	lsls	r3, r1, #29
 8002324:	433b      	orrs	r3, r7
 8002326:	08cc      	lsrs	r4, r1, #3
 8002328:	e616      	b.n	8001f58 <__aeabi_dsub+0x314>
 800232a:	4662      	mov	r2, ip
 800232c:	08db      	lsrs	r3, r3, #3
 800232e:	0752      	lsls	r2, r2, #29
 8002330:	4313      	orrs	r3, r2
 8002332:	4662      	mov	r2, ip
 8002334:	08d4      	lsrs	r4, r2, #3
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	0312      	lsls	r2, r2, #12
 800233a:	4214      	tst	r4, r2
 800233c:	d007      	beq.n	800234e <__aeabi_dsub+0x70a>
 800233e:	08c8      	lsrs	r0, r1, #3
 8002340:	4210      	tst	r0, r2
 8002342:	d104      	bne.n	800234e <__aeabi_dsub+0x70a>
 8002344:	465d      	mov	r5, fp
 8002346:	0004      	movs	r4, r0
 8002348:	08fb      	lsrs	r3, r7, #3
 800234a:	0749      	lsls	r1, r1, #29
 800234c:	430b      	orrs	r3, r1
 800234e:	0f5a      	lsrs	r2, r3, #29
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	0752      	lsls	r2, r2, #29
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	4313      	orrs	r3, r2
 8002358:	e5fe      	b.n	8001f58 <__aeabi_dsub+0x314>
 800235a:	2300      	movs	r3, #0
 800235c:	4a01      	ldr	r2, [pc, #4]	; (8002364 <__aeabi_dsub+0x720>)
 800235e:	001c      	movs	r4, r3
 8002360:	e513      	b.n	8001d8a <__aeabi_dsub+0x146>
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	000007ff 	.word	0x000007ff

08002368 <__aeabi_dcmpun>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	0005      	movs	r5, r0
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <__aeabi_dcmpun+0x38>)
 800236e:	031c      	lsls	r4, r3, #12
 8002370:	0016      	movs	r6, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	030a      	lsls	r2, r1, #12
 8002376:	0049      	lsls	r1, r1, #1
 8002378:	0b12      	lsrs	r2, r2, #12
 800237a:	0d49      	lsrs	r1, r1, #21
 800237c:	0b24      	lsrs	r4, r4, #12
 800237e:	0d5b      	lsrs	r3, r3, #21
 8002380:	4281      	cmp	r1, r0
 8002382:	d008      	beq.n	8002396 <__aeabi_dcmpun+0x2e>
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <__aeabi_dcmpun+0x38>)
 8002386:	2000      	movs	r0, #0
 8002388:	4293      	cmp	r3, r2
 800238a:	d103      	bne.n	8002394 <__aeabi_dcmpun+0x2c>
 800238c:	0020      	movs	r0, r4
 800238e:	4330      	orrs	r0, r6
 8002390:	1e43      	subs	r3, r0, #1
 8002392:	4198      	sbcs	r0, r3
 8002394:	bd70      	pop	{r4, r5, r6, pc}
 8002396:	2001      	movs	r0, #1
 8002398:	432a      	orrs	r2, r5
 800239a:	d1fb      	bne.n	8002394 <__aeabi_dcmpun+0x2c>
 800239c:	e7f2      	b.n	8002384 <__aeabi_dcmpun+0x1c>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	000007ff 	.word	0x000007ff

080023a4 <__aeabi_d2iz>:
 80023a4:	000a      	movs	r2, r1
 80023a6:	b530      	push	{r4, r5, lr}
 80023a8:	4c13      	ldr	r4, [pc, #76]	; (80023f8 <__aeabi_d2iz+0x54>)
 80023aa:	0053      	lsls	r3, r2, #1
 80023ac:	0309      	lsls	r1, r1, #12
 80023ae:	0005      	movs	r5, r0
 80023b0:	0b09      	lsrs	r1, r1, #12
 80023b2:	2000      	movs	r0, #0
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	0fd2      	lsrs	r2, r2, #31
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	dd04      	ble.n	80023c6 <__aeabi_d2iz+0x22>
 80023bc:	480f      	ldr	r0, [pc, #60]	; (80023fc <__aeabi_d2iz+0x58>)
 80023be:	4283      	cmp	r3, r0
 80023c0:	dd02      	ble.n	80023c8 <__aeabi_d2iz+0x24>
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <__aeabi_d2iz+0x5c>)
 80023c4:	18d0      	adds	r0, r2, r3
 80023c6:	bd30      	pop	{r4, r5, pc}
 80023c8:	2080      	movs	r0, #128	; 0x80
 80023ca:	0340      	lsls	r0, r0, #13
 80023cc:	4301      	orrs	r1, r0
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <__aeabi_d2iz+0x60>)
 80023d0:	1ac0      	subs	r0, r0, r3
 80023d2:	281f      	cmp	r0, #31
 80023d4:	dd08      	ble.n	80023e8 <__aeabi_d2iz+0x44>
 80023d6:	480c      	ldr	r0, [pc, #48]	; (8002408 <__aeabi_d2iz+0x64>)
 80023d8:	1ac3      	subs	r3, r0, r3
 80023da:	40d9      	lsrs	r1, r3
 80023dc:	000b      	movs	r3, r1
 80023de:	4258      	negs	r0, r3
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d1f0      	bne.n	80023c6 <__aeabi_d2iz+0x22>
 80023e4:	0018      	movs	r0, r3
 80023e6:	e7ee      	b.n	80023c6 <__aeabi_d2iz+0x22>
 80023e8:	4c08      	ldr	r4, [pc, #32]	; (800240c <__aeabi_d2iz+0x68>)
 80023ea:	40c5      	lsrs	r5, r0
 80023ec:	46a4      	mov	ip, r4
 80023ee:	4463      	add	r3, ip
 80023f0:	4099      	lsls	r1, r3
 80023f2:	000b      	movs	r3, r1
 80023f4:	432b      	orrs	r3, r5
 80023f6:	e7f2      	b.n	80023de <__aeabi_d2iz+0x3a>
 80023f8:	000003fe 	.word	0x000003fe
 80023fc:	0000041d 	.word	0x0000041d
 8002400:	7fffffff 	.word	0x7fffffff
 8002404:	00000433 	.word	0x00000433
 8002408:	00000413 	.word	0x00000413
 800240c:	fffffbed 	.word	0xfffffbed

08002410 <__aeabi_i2d>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	2800      	cmp	r0, #0
 8002414:	d016      	beq.n	8002444 <__aeabi_i2d+0x34>
 8002416:	17c3      	asrs	r3, r0, #31
 8002418:	18c5      	adds	r5, r0, r3
 800241a:	405d      	eors	r5, r3
 800241c:	0fc4      	lsrs	r4, r0, #31
 800241e:	0028      	movs	r0, r5
 8002420:	f000 f84c 	bl	80024bc <__clzsi2>
 8002424:	4a11      	ldr	r2, [pc, #68]	; (800246c <__aeabi_i2d+0x5c>)
 8002426:	1a12      	subs	r2, r2, r0
 8002428:	280a      	cmp	r0, #10
 800242a:	dc16      	bgt.n	800245a <__aeabi_i2d+0x4a>
 800242c:	0003      	movs	r3, r0
 800242e:	002e      	movs	r6, r5
 8002430:	3315      	adds	r3, #21
 8002432:	409e      	lsls	r6, r3
 8002434:	230b      	movs	r3, #11
 8002436:	1a18      	subs	r0, r3, r0
 8002438:	40c5      	lsrs	r5, r0
 800243a:	0552      	lsls	r2, r2, #21
 800243c:	032d      	lsls	r5, r5, #12
 800243e:	0b2d      	lsrs	r5, r5, #12
 8002440:	0d53      	lsrs	r3, r2, #21
 8002442:	e003      	b.n	800244c <__aeabi_i2d+0x3c>
 8002444:	2400      	movs	r4, #0
 8002446:	2300      	movs	r3, #0
 8002448:	2500      	movs	r5, #0
 800244a:	2600      	movs	r6, #0
 800244c:	051b      	lsls	r3, r3, #20
 800244e:	432b      	orrs	r3, r5
 8002450:	07e4      	lsls	r4, r4, #31
 8002452:	4323      	orrs	r3, r4
 8002454:	0030      	movs	r0, r6
 8002456:	0019      	movs	r1, r3
 8002458:	bd70      	pop	{r4, r5, r6, pc}
 800245a:	380b      	subs	r0, #11
 800245c:	4085      	lsls	r5, r0
 800245e:	0552      	lsls	r2, r2, #21
 8002460:	032d      	lsls	r5, r5, #12
 8002462:	2600      	movs	r6, #0
 8002464:	0b2d      	lsrs	r5, r5, #12
 8002466:	0d53      	lsrs	r3, r2, #21
 8002468:	e7f0      	b.n	800244c <__aeabi_i2d+0x3c>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	0000041e 	.word	0x0000041e

08002470 <__aeabi_ui2d>:
 8002470:	b510      	push	{r4, lr}
 8002472:	1e04      	subs	r4, r0, #0
 8002474:	d010      	beq.n	8002498 <__aeabi_ui2d+0x28>
 8002476:	f000 f821 	bl	80024bc <__clzsi2>
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <__aeabi_ui2d+0x48>)
 800247c:	1a1b      	subs	r3, r3, r0
 800247e:	280a      	cmp	r0, #10
 8002480:	dc11      	bgt.n	80024a6 <__aeabi_ui2d+0x36>
 8002482:	220b      	movs	r2, #11
 8002484:	0021      	movs	r1, r4
 8002486:	1a12      	subs	r2, r2, r0
 8002488:	40d1      	lsrs	r1, r2
 800248a:	3015      	adds	r0, #21
 800248c:	030a      	lsls	r2, r1, #12
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	4084      	lsls	r4, r0
 8002492:	0b12      	lsrs	r2, r2, #12
 8002494:	0d5b      	lsrs	r3, r3, #21
 8002496:	e001      	b.n	800249c <__aeabi_ui2d+0x2c>
 8002498:	2300      	movs	r3, #0
 800249a:	2200      	movs	r2, #0
 800249c:	051b      	lsls	r3, r3, #20
 800249e:	4313      	orrs	r3, r2
 80024a0:	0020      	movs	r0, r4
 80024a2:	0019      	movs	r1, r3
 80024a4:	bd10      	pop	{r4, pc}
 80024a6:	0022      	movs	r2, r4
 80024a8:	380b      	subs	r0, #11
 80024aa:	4082      	lsls	r2, r0
 80024ac:	055b      	lsls	r3, r3, #21
 80024ae:	0312      	lsls	r2, r2, #12
 80024b0:	2400      	movs	r4, #0
 80024b2:	0b12      	lsrs	r2, r2, #12
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	e7f1      	b.n	800249c <__aeabi_ui2d+0x2c>
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	; (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <pwmSmooting>:
//		//EDIT BUFFER
//
//	}
//}

void pwmSmooting(typPWMOutputHandler *out,typPWMInputHandler *input,double kf){
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6178      	str	r0, [r7, #20]
 8002500:	6139      	str	r1, [r7, #16]
 8002502:	60ba      	str	r2, [r7, #8]
 8002504:	60fb      	str	r3, [r7, #12]
	out->pwmOutputA = kf * out->pwmOutputA + input->pwmInputA *(1-kf);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff ff80 	bl	8002410 <__aeabi_i2d>
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f7ff f92a 	bl	800176c <__aeabi_dmul>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	603a      	str	r2, [r7, #0]
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff ff73 	bl	8002410 <__aeabi_i2d>
 800252a:	0004      	movs	r4, r0
 800252c:	000d      	movs	r5, r1
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2000      	movs	r0, #0
 8002534:	4956      	ldr	r1, [pc, #344]	; (8002690 <pwmSmooting+0x198>)
 8002536:	f7ff fb85 	bl	8001c44 <__aeabi_dsub>
 800253a:	0002      	movs	r2, r0
 800253c:	000b      	movs	r3, r1
 800253e:	0020      	movs	r0, r4
 8002540:	0029      	movs	r1, r5
 8002542:	f7ff f913 	bl	800176c <__aeabi_dmul>
 8002546:	0002      	movs	r2, r0
 8002548:	000b      	movs	r3, r1
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	f7fe f9cf 	bl	80008f0 <__aeabi_dadd>
 8002552:	0002      	movs	r2, r0
 8002554:	000b      	movs	r3, r1
 8002556:	0010      	movs	r0, r2
 8002558:	0019      	movs	r1, r3
 800255a:	f7fd fea7 	bl	80002ac <__aeabi_d2uiz>
 800255e:	0003      	movs	r3, r0
 8002560:	b2da      	uxtb	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	701a      	strb	r2, [r3, #0]
	out->pwmOutputB = kf * out->pwmOutputB + input->pwmInputB *(1-kf);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff ff50 	bl	8002410 <__aeabi_i2d>
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f7ff f8fa 	bl	800176c <__aeabi_dmul>
 8002578:	0002      	movs	r2, r0
 800257a:	000b      	movs	r3, r1
 800257c:	603a      	str	r2, [r7, #0]
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff ff43 	bl	8002410 <__aeabi_i2d>
 800258a:	0004      	movs	r4, r0
 800258c:	000d      	movs	r5, r1
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2000      	movs	r0, #0
 8002594:	493e      	ldr	r1, [pc, #248]	; (8002690 <pwmSmooting+0x198>)
 8002596:	f7ff fb55 	bl	8001c44 <__aeabi_dsub>
 800259a:	0002      	movs	r2, r0
 800259c:	000b      	movs	r3, r1
 800259e:	0020      	movs	r0, r4
 80025a0:	0029      	movs	r1, r5
 80025a2:	f7ff f8e3 	bl	800176c <__aeabi_dmul>
 80025a6:	0002      	movs	r2, r0
 80025a8:	000b      	movs	r3, r1
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	f7fe f99f 	bl	80008f0 <__aeabi_dadd>
 80025b2:	0002      	movs	r2, r0
 80025b4:	000b      	movs	r3, r1
 80025b6:	0010      	movs	r0, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	f7fd fe77 	bl	80002ac <__aeabi_d2uiz>
 80025be:	0003      	movs	r3, r0
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	705a      	strb	r2, [r3, #1]
	out->pwmOutputC = kf * out->pwmOutputC + input->pwmInputC *(1-kf);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	789b      	ldrb	r3, [r3, #2]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff20 	bl	8002410 <__aeabi_i2d>
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f7ff f8ca 	bl	800176c <__aeabi_dmul>
 80025d8:	0002      	movs	r2, r0
 80025da:	000b      	movs	r3, r1
 80025dc:	603a      	str	r2, [r7, #0]
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	789b      	ldrb	r3, [r3, #2]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff13 	bl	8002410 <__aeabi_i2d>
 80025ea:	0004      	movs	r4, r0
 80025ec:	000d      	movs	r5, r1
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2000      	movs	r0, #0
 80025f4:	4926      	ldr	r1, [pc, #152]	; (8002690 <pwmSmooting+0x198>)
 80025f6:	f7ff fb25 	bl	8001c44 <__aeabi_dsub>
 80025fa:	0002      	movs	r2, r0
 80025fc:	000b      	movs	r3, r1
 80025fe:	0020      	movs	r0, r4
 8002600:	0029      	movs	r1, r5
 8002602:	f7ff f8b3 	bl	800176c <__aeabi_dmul>
 8002606:	0002      	movs	r2, r0
 8002608:	000b      	movs	r3, r1
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	f7fe f96f 	bl	80008f0 <__aeabi_dadd>
 8002612:	0002      	movs	r2, r0
 8002614:	000b      	movs	r3, r1
 8002616:	0010      	movs	r0, r2
 8002618:	0019      	movs	r1, r3
 800261a:	f7fd fe47 	bl	80002ac <__aeabi_d2uiz>
 800261e:	0003      	movs	r3, r0
 8002620:	b2da      	uxtb	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	709a      	strb	r2, [r3, #2]
	out->pwmOutputD = kf * out->pwmOutputD + input->pwmInputD *(1-kf);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	78db      	ldrb	r3, [r3, #3]
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff fef0 	bl	8002410 <__aeabi_i2d>
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f7ff f89a 	bl	800176c <__aeabi_dmul>
 8002638:	0002      	movs	r2, r0
 800263a:	000b      	movs	r3, r1
 800263c:	603a      	str	r2, [r7, #0]
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff fee3 	bl	8002410 <__aeabi_i2d>
 800264a:	0004      	movs	r4, r0
 800264c:	000d      	movs	r5, r1
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2000      	movs	r0, #0
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <pwmSmooting+0x198>)
 8002656:	f7ff faf5 	bl	8001c44 <__aeabi_dsub>
 800265a:	0002      	movs	r2, r0
 800265c:	000b      	movs	r3, r1
 800265e:	0020      	movs	r0, r4
 8002660:	0029      	movs	r1, r5
 8002662:	f7ff f883 	bl	800176c <__aeabi_dmul>
 8002666:	0002      	movs	r2, r0
 8002668:	000b      	movs	r3, r1
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	f7fe f93f 	bl	80008f0 <__aeabi_dadd>
 8002672:	0002      	movs	r2, r0
 8002674:	000b      	movs	r3, r1
 8002676:	0010      	movs	r0, r2
 8002678:	0019      	movs	r1, r3
 800267a:	f7fd fe17 	bl	80002ac <__aeabi_d2uiz>
 800267e:	0003      	movs	r3, r0
 8002680:	b2da      	uxtb	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	70da      	strb	r2, [r3, #3]

}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b006      	add	sp, #24
 800268c:	bdb0      	pop	{r4, r5, r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	3ff00000 	.word	0x3ff00000

08002694 <vectorState>:



uint8_t vectorState(typVector *vector){
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	if((vector->forward=0)&&(vector->left=0)&&(vector->right=0)&&(vector->backward=0)){
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
		return idle;
	}
	if(vector->backward>15){
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	d901      	bls.n	80026ae <vectorState+0x1a>
		return halt;
 80026aa:	2306      	movs	r3, #6
 80026ac:	e02b      	b.n	8002706 <vectorState+0x72>
	}
	if((vector->forward>0)&&(vector->left=0)&&(vector->right=0)&&(vector->backward=0)){
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <vectorState+0x28>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	705a      	strb	r2, [r3, #1]
			return forward;
		}
	if((vector->left>0)&&(vector->forward=0)&&(vector->right=0)&&(vector->backward=0)){
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <vectorState+0x36>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		return turn_left;
	}
	if((vector->right>0)&&(vector->forward=0)&&(vector->left=0)&&(vector->backward=0)){
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	789b      	ldrb	r3, [r3, #2]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <vectorState+0x44>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
		return turn_right;
	}
	if((vector->left>0)&&(vector->forward>0)&&(vector->right=0)&&(vector->backward=0)){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <vectorState+0x5a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <vectorState+0x5a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	709a      	strb	r2, [r3, #2]
		return forward_left;
	}
	if((vector->right>0)&&(vector->forward>0)&&(vector->left=0)&&(vector->backward=0)){
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <vectorState+0x70>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <vectorState+0x70>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
		return forward_right;
	}
	else return idle;
 8002704:	2305      	movs	r3, #5

}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <vectorToPwm>:

void vectorToPwm(typVector *hVec, typPWMInputHandler *pwmInput){
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	uint8_t state;
	state = vectorState(hVec);
 800271a:	250f      	movs	r5, #15
 800271c:	197c      	adds	r4, r7, r5
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff ffb7 	bl	8002694 <vectorState>
 8002726:	0003      	movs	r3, r0
 8002728:	7023      	strb	r3, [r4, #0]
	switch (state) {
 800272a:	197b      	adds	r3, r7, r5
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b06      	cmp	r3, #6
 8002730:	d853      	bhi.n	80027da <vectorToPwm+0xca>
 8002732:	009a      	lsls	r2, r3, #2
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <vectorToPwm+0xd4>)
 8002736:	18d3      	adds	r3, r2, r3
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	469f      	mov	pc, r3
		case forward:
			pwmInput->pwmInputA=hVec->forward;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=hVec->forward;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	705a      	strb	r2, [r3, #1]
			break;
 800274c:	e046      	b.n	80027dc <vectorToPwm+0xcc>
		case turn_left:
			pwmInput->pwmInputB=hVec->left;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	785a      	ldrb	r2, [r3, #1]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	705a      	strb	r2, [r3, #1]
			break;
 8002756:	e041      	b.n	80027dc <vectorToPwm+0xcc>
		case turn_right:
			pwmInput->pwmInputA=hVec->right;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	789a      	ldrb	r2, [r3, #2]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	701a      	strb	r2, [r3, #0]
			break;
 8002760:	e03c      	b.n	80027dc <vectorToPwm+0xcc>
		case forward_left:
			pwmInput->pwmInputA=(hVec->forward)/2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=(hVec->forward+hVec->left)/2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	001a      	movs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	18d3      	adds	r3, r2, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	da00      	bge.n	8002780 <vectorToPwm+0x70>
 800277e:	3301      	adds	r3, #1
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	705a      	strb	r2, [r3, #1]
			break;
 8002788:	e028      	b.n	80027dc <vectorToPwm+0xcc>
		case forward_right:
			pwmInput->pwmInputB=(hVec->forward)/2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	705a      	strb	r2, [r3, #1]
			pwmInput->pwmInputA=(hVec->forward+hVec->right)/2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	001a      	movs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	789b      	ldrb	r3, [r3, #2]
 80027a0:	18d3      	adds	r3, r2, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da00      	bge.n	80027a8 <vectorToPwm+0x98>
 80027a6:	3301      	adds	r3, #1
 80027a8:	105b      	asrs	r3, r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	701a      	strb	r2, [r3, #0]
			break;
 80027b0:	e014      	b.n	80027dc <vectorToPwm+0xcc>
		case halt:
			pwmInput->pwmInputA=0;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=0;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
			pwmInput->pwmInputC=0;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	709a      	strb	r2, [r3, #2]
			pwmInput->pwmInputD=0;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	70da      	strb	r2, [r3, #3]
			break;
 80027ca:	e007      	b.n	80027dc <vectorToPwm+0xcc>
		case idle:
			pwmInput->pwmInputC=120;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2278      	movs	r2, #120	; 0x78
 80027d0:	709a      	strb	r2, [r3, #2]
			pwmInput->pwmInputD=120;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2278      	movs	r2, #120	; 0x78
 80027d6:	70da      	strb	r2, [r3, #3]
			break;
 80027d8:	e000      	b.n	80027dc <vectorToPwm+0xcc>
		default:
			break;
 80027da:	46c0      	nop			; (mov r8, r8)
	}
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	08007b34 	.word	0x08007b34

080027e8 <deathzonefit>:

	void deathzonefit(double *delta_x,double pmax,double nmax,double death_zone){
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	603a      	str	r2, [r7, #0]
 80027f2:	607b      	str	r3, [r7, #4]
		if(*delta_x>pmax){
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	f7fd fd2d 	bl	800025c <__aeabi_dcmplt>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d004      	beq.n	8002810 <deathzonefit+0x28>
			 *delta_x=pmax;
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	600a      	str	r2, [r1, #0]
 800280e:	604b      	str	r3, [r1, #4]
		}
		if(*delta_x<nmax){
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	6a38      	ldr	r0, [r7, #32]
 8002818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281a:	f7fd fd33 	bl	8000284 <__aeabi_dcmpgt>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d004      	beq.n	800282c <deathzonefit+0x44>
			*delta_x=nmax;
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	600a      	str	r2, [r1, #0]
 800282a:	604b      	str	r3, [r1, #4]
		}
		if ((*delta_x<death_zone)&&(*delta_x>0)) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002836:	f7fd fd25 	bl	8000284 <__aeabi_dcmpgt>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d00d      	beq.n	800285a <deathzonefit+0x72>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	2300      	movs	r3, #0
 8002848:	f7fd fd1c 	bl	8000284 <__aeabi_dcmpgt>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d004      	beq.n	800285a <deathzonefit+0x72>
			*delta_x=0;
 8002850:	68f9      	ldr	r1, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	2300      	movs	r3, #0
 8002856:	600a      	str	r2, [r1, #0]
 8002858:	604b      	str	r3, [r1, #4]
		}
		if ((*delta_x > (-1*death_zone))&&(*delta_x<0)) {
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	001c      	movs	r4, r3
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	0612      	lsls	r2, r2, #24
 800286a:	405a      	eors	r2, r3
 800286c:	0015      	movs	r5, r2
 800286e:	0022      	movs	r2, r4
 8002870:	002b      	movs	r3, r5
 8002872:	f7fd fd07 	bl	8000284 <__aeabi_dcmpgt>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d100      	bne.n	800287c <deathzonefit+0x94>
			*delta_x=0;
		}
	}
 800287a:	e00e      	b.n	800289a <deathzonefit+0xb2>
		if ((*delta_x > (-1*death_zone))&&(*delta_x<0)) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	2300      	movs	r3, #0
 8002886:	f7fd fce9 	bl	800025c <__aeabi_dcmplt>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d100      	bne.n	8002890 <deathzonefit+0xa8>
	}
 800288e:	e004      	b.n	800289a <deathzonefit+0xb2>
			*delta_x=0;
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	2300      	movs	r3, #0
 8002896:	600a      	str	r2, [r1, #0]
 8002898:	604b      	str	r3, [r1, #4]
	}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080028a4 <angleToVector>:

void angleToVector(typVector *hVec,double curr_angle_x,double start_angle_x,double curr_angle_y,double start_angle_y ,double death_zone){
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b091      	sub	sp, #68	; 0x44
 80028a8:	af04      	add	r7, sp, #16
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	603a      	str	r2, [r7, #0]
 80028ae:	607b      	str	r3, [r7, #4]
	 double pmax = 45;
 80028b0:	2200      	movs	r2, #0
 80028b2:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <angleToVector+0x170>)
 80028b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	 double nmax = -45;
 80028b8:	2200      	movs	r2, #0
 80028ba:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <angleToVector+0x174>)
 80028bc:	623a      	str	r2, [r7, #32]
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
	 double delta_x = curr_angle_x - start_angle_x;
 80028c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c4:	6838      	ldr	r0, [r7, #0]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f7ff f9bc 	bl	8001c44 <__aeabi_dsub>
 80028cc:	0002      	movs	r2, r0
 80028ce:	000b      	movs	r3, r1
 80028d0:	61ba      	str	r2, [r7, #24]
 80028d2:	61fb      	str	r3, [r7, #28]
	 double delta_y = curr_angle_y - start_angle_y;
 80028d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028dc:	f7ff f9b2 	bl	8001c44 <__aeabi_dsub>
 80028e0:	0002      	movs	r2, r0
 80028e2:	000b      	movs	r3, r1
 80028e4:	613a      	str	r2, [r7, #16]
 80028e6:	617b      	str	r3, [r7, #20]
	 deathzonefit(&delta_x, pmax, nmax, death_zone);
 80028e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ec:	2318      	movs	r3, #24
 80028ee:	18fc      	adds	r4, r7, r3
 80028f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f4:	9202      	str	r2, [sp, #8]
 80028f6:	9303      	str	r3, [sp, #12]
 80028f8:	6a3a      	ldr	r2, [r7, #32]
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	9200      	str	r2, [sp, #0]
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	0002      	movs	r2, r0
 8002902:	000b      	movs	r3, r1
 8002904:	0020      	movs	r0, r4
 8002906:	f7ff ff6f 	bl	80027e8 <deathzonefit>
	 deathzonefit(&delta_y, pmax, nmax, death_zone);
 800290a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800290e:	2310      	movs	r3, #16
 8002910:	18fc      	adds	r4, r7, r3
 8002912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002916:	9202      	str	r2, [sp, #8]
 8002918:	9303      	str	r3, [sp, #12]
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	9200      	str	r2, [sp, #0]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	0002      	movs	r2, r0
 8002924:	000b      	movs	r3, r1
 8002926:	0020      	movs	r0, r4
 8002928:	f7ff ff5e 	bl	80027e8 <deathzonefit>
	 if(delta_y>=0){
 800292c:	6938      	ldr	r0, [r7, #16]
 800292e:	6979      	ldr	r1, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2300      	movs	r3, #0
 8002934:	f7fd fcb0 	bl	8000298 <__aeabi_dcmpge>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d05a      	beq.n	80029f2 <angleToVector+0x14e>
		 if(delta_x<0){
 800293c:	69b8      	ldr	r0, [r7, #24]
 800293e:	69f9      	ldr	r1, [r7, #28]
 8002940:	2200      	movs	r2, #0
 8002942:	2300      	movs	r3, #0
 8002944:	f7fd fc8a 	bl	800025c <__aeabi_dcmplt>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	d01b      	beq.n	8002984 <angleToVector+0xe0>
			 hVec->left = delta_x*255/nmax;
 800294c:	69b8      	ldr	r0, [r7, #24]
 800294e:	69f9      	ldr	r1, [r7, #28]
 8002950:	2200      	movs	r2, #0
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <angleToVector+0x178>)
 8002954:	f7fe ff0a 	bl	800176c <__aeabi_dmul>
 8002958:	0002      	movs	r2, r0
 800295a:	000b      	movs	r3, r1
 800295c:	0010      	movs	r0, r2
 800295e:	0019      	movs	r1, r3
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f7fe fb00 	bl	8000f68 <__aeabi_ddiv>
 8002968:	0002      	movs	r2, r0
 800296a:	000b      	movs	r3, r1
 800296c:	0010      	movs	r0, r2
 800296e:	0019      	movs	r1, r3
 8002970:	f7fd fc9c 	bl	80002ac <__aeabi_d2uiz>
 8002974:	0003      	movs	r3, r0
 8002976:	b2da      	uxtb	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	705a      	strb	r2, [r3, #1]
			 hVec->right = 0;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	709a      	strb	r2, [r3, #2]
 8002982:	e01a      	b.n	80029ba <angleToVector+0x116>
		 }
		 else{
			 hVec->right = delta_x*255/pmax;
 8002984:	69b8      	ldr	r0, [r7, #24]
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	2200      	movs	r2, #0
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <angleToVector+0x178>)
 800298c:	f7fe feee 	bl	800176c <__aeabi_dmul>
 8002990:	0002      	movs	r2, r0
 8002992:	000b      	movs	r3, r1
 8002994:	0010      	movs	r0, r2
 8002996:	0019      	movs	r1, r3
 8002998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	f7fe fae4 	bl	8000f68 <__aeabi_ddiv>
 80029a0:	0002      	movs	r2, r0
 80029a2:	000b      	movs	r3, r1
 80029a4:	0010      	movs	r0, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	f7fd fc80 	bl	80002ac <__aeabi_d2uiz>
 80029ac:	0003      	movs	r3, r0
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	709a      	strb	r2, [r3, #2]
			 hVec->left = 0;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	705a      	strb	r2, [r3, #1]
		 }
		 hVec->forward= delta_y*255/pmax;
 80029ba:	6938      	ldr	r0, [r7, #16]
 80029bc:	6979      	ldr	r1, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <angleToVector+0x178>)
 80029c2:	f7fe fed3 	bl	800176c <__aeabi_dmul>
 80029c6:	0002      	movs	r2, r0
 80029c8:	000b      	movs	r3, r1
 80029ca:	0010      	movs	r0, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	f7fe fac9 	bl	8000f68 <__aeabi_ddiv>
 80029d6:	0002      	movs	r2, r0
 80029d8:	000b      	movs	r3, r1
 80029da:	0010      	movs	r0, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	f7fd fc65 	bl	80002ac <__aeabi_d2uiz>
 80029e2:	0003      	movs	r3, r0
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	701a      	strb	r2, [r3, #0]
		 hVec->backward= 0;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	70da      	strb	r2, [r3, #3]
	 else{
		 hVec->backward=0;
		 hVec->left=0; hVec->right=0; hVec->forward=0;
	 }

}
 80029f0:	e00b      	b.n	8002a0a <angleToVector+0x166>
		 hVec->backward=0;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	70da      	strb	r2, [r3, #3]
		 hVec->left=0; hVec->right=0; hVec->forward=0;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	705a      	strb	r2, [r3, #1]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	709a      	strb	r2, [r3, #2]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b00d      	add	sp, #52	; 0x34
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	40468000 	.word	0x40468000
 8002a18:	c0468000 	.word	0xc0468000
 8002a1c:	406fe000 	.word	0x406fe000

08002a20 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
     if(huart->Instance == huart1.Instance)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_UART_TxCpltCallback+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d105      	bne.n	8002a40 <HAL_UART_TxCpltCallback+0x20>
     {
     HAL_UART_Transmit_IT(&huart1, tx_buffer, sizeof(tx_buffer));
 8002a34:	4905      	ldr	r1, [pc, #20]	; (8002a4c <HAL_UART_TxCpltCallback+0x2c>)
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <HAL_UART_TxCpltCallback+0x28>)
 8002a38:	220a      	movs	r2, #10
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f002 ffb4 	bl	80059a8 <HAL_UART_Transmit_IT>
     }

 }
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000168 	.word	0x20000168
 8002a4c:	200002d4 	.word	0x200002d4

08002a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a52:	b091      	sub	sp, #68	; 0x44
 8002a54:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a56:	f000 ff4d 	bl	80038f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5a:	f000 f875 	bl	8002b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a5e:	f000 f97b 	bl	8002d58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a62:	f000 f949 	bl	8002cf8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002a66:	f000 f8d7 	bl	8002c18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002a6a:	f000 f915 	bl	8002c98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <main+0xd0>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f9ee 	bl	8002e52 <MPU6050_Init>


  HAL_Delay(500);
 8002a76:	23fa      	movs	r3, #250	; 0xfa
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 ff9e 	bl	80039bc <HAL_Delay>
  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <main+0xd4>)
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <main+0xd0>)
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fa48 	bl	8002f1c <MPU6050_Read_All>
//  T+ADDR?
//
//  +ADDR:0021:11:01C461
  x_angle_base=MPU6050.KalmanAngleX;
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <main+0xd4>)
 8002a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	61ba      	str	r2, [r7, #24]
 8002a94:	61fb      	str	r3, [r7, #28]
  y_angle_base=MPU6050.KalmanAngleY;
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <main+0xd4>)
 8002a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	613a      	str	r2, [r7, #16]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002aa0:	4a20      	ldr	r2, [pc, #128]	; (8002b24 <main+0xd4>)
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <main+0xd0>)
 8002aa4:	0011      	movs	r1, r2
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fa38 	bl	8002f1c <MPU6050_Read_All>
	  angleToVector(&hVector, MPU6050.KalmanAngleX, x_angle_base, MPU6050.KalmanAngleY, y_angle_base, 3);
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <main+0xd4>)
 8002aae:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002ab0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <main+0xd4>)
 8002ab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	4e1b      	ldr	r6, [pc, #108]	; (8002b28 <main+0xd8>)
 8002aba:	2000      	movs	r0, #0
 8002abc:	491b      	ldr	r1, [pc, #108]	; (8002b2c <main+0xdc>)
 8002abe:	9006      	str	r0, [sp, #24]
 8002ac0:	9107      	str	r1, [sp, #28]
 8002ac2:	6938      	ldr	r0, [r7, #16]
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	9004      	str	r0, [sp, #16]
 8002ac8:	9105      	str	r1, [sp, #20]
 8002aca:	9202      	str	r2, [sp, #8]
 8002acc:	9303      	str	r3, [sp, #12]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	9200      	str	r2, [sp, #0]
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	0022      	movs	r2, r4
 8002ad8:	002b      	movs	r3, r5
 8002ada:	0030      	movs	r0, r6
 8002adc:	f7ff fee2 	bl	80028a4 <angleToVector>
	  vectorToPwm(&hVector, &hInput);
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <main+0xe0>)
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <main+0xd8>)
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff fe12 	bl	8002710 <vectorToPwm>
	  pwmSmooting(&hOutput,&hInput, KF);
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <main+0xe4>)
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <main+0xe8>)
 8002af0:	490f      	ldr	r1, [pc, #60]	; (8002b30 <main+0xe0>)
 8002af2:	4812      	ldr	r0, [pc, #72]	; (8002b3c <main+0xec>)
 8002af4:	f7ff fd00 	bl	80024f8 <pwmSmooting>



	  HAL_Delay(500);
 8002af8:	23fa      	movs	r3, #250	; 0xfa
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 ff5d 	bl	80039bc <HAL_Delay>

	  char bufi[11];
	  sprintf(bufi,"deneme 123");
 8002b02:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <main+0xf0>)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	0011      	movs	r1, r2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f003 fff7 	bl	8006afc <siprintf>
	  HAL_UART_Transmit(&huart1, bufi, sizeof(bufi), 500);
 8002b0e:	23fa      	movs	r3, #250	; 0xfa
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	1d39      	adds	r1, r7, #4
 8002b14:	480b      	ldr	r0, [pc, #44]	; (8002b44 <main+0xf4>)
 8002b16:	220b      	movs	r2, #11
 8002b18:	f002 fe9c 	bl	8005854 <HAL_UART_Transmit>
  {
 8002b1c:	e7c0      	b.n	8002aa0 <main+0x50>
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	2000011c 	.word	0x2000011c
 8002b24:	20000270 	.word	0x20000270
 8002b28:	200002d0 	.word	0x200002d0
 8002b2c:	40080000 	.word	0x40080000
 8002b30:	200002c8 	.word	0x200002c8
 8002b34:	9999999a 	.word	0x9999999a
 8002b38:	3fe99999 	.word	0x3fe99999
 8002b3c:	200002cc 	.word	0x200002cc
 8002b40:	08007a08 	.word	0x08007a08
 8002b44:	20000168 	.word	0x20000168

08002b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b099      	sub	sp, #100	; 0x64
 8002b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4e:	242c      	movs	r4, #44	; 0x2c
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	0018      	movs	r0, r3
 8002b54:	2334      	movs	r3, #52	; 0x34
 8002b56:	001a      	movs	r2, r3
 8002b58:	2100      	movs	r1, #0
 8002b5a:	f003 ffc7 	bl	8006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b5e:	231c      	movs	r3, #28
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	0018      	movs	r0, r3
 8002b64:	2310      	movs	r3, #16
 8002b66:	001a      	movs	r2, r3
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f003 ffbf 	bl	8006aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b6e:	003b      	movs	r3, r7
 8002b70:	0018      	movs	r0, r3
 8002b72:	231c      	movs	r3, #28
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f003 ffb8 	bl	8006aec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b7c:	0021      	movs	r1, r4
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2202      	movs	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2201      	movs	r2, #1
 8002b88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2202      	movs	r2, #2
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	0212      	lsls	r2, r2, #8
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	22a0      	movs	r2, #160	; 0xa0
 8002ba2:	0392      	lsls	r2, r2, #14
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f001 fffc 	bl	8004bac <HAL_RCC_OscConfig>
 8002bb4:	1e03      	subs	r3, r0, #0
 8002bb6:	d001      	beq.n	8002bbc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002bb8:	f000 f946 	bl	8002e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bbc:	211c      	movs	r1, #28
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	2101      	movs	r1, #1
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f002 fb6c 	bl	80052b8 <HAL_RCC_ClockConfig>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d001      	beq.n	8002be8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002be4:	f000 f930 	bl	8002e48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002be8:	003b      	movs	r3, r7
 8002bea:	2223      	movs	r2, #35	; 0x23
 8002bec:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002bee:	003b      	movs	r3, r7
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bf4:	003b      	movs	r3, r7
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002bfa:	003b      	movs	r3, r7
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c00:	003b      	movs	r3, r7
 8002c02:	0018      	movs	r0, r3
 8002c04:	f002 fcd2 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d001      	beq.n	8002c10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002c0c:	f000 f91c 	bl	8002e48 <Error_Handler>
  }
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b019      	add	sp, #100	; 0x64
 8002c16:	bd90      	pop	{r4, r7, pc}

08002c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <MX_I2C1_Init+0x78>)
 8002c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <MX_I2C1_Init+0x7c>)
 8002c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c28:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c54:	0018      	movs	r0, r3
 8002c56:	f001 f9c7 	bl	8003fe8 <HAL_I2C_Init>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c5e:	f000 f8f3 	bl	8002e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c64:	2100      	movs	r1, #0
 8002c66:	0018      	movs	r0, r3
 8002c68:	f001 ff08 	bl	8004a7c <HAL_I2CEx_ConfigAnalogFilter>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c70:	f000 f8ea 	bl	8002e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <MX_I2C1_Init+0x74>)
 8002c76:	2100      	movs	r1, #0
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f001 ff4b 	bl	8004b14 <HAL_I2CEx_ConfigDigitalFilter>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c82:	f000 f8e1 	bl	8002e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000011c 	.word	0x2000011c
 8002c90:	40005400 	.word	0x40005400
 8002c94:	2000090e 	.word	0x2000090e

08002c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <MX_USART1_UART_Init+0x5c>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002ca4:	2296      	movs	r2, #150	; 0x96
 8002ca6:	0192      	lsls	r2, r2, #6
 8002ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <MX_USART1_UART_Init+0x58>)
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f002 fd65 	bl	80057ac <HAL_UART_Init>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d001      	beq.n	8002cea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ce6:	f000 f8af 	bl	8002e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000168 	.word	0x20000168
 8002cf4:	40013800 	.word	0x40013800

08002cf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <MX_USART2_UART_Init+0x5c>)
 8002d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d04:	2296      	movs	r2, #150	; 0x96
 8002d06:	0192      	lsls	r2, r2, #6
 8002d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <MX_USART2_UART_Init+0x58>)
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f002 fd35 	bl	80057ac <HAL_UART_Init>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d46:	f000 f87f 	bl	8002e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200001ec 	.word	0x200001ec
 8002d54:	40004400 	.word	0x40004400

08002d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b08b      	sub	sp, #44	; 0x2c
 8002d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5e:	2414      	movs	r4, #20
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	0018      	movs	r0, r3
 8002d64:	2314      	movs	r3, #20
 8002d66:	001a      	movs	r2, r3
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f003 febf 	bl	8006aec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0309      	lsls	r1, r1, #12
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	615a      	str	r2, [r3, #20]
 8002d7c:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	031b      	lsls	r3, r3, #12
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	03c9      	lsls	r1, r1, #15
 8002d94:	430a      	orrs	r2, r1
 8002d96:	615a      	str	r2, [r3, #20]
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	03db      	lsls	r3, r3, #15
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0289      	lsls	r1, r1, #10
 8002db0:	430a      	orrs	r2, r1
 8002db2:	615a      	str	r2, [r3, #20]
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	029b      	lsls	r3, r3, #10
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	02c9      	lsls	r1, r1, #11
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	615a      	str	r2, [r3, #20]
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <MX_GPIO_Init+0xe8>)
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	02db      	lsls	r3, r3, #11
 8002dd8:	4013      	ands	r3, r2
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002dde:	2390      	movs	r3, #144	; 0x90
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	2200      	movs	r2, #0
 8002de4:	2120      	movs	r1, #32
 8002de6:	0018      	movs	r0, r3
 8002de8:	f001 f8e0 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	0192      	lsls	r2, r2, #6
 8002df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	2284      	movs	r2, #132	; 0x84
 8002df8:	0392      	lsls	r2, r2, #14
 8002dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <MX_GPIO_Init+0xec>)
 8002e06:	0019      	movs	r1, r3
 8002e08:	0010      	movs	r0, r2
 8002e0a:	f000 ff57 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e0e:	0021      	movs	r1, r4
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2220      	movs	r2, #32
 8002e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2201      	movs	r2, #1
 8002e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e28:	187a      	adds	r2, r7, r1
 8002e2a:	2390      	movs	r3, #144	; 0x90
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	0011      	movs	r1, r2
 8002e30:	0018      	movs	r0, r3
 8002e32:	f000 ff43 	bl	8003cbc <HAL_GPIO_Init>

}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b00b      	add	sp, #44	; 0x2c
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	40021000 	.word	0x40021000
 8002e44:	48000800 	.word	0x48000800

08002e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4c:	b672      	cpsid	i
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <Error_Handler+0x8>

08002e52 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002e52:	b590      	push	{r4, r7, lr}
 8002e54:	b089      	sub	sp, #36	; 0x24
 8002e56:	af04      	add	r7, sp, #16
 8002e58:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002e5a:	23fa      	movs	r3, #250	; 0xfa
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	9302      	str	r3, [sp, #8]
 8002e62:	2301      	movs	r3, #1
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	240f      	movs	r4, #15
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	2275      	movs	r2, #117	; 0x75
 8002e70:	21d0      	movs	r1, #208	; 0xd0
 8002e72:	f001 fa7d 	bl	8004370 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b68      	cmp	r3, #104	; 0x68
 8002e7c:	d148      	bne.n	8002f10 <MPU6050_Init+0xbe>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002e7e:	210e      	movs	r1, #14
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002e86:	23fa      	movs	r3, #250	; 0xfa
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	2301      	movs	r3, #1
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	000c      	movs	r4, r1
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	226b      	movs	r2, #107	; 0x6b
 8002e9c:	21d0      	movs	r1, #208	; 0xd0
 8002e9e:	f001 f939 	bl	8004114 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002ea2:	0021      	movs	r1, r4
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002eaa:	23fa      	movs	r3, #250	; 0xfa
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	9302      	str	r3, [sp, #8]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	000c      	movs	r4, r1
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	2219      	movs	r2, #25
 8002ec0:	21d0      	movs	r1, #208	; 0xd0
 8002ec2:	f001 f927 	bl	8004114 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ece:	23fa      	movs	r3, #250	; 0xfa
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	000c      	movs	r4, r1
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	221c      	movs	r2, #28
 8002ee4:	21d0      	movs	r1, #208	; 0xd0
 8002ee6:	f001 f915 	bl	8004114 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002eea:	0021      	movs	r1, r4
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ef2:	23fa      	movs	r3, #250	; 0xfa
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	9302      	str	r3, [sp, #8]
 8002efa:	2301      	movs	r3, #1
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2301      	movs	r3, #1
 8002f04:	221b      	movs	r2, #27
 8002f06:	21d0      	movs	r1, #208	; 0xd0
 8002f08:	f001 f904 	bl	8004114 <HAL_I2C_Mem_Write>
        return 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <MPU6050_Init+0xc0>
    }
    return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b005      	add	sp, #20
 8002f18:	bd90      	pop	{r4, r7, pc}
	...

08002f1c <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1e:	b099      	sub	sp, #100	; 0x64
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	6178      	str	r0, [r7, #20]
 8002f24:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002f26:	23fa      	movs	r3, #250	; 0xfa
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	230e      	movs	r3, #14
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	2408      	movs	r4, #8
 8002f34:	2510      	movs	r5, #16
 8002f36:	1963      	adds	r3, r4, r5
 8002f38:	19db      	adds	r3, r3, r7
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	223b      	movs	r2, #59	; 0x3b
 8002f40:	21d0      	movs	r1, #208	; 0xd0
 8002f42:	f001 fa15 	bl	8004370 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002f46:	0020      	movs	r0, r4
 8002f48:	0029      	movs	r1, r5
 8002f4a:	1843      	adds	r3, r0, r1
 8002f4c:	19db      	adds	r3, r3, r7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	1843      	adds	r3, r0, r1
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002f64:	1843      	adds	r3, r0, r1
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	789b      	ldrb	r3, [r3, #2]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	b21a      	sxth	r2, r3
 8002f6e:	1843      	adds	r3, r0, r1
 8002f70:	19db      	adds	r3, r3, r7
 8002f72:	78db      	ldrb	r3, [r3, #3]
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002f7e:	1843      	adds	r3, r0, r1
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	791b      	ldrb	r3, [r3, #4]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	b21a      	sxth	r2, r3
 8002f88:	1843      	adds	r3, r0, r1
 8002f8a:	19db      	adds	r3, r3, r7
 8002f8c:	795b      	ldrb	r3, [r3, #5]
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b21a      	sxth	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002f98:	000d      	movs	r5, r1
 8002f9a:	1843      	adds	r3, r0, r1
 8002f9c:	19db      	adds	r3, r3, r7
 8002f9e:	799b      	ldrb	r3, [r3, #6]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	b219      	sxth	r1, r3
 8002fa4:	1943      	adds	r3, r0, r5
 8002fa6:	19db      	adds	r3, r3, r7
 8002fa8:	79db      	ldrb	r3, [r3, #7]
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	2436      	movs	r4, #54	; 0x36
 8002fae:	1963      	adds	r3, r4, r5
 8002fb0:	19db      	adds	r3, r3, r7
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002fb6:	0001      	movs	r1, r0
 8002fb8:	194b      	adds	r3, r1, r5
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	7a1b      	ldrb	r3, [r3, #8]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	b21a      	sxth	r2, r3
 8002fc2:	194b      	adds	r3, r1, r5
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	7a5b      	ldrb	r3, [r3, #9]
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002fd2:	194b      	adds	r3, r1, r5
 8002fd4:	19db      	adds	r3, r3, r7
 8002fd6:	7a9b      	ldrb	r3, [r3, #10]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	194b      	adds	r3, r1, r5
 8002fde:	19db      	adds	r3, r3, r7
 8002fe0:	7adb      	ldrb	r3, [r3, #11]
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002fec:	194b      	adds	r3, r1, r5
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	7b1b      	ldrb	r3, [r3, #12]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	b21a      	sxth	r2, r3
 8002ff6:	194b      	adds	r3, r1, r5
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	7b5b      	ldrb	r3, [r3, #13]
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b21a      	sxth	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2200      	movs	r2, #0
 800300a:	5e9b      	ldrsh	r3, [r3, r2]
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff f9ff 	bl	8002410 <__aeabi_i2d>
 8003012:	2200      	movs	r2, #0
 8003014:	4bac      	ldr	r3, [pc, #688]	; (80032c8 <MPU6050_Read_All+0x3ac>)
 8003016:	f7fd ffa7 	bl	8000f68 <__aeabi_ddiv>
 800301a:	0002      	movs	r2, r0
 800301c:	000b      	movs	r3, r1
 800301e:	6939      	ldr	r1, [r7, #16]
 8003020:	608a      	str	r2, [r1, #8]
 8003022:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2202      	movs	r2, #2
 8003028:	5e9b      	ldrsh	r3, [r3, r2]
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff f9f0 	bl	8002410 <__aeabi_i2d>
 8003030:	2200      	movs	r2, #0
 8003032:	4ba5      	ldr	r3, [pc, #660]	; (80032c8 <MPU6050_Read_All+0x3ac>)
 8003034:	f7fd ff98 	bl	8000f68 <__aeabi_ddiv>
 8003038:	0002      	movs	r2, r0
 800303a:	000b      	movs	r3, r1
 800303c:	6939      	ldr	r1, [r7, #16]
 800303e:	610a      	str	r2, [r1, #16]
 8003040:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2204      	movs	r2, #4
 8003046:	5e9b      	ldrsh	r3, [r3, r2]
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff f9e1 	bl	8002410 <__aeabi_i2d>
 800304e:	2200      	movs	r2, #0
 8003050:	4b9e      	ldr	r3, [pc, #632]	; (80032cc <MPU6050_Read_All+0x3b0>)
 8003052:	f7fd ff89 	bl	8000f68 <__aeabi_ddiv>
 8003056:	0002      	movs	r2, r0
 8003058:	000b      	movs	r3, r1
 800305a:	6939      	ldr	r1, [r7, #16]
 800305c:	618a      	str	r2, [r1, #24]
 800305e:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003060:	1963      	adds	r3, r4, r5
 8003062:	19db      	adds	r3, r3, r7
 8003064:	2200      	movs	r2, #0
 8003066:	5e9b      	ldrsh	r3, [r3, r2]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd fbf3 	bl	8000854 <__aeabi_i2f>
 800306e:	1c03      	adds	r3, r0, #0
 8003070:	4997      	ldr	r1, [pc, #604]	; (80032d0 <MPU6050_Read_All+0x3b4>)
 8003072:	1c18      	adds	r0, r3, #0
 8003074:	f7fd fad6 	bl	8000624 <__aeabi_fdiv>
 8003078:	1c03      	adds	r3, r0, #0
 800307a:	4996      	ldr	r1, [pc, #600]	; (80032d4 <MPU6050_Read_All+0x3b8>)
 800307c:	1c18      	adds	r0, r3, #0
 800307e:	f7fd f933 	bl	80002e8 <__aeabi_fadd>
 8003082:	1c03      	adds	r3, r0, #0
 8003084:	1c1a      	adds	r2, r3, #0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2220      	movs	r2, #32
 800308e:	5e9b      	ldrsh	r3, [r3, r2]
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff f9bd 	bl	8002410 <__aeabi_i2d>
 8003096:	2200      	movs	r2, #0
 8003098:	4b8f      	ldr	r3, [pc, #572]	; (80032d8 <MPU6050_Read_All+0x3bc>)
 800309a:	f7fd ff65 	bl	8000f68 <__aeabi_ddiv>
 800309e:	0002      	movs	r2, r0
 80030a0:	000b      	movs	r3, r1
 80030a2:	6939      	ldr	r1, [r7, #16]
 80030a4:	628a      	str	r2, [r1, #40]	; 0x28
 80030a6:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2222      	movs	r2, #34	; 0x22
 80030ac:	5e9b      	ldrsh	r3, [r3, r2]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff f9ae 	bl	8002410 <__aeabi_i2d>
 80030b4:	2200      	movs	r2, #0
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <MPU6050_Read_All+0x3bc>)
 80030b8:	f7fd ff56 	bl	8000f68 <__aeabi_ddiv>
 80030bc:	0002      	movs	r2, r0
 80030be:	000b      	movs	r3, r1
 80030c0:	6939      	ldr	r1, [r7, #16]
 80030c2:	630a      	str	r2, [r1, #48]	; 0x30
 80030c4:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2224      	movs	r2, #36	; 0x24
 80030ca:	5e9b      	ldrsh	r3, [r3, r2]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff f99f 	bl	8002410 <__aeabi_i2d>
 80030d2:	2200      	movs	r2, #0
 80030d4:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <MPU6050_Read_All+0x3bc>)
 80030d6:	f7fd ff47 	bl	8000f68 <__aeabi_ddiv>
 80030da:	0002      	movs	r2, r0
 80030dc:	000b      	movs	r3, r1
 80030de:	6939      	ldr	r1, [r7, #16]
 80030e0:	638a      	str	r2, [r1, #56]	; 0x38
 80030e2:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80030e4:	f000 fc60 	bl	80039a8 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <MPU6050_Read_All+0x3c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff f9bd 	bl	8002470 <__aeabi_ui2d>
 80030f6:	2200      	movs	r2, #0
 80030f8:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <MPU6050_Read_All+0x3c4>)
 80030fa:	f7fd ff35 	bl	8000f68 <__aeabi_ddiv>
 80030fe:	0002      	movs	r2, r0
 8003100:	000b      	movs	r3, r1
 8003102:	63ba      	str	r2, [r7, #56]	; 0x38
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 8003106:	f000 fc4f 	bl	80039a8 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	4b73      	ldr	r3, [pc, #460]	; (80032dc <MPU6050_Read_All+0x3c0>)
 800310e:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2200      	movs	r2, #0
 8003114:	5e9b      	ldrsh	r3, [r3, r2]
 8003116:	001a      	movs	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2100      	movs	r1, #0
 800311c:	5e5b      	ldrsh	r3, [r3, r1]
 800311e:	435a      	muls	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2104      	movs	r1, #4
 8003124:	5e5b      	ldrsh	r3, [r3, r1]
 8003126:	0019      	movs	r1, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2004      	movs	r0, #4
 800312c:	5e1b      	ldrsh	r3, [r3, r0]
 800312e:	434b      	muls	r3, r1
 8003130:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff f96c 	bl	8002410 <__aeabi_i2d>
 8003138:	0002      	movs	r2, r0
 800313a:	000b      	movs	r3, r1
 800313c:	0010      	movs	r0, r2
 800313e:	0019      	movs	r1, r3
 8003140:	f004 facd 	bl	80076de <sqrt>
 8003144:	0002      	movs	r2, r0
 8003146:	000b      	movs	r3, r1
 8003148:	633a      	str	r2, [r7, #48]	; 0x30
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 800314c:	2200      	movs	r2, #0
 800314e:	2300      	movs	r3, #0
 8003150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003152:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003154:	f7fd f87c 	bl	8000250 <__aeabi_dcmpeq>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d118      	bne.n	800318e <MPU6050_Read_All+0x272>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2202      	movs	r2, #2
 8003160:	5e9b      	ldrsh	r3, [r3, r2]
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff f954 	bl	8002410 <__aeabi_i2d>
 8003168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	f7fd fefc 	bl	8000f68 <__aeabi_ddiv>
 8003170:	0002      	movs	r2, r0
 8003172:	000b      	movs	r3, r1
 8003174:	0010      	movs	r0, r2
 8003176:	0019      	movs	r1, r3
 8003178:	f004 f92a 	bl	80073d0 <atan>
 800317c:	4a59      	ldr	r2, [pc, #356]	; (80032e4 <MPU6050_Read_All+0x3c8>)
 800317e:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <MPU6050_Read_All+0x3cc>)
 8003180:	f7fe faf4 	bl	800176c <__aeabi_dmul>
 8003184:	0002      	movs	r2, r0
 8003186:	000b      	movs	r3, r1
 8003188:	64ba      	str	r2, [r7, #72]	; 0x48
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	e003      	b.n	8003196 <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 800318e:	2200      	movs	r2, #0
 8003190:	2300      	movs	r3, #0
 8003192:	64ba      	str	r2, [r7, #72]	; 0x48
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2200      	movs	r2, #0
 800319a:	5e9b      	ldrsh	r3, [r3, r2]
 800319c:	425b      	negs	r3, r3
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff f936 	bl	8002410 <__aeabi_i2d>
 80031a4:	0004      	movs	r4, r0
 80031a6:	000d      	movs	r5, r1
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2204      	movs	r2, #4
 80031ac:	5e9b      	ldrsh	r3, [r3, r2]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff f92e 	bl	8002410 <__aeabi_i2d>
 80031b4:	0002      	movs	r2, r0
 80031b6:	000b      	movs	r3, r1
 80031b8:	0020      	movs	r0, r4
 80031ba:	0029      	movs	r1, r5
 80031bc:	f004 fa8b 	bl	80076d6 <atan2>
 80031c0:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <MPU6050_Read_All+0x3c8>)
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <MPU6050_Read_All+0x3cc>)
 80031c4:	f7fe fad2 	bl	800176c <__aeabi_dmul>
 80031c8:	0002      	movs	r2, r0
 80031ca:	000b      	movs	r3, r1
 80031cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80031d0:	2200      	movs	r2, #0
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <MPU6050_Read_All+0x3d0>)
 80031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d8:	f7fd f840 	bl	800025c <__aeabi_dcmplt>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d008      	beq.n	80031f2 <MPU6050_Read_All+0x2d6>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80031e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031e6:	2200      	movs	r2, #0
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <MPU6050_Read_All+0x3d4>)
 80031ea:	f7fd f84b 	bl	8000284 <__aeabi_dcmpgt>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d110      	bne.n	8003214 <MPU6050_Read_All+0x2f8>
 80031f2:	2200      	movs	r2, #0
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <MPU6050_Read_All+0x3d4>)
 80031f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031fa:	f7fd f843 	bl	8000284 <__aeabi_dcmpgt>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d013      	beq.n	800322a <MPU6050_Read_All+0x30e>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003206:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003208:	2200      	movs	r2, #0
 800320a:	4b38      	ldr	r3, [pc, #224]	; (80032ec <MPU6050_Read_All+0x3d0>)
 800320c:	f7fd f826 	bl	800025c <__aeabi_dcmplt>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d00a      	beq.n	800322a <MPU6050_Read_All+0x30e>
    {
        KalmanY.angle = pitch;
 8003214:	4937      	ldr	r1, [pc, #220]	; (80032f4 <MPU6050_Read_All+0x3d8>)
 8003216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	618a      	str	r2, [r1, #24]
 800321c:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 800321e:	6939      	ldr	r1, [r7, #16]
 8003220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	650a      	str	r2, [r1, #80]	; 0x50
 8003226:	654b      	str	r3, [r1, #84]	; 0x54
 8003228:	e015      	b.n	8003256 <MPU6050_Read_All+0x33a>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003232:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8003234:	4e2f      	ldr	r6, [pc, #188]	; (80032f4 <MPU6050_Read_All+0x3d8>)
 8003236:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800323a:	9002      	str	r0, [sp, #8]
 800323c:	9103      	str	r1, [sp, #12]
 800323e:	9200      	str	r2, [sp, #0]
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	0022      	movs	r2, r4
 8003244:	002b      	movs	r3, r5
 8003246:	0030      	movs	r0, r6
 8003248:	f000 f858 	bl	80032fc <Kalman_getAngle>
 800324c:	0002      	movs	r2, r0
 800324e:	000b      	movs	r3, r1
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	650a      	str	r2, [r1, #80]	; 0x50
 8003254:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	0011      	movs	r1, r2
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <MPU6050_Read_All+0x3d4>)
 800326a:	68b8      	ldr	r0, [r7, #8]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	f7fd f809 	bl	8000284 <__aeabi_dcmpgt>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d00d      	beq.n	8003292 <MPU6050_Read_All+0x376>
        DataStruct->Gx = -DataStruct->Gx;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	0011      	movs	r1, r2
 800327e:	6039      	str	r1, [r7, #0]
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	0609      	lsls	r1, r1, #24
 8003284:	4059      	eors	r1, r3
 8003286:	6079      	str	r1, [r7, #4]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	6839      	ldr	r1, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6299      	str	r1, [r3, #40]	; 0x28
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800329a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800329c:	4e16      	ldr	r6, [pc, #88]	; (80032f8 <MPU6050_Read_All+0x3dc>)
 800329e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032a2:	9002      	str	r0, [sp, #8]
 80032a4:	9103      	str	r1, [sp, #12]
 80032a6:	9200      	str	r2, [sp, #0]
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	0022      	movs	r2, r4
 80032ac:	002b      	movs	r3, r5
 80032ae:	0030      	movs	r0, r6
 80032b0:	f000 f824 	bl	80032fc <Kalman_getAngle>
 80032b4:	0002      	movs	r2, r0
 80032b6:	000b      	movs	r3, r1
 80032b8:	6939      	ldr	r1, [r7, #16]
 80032ba:	648a      	str	r2, [r1, #72]	; 0x48
 80032bc:	64cb      	str	r3, [r1, #76]	; 0x4c


}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b015      	add	sp, #84	; 0x54
 80032c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	40d00000 	.word	0x40d00000
 80032cc:	40cc2900 	.word	0x40cc2900
 80032d0:	43aa0000 	.word	0x43aa0000
 80032d4:	42121eb8 	.word	0x42121eb8
 80032d8:	40606000 	.word	0x40606000
 80032dc:	200002e0 	.word	0x200002e0
 80032e0:	408f4000 	.word	0x408f4000
 80032e4:	1a63c1f8 	.word	0x1a63c1f8
 80032e8:	404ca5dc 	.word	0x404ca5dc
 80032ec:	c0568000 	.word	0xc0568000
 80032f0:	40568000 	.word	0x40568000
 80032f4:	20000048 	.word	0x20000048
 80032f8:	20000000 	.word	0x20000000

080032fc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fe:	b093      	sub	sp, #76	; 0x4c
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	603a      	str	r2, [r7, #0]
 8003306:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003310:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003312:	f7fe fc97 	bl	8001c44 <__aeabi_dsub>
 8003316:	0002      	movs	r2, r0
 8003318:	000b      	movs	r3, r1
 800331a:	643a      	str	r2, [r7, #64]	; 0x40
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	699c      	ldr	r4, [r3, #24]
 8003322:	69dd      	ldr	r5, [r3, #28]
 8003324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003328:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800332a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800332c:	f7fe fa1e 	bl	800176c <__aeabi_dmul>
 8003330:	0002      	movs	r2, r0
 8003332:	000b      	movs	r3, r1
 8003334:	0020      	movs	r0, r4
 8003336:	0029      	movs	r1, r5
 8003338:	f7fd fada 	bl	80008f0 <__aeabi_dadd>
 800333c:	0002      	movs	r2, r0
 800333e:	000b      	movs	r3, r1
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	618a      	str	r2, [r1, #24]
 8003344:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800334a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003350:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003352:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003356:	f7fe fa09 	bl	800176c <__aeabi_dmul>
 800335a:	0002      	movs	r2, r0
 800335c:	000b      	movs	r3, r1
 800335e:	0010      	movs	r0, r2
 8003360:	0019      	movs	r1, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f7fe fc6c 	bl	8001c44 <__aeabi_dsub>
 800336c:	0002      	movs	r2, r0
 800336e:	000b      	movs	r3, r1
 8003370:	0010      	movs	r0, r2
 8003372:	0019      	movs	r1, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	f7fe fc63 	bl	8001c44 <__aeabi_dsub>
 800337e:	0002      	movs	r2, r0
 8003380:	000b      	movs	r3, r1
 8003382:	0010      	movs	r0, r2
 8003384:	0019      	movs	r1, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f7fd fab0 	bl	80008f0 <__aeabi_dadd>
 8003390:	0002      	movs	r2, r0
 8003392:	000b      	movs	r3, r1
 8003394:	0010      	movs	r0, r2
 8003396:	0019      	movs	r1, r3
 8003398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	f7fe f9e6 	bl	800176c <__aeabi_dmul>
 80033a0:	0002      	movs	r2, r0
 80033a2:	000b      	movs	r3, r1
 80033a4:	0020      	movs	r0, r4
 80033a6:	0029      	movs	r1, r5
 80033a8:	f7fd faa2 	bl	80008f0 <__aeabi_dadd>
 80033ac:	0002      	movs	r2, r0
 80033ae:	000b      	movs	r3, r1
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	628a      	str	r2, [r1, #40]	; 0x28
 80033b4:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80033ba:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80033c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	f7fe f9d1 	bl	800176c <__aeabi_dmul>
 80033ca:	0002      	movs	r2, r0
 80033cc:	000b      	movs	r3, r1
 80033ce:	0020      	movs	r0, r4
 80033d0:	0029      	movs	r1, r5
 80033d2:	f7fe fc37 	bl	8001c44 <__aeabi_dsub>
 80033d6:	0002      	movs	r2, r0
 80033d8:	000b      	movs	r3, r1
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	630a      	str	r2, [r1, #48]	; 0x30
 80033de:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80033e4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80033ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	f7fe f9bc 	bl	800176c <__aeabi_dmul>
 80033f4:	0002      	movs	r2, r0
 80033f6:	000b      	movs	r3, r1
 80033f8:	0020      	movs	r0, r4
 80033fa:	0029      	movs	r1, r5
 80033fc:	f7fe fc22 	bl	8001c44 <__aeabi_dsub>
 8003400:	0002      	movs	r2, r0
 8003402:	000b      	movs	r3, r1
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	638a      	str	r2, [r1, #56]	; 0x38
 8003408:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800340e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6898      	ldr	r0, [r3, #8]
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	f7fe f9a7 	bl	800176c <__aeabi_dmul>
 800341e:	0002      	movs	r2, r0
 8003420:	000b      	movs	r3, r1
 8003422:	0020      	movs	r0, r4
 8003424:	0029      	movs	r1, r5
 8003426:	f7fd fa63 	bl	80008f0 <__aeabi_dadd>
 800342a:	0002      	movs	r2, r0
 800342c:	000b      	movs	r3, r1
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	640a      	str	r2, [r1, #64]	; 0x40
 8003432:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f7fd fa56 	bl	80008f0 <__aeabi_dadd>
 8003444:	0002      	movs	r2, r0
 8003446:	000b      	movs	r3, r1
 8003448:	63ba      	str	r2, [r7, #56]	; 0x38
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	f7fd fd87 	bl	8000f68 <__aeabi_ddiv>
 800345a:	0002      	movs	r2, r0
 800345c:	000b      	movs	r3, r1
 800345e:	2610      	movs	r6, #16
 8003460:	19b9      	adds	r1, r7, r6
 8003462:	600a      	str	r2, [r1, #0]
 8003464:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800346a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800346c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	f7fd fd7a 	bl	8000f68 <__aeabi_ddiv>
 8003474:	0002      	movs	r2, r0
 8003476:	000b      	movs	r3, r1
 8003478:	19b9      	adds	r1, r7, r6
 800347a:	608a      	str	r2, [r1, #8]
 800347c:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	6838      	ldr	r0, [r7, #0]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	f7fe fbdc 	bl	8001c44 <__aeabi_dsub>
 800348c:	0002      	movs	r2, r0
 800348e:	000b      	movs	r3, r1
 8003490:	633a      	str	r2, [r7, #48]	; 0x30
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	699c      	ldr	r4, [r3, #24]
 8003498:	69dd      	ldr	r5, [r3, #28]
 800349a:	19bb      	adds	r3, r7, r6
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	f7fe f962 	bl	800176c <__aeabi_dmul>
 80034a8:	0002      	movs	r2, r0
 80034aa:	000b      	movs	r3, r1
 80034ac:	0020      	movs	r0, r4
 80034ae:	0029      	movs	r1, r5
 80034b0:	f7fd fa1e 	bl	80008f0 <__aeabi_dadd>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	618a      	str	r2, [r1, #24]
 80034bc:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1c      	ldr	r4, [r3, #32]
 80034c2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80034c4:	19bb      	adds	r3, r7, r6
 80034c6:	6898      	ldr	r0, [r3, #8]
 80034c8:	68d9      	ldr	r1, [r3, #12]
 80034ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	f7fe f94d 	bl	800176c <__aeabi_dmul>
 80034d2:	0002      	movs	r2, r0
 80034d4:	000b      	movs	r3, r1
 80034d6:	0020      	movs	r0, r4
 80034d8:	0029      	movs	r1, r5
 80034da:	f7fd fa09 	bl	80008f0 <__aeabi_dadd>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	620a      	str	r2, [r1, #32]
 80034e6:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	623a      	str	r2, [r7, #32]
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003500:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003502:	19bb      	adds	r3, r7, r6
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	f7fe f92e 	bl	800176c <__aeabi_dmul>
 8003510:	0002      	movs	r2, r0
 8003512:	000b      	movs	r3, r1
 8003514:	0020      	movs	r0, r4
 8003516:	0029      	movs	r1, r5
 8003518:	f7fe fb94 	bl	8001c44 <__aeabi_dsub>
 800351c:	0002      	movs	r2, r0
 800351e:	000b      	movs	r3, r1
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	628a      	str	r2, [r1, #40]	; 0x28
 8003524:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800352a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800352c:	19bb      	adds	r3, r7, r6
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f7fe f919 	bl	800176c <__aeabi_dmul>
 800353a:	0002      	movs	r2, r0
 800353c:	000b      	movs	r3, r1
 800353e:	0020      	movs	r0, r4
 8003540:	0029      	movs	r1, r5
 8003542:	f7fe fb7f 	bl	8001c44 <__aeabi_dsub>
 8003546:	0002      	movs	r2, r0
 8003548:	000b      	movs	r3, r1
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	630a      	str	r2, [r1, #48]	; 0x30
 800354e:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003554:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8003556:	19bb      	adds	r3, r7, r6
 8003558:	6898      	ldr	r0, [r3, #8]
 800355a:	68d9      	ldr	r1, [r3, #12]
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	f7fe f904 	bl	800176c <__aeabi_dmul>
 8003564:	0002      	movs	r2, r0
 8003566:	000b      	movs	r3, r1
 8003568:	0020      	movs	r0, r4
 800356a:	0029      	movs	r1, r5
 800356c:	f7fe fb6a 	bl	8001c44 <__aeabi_dsub>
 8003570:	0002      	movs	r2, r0
 8003572:	000b      	movs	r3, r1
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	638a      	str	r2, [r1, #56]	; 0x38
 8003578:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800357e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003580:	19bb      	adds	r3, r7, r6
 8003582:	6898      	ldr	r0, [r3, #8]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f7fe f8ef 	bl	800176c <__aeabi_dmul>
 800358e:	0002      	movs	r2, r0
 8003590:	000b      	movs	r3, r1
 8003592:	0020      	movs	r0, r4
 8003594:	0029      	movs	r1, r5
 8003596:	f7fe fb55 	bl	8001c44 <__aeabi_dsub>
 800359a:	0002      	movs	r2, r0
 800359c:	000b      	movs	r3, r1
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	640a      	str	r2, [r1, #64]	; 0x40
 80035a2:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	69db      	ldr	r3, [r3, #28]
};
 80035aa:	0010      	movs	r0, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b013      	add	sp, #76	; 0x4c
 80035b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_MspInit+0x44>)
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_MspInit+0x44>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	430a      	orrs	r2, r1
 80035c4:	619a      	str	r2, [r3, #24]
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_MspInit+0x44>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2201      	movs	r2, #1
 80035cc:	4013      	ands	r3, r2
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_MspInit+0x44>)
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_MspInit+0x44>)
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	0549      	lsls	r1, r1, #21
 80035dc:	430a      	orrs	r2, r1
 80035de:	61da      	str	r2, [r3, #28]
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_MspInit+0x44>)
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	055b      	lsls	r3, r3, #21
 80035e8:	4013      	ands	r3, r2
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b08b      	sub	sp, #44	; 0x2c
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	2414      	movs	r4, #20
 8003606:	193b      	adds	r3, r7, r4
 8003608:	0018      	movs	r0, r3
 800360a:	2314      	movs	r3, #20
 800360c:	001a      	movs	r2, r3
 800360e:	2100      	movs	r1, #0
 8003610:	f003 fa6c 	bl	8006aec <memset>
  if(hi2c->Instance==I2C1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_I2C_MspInit+0x90>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d132      	bne.n	8003684 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_I2C_MspInit+0x94>)
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_I2C_MspInit+0x94>)
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	02c9      	lsls	r1, r1, #11
 8003628:	430a      	orrs	r2, r1
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_I2C_MspInit+0x94>)
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	02db      	lsls	r3, r3, #11
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800363a:	193b      	adds	r3, r7, r4
 800363c:	22c0      	movs	r2, #192	; 0xc0
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003642:	0021      	movs	r1, r4
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2212      	movs	r2, #18
 8003648:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2203      	movs	r2, #3
 8003654:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2201      	movs	r2, #1
 800365a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365c:	187b      	adds	r3, r7, r1
 800365e:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <HAL_I2C_MspInit+0x98>)
 8003660:	0019      	movs	r1, r3
 8003662:	0010      	movs	r0, r2
 8003664:	f000 fb2a 	bl	8003cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_I2C_MspInit+0x94>)
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_I2C_MspInit+0x94>)
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	0389      	lsls	r1, r1, #14
 8003672:	430a      	orrs	r2, r1
 8003674:	61da      	str	r2, [r3, #28]
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_I2C_MspInit+0x94>)
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	039b      	lsls	r3, r3, #14
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b00b      	add	sp, #44	; 0x2c
 800368a:	bd90      	pop	{r4, r7, pc}
 800368c:	40005400 	.word	0x40005400
 8003690:	40021000 	.word	0x40021000
 8003694:	48000400 	.word	0x48000400

08003698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b08d      	sub	sp, #52	; 0x34
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	241c      	movs	r4, #28
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	0018      	movs	r0, r3
 80036a6:	2314      	movs	r3, #20
 80036a8:	001a      	movs	r2, r3
 80036aa:	2100      	movs	r1, #0
 80036ac:	f003 fa1e 	bl	8006aec <memset>
  if(huart->Instance==USART1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a41      	ldr	r2, [pc, #260]	; (80037bc <HAL_UART_MspInit+0x124>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d13c      	bne.n	8003734 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_UART_MspInit+0x128>)
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_UART_MspInit+0x128>)
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	01c9      	lsls	r1, r1, #7
 80036c4:	430a      	orrs	r2, r1
 80036c6:	619a      	str	r2, [r3, #24]
 80036c8:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_UART_MspInit+0x128>)
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	01db      	lsls	r3, r3, #7
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_UART_MspInit+0x128>)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_UART_MspInit+0x128>)
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0289      	lsls	r1, r1, #10
 80036e0:	430a      	orrs	r2, r1
 80036e2:	615a      	str	r2, [r3, #20]
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_UART_MspInit+0x128>)
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	4013      	ands	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	22c0      	movs	r2, #192	; 0xc0
 80036f6:	00d2      	lsls	r2, r2, #3
 80036f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	0021      	movs	r1, r4
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	2202      	movs	r2, #2
 8003700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	187b      	adds	r3, r7, r1
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003708:	187b      	adds	r3, r7, r1
 800370a:	2203      	movs	r2, #3
 800370c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2201      	movs	r2, #1
 8003712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	187a      	adds	r2, r7, r1
 8003716:	2390      	movs	r3, #144	; 0x90
 8003718:	05db      	lsls	r3, r3, #23
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f000 facd 	bl	8003cbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	201b      	movs	r0, #27
 8003728:	f000 fa18 	bl	8003b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800372c:	201b      	movs	r0, #27
 800372e:	f000 fa2a 	bl	8003b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003732:	e03f      	b.n	80037b4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <HAL_UART_MspInit+0x12c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d13a      	bne.n	80037b4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_UART_MspInit+0x128>)
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_UART_MspInit+0x128>)
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0289      	lsls	r1, r1, #10
 8003748:	430a      	orrs	r2, r1
 800374a:	61da      	str	r2, [r3, #28]
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_UART_MspInit+0x128>)
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	029b      	lsls	r3, r3, #10
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_UART_MspInit+0x128>)
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <HAL_UART_MspInit+0x128>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0289      	lsls	r1, r1, #10
 8003764:	430a      	orrs	r2, r1
 8003766:	615a      	str	r2, [r3, #20]
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_UART_MspInit+0x128>)
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003776:	211c      	movs	r1, #28
 8003778:	187b      	adds	r3, r7, r1
 800377a:	220c      	movs	r2, #12
 800377c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2202      	movs	r2, #2
 8003782:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	187b      	adds	r3, r7, r1
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2201      	movs	r2, #1
 8003794:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	187a      	adds	r2, r7, r1
 8003798:	2390      	movs	r3, #144	; 0x90
 800379a:	05db      	lsls	r3, r3, #23
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 fa8c 	bl	8003cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	201c      	movs	r0, #28
 80037aa:	f000 f9d7 	bl	8003b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037ae:	201c      	movs	r0, #28
 80037b0:	f000 f9e9 	bl	8003b86 <HAL_NVIC_EnableIRQ>
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b00d      	add	sp, #52	; 0x34
 80037ba:	bd90      	pop	{r4, r7, pc}
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40004400 	.word	0x40004400

080037c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037cc:	e7fe      	b.n	80037cc <NMI_Handler+0x4>

080037ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d2:	e7fe      	b.n	80037d2 <HardFault_Handler+0x4>

080037d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ec:	f000 f8ca 	bl	8003984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <USART1_IRQHandler+0x14>)
 80037fe:	0018      	movs	r0, r3
 8003800:	f002 f952 	bl	8005aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000168 	.word	0x20000168

08003810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <USART2_IRQHandler+0x14>)
 8003816:	0018      	movs	r0, r3
 8003818:	f002 f946 	bl	8005aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	200001ec 	.word	0x200001ec

08003828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <_sbrk+0x5c>)
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <_sbrk+0x60>)
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <_sbrk+0x64>)
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <_sbrk+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003858:	f003 f91e 	bl	8006a98 <__errno>
 800385c:	0003      	movs	r3, r0
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003862:	2301      	movs	r3, #1
 8003864:	425b      	negs	r3, r3
 8003866:	e009      	b.n	800387c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	18d2      	adds	r2, r2, r3
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <_sbrk+0x64>)
 8003878:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20008000 	.word	0x20008000
 8003888:	00000400 	.word	0x00000400
 800388c:	200002e4 	.word	0x200002e4
 8003890:	20000300 	.word	0x20000300

08003894 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038a0:	480d      	ldr	r0, [pc, #52]	; (80038d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a4:	480d      	ldr	r0, [pc, #52]	; (80038dc <LoopForever+0x6>)
  ldr r1, =_edata
 80038a6:	490e      	ldr	r1, [pc, #56]	; (80038e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038a8:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <LoopForever+0xe>)
  movs r3, #0
 80038aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038ac:	e002      	b.n	80038b4 <LoopCopyDataInit>

080038ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b2:	3304      	adds	r3, #4

080038b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b8:	d3f9      	bcc.n	80038ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ba:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038bc:	4c0b      	ldr	r4, [pc, #44]	; (80038ec <LoopForever+0x16>)
  movs r3, #0
 80038be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c0:	e001      	b.n	80038c6 <LoopFillZerobss>

080038c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c4:	3204      	adds	r2, #4

080038c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c8:	d3fb      	bcc.n	80038c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80038ca:	f7ff ffe3 	bl	8003894 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80038ce:	f003 f8e9 	bl	8006aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038d2:	f7ff f8bd 	bl	8002a50 <main>

080038d6 <LoopForever>:

LoopForever:
    b LoopForever
 80038d6:	e7fe      	b.n	80038d6 <LoopForever>
  ldr   r0, =_estack
 80038d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80038dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80038e4:	08007c18 	.word	0x08007c18
  ldr r2, =_sbss
 80038e8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80038ec:	200002fc 	.word	0x200002fc

080038f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038f0:	e7fe      	b.n	80038f0 <ADC1_COMP_IRQHandler>
	...

080038f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_Init+0x24>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_Init+0x24>)
 80038fe:	2110      	movs	r1, #16
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003904:	2000      	movs	r0, #0
 8003906:	f000 f809 	bl	800391c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800390a:	f7ff fe53 	bl	80035b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40022000 	.word	0x40022000

0800391c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_InitTick+0x5c>)
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_InitTick+0x60>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	23fa      	movs	r3, #250	; 0xfa
 8003930:	0098      	lsls	r0, r3, #2
 8003932:	f7fc fbf1 	bl	8000118 <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	0019      	movs	r1, r3
 800393a:	0020      	movs	r0, r4
 800393c:	f7fc fbec 	bl	8000118 <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0018      	movs	r0, r3
 8003944:	f000 f92f 	bl	8003ba6 <HAL_SYSTICK_Config>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d001      	beq.n	8003950 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e00f      	b.n	8003970 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d80b      	bhi.n	800396e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	2301      	movs	r3, #1
 800395a:	425b      	negs	r3, r3
 800395c:	2200      	movs	r2, #0
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f8fc 	bl	8003b5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_InitTick+0x64>)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b003      	add	sp, #12
 8003976:	bd90      	pop	{r4, r7, pc}
 8003978:	20000090 	.word	0x20000090
 800397c:	20000098 	.word	0x20000098
 8003980:	20000094 	.word	0x20000094

08003984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_IncTick+0x1c>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	001a      	movs	r2, r3
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_IncTick+0x20>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	18d2      	adds	r2, r2, r3
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_IncTick+0x20>)
 8003996:	601a      	str	r2, [r3, #0]
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20000098 	.word	0x20000098
 80039a4:	200002e8 	.word	0x200002e8

080039a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  return uwTick;
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_GetTick+0x10>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	200002e8 	.word	0x200002e8

080039bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c4:	f7ff fff0 	bl	80039a8 <HAL_GetTick>
 80039c8:	0003      	movs	r3, r0
 80039ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3301      	adds	r3, #1
 80039d4:	d005      	beq.n	80039e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_Delay+0x44>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	001a      	movs	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	f7ff ffe0 	bl	80039a8 <HAL_GetTick>
 80039e8:	0002      	movs	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d8f7      	bhi.n	80039e4 <HAL_Delay+0x28>
  {
  }
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	20000098 	.word	0x20000098

08003a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	1dfb      	adds	r3, r7, #7
 8003a0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b7f      	cmp	r3, #127	; 0x7f
 8003a16:	d809      	bhi.n	8003a2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a18:	1dfb      	adds	r3, r7, #7
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	231f      	movs	r3, #31
 8003a20:	401a      	ands	r2, r3
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <__NVIC_EnableIRQ+0x30>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	4091      	lsls	r1, r2
 8003a28:	000a      	movs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
  }
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	e000e100 	.word	0xe000e100

08003a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	0002      	movs	r2, r0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a46:	1dfb      	adds	r3, r7, #7
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4c:	d828      	bhi.n	8003aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <__NVIC_SetPriority+0xd4>)
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	33c0      	adds	r3, #192	; 0xc0
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	589b      	ldr	r3, [r3, r2]
 8003a5e:	1dfa      	adds	r2, r7, #7
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	0011      	movs	r1, r2
 8003a64:	2203      	movs	r2, #3
 8003a66:	400a      	ands	r2, r1
 8003a68:	00d2      	lsls	r2, r2, #3
 8003a6a:	21ff      	movs	r1, #255	; 0xff
 8003a6c:	4091      	lsls	r1, r2
 8003a6e:	000a      	movs	r2, r1
 8003a70:	43d2      	mvns	r2, r2
 8003a72:	401a      	ands	r2, r3
 8003a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	22ff      	movs	r2, #255	; 0xff
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	0018      	movs	r0, r3
 8003a84:	2303      	movs	r3, #3
 8003a86:	4003      	ands	r3, r0
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a8c:	481f      	ldr	r0, [pc, #124]	; (8003b0c <__NVIC_SetPriority+0xd4>)
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	430a      	orrs	r2, r1
 8003a98:	33c0      	adds	r3, #192	; 0xc0
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a9e:	e031      	b.n	8003b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <__NVIC_SetPriority+0xd8>)
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	230f      	movs	r3, #15
 8003aaa:	400b      	ands	r3, r1
 8003aac:	3b08      	subs	r3, #8
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3306      	adds	r3, #6
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	18d3      	adds	r3, r2, r3
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1dfa      	adds	r2, r7, #7
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	0011      	movs	r1, r2
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	00d2      	lsls	r2, r2, #3
 8003ac6:	21ff      	movs	r1, #255	; 0xff
 8003ac8:	4091      	lsls	r1, r2
 8003aca:	000a      	movs	r2, r1
 8003acc:	43d2      	mvns	r2, r2
 8003ace:	401a      	ands	r2, r3
 8003ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	401a      	ands	r2, r3
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	4003      	ands	r3, r0
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ae8:	4809      	ldr	r0, [pc, #36]	; (8003b10 <__NVIC_SetPriority+0xd8>)
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	001c      	movs	r4, r3
 8003af0:	230f      	movs	r3, #15
 8003af2:	4023      	ands	r3, r4
 8003af4:	3b08      	subs	r3, #8
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	430a      	orrs	r2, r1
 8003afa:	3306      	adds	r3, #6
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	18c3      	adds	r3, r0, r3
 8003b00:	3304      	adds	r3, #4
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b003      	add	sp, #12
 8003b0a:	bd90      	pop	{r4, r7, pc}
 8003b0c:	e000e100 	.word	0xe000e100
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	045b      	lsls	r3, r3, #17
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d301      	bcc.n	8003b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e010      	b.n	8003b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <SysTick_Config+0x44>)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	3a01      	subs	r2, #1
 8003b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b34:	2301      	movs	r3, #1
 8003b36:	425b      	negs	r3, r3
 8003b38:	2103      	movs	r1, #3
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff ff7c 	bl	8003a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <SysTick_Config+0x44>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b46:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <SysTick_Config+0x44>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	e000e010 	.word	0xe000e010

08003b5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	210f      	movs	r1, #15
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	1c02      	adds	r2, r0, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7ff ff5d 	bl	8003a38 <__NVIC_SetPriority>
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	1dfb      	adds	r3, r7, #7
 8003b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b25b      	sxtb	r3, r3
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff ff33 	bl	8003a04 <__NVIC_EnableIRQ>
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff ffaf 	bl	8003b14 <SysTick_Config>
 8003bb6:	0003      	movs	r3, r0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2221      	movs	r2, #33	; 0x21
 8003bcc:	5c9b      	ldrb	r3, [r3, r2]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d008      	beq.n	8003be6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e020      	b.n	8003c28 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	210e      	movs	r1, #14
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	438a      	bics	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4091      	lsls	r1, r2
 8003c12:	000a      	movs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	210f      	movs	r1, #15
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2221      	movs	r2, #33	; 0x21
 8003c44:	5c9b      	ldrb	r3, [r3, r2]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d006      	beq.n	8003c5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e028      	b.n	8003cac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	210e      	movs	r1, #14
 8003c66:	438a      	bics	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2101      	movs	r1, #1
 8003c84:	4091      	lsls	r1, r2
 8003c86:	000a      	movs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	0010      	movs	r0, r2
 8003caa:	4798      	blx	r3
    } 
  }
  return status;
 8003cac:	230f      	movs	r3, #15
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	781b      	ldrb	r3, [r3, #0]
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b004      	add	sp, #16
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cca:	e155      	b.n	8003f78 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4091      	lsls	r1, r2
 8003cd6:	000a      	movs	r2, r1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <HAL_GPIO_Init+0x28>
 8003ce2:	e146      	b.n	8003f72 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d005      	beq.n	8003cfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d130      	bne.n	8003d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	0013      	movs	r3, r2
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	0013      	movs	r3, r2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d32:	2201      	movs	r2, #1
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	2201      	movs	r2, #1
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d017      	beq.n	8003d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	409a      	lsls	r2, r3
 8003d78:	0013      	movs	r3, r2
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d123      	bne.n	8003dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	58d3      	ldr	r3, [r2, r3]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2207      	movs	r2, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2107      	movs	r1, #7
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	0013      	movs	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	6939      	ldr	r1, [r7, #16]
 8003dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	0013      	movs	r3, r2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	23c0      	movs	r3, #192	; 0xc0
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <HAL_GPIO_Init+0x174>
 8003e2e:	e0a0      	b.n	8003f72 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e30:	4b57      	ldr	r3, [pc, #348]	; (8003f90 <HAL_GPIO_Init+0x2d4>)
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_GPIO_Init+0x2d4>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	619a      	str	r2, [r3, #24]
 8003e3c:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <HAL_GPIO_Init+0x2d4>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2201      	movs	r2, #1
 8003e42:	4013      	ands	r3, r2
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e48:	4a52      	ldr	r2, [pc, #328]	; (8003f94 <HAL_GPIO_Init+0x2d8>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	589b      	ldr	r3, [r3, r2]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	220f      	movs	r2, #15
 8003e60:	409a      	lsls	r2, r3
 8003e62:	0013      	movs	r3, r2
 8003e64:	43da      	mvns	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	2390      	movs	r3, #144	; 0x90
 8003e70:	05db      	lsls	r3, r3, #23
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_Init+0x1ee>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a47      	ldr	r2, [pc, #284]	; (8003f98 <HAL_GPIO_Init+0x2dc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_Init+0x1ea>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a46      	ldr	r2, [pc, #280]	; (8003f9c <HAL_GPIO_Init+0x2e0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_Init+0x1e6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a45      	ldr	r2, [pc, #276]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_Init+0x1e2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a44      	ldr	r2, [pc, #272]	; (8003fa4 <HAL_GPIO_Init+0x2e8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_Init+0x1de>
 8003e96:	2304      	movs	r3, #4
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_Init+0x1f0>
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x1f0>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_Init+0x1f0>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_Init+0x1f0>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_Init+0x1f0>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	2103      	movs	r1, #3
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ebc:	4935      	ldr	r1, [pc, #212]	; (8003f94 <HAL_GPIO_Init+0x2d8>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	025b      	lsls	r3, r3, #9
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	43da      	mvns	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	035b      	lsls	r3, r3, #13
 8003f36:	4013      	ands	r3, r2
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	039b      	lsls	r3, r3, #14
 8003f60:	4013      	ands	r3, r2
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3301      	adds	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	40da      	lsrs	r2, r3
 8003f80:	1e13      	subs	r3, r2, #0
 8003f82:	d000      	beq.n	8003f86 <HAL_GPIO_Init+0x2ca>
 8003f84:	e6a2      	b.n	8003ccc <HAL_GPIO_Init+0x10>
  } 
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b006      	add	sp, #24
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48000c00 	.word	0x48000c00
 8003fa4:	48001000 	.word	0x48001000
 8003fa8:	40010400 	.word	0x40010400

08003fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	0008      	movs	r0, r1
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	1c02      	adds	r2, r0, #0
 8003fbc:	801a      	strh	r2, [r3, #0]
 8003fbe:	1c7b      	adds	r3, r7, #1
 8003fc0:	1c0a      	adds	r2, r1, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc4:	1c7b      	adds	r3, r7, #1
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fcc:	1cbb      	adds	r3, r7, #2
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fd4:	e003      	b.n	8003fde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fd6:	1cbb      	adds	r3, r7, #2
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b002      	add	sp, #8
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e082      	b.n	8004100 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2241      	movs	r2, #65	; 0x41
 8003ffe:	5c9b      	ldrb	r3, [r3, r2]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2240      	movs	r2, #64	; 0x40
 800400a:	2100      	movs	r1, #0
 800400c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	0018      	movs	r0, r3
 8004012:	f7ff faf3 	bl	80035fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2241      	movs	r2, #65	; 0x41
 800401a:	2124      	movs	r1, #36	; 0x24
 800401c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2101      	movs	r1, #1
 800402a:	438a      	bics	r2, r1
 800402c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4934      	ldr	r1, [pc, #208]	; (8004108 <HAL_I2C_Init+0x120>)
 8004038:	400a      	ands	r2, r1
 800403a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4931      	ldr	r1, [pc, #196]	; (800410c <HAL_I2C_Init+0x124>)
 8004048:	400a      	ands	r2, r1
 800404a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d108      	bne.n	8004066 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0209      	lsls	r1, r1, #8
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e007      	b.n	8004076 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2184      	movs	r1, #132	; 0x84
 8004070:	0209      	lsls	r1, r1, #8
 8004072:	430a      	orrs	r2, r1
 8004074:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d104      	bne.n	8004088 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2280      	movs	r2, #128	; 0x80
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	491f      	ldr	r1, [pc, #124]	; (8004110 <HAL_I2C_Init+0x128>)
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	491a      	ldr	r1, [pc, #104]	; (800410c <HAL_I2C_Init+0x124>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69d9      	ldr	r1, [r3, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2101      	movs	r1, #1
 80040de:	430a      	orrs	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2241      	movs	r2, #65	; 0x41
 80040ec:	2120      	movs	r1, #32
 80040ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2242      	movs	r2, #66	; 0x42
 80040fa:	2100      	movs	r1, #0
 80040fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}
 8004108:	f0ffffff 	.word	0xf0ffffff
 800410c:	ffff7fff 	.word	0xffff7fff
 8004110:	02008000 	.word	0x02008000

08004114 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	000c      	movs	r4, r1
 800411e:	0010      	movs	r0, r2
 8004120:	0019      	movs	r1, r3
 8004122:	230a      	movs	r3, #10
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	1c22      	adds	r2, r4, #0
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	2308      	movs	r3, #8
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	1c02      	adds	r2, r0, #0
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	1dbb      	adds	r3, r7, #6
 8004134:	1c0a      	adds	r2, r1, #0
 8004136:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2241      	movs	r2, #65	; 0x41
 800413c:	5c9b      	ldrb	r3, [r3, r2]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d000      	beq.n	8004146 <HAL_I2C_Mem_Write+0x32>
 8004144:	e10c      	b.n	8004360 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_I2C_Mem_Write+0x42>
 800414c:	232c      	movs	r3, #44	; 0x2c
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0ff      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2240      	movs	r2, #64	; 0x40
 8004166:	5c9b      	ldrb	r3, [r3, r2]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_I2C_Mem_Write+0x5c>
 800416c:	2302      	movs	r3, #2
 800416e:	e0f8      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004178:	f7ff fc16 	bl	80039a8 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	0219      	lsls	r1, r3, #8
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2319      	movs	r3, #25
 800418c:	2201      	movs	r2, #1
 800418e:	f000 fb0b 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004192:	1e03      	subs	r3, r0, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0e3      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2241      	movs	r2, #65	; 0x41
 800419e:	2121      	movs	r1, #33	; 0x21
 80041a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2242      	movs	r2, #66	; 0x42
 80041a6:	2140      	movs	r1, #64	; 0x40
 80041a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	222c      	movs	r2, #44	; 0x2c
 80041ba:	18ba      	adds	r2, r7, r2
 80041bc:	8812      	ldrh	r2, [r2, #0]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	881c      	ldrh	r4, [r3, #0]
 80041ca:	2308      	movs	r3, #8
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	881a      	ldrh	r2, [r3, #0]
 80041d0:	230a      	movs	r3, #10
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	8819      	ldrh	r1, [r3, #0]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	0023      	movs	r3, r4
 80041e2:	f000 f9f9 	bl	80045d8 <I2C_RequestMemoryWrite>
 80041e6:	1e03      	subs	r3, r0, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2240      	movs	r2, #64	; 0x40
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0b5      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2bff      	cmp	r3, #255	; 0xff
 80041fe:	d911      	bls.n	8004224 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	22ff      	movs	r2, #255	; 0xff
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	b2da      	uxtb	r2, r3
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	045c      	lsls	r4, r3, #17
 8004210:	230a      	movs	r3, #10
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	8819      	ldrh	r1, [r3, #0]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	0023      	movs	r3, r4
 800421e:	f000 fbf7 	bl	8004a10 <I2C_TransferConfig>
 8004222:	e012      	b.n	800424a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	b2da      	uxtb	r2, r3
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	049c      	lsls	r4, r3, #18
 8004238:	230a      	movs	r3, #10
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	8819      	ldrh	r1, [r3, #0]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	2300      	movs	r3, #0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	0023      	movs	r3, r4
 8004246:	f000 fbe3 	bl	8004a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	0018      	movs	r0, r3
 8004252:	f000 fae8 	bl	8004826 <I2C_WaitOnTXISFlagUntilTimeout>
 8004256:	1e03      	subs	r3, r0, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e081      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d03a      	beq.n	800430e <HAL_I2C_Mem_Write+0x1fa>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	d136      	bne.n	800430e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0013      	movs	r3, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	f000 fa7b 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	1e03      	subs	r3, r0, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e053      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2bff      	cmp	r3, #255	; 0xff
 80042c2:	d911      	bls.n	80042e8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	045c      	lsls	r4, r3, #17
 80042d4:	230a      	movs	r3, #10
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	8819      	ldrh	r1, [r3, #0]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	2300      	movs	r3, #0
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	0023      	movs	r3, r4
 80042e2:	f000 fb95 	bl	8004a10 <I2C_TransferConfig>
 80042e6:	e012      	b.n	800430e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	049c      	lsls	r4, r3, #18
 80042fc:	230a      	movs	r3, #10
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	8819      	ldrh	r1, [r3, #0]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	2300      	movs	r3, #0
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	0023      	movs	r3, r4
 800430a:	f000 fb81 	bl	8004a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d198      	bne.n	800424a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	0018      	movs	r0, r3
 8004320:	f000 fac0 	bl	80048a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e01a      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2220      	movs	r2, #32
 8004332:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	490b      	ldr	r1, [pc, #44]	; (800436c <HAL_I2C_Mem_Write+0x258>)
 8004340:	400a      	ands	r2, r1
 8004342:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2241      	movs	r2, #65	; 0x41
 8004348:	2120      	movs	r1, #32
 800434a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2242      	movs	r2, #66	; 0x42
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	2100      	movs	r1, #0
 800435a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b007      	add	sp, #28
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	fe00e800 	.word	0xfe00e800

08004370 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	000c      	movs	r4, r1
 800437a:	0010      	movs	r0, r2
 800437c:	0019      	movs	r1, r3
 800437e:	230a      	movs	r3, #10
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	1c22      	adds	r2, r4, #0
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	2308      	movs	r3, #8
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	1c02      	adds	r2, r0, #0
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	1dbb      	adds	r3, r7, #6
 8004390:	1c0a      	adds	r2, r1, #0
 8004392:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2241      	movs	r2, #65	; 0x41
 8004398:	5c9b      	ldrb	r3, [r3, r2]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b20      	cmp	r3, #32
 800439e:	d000      	beq.n	80043a2 <HAL_I2C_Mem_Read+0x32>
 80043a0:	e110      	b.n	80045c4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_I2C_Mem_Read+0x42>
 80043a8:	232c      	movs	r3, #44	; 0x2c
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	0092      	lsls	r2, r2, #2
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e103      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2240      	movs	r2, #64	; 0x40
 80043c2:	5c9b      	ldrb	r3, [r3, r2]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_I2C_Mem_Read+0x5c>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e0fc      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2240      	movs	r2, #64	; 0x40
 80043d0:	2101      	movs	r1, #1
 80043d2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043d4:	f7ff fae8 	bl	80039a8 <HAL_GetTick>
 80043d8:	0003      	movs	r3, r0
 80043da:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	0219      	lsls	r1, r3, #8
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2319      	movs	r3, #25
 80043e8:	2201      	movs	r2, #1
 80043ea:	f000 f9dd 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	1e03      	subs	r3, r0, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0e7      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2241      	movs	r2, #65	; 0x41
 80043fa:	2122      	movs	r1, #34	; 0x22
 80043fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2242      	movs	r2, #66	; 0x42
 8004402:	2140      	movs	r1, #64	; 0x40
 8004404:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	222c      	movs	r2, #44	; 0x2c
 8004416:	18ba      	adds	r2, r7, r2
 8004418:	8812      	ldrh	r2, [r2, #0]
 800441a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	881c      	ldrh	r4, [r3, #0]
 8004426:	2308      	movs	r3, #8
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	230a      	movs	r3, #10
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	8819      	ldrh	r1, [r3, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	0023      	movs	r3, r4
 800443e:	f000 f92f 	bl	80046a0 <I2C_RequestMemoryRead>
 8004442:	1e03      	subs	r3, r0, #0
 8004444:	d005      	beq.n	8004452 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2240      	movs	r2, #64	; 0x40
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e0b9      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2bff      	cmp	r3, #255	; 0xff
 800445a:	d911      	bls.n	8004480 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	b2da      	uxtb	r2, r3
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	045c      	lsls	r4, r3, #17
 800446c:	230a      	movs	r3, #10
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	8819      	ldrh	r1, [r3, #0]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	4b56      	ldr	r3, [pc, #344]	; (80045d0 <HAL_I2C_Mem_Read+0x260>)
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	0023      	movs	r3, r4
 800447a:	f000 fac9 	bl	8004a10 <I2C_TransferConfig>
 800447e:	e012      	b.n	80044a6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	b2da      	uxtb	r2, r3
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	049c      	lsls	r4, r3, #18
 8004494:	230a      	movs	r3, #10
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	8819      	ldrh	r1, [r3, #0]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	4b4c      	ldr	r3, [pc, #304]	; (80045d0 <HAL_I2C_Mem_Read+0x260>)
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	0023      	movs	r3, r4
 80044a2:	f000 fab5 	bl	8004a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	0013      	movs	r3, r2
 80044b0:	2200      	movs	r2, #0
 80044b2:	2104      	movs	r1, #4
 80044b4:	f000 f978 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e082      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d03a      	beq.n	8004572 <HAL_I2C_Mem_Read+0x202>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d136      	bne.n	8004572 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	0013      	movs	r3, r2
 800450e:	2200      	movs	r2, #0
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	f000 f949 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004516:	1e03      	subs	r3, r0, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e053      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	2bff      	cmp	r3, #255	; 0xff
 8004526:	d911      	bls.n	800454c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	22ff      	movs	r2, #255	; 0xff
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	b2da      	uxtb	r2, r3
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	045c      	lsls	r4, r3, #17
 8004538:	230a      	movs	r3, #10
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	8819      	ldrh	r1, [r3, #0]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	2300      	movs	r3, #0
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	0023      	movs	r3, r4
 8004546:	f000 fa63 	bl	8004a10 <I2C_TransferConfig>
 800454a:	e012      	b.n	8004572 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	b2da      	uxtb	r2, r3
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	049c      	lsls	r4, r3, #18
 8004560:	230a      	movs	r3, #10
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	8819      	ldrh	r1, [r3, #0]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	2300      	movs	r3, #0
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	0023      	movs	r3, r4
 800456e:	f000 fa4f 	bl	8004a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d194      	bne.n	80044a6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f98e 	bl	80048a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e01a      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2220      	movs	r2, #32
 8004596:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	490c      	ldr	r1, [pc, #48]	; (80045d4 <HAL_I2C_Mem_Read+0x264>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2241      	movs	r2, #65	; 0x41
 80045ac:	2120      	movs	r1, #32
 80045ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2242      	movs	r2, #66	; 0x42
 80045b4:	2100      	movs	r1, #0
 80045b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2240      	movs	r2, #64	; 0x40
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b007      	add	sp, #28
 80045cc:	bd90      	pop	{r4, r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	80002400 	.word	0x80002400
 80045d4:	fe00e800 	.word	0xfe00e800

080045d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	000c      	movs	r4, r1
 80045e2:	0010      	movs	r0, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	250a      	movs	r5, #10
 80045e8:	197b      	adds	r3, r7, r5
 80045ea:	1c22      	adds	r2, r4, #0
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	2308      	movs	r3, #8
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	1c02      	adds	r2, r0, #0
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	1dbb      	adds	r3, r7, #6
 80045f8:	1c0a      	adds	r2, r1, #0
 80045fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045fc:	1dbb      	adds	r3, r7, #6
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	045c      	lsls	r4, r3, #17
 8004606:	197b      	adds	r3, r7, r5
 8004608:	8819      	ldrh	r1, [r3, #0]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	4b23      	ldr	r3, [pc, #140]	; (800469c <I2C_RequestMemoryWrite+0xc4>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	0023      	movs	r3, r4
 8004612:	f000 f9fd 	bl	8004a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	6a39      	ldr	r1, [r7, #32]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	0018      	movs	r0, r3
 800461e:	f000 f902 	bl	8004826 <I2C_WaitOnTXISFlagUntilTimeout>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d001      	beq.n	800462a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e033      	b.n	8004692 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	2308      	movs	r3, #8
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
 8004640:	e019      	b.n	8004676 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004642:	2308      	movs	r3, #8
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b29b      	uxth	r3, r3
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	6a39      	ldr	r1, [r7, #32]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	0018      	movs	r0, r3
 800465c:	f000 f8e3 	bl	8004826 <I2C_WaitOnTXISFlagUntilTimeout>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d001      	beq.n	8004668 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e014      	b.n	8004692 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004668:	2308      	movs	r3, #8
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	0013      	movs	r3, r2
 8004680:	2200      	movs	r2, #0
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	f000 f890 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d001      	beq.n	8004690 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b004      	add	sp, #16
 8004698:	bdb0      	pop	{r4, r5, r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	80002000 	.word	0x80002000

080046a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	000c      	movs	r4, r1
 80046aa:	0010      	movs	r0, r2
 80046ac:	0019      	movs	r1, r3
 80046ae:	250a      	movs	r5, #10
 80046b0:	197b      	adds	r3, r7, r5
 80046b2:	1c22      	adds	r2, r4, #0
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	2308      	movs	r3, #8
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	1c02      	adds	r2, r0, #0
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	1dbb      	adds	r3, r7, #6
 80046c0:	1c0a      	adds	r2, r1, #0
 80046c2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046c4:	1dbb      	adds	r3, r7, #6
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	197b      	adds	r3, r7, r5
 80046cc:	8819      	ldrh	r1, [r3, #0]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <I2C_RequestMemoryRead+0xc0>)
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	f000 f99b 	bl	8004a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	6a39      	ldr	r1, [r7, #32]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 f8a0 	bl	8004826 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e6:	1e03      	subs	r3, r0, #0
 80046e8:	d001      	beq.n	80046ee <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e033      	b.n	8004756 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ee:	1dbb      	adds	r3, r7, #6
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046f6:	2308      	movs	r3, #8
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
 8004704:	e019      	b.n	800473a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004706:	2308      	movs	r3, #8
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	b29b      	uxth	r3, r3
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	6a39      	ldr	r1, [r7, #32]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f881 	bl	8004826 <I2C_WaitOnTXISFlagUntilTimeout>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d001      	beq.n	800472c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e014      	b.n	8004756 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800472c:	2308      	movs	r3, #8
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800473a:	6a3a      	ldr	r2, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	0013      	movs	r3, r2
 8004744:	2200      	movs	r2, #0
 8004746:	2140      	movs	r1, #64	; 0x40
 8004748:	f000 f82e 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bdb0      	pop	{r4, r5, r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	80002000 	.word	0x80002000

08004764 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d103      	bne.n	8004782 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2201      	movs	r2, #1
 800478a:	4013      	ands	r3, r2
 800478c:	2b01      	cmp	r3, #1
 800478e:	d007      	beq.n	80047a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
  }
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b002      	add	sp, #8
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b8:	e021      	b.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	d01e      	beq.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7ff f8f2 	bl	80039a8 <HAL_GetTick>
 80047c4:	0002      	movs	r2, r0
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d113      	bne.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	2220      	movs	r2, #32
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2241      	movs	r2, #65	; 0x41
 80047e6:	2120      	movs	r1, #32
 80047e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2242      	movs	r2, #66	; 0x42
 80047ee:	2100      	movs	r1, #0
 80047f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	2100      	movs	r1, #0
 80047f8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00f      	b.n	800481e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	425a      	negs	r2, r3
 800480e:	4153      	adcs	r3, r2
 8004810:	b2db      	uxtb	r3, r3
 8004812:	001a      	movs	r2, r3
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d0ce      	beq.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}

08004826 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004832:	e02b      	b.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 f86e 	bl	800491c <I2C_IsAcknowledgeFailed>
 8004840:	1e03      	subs	r3, r0, #0
 8004842:	d001      	beq.n	8004848 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e029      	b.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3301      	adds	r3, #1
 800484c:	d01e      	beq.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7ff f8ab 	bl	80039a8 <HAL_GetTick>
 8004852:	0002      	movs	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d113      	bne.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	2220      	movs	r2, #32
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2241      	movs	r2, #65	; 0x41
 8004874:	2120      	movs	r1, #32
 8004876:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2242      	movs	r2, #66	; 0x42
 800487c:	2100      	movs	r1, #0
 800487e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2240      	movs	r2, #64	; 0x40
 8004884:	2100      	movs	r1, #0
 8004886:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e007      	b.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2202      	movs	r2, #2
 8004894:	4013      	ands	r3, r2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d1cc      	bne.n	8004834 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b0:	e028      	b.n	8004904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 f82f 	bl	800491c <I2C_IsAcknowledgeFailed>
 80048be:	1e03      	subs	r3, r0, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e026      	b.n	8004914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7ff f86f 	bl	80039a8 <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d113      	bne.n	8004904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	2220      	movs	r2, #32
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2241      	movs	r2, #65	; 0x41
 80048ec:	2120      	movs	r1, #32
 80048ee:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2242      	movs	r2, #66	; 0x42
 80048f4:	2100      	movs	r1, #0
 80048f6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e007      	b.n	8004914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2220      	movs	r2, #32
 800490c:	4013      	ands	r3, r2
 800490e:	2b20      	cmp	r3, #32
 8004910:	d1cf      	bne.n	80048b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b004      	add	sp, #16
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2210      	movs	r2, #16
 8004930:	4013      	ands	r3, r2
 8004932:	2b10      	cmp	r3, #16
 8004934:	d164      	bne.n	8004a00 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	049b      	lsls	r3, r3, #18
 8004940:	401a      	ands	r2, r3
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	049b      	lsls	r3, r3, #18
 8004946:	429a      	cmp	r2, r3
 8004948:	d02b      	beq.n	80049a2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	01c9      	lsls	r1, r1, #7
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800495c:	e021      	b.n	80049a2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3301      	adds	r3, #1
 8004962:	d01e      	beq.n	80049a2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004964:	f7ff f820 	bl	80039a8 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <I2C_IsAcknowledgeFailed+0x5e>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d113      	bne.n	80049a2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	2220      	movs	r2, #32
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2241      	movs	r2, #65	; 0x41
 800498a:	2120      	movs	r1, #32
 800498c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2242      	movs	r2, #66	; 0x42
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	2100      	movs	r1, #0
 800499c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e02f      	b.n	8004a02 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d1d6      	bne.n	800495e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2210      	movs	r2, #16
 80049b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2220      	movs	r2, #32
 80049be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff fece 	bl	8004764 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	490e      	ldr	r1, [pc, #56]	; (8004a0c <I2C_IsAcknowledgeFailed+0xf0>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	2204      	movs	r2, #4
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2241      	movs	r2, #65	; 0x41
 80049e8:	2120      	movs	r1, #32
 80049ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2242      	movs	r2, #66	; 0x42
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2240      	movs	r2, #64	; 0x40
 80049f8:	2100      	movs	r1, #0
 80049fa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b004      	add	sp, #16
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	fe00e800 	.word	0xfe00e800

08004a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	0008      	movs	r0, r1
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	240a      	movs	r4, #10
 8004a20:	193b      	adds	r3, r7, r4
 8004a22:	1c02      	adds	r2, r0, #0
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	2009      	movs	r0, #9
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	1c0a      	adds	r2, r1, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	0d51      	lsrs	r1, r2, #21
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	490e      	ldr	r1, [pc, #56]	; (8004a78 <I2C_TransferConfig+0x68>)
 8004a40:	430a      	orrs	r2, r1
 8004a42:	43d2      	mvns	r2, r2
 8004a44:	401a      	ands	r2, r3
 8004a46:	0011      	movs	r1, r2
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	0d9a      	lsrs	r2, r3, #22
 8004a50:	183b      	adds	r3, r7, r0
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	0418      	lsls	r0, r3, #16
 8004a56:	23ff      	movs	r3, #255	; 0xff
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	4003      	ands	r3, r0
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b005      	add	sp, #20
 8004a74:	bd90      	pop	{r4, r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	03ff63ff 	.word	0x03ff63ff

08004a7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2241      	movs	r2, #65	; 0x41
 8004a8a:	5c9b      	ldrb	r3, [r3, r2]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d138      	bne.n	8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2240      	movs	r2, #64	; 0x40
 8004a96:	5c9b      	ldrb	r3, [r3, r2]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e032      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2241      	movs	r2, #65	; 0x41
 8004aac:	2124      	movs	r1, #36	; 0x24
 8004aae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2101      	movs	r1, #1
 8004abc:	438a      	bics	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4911      	ldr	r1, [pc, #68]	; (8004b10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2101      	movs	r1, #1
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2241      	movs	r2, #65	; 0x41
 8004af4:	2120      	movs	r1, #32
 8004af6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2240      	movs	r2, #64	; 0x40
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b002      	add	sp, #8
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	ffffefff 	.word	0xffffefff

08004b14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2241      	movs	r2, #65	; 0x41
 8004b22:	5c9b      	ldrb	r3, [r3, r2]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d139      	bne.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2240      	movs	r2, #64	; 0x40
 8004b2e:	5c9b      	ldrb	r3, [r3, r2]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e033      	b.n	8004ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2241      	movs	r2, #65	; 0x41
 8004b44:	2124      	movs	r1, #36	; 0x24
 8004b46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2101      	movs	r1, #1
 8004b54:	438a      	bics	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2101      	movs	r1, #1
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2241      	movs	r2, #65	; 0x41
 8004b8e:	2120      	movs	r1, #32
 8004b90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2240      	movs	r2, #64	; 0x40
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	fffff0ff 	.word	0xfffff0ff

08004bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f000 fb76 	bl	80052ac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d100      	bne.n	8004bcc <HAL_RCC_OscConfig+0x20>
 8004bca:	e08e      	b.n	8004cea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bcc:	4bc5      	ldr	r3, [pc, #788]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	220c      	movs	r2, #12
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bd8:	4bc2      	ldr	r3, [pc, #776]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	220c      	movs	r2, #12
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d117      	bne.n	8004c14 <HAL_RCC_OscConfig+0x68>
 8004be4:	4bbf      	ldr	r3, [pc, #764]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	23c0      	movs	r3, #192	; 0xc0
 8004bea:	025b      	lsls	r3, r3, #9
 8004bec:	401a      	ands	r2, r3
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	025b      	lsls	r3, r3, #9
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10e      	bne.n	8004c14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf6:	4bbb      	ldr	r3, [pc, #748]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d100      	bne.n	8004c04 <HAL_RCC_OscConfig+0x58>
 8004c02:	e071      	b.n	8004ce8 <HAL_RCC_OscConfig+0x13c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d000      	beq.n	8004c0e <HAL_RCC_OscConfig+0x62>
 8004c0c:	e06c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f000 fb4c 	bl	80052ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x80>
 8004c1c:	4bb1      	ldr	r3, [pc, #708]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4bb0      	ldr	r3, [pc, #704]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	0249      	lsls	r1, r1, #9
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e02f      	b.n	8004c8c <HAL_RCC_OscConfig+0xe0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCC_OscConfig+0xa2>
 8004c34:	4bab      	ldr	r3, [pc, #684]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4baa      	ldr	r3, [pc, #680]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c3a:	49ab      	ldr	r1, [pc, #684]	; (8004ee8 <HAL_RCC_OscConfig+0x33c>)
 8004c3c:	400a      	ands	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	4ba8      	ldr	r3, [pc, #672]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4ba7      	ldr	r3, [pc, #668]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c46:	49a9      	ldr	r1, [pc, #676]	; (8004eec <HAL_RCC_OscConfig+0x340>)
 8004c48:	400a      	ands	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e01e      	b.n	8004c8c <HAL_RCC_OscConfig+0xe0>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d10e      	bne.n	8004c74 <HAL_RCC_OscConfig+0xc8>
 8004c56:	4ba3      	ldr	r3, [pc, #652]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4ba2      	ldr	r3, [pc, #648]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	02c9      	lsls	r1, r1, #11
 8004c60:	430a      	orrs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	4b9f      	ldr	r3, [pc, #636]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b9e      	ldr	r3, [pc, #632]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	0249      	lsls	r1, r1, #9
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e00b      	b.n	8004c8c <HAL_RCC_OscConfig+0xe0>
 8004c74:	4b9b      	ldr	r3, [pc, #620]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4b9a      	ldr	r3, [pc, #616]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c7a:	499b      	ldr	r1, [pc, #620]	; (8004ee8 <HAL_RCC_OscConfig+0x33c>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	4b98      	ldr	r3, [pc, #608]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b97      	ldr	r3, [pc, #604]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004c86:	4999      	ldr	r1, [pc, #612]	; (8004eec <HAL_RCC_OscConfig+0x340>)
 8004c88:	400a      	ands	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d014      	beq.n	8004cbe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fe fe88 	bl	80039a8 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9e:	f7fe fe83 	bl	80039a8 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b64      	cmp	r3, #100	; 0x64
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e2fd      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb0:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0xf2>
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fe73 	bl	80039a8 <HAL_GetTick>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fe fe6e 	bl	80039a8 <HAL_GetTick>
 8004ccc:	0002      	movs	r2, r0
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e2e8      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cda:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x11c>
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x14a>
 8004cf4:	e06c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cf6:	4b7b      	ldr	r3, [pc, #492]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	220c      	movs	r2, #12
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d00:	4b78      	ldr	r3, [pc, #480]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	220c      	movs	r2, #12
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d11f      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1a0>
 8004d0c:	4b75      	ldr	r3, [pc, #468]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	23c0      	movs	r3, #192	; 0xc0
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	401a      	ands	r2, r3
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d116      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	4b71      	ldr	r3, [pc, #452]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2202      	movs	r2, #2
 8004d24:	4013      	ands	r3, r2
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_OscConfig+0x188>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e2bb      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d34:	4b6b      	ldr	r3, [pc, #428]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	22f8      	movs	r2, #248	; 0xf8
 8004d3a:	4393      	bics	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00da      	lsls	r2, r3, #3
 8004d44:	4b67      	ldr	r3, [pc, #412]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d46:	430a      	orrs	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4a:	e041      	b.n	8004dd0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d024      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d54:	4b63      	ldr	r3, [pc, #396]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fe fe22 	bl	80039a8 <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fe fe1d 	bl	80039a8 <HAL_GetTick>
 8004d6e:	0002      	movs	r2, r0
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e297      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7c:	4b59      	ldr	r3, [pc, #356]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2202      	movs	r2, #2
 8004d82:	4013      	ands	r3, r2
 8004d84:	d0f1      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d86:	4b57      	ldr	r3, [pc, #348]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	22f8      	movs	r2, #248	; 0xf8
 8004d8c:	4393      	bics	r3, r2
 8004d8e:	0019      	movs	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	00da      	lsls	r2, r3, #3
 8004d96:	4b53      	ldr	r3, [pc, #332]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b50      	ldr	r3, [pc, #320]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004da4:	2101      	movs	r1, #1
 8004da6:	438a      	bics	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe fdfd 	bl	80039a8 <HAL_GetTick>
 8004dae:	0003      	movs	r3, r0
 8004db0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fe fdf8 	bl	80039a8 <HAL_GetTick>
 8004db8:	0002      	movs	r2, r0
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e272      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d1f1      	bne.n	8004db4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d036      	beq.n	8004e48 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d019      	beq.n	8004e16 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de2:	4b40      	ldr	r3, [pc, #256]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de6:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dee:	f7fe fddb 	bl	80039a8 <HAL_GetTick>
 8004df2:	0003      	movs	r3, r0
 8004df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fe fdd6 	bl	80039a8 <HAL_GetTick>
 8004dfc:	0002      	movs	r2, r0
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e250      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2202      	movs	r2, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	d0f1      	beq.n	8004df8 <HAL_RCC_OscConfig+0x24c>
 8004e14:	e018      	b.n	8004e48 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e16:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1a:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	438a      	bics	r2, r1
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fe fdc1 	bl	80039a8 <HAL_GetTick>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fe fdbc 	bl	80039a8 <HAL_GetTick>
 8004e30:	0002      	movs	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e236      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3e:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d1f1      	bne.n	8004e2c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d100      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2a8>
 8004e52:	e0b5      	b.n	8004fc0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e54:	201f      	movs	r0, #31
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	055b      	lsls	r3, r3, #21
 8004e64:	4013      	ands	r3, r2
 8004e66:	d110      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	0549      	lsls	r1, r1, #21
 8004e72:	430a      	orrs	r2, r1
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	055b      	lsls	r3, r3, #21
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCC_OscConfig+0x344>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	2380      	movs	r3, #128	; 0x80
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	d11a      	bne.n	8004ecc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <HAL_RCC_OscConfig+0x344>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_RCC_OscConfig+0x344>)
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	0049      	lsls	r1, r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea4:	f7fe fd80 	bl	80039a8 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7fe fd7b 	bl	80039a8 <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b64      	cmp	r3, #100	; 0x64
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e1f5      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_OscConfig+0x344>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10f      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x348>
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	4b02      	ldr	r3, [pc, #8]	; (8004ee4 <HAL_RCC_OscConfig+0x338>)
 8004eda:	2101      	movs	r1, #1
 8004edc:	430a      	orrs	r2, r1
 8004ede:	621a      	str	r2, [r3, #32]
 8004ee0:	e036      	b.n	8004f50 <HAL_RCC_OscConfig+0x3a4>
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	fffeffff 	.word	0xfffeffff
 8004eec:	fffbffff 	.word	0xfffbffff
 8004ef0:	40007000 	.word	0x40007000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x36a>
 8004efc:	4bca      	ldr	r3, [pc, #808]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	4bc9      	ldr	r3, [pc, #804]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f02:	2101      	movs	r1, #1
 8004f04:	438a      	bics	r2, r1
 8004f06:	621a      	str	r2, [r3, #32]
 8004f08:	4bc7      	ldr	r3, [pc, #796]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	4bc6      	ldr	r3, [pc, #792]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f0e:	2104      	movs	r1, #4
 8004f10:	438a      	bics	r2, r1
 8004f12:	621a      	str	r2, [r3, #32]
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x3a4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x38c>
 8004f1e:	4bc2      	ldr	r3, [pc, #776]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	4bc1      	ldr	r3, [pc, #772]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f24:	2104      	movs	r1, #4
 8004f26:	430a      	orrs	r2, r1
 8004f28:	621a      	str	r2, [r3, #32]
 8004f2a:	4bbf      	ldr	r3, [pc, #764]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	4bbe      	ldr	r3, [pc, #760]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f30:	2101      	movs	r1, #1
 8004f32:	430a      	orrs	r2, r1
 8004f34:	621a      	str	r2, [r3, #32]
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0x3a4>
 8004f38:	4bbb      	ldr	r3, [pc, #748]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	4bba      	ldr	r3, [pc, #744]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	2101      	movs	r1, #1
 8004f40:	438a      	bics	r2, r1
 8004f42:	621a      	str	r2, [r3, #32]
 8004f44:	4bb8      	ldr	r3, [pc, #736]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	4bb7      	ldr	r3, [pc, #732]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d014      	beq.n	8004f82 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7fe fd26 	bl	80039a8 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	e009      	b.n	8004f76 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fe fd21 	bl	80039a8 <HAL_GetTick>
 8004f66:	0002      	movs	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	4aaf      	ldr	r2, [pc, #700]	; (800522c <HAL_RCC_OscConfig+0x680>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e19a      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4bac      	ldr	r3, [pc, #688]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x3b6>
 8004f80:	e013      	b.n	8004faa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fe fd11 	bl	80039a8 <HAL_GetTick>
 8004f86:	0003      	movs	r3, r0
 8004f88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	e009      	b.n	8004fa0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fe fd0c 	bl	80039a8 <HAL_GetTick>
 8004f90:	0002      	movs	r2, r0
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	4aa5      	ldr	r2, [pc, #660]	; (800522c <HAL_RCC_OscConfig+0x680>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e185      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa0:	4ba1      	ldr	r3, [pc, #644]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004faa:	231f      	movs	r3, #31
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb4:	4b9c      	ldr	r3, [pc, #624]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	4b9b      	ldr	r3, [pc, #620]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fba:	499d      	ldr	r1, [pc, #628]	; (8005230 <HAL_RCC_OscConfig+0x684>)
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d063      	beq.n	8005092 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d12a      	bne.n	8005028 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fd2:	4b95      	ldr	r3, [pc, #596]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd6:	4b94      	ldr	r3, [pc, #592]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fd8:	2104      	movs	r1, #4
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004fde:	4b92      	ldr	r3, [pc, #584]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	4b91      	ldr	r3, [pc, #580]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fea:	f7fe fcdd 	bl	80039a8 <HAL_GetTick>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ff4:	f7fe fcd8 	bl	80039a8 <HAL_GetTick>
 8004ff8:	0002      	movs	r2, r0
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e152      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005006:	4b88      	ldr	r3, [pc, #544]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500a:	2202      	movs	r2, #2
 800500c:	4013      	ands	r3, r2
 800500e:	d0f1      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005010:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	22f8      	movs	r2, #248	; 0xf8
 8005016:	4393      	bics	r3, r2
 8005018:	0019      	movs	r1, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	00da      	lsls	r2, r3, #3
 8005020:	4b81      	ldr	r3, [pc, #516]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005022:	430a      	orrs	r2, r1
 8005024:	635a      	str	r2, [r3, #52]	; 0x34
 8005026:	e034      	b.n	8005092 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	3305      	adds	r3, #5
 800502e:	d111      	bne.n	8005054 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005030:	4b7d      	ldr	r3, [pc, #500]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005034:	4b7c      	ldr	r3, [pc, #496]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005036:	2104      	movs	r1, #4
 8005038:	438a      	bics	r2, r1
 800503a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800503c:	4b7a      	ldr	r3, [pc, #488]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	22f8      	movs	r2, #248	; 0xf8
 8005042:	4393      	bics	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	00da      	lsls	r2, r3, #3
 800504c:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 800504e:	430a      	orrs	r2, r1
 8005050:	635a      	str	r2, [r3, #52]	; 0x34
 8005052:	e01e      	b.n	8005092 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005054:	4b74      	ldr	r3, [pc, #464]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005058:	4b73      	ldr	r3, [pc, #460]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 800505a:	2104      	movs	r1, #4
 800505c:	430a      	orrs	r2, r1
 800505e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005060:	4b71      	ldr	r3, [pc, #452]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	4b70      	ldr	r3, [pc, #448]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005066:	2101      	movs	r1, #1
 8005068:	438a      	bics	r2, r1
 800506a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506c:	f7fe fc9c 	bl	80039a8 <HAL_GetTick>
 8005070:	0003      	movs	r3, r0
 8005072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005076:	f7fe fc97 	bl	80039a8 <HAL_GetTick>
 800507a:	0002      	movs	r2, r0
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e111      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005088:	4b67      	ldr	r3, [pc, #412]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	2202      	movs	r2, #2
 800508e:	4013      	ands	r3, r2
 8005090:	d1f1      	bne.n	8005076 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2220      	movs	r2, #32
 8005098:	4013      	ands	r3, r2
 800509a:	d05c      	beq.n	8005156 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800509c:	4b62      	ldr	r3, [pc, #392]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	220c      	movs	r2, #12
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d00e      	beq.n	80050c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80050a8:	4b5f      	ldr	r3, [pc, #380]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	220c      	movs	r2, #12
 80050ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d114      	bne.n	80050de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80050b4:	4b5c      	ldr	r3, [pc, #368]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	23c0      	movs	r3, #192	; 0xc0
 80050ba:	025b      	lsls	r3, r3, #9
 80050bc:	401a      	ands	r2, r3
 80050be:	23c0      	movs	r3, #192	; 0xc0
 80050c0:	025b      	lsls	r3, r3, #9
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10b      	bne.n	80050de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80050c6:	4b58      	ldr	r3, [pc, #352]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80050c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	025b      	lsls	r3, r3, #9
 80050ce:	4013      	ands	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_RCC_OscConfig+0x5a8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d03c      	beq.n	8005154 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0e6      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01b      	beq.n	800511e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80050e6:	4b50      	ldr	r3, [pc, #320]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	0249      	lsls	r1, r1, #9
 80050f0:	430a      	orrs	r2, r1
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fe fc58 	bl	80039a8 <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050fe:	f7fe fc53 	bl	80039a8 <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e0cd      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005110:	4b45      	ldr	r3, [pc, #276]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	025b      	lsls	r3, r3, #9
 8005118:	4013      	ands	r3, r2
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x552>
 800511c:	e01b      	b.n	8005156 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800511e:	4b42      	ldr	r3, [pc, #264]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005124:	4943      	ldr	r1, [pc, #268]	; (8005234 <HAL_RCC_OscConfig+0x688>)
 8005126:	400a      	ands	r2, r1
 8005128:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7fe fc3d 	bl	80039a8 <HAL_GetTick>
 800512e:	0003      	movs	r3, r0
 8005130:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005134:	f7fe fc38 	bl	80039a8 <HAL_GetTick>
 8005138:	0002      	movs	r2, r0
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e0b2      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005146:	4b38      	ldr	r3, [pc, #224]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	025b      	lsls	r3, r3, #9
 800514e:	4013      	ands	r3, r2
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x588>
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005154:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d100      	bne.n	8005160 <HAL_RCC_OscConfig+0x5b4>
 800515e:	e0a4      	b.n	80052aa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005160:	4b31      	ldr	r3, [pc, #196]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	220c      	movs	r2, #12
 8005166:	4013      	ands	r3, r2
 8005168:	2b08      	cmp	r3, #8
 800516a:	d100      	bne.n	800516e <HAL_RCC_OscConfig+0x5c2>
 800516c:	e078      	b.n	8005260 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b02      	cmp	r3, #2
 8005174:	d14c      	bne.n	8005210 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 800517c:	492e      	ldr	r1, [pc, #184]	; (8005238 <HAL_RCC_OscConfig+0x68c>)
 800517e:	400a      	ands	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fe fc11 	bl	80039a8 <HAL_GetTick>
 8005186:	0003      	movs	r3, r0
 8005188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518c:	f7fe fc0c 	bl	80039a8 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e086      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519e:	4b22      	ldr	r3, [pc, #136]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	049b      	lsls	r3, r3, #18
 80051a6:	4013      	ands	r3, r2
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	220f      	movs	r2, #15
 80051b0:	4393      	bics	r3, r2
 80051b2:	0019      	movs	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051ba:	430a      	orrs	r2, r1
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80051be:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_RCC_OscConfig+0x690>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	0019      	movs	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	431a      	orrs	r2, r3
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d8:	4b13      	ldr	r3, [pc, #76]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	0449      	lsls	r1, r1, #17
 80051e2:	430a      	orrs	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fe fbdf 	bl	80039a8 <HAL_GetTick>
 80051ea:	0003      	movs	r3, r0
 80051ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fe fbda 	bl	80039a8 <HAL_GetTick>
 80051f4:	0002      	movs	r2, r0
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e054      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	049b      	lsls	r3, r3, #18
 800520a:	4013      	ands	r3, r2
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x644>
 800520e:	e04c      	b.n	80052aa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <HAL_RCC_OscConfig+0x67c>)
 8005216:	4908      	ldr	r1, [pc, #32]	; (8005238 <HAL_RCC_OscConfig+0x68c>)
 8005218:	400a      	ands	r2, r1
 800521a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7fe fbc4 	bl	80039a8 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005224:	e015      	b.n	8005252 <HAL_RCC_OscConfig+0x6a6>
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	40021000 	.word	0x40021000
 800522c:	00001388 	.word	0x00001388
 8005230:	efffffff 	.word	0xefffffff
 8005234:	fffeffff 	.word	0xfffeffff
 8005238:	feffffff 	.word	0xfeffffff
 800523c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005240:	f7fe fbb2 	bl	80039a8 <HAL_GetTick>
 8005244:	0002      	movs	r2, r0
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e02c      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005252:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <HAL_RCC_OscConfig+0x708>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	049b      	lsls	r3, r3, #18
 800525a:	4013      	ands	r3, r2
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x694>
 800525e:	e024      	b.n	80052aa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e01f      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_RCC_OscConfig+0x708>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <HAL_RCC_OscConfig+0x708>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	23c0      	movs	r3, #192	; 0xc0
 800527c:	025b      	lsls	r3, r3, #9
 800527e:	401a      	ands	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	429a      	cmp	r2, r3
 8005286:	d10e      	bne.n	80052a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	220f      	movs	r2, #15
 800528c:	401a      	ands	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	23f0      	movs	r3, #240	; 0xf0
 800529a:	039b      	lsls	r3, r3, #14
 800529c:	401a      	ands	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b008      	add	sp, #32
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0bf      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052cc:	4b61      	ldr	r3, [pc, #388]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2201      	movs	r2, #1
 80052d2:	4013      	ands	r3, r2
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d911      	bls.n	80052fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b5e      	ldr	r3, [pc, #376]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	4393      	bics	r3, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	4b5b      	ldr	r3, [pc, #364]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ec:	4b59      	ldr	r3, [pc, #356]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2201      	movs	r2, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0a6      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	4013      	ands	r3, r2
 8005306:	d015      	beq.n	8005334 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2204      	movs	r2, #4
 800530e:	4013      	ands	r3, r2
 8005310:	d006      	beq.n	8005320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005312:	4b51      	ldr	r3, [pc, #324]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	4b50      	ldr	r3, [pc, #320]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005318:	21e0      	movs	r1, #224	; 0xe0
 800531a:	00c9      	lsls	r1, r1, #3
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005320:	4b4d      	ldr	r3, [pc, #308]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	22f0      	movs	r2, #240	; 0xf0
 8005326:	4393      	bics	r3, r2
 8005328:	0019      	movs	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	d04c      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005346:	4b44      	ldr	r3, [pc, #272]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	4013      	ands	r3, r2
 8005350:	d120      	bne.n	8005394 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e07a      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535e:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	049b      	lsls	r3, r3, #18
 8005366:	4013      	ands	r3, r2
 8005368:	d114      	bne.n	8005394 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e06e      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d107      	bne.n	8005386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005376:	4b38      	ldr	r3, [pc, #224]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	025b      	lsls	r3, r3, #9
 800537e:	4013      	ands	r3, r2
 8005380:	d108      	bne.n	8005394 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e062      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2202      	movs	r2, #2
 800538c:	4013      	ands	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e05b      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005394:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	4393      	bics	r3, r2
 800539c:	0019      	movs	r1, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4b2d      	ldr	r3, [pc, #180]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053a8:	f7fe fafe 	bl	80039a8 <HAL_GetTick>
 80053ac:	0003      	movs	r3, r0
 80053ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b0:	e009      	b.n	80053c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b2:	f7fe faf9 	bl	80039a8 <HAL_GetTick>
 80053b6:	0002      	movs	r2, r0
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	4a27      	ldr	r2, [pc, #156]	; (800545c <HAL_RCC_ClockConfig+0x1a4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e042      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	220c      	movs	r2, #12
 80053cc:	401a      	ands	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d1ec      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053d8:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2201      	movs	r2, #1
 80053de:	4013      	ands	r3, r2
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d211      	bcs.n	800540a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	4393      	bics	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_RCC_ClockConfig+0x19c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2201      	movs	r2, #1
 80053fe:	4013      	ands	r3, r2
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d001      	beq.n	800540a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e020      	b.n	800544c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2204      	movs	r2, #4
 8005410:	4013      	ands	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005414:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4a11      	ldr	r2, [pc, #68]	; (8005460 <HAL_RCC_ClockConfig+0x1a8>)
 800541a:	4013      	ands	r3, r2
 800541c:	0019      	movs	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005428:	f000 f820 	bl	800546c <HAL_RCC_GetSysClockFreq>
 800542c:	0001      	movs	r1, r0
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCC_ClockConfig+0x1a0>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	220f      	movs	r2, #15
 8005436:	4013      	ands	r3, r2
 8005438:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x1ac>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	000a      	movs	r2, r1
 800543e:	40da      	lsrs	r2, r3
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 8005442:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005444:	2000      	movs	r0, #0
 8005446:	f7fe fa69 	bl	800391c <HAL_InitTick>
  
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	0018      	movs	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	b004      	add	sp, #16
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40022000 	.word	0x40022000
 8005458:	40021000 	.word	0x40021000
 800545c:	00001388 	.word	0x00001388
 8005460:	fffff8ff 	.word	0xfffff8ff
 8005464:	08007b50 	.word	0x08007b50
 8005468:	20000090 	.word	0x20000090

0800546c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b08f      	sub	sp, #60	; 0x3c
 8005470:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005472:	2314      	movs	r3, #20
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	4a38      	ldr	r2, [pc, #224]	; (8005558 <HAL_RCC_GetSysClockFreq+0xec>)
 8005478:	ca13      	ldmia	r2!, {r0, r1, r4}
 800547a:	c313      	stmia	r3!, {r0, r1, r4}
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	4a36      	ldr	r2, [pc, #216]	; (800555c <HAL_RCC_GetSysClockFreq+0xf0>)
 8005484:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005486:	c313      	stmia	r3!, {r0, r1, r4}
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005490:	2300      	movs	r3, #0
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
 8005494:	2300      	movs	r3, #0
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
 8005498:	2300      	movs	r3, #0
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80054a0:	4b2f      	ldr	r3, [pc, #188]	; (8005560 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	220c      	movs	r2, #12
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d047      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0xd4>
 80054b0:	d849      	bhi.n	8005546 <HAL_RCC_GetSysClockFreq+0xda>
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d002      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x50>
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d003      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x56>
 80054ba:	e044      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054bc:	4b29      	ldr	r3, [pc, #164]	; (8005564 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054c0:	e044      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	0c9b      	lsrs	r3, r3, #18
 80054c6:	220f      	movs	r2, #15
 80054c8:	4013      	ands	r3, r2
 80054ca:	2214      	movs	r2, #20
 80054cc:	18ba      	adds	r2, r7, r2
 80054ce:	5cd3      	ldrb	r3, [r2, r3]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80054d2:	4b23      	ldr	r3, [pc, #140]	; (8005560 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	220f      	movs	r2, #15
 80054d8:	4013      	ands	r3, r2
 80054da:	1d3a      	adds	r2, r7, #4
 80054dc:	5cd3      	ldrb	r3, [r2, r3]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e2:	23c0      	movs	r3, #192	; 0xc0
 80054e4:	025b      	lsls	r3, r3, #9
 80054e6:	401a      	ands	r2, r3
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	025b      	lsls	r3, r3, #9
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d109      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f2:	481c      	ldr	r0, [pc, #112]	; (8005564 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054f4:	f7fa fe10 	bl	8000118 <__udivsi3>
 80054f8:	0003      	movs	r3, r0
 80054fa:	001a      	movs	r2, r3
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	4353      	muls	r3, r2
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
 8005502:	e01a      	b.n	800553a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005506:	23c0      	movs	r3, #192	; 0xc0
 8005508:	025b      	lsls	r3, r3, #9
 800550a:	401a      	ands	r2, r3
 800550c:	23c0      	movs	r3, #192	; 0xc0
 800550e:	025b      	lsls	r3, r3, #9
 8005510:	429a      	cmp	r2, r3
 8005512:	d109      	bne.n	8005528 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005516:	4814      	ldr	r0, [pc, #80]	; (8005568 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005518:	f7fa fdfe 	bl	8000118 <__udivsi3>
 800551c:	0003      	movs	r3, r0
 800551e:	001a      	movs	r2, r3
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	4353      	muls	r3, r2
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
 8005526:	e008      	b.n	800553a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800552a:	480e      	ldr	r0, [pc, #56]	; (8005564 <HAL_RCC_GetSysClockFreq+0xf8>)
 800552c:	f7fa fdf4 	bl	8000118 <__udivsi3>
 8005530:	0003      	movs	r3, r0
 8005532:	001a      	movs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	4353      	muls	r3, r2
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800553e:	e005      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005542:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005544:	e002      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005548:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800554a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800554e:	0018      	movs	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	b00f      	add	sp, #60	; 0x3c
 8005554:	bd90      	pop	{r4, r7, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	08007a14 	.word	0x08007a14
 800555c:	08007a24 	.word	0x08007a24
 8005560:	40021000 	.word	0x40021000
 8005564:	007a1200 	.word	0x007a1200
 8005568:	02dc6c00 	.word	0x02dc6c00

0800556c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <HAL_RCC_GetHCLKFreq+0x10>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	20000090 	.word	0x20000090

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005584:	f7ff fff2 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8005588:	0001      	movs	r1, r0
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	2207      	movs	r2, #7
 8005592:	4013      	ands	r3, r2
 8005594:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	40d9      	lsrs	r1, r3
 800559a:	000b      	movs	r3, r1
}    
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	40021000 	.word	0x40021000
 80055a8:	08007b60 	.word	0x08007b60

080055ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	025b      	lsls	r3, r3, #9
 80055c4:	4013      	ands	r3, r2
 80055c6:	d100      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80055c8:	e08e      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2017      	movs	r0, #23
 80055cc:	183b      	adds	r3, r7, r0
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d2:	4b6e      	ldr	r3, [pc, #440]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055d4:	69da      	ldr	r2, [r3, #28]
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	055b      	lsls	r3, r3, #21
 80055da:	4013      	ands	r3, r2
 80055dc:	d110      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	4b6b      	ldr	r3, [pc, #428]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	4b6a      	ldr	r3, [pc, #424]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055e4:	2180      	movs	r1, #128	; 0x80
 80055e6:	0549      	lsls	r1, r1, #21
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
 80055ec:	4b67      	ldr	r3, [pc, #412]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	055b      	lsls	r3, r3, #21
 80055f4:	4013      	ands	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
 80055f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055fa:	183b      	adds	r3, r7, r0
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4013      	ands	r3, r2
 800560a:	d11a      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800560c:	4b60      	ldr	r3, [pc, #384]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005612:	2180      	movs	r1, #128	; 0x80
 8005614:	0049      	lsls	r1, r1, #1
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561a:	f7fe f9c5 	bl	80039a8 <HAL_GetTick>
 800561e:	0003      	movs	r3, r0
 8005620:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005624:	f7fe f9c0 	bl	80039a8 <HAL_GetTick>
 8005628:	0002      	movs	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0a6      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005636:	4b56      	ldr	r3, [pc, #344]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	2380      	movs	r3, #128	; 0x80
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4013      	ands	r3, r2
 8005640:	d0f0      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005642:	4b52      	ldr	r3, [pc, #328]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	23c0      	movs	r3, #192	; 0xc0
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4013      	ands	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d034      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	23c0      	movs	r3, #192	; 0xc0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4013      	ands	r3, r2
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	429a      	cmp	r2, r3
 8005662:	d02c      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800566a:	4013      	ands	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800566e:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	4b46      	ldr	r3, [pc, #280]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	0249      	lsls	r1, r1, #9
 8005678:	430a      	orrs	r2, r1
 800567a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800567c:	4b43      	ldr	r3, [pc, #268]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	4b42      	ldr	r3, [pc, #264]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005682:	4945      	ldr	r1, [pc, #276]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005684:	400a      	ands	r2, r1
 8005686:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005688:	4b40      	ldr	r3, [pc, #256]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	4013      	ands	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7fe f987 	bl	80039a8 <HAL_GetTick>
 800569a:	0003      	movs	r3, r0
 800569c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569e:	e009      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a0:	f7fe f982 	bl	80039a8 <HAL_GetTick>
 80056a4:	0002      	movs	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e067      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b4:	4b35      	ldr	r3, [pc, #212]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	2202      	movs	r2, #2
 80056ba:	4013      	ands	r3, r2
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056be:	4b33      	ldr	r3, [pc, #204]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4a34      	ldr	r2, [pc, #208]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	4b2f      	ldr	r3, [pc, #188]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056ce:	430a      	orrs	r2, r1
 80056d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056d2:	2317      	movs	r3, #23
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056dc:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056e2:	492f      	ldr	r1, [pc, #188]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80056e4:	400a      	ands	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	4013      	ands	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056f2:	4b26      	ldr	r3, [pc, #152]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	2203      	movs	r2, #3
 80056f8:	4393      	bics	r3, r2
 80056fa:	0019      	movs	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	4b22      	ldr	r3, [pc, #136]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005702:	430a      	orrs	r2, r1
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2202      	movs	r2, #2
 800570c:	4013      	ands	r3, r2
 800570e:	d009      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005716:	4013      	ands	r3, r2
 8005718:	0019      	movs	r1, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	4b1b      	ldr	r3, [pc, #108]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005720:	430a      	orrs	r2, r1
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	02db      	lsls	r3, r3, #11
 800572c:	4013      	ands	r3, r2
 800572e:	d009      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005730:	4b16      	ldr	r3, [pc, #88]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005736:	4013      	ands	r3, r2
 8005738:	0019      	movs	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005740:	430a      	orrs	r2, r1
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2220      	movs	r2, #32
 800574a:	4013      	ands	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	2210      	movs	r2, #16
 8005754:	4393      	bics	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800575e:	430a      	orrs	r2, r1
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4013      	ands	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	2240      	movs	r2, #64	; 0x40
 8005774:	4393      	bics	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800577e:	430a      	orrs	r2, r1
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b006      	add	sp, #24
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	40007000 	.word	0x40007000
 8005794:	fffffcff 	.word	0xfffffcff
 8005798:	fffeffff 	.word	0xfffeffff
 800579c:	00001388 	.word	0x00001388
 80057a0:	efffffff 	.word	0xefffffff
 80057a4:	fffcffff 	.word	0xfffcffff
 80057a8:	fff3ffff 	.word	0xfff3ffff

080057ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e044      	b.n	8005848 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2274      	movs	r2, #116	; 0x74
 80057ca:	2100      	movs	r1, #0
 80057cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fd ff61 	bl	8003698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2224      	movs	r2, #36	; 0x24
 80057da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2101      	movs	r1, #1
 80057e8:	438a      	bics	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f000 fc46 	bl	8006080 <UART_SetConfig>
 80057f4:	0003      	movs	r3, r0
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e024      	b.n	8005848 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fe21 	bl	8006450 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	490d      	ldr	r1, [pc, #52]	; (8005850 <HAL_UART_Init+0xa4>)
 800581a:	400a      	ands	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	212a      	movs	r1, #42	; 0x2a
 800582a:	438a      	bics	r2, r1
 800582c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2101      	movs	r1, #1
 800583a:	430a      	orrs	r2, r1
 800583c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f000 feb9 	bl	80065b8 <UART_CheckIdleState>
 8005846:	0003      	movs	r3, r0
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}
 8005850:	ffffb7ff 	.word	0xffffb7ff

08005854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	1dbb      	adds	r3, r7, #6
 8005862:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005868:	2b20      	cmp	r3, #32
 800586a:	d000      	beq.n	800586e <HAL_UART_Transmit+0x1a>
 800586c:	e096      	b.n	800599c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_UART_Transmit+0x28>
 8005874:	1dbb      	adds	r3, r7, #6
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e08e      	b.n	800599e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	015b      	lsls	r3, r3, #5
 8005888:	429a      	cmp	r2, r3
 800588a:	d109      	bne.n	80058a0 <HAL_UART_Transmit+0x4c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2201      	movs	r2, #1
 8005898:	4013      	ands	r3, r2
 800589a:	d001      	beq.n	80058a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e07e      	b.n	800599e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2274      	movs	r2, #116	; 0x74
 80058a4:	5c9b      	ldrb	r3, [r3, r2]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Transmit+0x5a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e077      	b.n	800599e <HAL_UART_Transmit+0x14a>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2274      	movs	r2, #116	; 0x74
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	2100      	movs	r1, #0
 80058bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2221      	movs	r2, #33	; 0x21
 80058c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c4:	f7fe f870 	bl	80039a8 <HAL_GetTick>
 80058c8:	0003      	movs	r3, r0
 80058ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1dba      	adds	r2, r7, #6
 80058d0:	2150      	movs	r1, #80	; 0x50
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1dba      	adds	r2, r7, #6
 80058da:	2152      	movs	r1, #82	; 0x52
 80058dc:	8812      	ldrh	r2, [r2, #0]
 80058de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	015b      	lsls	r3, r3, #5
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d108      	bne.n	80058fe <HAL_UART_Transmit+0xaa>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e003      	b.n	8005906 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2274      	movs	r2, #116	; 0x74
 800590a:	2100      	movs	r1, #0
 800590c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800590e:	e02d      	b.n	800596c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	0013      	movs	r3, r2
 800591a:	2200      	movs	r2, #0
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	f000 fe93 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8005922:	1e03      	subs	r3, r0, #0
 8005924:	d001      	beq.n	800592a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e039      	b.n	800599e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10b      	bne.n	8005948 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	05d2      	lsls	r2, r2, #23
 800593a:	0dd2      	lsrs	r2, r2, #23
 800593c:	b292      	uxth	r2, r2
 800593e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	3302      	adds	r3, #2
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e008      	b.n	800595a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	b292      	uxth	r2, r2
 8005952:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2252      	movs	r2, #82	; 0x52
 800595e:	5a9b      	ldrh	r3, [r3, r2]
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b299      	uxth	r1, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2252      	movs	r2, #82	; 0x52
 800596a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2252      	movs	r2, #82	; 0x52
 8005970:	5a9b      	ldrh	r3, [r3, r2]
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1cb      	bne.n	8005910 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	0013      	movs	r3, r2
 8005982:	2200      	movs	r2, #0
 8005984:	2140      	movs	r1, #64	; 0x40
 8005986:	f000 fe5f 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 800598a:	1e03      	subs	r3, r0, #0
 800598c:	d001      	beq.n	8005992 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e005      	b.n	800599e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b008      	add	sp, #32
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	1dbb      	adds	r3, r7, #6
 80059b4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d000      	beq.n	80059c0 <HAL_UART_Transmit_IT+0x18>
 80059be:	e06a      	b.n	8005a96 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_Transmit_IT+0x26>
 80059c6:	1dbb      	adds	r3, r7, #6
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e062      	b.n	8005a98 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	015b      	lsls	r3, r3, #5
 80059da:	429a      	cmp	r2, r3
 80059dc:	d109      	bne.n	80059f2 <HAL_UART_Transmit_IT+0x4a>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2201      	movs	r2, #1
 80059ea:	4013      	ands	r3, r2
 80059ec:	d001      	beq.n	80059f2 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e052      	b.n	8005a98 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2274      	movs	r2, #116	; 0x74
 80059f6:	5c9b      	ldrb	r3, [r3, r2]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Transmit_IT+0x58>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e04b      	b.n	8005a98 <HAL_UART_Transmit_IT+0xf0>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2274      	movs	r2, #116	; 0x74
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1dba      	adds	r2, r7, #6
 8005a12:	2150      	movs	r1, #80	; 0x50
 8005a14:	8812      	ldrh	r2, [r2, #0]
 8005a16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1dba      	adds	r2, r7, #6
 8005a1c:	2152      	movs	r1, #82	; 0x52
 8005a1e:	8812      	ldrh	r2, [r2, #0]
 8005a20:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2221      	movs	r2, #33	; 0x21
 8005a34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	2380      	movs	r3, #128	; 0x80
 8005a3c:	015b      	lsls	r3, r3, #5
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d107      	bne.n	8005a52 <HAL_UART_Transmit_IT+0xaa>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <HAL_UART_Transmit_IT+0xf8>)
 8005a4e:	669a      	str	r2, [r3, #104]	; 0x68
 8005a50:	e002      	b.n	8005a58 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <HAL_UART_Transmit_IT+0xfc>)
 8005a56:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2274      	movs	r2, #116	; 0x74
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a60:	f3ef 8310 	mrs	r3, PRIMASK
 8005a64:	613b      	str	r3, [r7, #16]
  return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f383 8810 	msr	PRIMASK, r3
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b008      	add	sp, #32
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	08006977 	.word	0x08006977
 8005aa4:	080068c3 	.word	0x080068c3

08005aa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b0ab      	sub	sp, #172	; 0xac
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	22a4      	movs	r2, #164	; 0xa4
 8005ab8:	18b9      	adds	r1, r7, r2
 8005aba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	20a0      	movs	r0, #160	; 0xa0
 8005ac4:	1839      	adds	r1, r7, r0
 8005ac6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	219c      	movs	r1, #156	; 0x9c
 8005ad0:	1879      	adds	r1, r7, r1
 8005ad2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ad4:	0011      	movs	r1, r2
 8005ad6:	18bb      	adds	r3, r7, r2
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a99      	ldr	r2, [pc, #612]	; (8005d40 <HAL_UART_IRQHandler+0x298>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	2298      	movs	r2, #152	; 0x98
 8005ae0:	18bc      	adds	r4, r7, r2
 8005ae2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005ae4:	18bb      	adds	r3, r7, r2
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d114      	bne.n	8005b16 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aec:	187b      	adds	r3, r7, r1
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2220      	movs	r2, #32
 8005af2:	4013      	ands	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005af6:	183b      	adds	r3, r7, r0
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2220      	movs	r2, #32
 8005afc:	4013      	ands	r3, r2
 8005afe:	d00a      	beq.n	8005b16 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d100      	bne.n	8005b0a <HAL_UART_IRQHandler+0x62>
 8005b08:	e296      	b.n	8006038 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	0010      	movs	r0, r2
 8005b12:	4798      	blx	r3
      }
      return;
 8005b14:	e290      	b.n	8006038 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b16:	2398      	movs	r3, #152	; 0x98
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d100      	bne.n	8005b22 <HAL_UART_IRQHandler+0x7a>
 8005b20:	e114      	b.n	8005d4c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b22:	239c      	movs	r3, #156	; 0x9c
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b2e:	23a0      	movs	r3, #160	; 0xa0
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a83      	ldr	r2, [pc, #524]	; (8005d44 <HAL_UART_IRQHandler+0x29c>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	d100      	bne.n	8005b3c <HAL_UART_IRQHandler+0x94>
 8005b3a:	e107      	b.n	8005d4c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b3c:	23a4      	movs	r3, #164	; 0xa4
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d012      	beq.n	8005b6e <HAL_UART_IRQHandler+0xc6>
 8005b48:	23a0      	movs	r3, #160	; 0xa0
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4013      	ands	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	589b      	ldr	r3, [r3, r2]
 8005b64:	2201      	movs	r2, #1
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b6e:	23a4      	movs	r3, #164	; 0xa4
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2202      	movs	r2, #2
 8005b76:	4013      	ands	r3, r2
 8005b78:	d011      	beq.n	8005b9e <HAL_UART_IRQHandler+0xf6>
 8005b7a:	239c      	movs	r3, #156	; 0x9c
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	4013      	ands	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2280      	movs	r2, #128	; 0x80
 8005b92:	589b      	ldr	r3, [r3, r2]
 8005b94:	2204      	movs	r2, #4
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b9e:	23a4      	movs	r3, #164	; 0xa4
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d011      	beq.n	8005bce <HAL_UART_IRQHandler+0x126>
 8005baa:	239c      	movs	r3, #156	; 0x9c
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2280      	movs	r2, #128	; 0x80
 8005bc2:	589b      	ldr	r3, [r3, r2]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bce:	23a4      	movs	r3, #164	; 0xa4
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d017      	beq.n	8005c0a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bda:	23a0      	movs	r3, #160	; 0xa0
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2220      	movs	r2, #32
 8005be2:	4013      	ands	r3, r2
 8005be4:	d105      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005be6:	239c      	movs	r3, #156	; 0x9c
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bf0:	d00b      	beq.n	8005c0a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2280      	movs	r2, #128	; 0x80
 8005bfe:	589b      	ldr	r3, [r3, r2]
 8005c00:	2208      	movs	r2, #8
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c0a:	23a4      	movs	r3, #164	; 0xa4
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	4013      	ands	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_UART_IRQHandler+0x198>
 8005c18:	23a0      	movs	r3, #160	; 0xa0
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	04db      	lsls	r3, r3, #19
 8005c22:	4013      	ands	r3, r2
 8005c24:	d00c      	beq.n	8005c40 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	0112      	lsls	r2, r2, #4
 8005c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	589b      	ldr	r3, [r3, r2]
 8005c36:	2220      	movs	r2, #32
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	589b      	ldr	r3, [r3, r2]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d100      	bne.n	8005c4c <HAL_UART_IRQHandler+0x1a4>
 8005c4a:	e1f7      	b.n	800603c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c4c:	23a4      	movs	r3, #164	; 0xa4
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2220      	movs	r2, #32
 8005c54:	4013      	ands	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c58:	23a0      	movs	r3, #160	; 0xa0
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	4013      	ands	r3, r2
 8005c62:	d008      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	0010      	movs	r0, r2
 8005c74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	589b      	ldr	r3, [r3, r2]
 8005c7c:	2194      	movs	r1, #148	; 0x94
 8005c7e:	187a      	adds	r2, r7, r1
 8005c80:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2240      	movs	r2, #64	; 0x40
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d004      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c90:	187b      	adds	r3, r7, r1
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2228      	movs	r2, #40	; 0x28
 8005c96:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c98:	d047      	beq.n	8005d2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 fd97 	bl	80067d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2240      	movs	r2, #64	; 0x40
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d137      	bne.n	8005d20 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb8:	2090      	movs	r0, #144	; 0x90
 8005cba:	183a      	adds	r2, r7, r0
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	438a      	bics	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	183b      	adds	r3, r7, r0
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ce2:	f383 8810 	msr	PRIMASK, r3
}
 8005ce6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <HAL_UART_IRQHandler+0x2a0>)
 8005cf6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fd ff97 	bl	8003c30 <HAL_DMA_Abort_IT>
 8005d02:	1e03      	subs	r3, r0, #0
 8005d04:	d01a      	beq.n	8005d3c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d10:	0018      	movs	r0, r3
 8005d12:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	e012      	b.n	8005d3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 f99d 	bl	8006058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1e:	e00d      	b.n	8005d3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 f998 	bl	8006058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	e008      	b.n	8005d3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 f993 	bl	8006058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	2100      	movs	r1, #0
 8005d38:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005d3a:	e17f      	b.n	800603c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	46c0      	nop			; (mov r8, r8)
    return;
 8005d3e:	e17d      	b.n	800603c <HAL_UART_IRQHandler+0x594>
 8005d40:	0000080f 	.word	0x0000080f
 8005d44:	04000120 	.word	0x04000120
 8005d48:	08006895 	.word	0x08006895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d000      	beq.n	8005d56 <HAL_UART_IRQHandler+0x2ae>
 8005d54:	e131      	b.n	8005fba <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d56:	23a4      	movs	r3, #164	; 0xa4
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d100      	bne.n	8005d64 <HAL_UART_IRQHandler+0x2bc>
 8005d62:	e12a      	b.n	8005fba <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d64:	23a0      	movs	r3, #160	; 0xa0
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <HAL_UART_IRQHandler+0x2ca>
 8005d70:	e123      	b.n	8005fba <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2210      	movs	r2, #16
 8005d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d000      	beq.n	8005d8a <HAL_UART_IRQHandler+0x2e2>
 8005d88:	e09b      	b.n	8005ec2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	217e      	movs	r1, #126	; 0x7e
 8005d94:	187b      	adds	r3, r7, r1
 8005d96:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005d98:	187b      	adds	r3, r7, r1
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d100      	bne.n	8005da2 <HAL_UART_IRQHandler+0x2fa>
 8005da0:	e14e      	b.n	8006040 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2258      	movs	r2, #88	; 0x58
 8005da6:	5a9b      	ldrh	r3, [r3, r2]
 8005da8:	187a      	adds	r2, r7, r1
 8005daa:	8812      	ldrh	r2, [r2, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d300      	bcc.n	8005db2 <HAL_UART_IRQHandler+0x30a>
 8005db0:	e146      	b.n	8006040 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	187a      	adds	r2, r7, r1
 8005db6:	215a      	movs	r1, #90	; 0x5a
 8005db8:	8812      	ldrh	r2, [r2, #0]
 8005dba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d06e      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dce:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	f383 8810 	msr	PRIMASK, r3
}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	499a      	ldr	r1, [pc, #616]	; (8006050 <HAL_UART_IRQHandler+0x5a8>)
 8005de8:	400a      	ands	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	677b      	str	r3, [r7, #116]	; 0x74
 8005e02:	2301      	movs	r3, #1
 8005e04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	438a      	bics	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
 8005e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e32:	673b      	str	r3, [r7, #112]	; 0x70
 8005e34:	2301      	movs	r3, #1
 8005e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2140      	movs	r1, #64	; 0x40
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e52:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e68:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e72:	2301      	movs	r3, #1
 8005e74:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e78:	f383 8810 	msr	PRIMASK, r3
}
 8005e7c:	46c0      	nop			; (mov r8, r8)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2110      	movs	r1, #16
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e90:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fd fe8e 	bl	8003bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2258      	movs	r2, #88	; 0x58
 8005ea8:	5a9a      	ldrh	r2, [r3, r2]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	215a      	movs	r1, #90	; 0x5a
 8005eae:	5a5b      	ldrh	r3, [r3, r1]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0011      	movs	r1, r2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f8d4 	bl	8006068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec0:	e0be      	b.n	8006040 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2258      	movs	r2, #88	; 0x58
 8005ec6:	5a99      	ldrh	r1, [r3, r2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	225a      	movs	r2, #90	; 0x5a
 8005ecc:	5a9b      	ldrh	r3, [r3, r2]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	208e      	movs	r0, #142	; 0x8e
 8005ed2:	183b      	adds	r3, r7, r0
 8005ed4:	1a8a      	subs	r2, r1, r2
 8005ed6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	225a      	movs	r2, #90	; 0x5a
 8005edc:	5a9b      	ldrh	r3, [r3, r2]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d100      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x43e>
 8005ee4:	e0ae      	b.n	8006044 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005ee6:	183b      	adds	r3, r7, r0
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d100      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x448>
 8005eee:	e0a9      	b.n	8006044 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef8:	2488      	movs	r4, #136	; 0x88
 8005efa:	193a      	adds	r2, r7, r4
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	2301      	movs	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f383 8810 	msr	PRIMASK, r3
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	494f      	ldr	r1, [pc, #316]	; (8006054 <HAL_UART_IRQHandler+0x5ac>)
 8005f16:	400a      	ands	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	193b      	adds	r3, r7, r4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f28:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f30:	2484      	movs	r4, #132	; 0x84
 8005f32:	193a      	adds	r2, r7, r4
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	2301      	movs	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f383 8810 	msr	PRIMASK, r3
}
 8005f40:	46c0      	nop			; (mov r8, r8)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	438a      	bics	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]
 8005f52:	193b      	adds	r3, r7, r4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f383 8810 	msr	PRIMASK, r3
}
 8005f5e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f72:	f3ef 8310 	mrs	r3, PRIMASK
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7a:	2480      	movs	r4, #128	; 0x80
 8005f7c:	193a      	adds	r2, r7, r4
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	2301      	movs	r3, #1
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2110      	movs	r1, #16
 8005f98:	438a      	bics	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	193b      	adds	r3, r7, r4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005faa:	183b      	adds	r3, r7, r0
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 f858 	bl	8006068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fb8:	e044      	b.n	8006044 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fba:	23a4      	movs	r3, #164	; 0xa4
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	035b      	lsls	r3, r3, #13
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d010      	beq.n	8005fea <HAL_UART_IRQHandler+0x542>
 8005fc8:	239c      	movs	r3, #156	; 0x9c
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	03db      	lsls	r3, r3, #15
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d009      	beq.n	8005fea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2280      	movs	r2, #128	; 0x80
 8005fdc:	0352      	lsls	r2, r2, #13
 8005fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 fd50 	bl	8006a88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fe8:	e02f      	b.n	800604a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fea:	23a4      	movs	r3, #164	; 0xa4
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2280      	movs	r2, #128	; 0x80
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d00f      	beq.n	8006016 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ff6:	23a0      	movs	r3, #160	; 0xa0
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2280      	movs	r2, #128	; 0x80
 8005ffe:	4013      	ands	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01e      	beq.n	8006048 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	0010      	movs	r0, r2
 8006012:	4798      	blx	r3
    }
    return;
 8006014:	e018      	b.n	8006048 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006016:	23a4      	movs	r3, #164	; 0xa4
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2240      	movs	r2, #64	; 0x40
 800601e:	4013      	ands	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_UART_IRQHandler+0x5a2>
 8006022:	23a0      	movs	r3, #160	; 0xa0
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2240      	movs	r2, #64	; 0x40
 800602a:	4013      	ands	r3, r2
 800602c:	d00d      	beq.n	800604a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	0018      	movs	r0, r3
 8006032:	f000 fcfe 	bl	8006a32 <UART_EndTransmit_IT>
    return;
 8006036:	e008      	b.n	800604a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	e006      	b.n	800604a <HAL_UART_IRQHandler+0x5a2>
    return;
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	e004      	b.n	800604a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	e002      	b.n	800604a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	e000      	b.n	800604a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006048:	46c0      	nop			; (mov r8, r8)
  }

}
 800604a:	46bd      	mov	sp, r7
 800604c:	b02b      	add	sp, #172	; 0xac
 800604e:	bd90      	pop	{r4, r7, pc}
 8006050:	fffffeff 	.word	0xfffffeff
 8006054:	fffffedf 	.word	0xfffffedf

08006058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006060:	46c0      	nop			; (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	000a      	movs	r2, r1
 8006072:	1cbb      	adds	r3, r7, #2
 8006074:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	46bd      	mov	sp, r7
 800607a:	b002      	add	sp, #8
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006088:	231e      	movs	r3, #30
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4abe      	ldr	r2, [pc, #760]	; (80063a8 <UART_SetConfig+0x328>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4ab9      	ldr	r2, [pc, #740]	; (80063ac <UART_SetConfig+0x32c>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	0019      	movs	r1, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4ab0      	ldr	r2, [pc, #704]	; (80063b0 <UART_SetConfig+0x330>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	0019      	movs	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4aac      	ldr	r2, [pc, #688]	; (80063b4 <UART_SetConfig+0x334>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d127      	bne.n	8006156 <UART_SetConfig+0xd6>
 8006106:	4bac      	ldr	r3, [pc, #688]	; (80063b8 <UART_SetConfig+0x338>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	2203      	movs	r2, #3
 800610c:	4013      	ands	r3, r2
 800610e:	2b03      	cmp	r3, #3
 8006110:	d00d      	beq.n	800612e <UART_SetConfig+0xae>
 8006112:	d81b      	bhi.n	800614c <UART_SetConfig+0xcc>
 8006114:	2b02      	cmp	r3, #2
 8006116:	d014      	beq.n	8006142 <UART_SetConfig+0xc2>
 8006118:	d818      	bhi.n	800614c <UART_SetConfig+0xcc>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <UART_SetConfig+0xa4>
 800611e:	2b01      	cmp	r3, #1
 8006120:	d00a      	beq.n	8006138 <UART_SetConfig+0xb8>
 8006122:	e013      	b.n	800614c <UART_SetConfig+0xcc>
 8006124:	231f      	movs	r3, #31
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	e0bd      	b.n	80062aa <UART_SetConfig+0x22a>
 800612e:	231f      	movs	r3, #31
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	2202      	movs	r2, #2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e0b8      	b.n	80062aa <UART_SetConfig+0x22a>
 8006138:	231f      	movs	r3, #31
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	2204      	movs	r2, #4
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e0b3      	b.n	80062aa <UART_SetConfig+0x22a>
 8006142:	231f      	movs	r3, #31
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	2208      	movs	r2, #8
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e0ae      	b.n	80062aa <UART_SetConfig+0x22a>
 800614c:	231f      	movs	r3, #31
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2210      	movs	r2, #16
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e0a9      	b.n	80062aa <UART_SetConfig+0x22a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a98      	ldr	r2, [pc, #608]	; (80063bc <UART_SetConfig+0x33c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d134      	bne.n	80061ca <UART_SetConfig+0x14a>
 8006160:	4b95      	ldr	r3, [pc, #596]	; (80063b8 <UART_SetConfig+0x338>)
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	23c0      	movs	r3, #192	; 0xc0
 8006166:	029b      	lsls	r3, r3, #10
 8006168:	4013      	ands	r3, r2
 800616a:	22c0      	movs	r2, #192	; 0xc0
 800616c:	0292      	lsls	r2, r2, #10
 800616e:	4293      	cmp	r3, r2
 8006170:	d017      	beq.n	80061a2 <UART_SetConfig+0x122>
 8006172:	22c0      	movs	r2, #192	; 0xc0
 8006174:	0292      	lsls	r2, r2, #10
 8006176:	4293      	cmp	r3, r2
 8006178:	d822      	bhi.n	80061c0 <UART_SetConfig+0x140>
 800617a:	2280      	movs	r2, #128	; 0x80
 800617c:	0292      	lsls	r2, r2, #10
 800617e:	4293      	cmp	r3, r2
 8006180:	d019      	beq.n	80061b6 <UART_SetConfig+0x136>
 8006182:	2280      	movs	r2, #128	; 0x80
 8006184:	0292      	lsls	r2, r2, #10
 8006186:	4293      	cmp	r3, r2
 8006188:	d81a      	bhi.n	80061c0 <UART_SetConfig+0x140>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <UART_SetConfig+0x118>
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	0252      	lsls	r2, r2, #9
 8006192:	4293      	cmp	r3, r2
 8006194:	d00a      	beq.n	80061ac <UART_SetConfig+0x12c>
 8006196:	e013      	b.n	80061c0 <UART_SetConfig+0x140>
 8006198:	231f      	movs	r3, #31
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e083      	b.n	80062aa <UART_SetConfig+0x22a>
 80061a2:	231f      	movs	r3, #31
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	e07e      	b.n	80062aa <UART_SetConfig+0x22a>
 80061ac:	231f      	movs	r3, #31
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	2204      	movs	r2, #4
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e079      	b.n	80062aa <UART_SetConfig+0x22a>
 80061b6:	231f      	movs	r3, #31
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	2208      	movs	r2, #8
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e074      	b.n	80062aa <UART_SetConfig+0x22a>
 80061c0:	231f      	movs	r3, #31
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	2210      	movs	r2, #16
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e06f      	b.n	80062aa <UART_SetConfig+0x22a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a7c      	ldr	r2, [pc, #496]	; (80063c0 <UART_SetConfig+0x340>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d134      	bne.n	800623e <UART_SetConfig+0x1be>
 80061d4:	4b78      	ldr	r3, [pc, #480]	; (80063b8 <UART_SetConfig+0x338>)
 80061d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d8:	23c0      	movs	r3, #192	; 0xc0
 80061da:	031b      	lsls	r3, r3, #12
 80061dc:	4013      	ands	r3, r2
 80061de:	22c0      	movs	r2, #192	; 0xc0
 80061e0:	0312      	lsls	r2, r2, #12
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d017      	beq.n	8006216 <UART_SetConfig+0x196>
 80061e6:	22c0      	movs	r2, #192	; 0xc0
 80061e8:	0312      	lsls	r2, r2, #12
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d822      	bhi.n	8006234 <UART_SetConfig+0x1b4>
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	0312      	lsls	r2, r2, #12
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d019      	beq.n	800622a <UART_SetConfig+0x1aa>
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	0312      	lsls	r2, r2, #12
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d81a      	bhi.n	8006234 <UART_SetConfig+0x1b4>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <UART_SetConfig+0x18c>
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	02d2      	lsls	r2, r2, #11
 8006206:	4293      	cmp	r3, r2
 8006208:	d00a      	beq.n	8006220 <UART_SetConfig+0x1a0>
 800620a:	e013      	b.n	8006234 <UART_SetConfig+0x1b4>
 800620c:	231f      	movs	r3, #31
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e049      	b.n	80062aa <UART_SetConfig+0x22a>
 8006216:	231f      	movs	r3, #31
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2202      	movs	r2, #2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e044      	b.n	80062aa <UART_SetConfig+0x22a>
 8006220:	231f      	movs	r3, #31
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2204      	movs	r2, #4
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e03f      	b.n	80062aa <UART_SetConfig+0x22a>
 800622a:	231f      	movs	r3, #31
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	2208      	movs	r2, #8
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e03a      	b.n	80062aa <UART_SetConfig+0x22a>
 8006234:	231f      	movs	r3, #31
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	2210      	movs	r2, #16
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e035      	b.n	80062aa <UART_SetConfig+0x22a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a60      	ldr	r2, [pc, #384]	; (80063c4 <UART_SetConfig+0x344>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d104      	bne.n	8006252 <UART_SetConfig+0x1d2>
 8006248:	231f      	movs	r3, #31
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e02b      	b.n	80062aa <UART_SetConfig+0x22a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a5c      	ldr	r2, [pc, #368]	; (80063c8 <UART_SetConfig+0x348>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d104      	bne.n	8006266 <UART_SetConfig+0x1e6>
 800625c:	231f      	movs	r3, #31
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e021      	b.n	80062aa <UART_SetConfig+0x22a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a58      	ldr	r2, [pc, #352]	; (80063cc <UART_SetConfig+0x34c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d104      	bne.n	800627a <UART_SetConfig+0x1fa>
 8006270:	231f      	movs	r3, #31
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e017      	b.n	80062aa <UART_SetConfig+0x22a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a54      	ldr	r2, [pc, #336]	; (80063d0 <UART_SetConfig+0x350>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d104      	bne.n	800628e <UART_SetConfig+0x20e>
 8006284:	231f      	movs	r3, #31
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e00d      	b.n	80062aa <UART_SetConfig+0x22a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a50      	ldr	r2, [pc, #320]	; (80063d4 <UART_SetConfig+0x354>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d104      	bne.n	80062a2 <UART_SetConfig+0x222>
 8006298:	231f      	movs	r3, #31
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e003      	b.n	80062aa <UART_SetConfig+0x22a>
 80062a2:	231f      	movs	r3, #31
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2210      	movs	r2, #16
 80062a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d15d      	bne.n	8006372 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80062b6:	231f      	movs	r3, #31
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d015      	beq.n	80062ec <UART_SetConfig+0x26c>
 80062c0:	dc18      	bgt.n	80062f4 <UART_SetConfig+0x274>
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d00d      	beq.n	80062e2 <UART_SetConfig+0x262>
 80062c6:	dc15      	bgt.n	80062f4 <UART_SetConfig+0x274>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <UART_SetConfig+0x252>
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d005      	beq.n	80062dc <UART_SetConfig+0x25c>
 80062d0:	e010      	b.n	80062f4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d2:	f7ff f955 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 80062d6:	0003      	movs	r3, r0
 80062d8:	61bb      	str	r3, [r7, #24]
        break;
 80062da:	e012      	b.n	8006302 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062dc:	4b3e      	ldr	r3, [pc, #248]	; (80063d8 <UART_SetConfig+0x358>)
 80062de:	61bb      	str	r3, [r7, #24]
        break;
 80062e0:	e00f      	b.n	8006302 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e2:	f7ff f8c3 	bl	800546c <HAL_RCC_GetSysClockFreq>
 80062e6:	0003      	movs	r3, r0
 80062e8:	61bb      	str	r3, [r7, #24]
        break;
 80062ea:	e00a      	b.n	8006302 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	61bb      	str	r3, [r7, #24]
        break;
 80062f2:	e006      	b.n	8006302 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f8:	231e      	movs	r3, #30
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
        break;
 8006300:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d100      	bne.n	800630a <UART_SetConfig+0x28a>
 8006308:	e095      	b.n	8006436 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	005a      	lsls	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	18d2      	adds	r2, r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	0019      	movs	r1, r3
 800631c:	0010      	movs	r0, r2
 800631e:	f7f9 fefb 	bl	8000118 <__udivsi3>
 8006322:	0003      	movs	r3, r0
 8006324:	b29b      	uxth	r3, r3
 8006326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b0f      	cmp	r3, #15
 800632c:	d91c      	bls.n	8006368 <UART_SetConfig+0x2e8>
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	025b      	lsls	r3, r3, #9
 8006334:	429a      	cmp	r2, r3
 8006336:	d217      	bcs.n	8006368 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	b29a      	uxth	r2, r3
 800633c:	200e      	movs	r0, #14
 800633e:	183b      	adds	r3, r7, r0
 8006340:	210f      	movs	r1, #15
 8006342:	438a      	bics	r2, r1
 8006344:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	2207      	movs	r2, #7
 800634e:	4013      	ands	r3, r2
 8006350:	b299      	uxth	r1, r3
 8006352:	183b      	adds	r3, r7, r0
 8006354:	183a      	adds	r2, r7, r0
 8006356:	8812      	ldrh	r2, [r2, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	183a      	adds	r2, r7, r0
 8006362:	8812      	ldrh	r2, [r2, #0]
 8006364:	60da      	str	r2, [r3, #12]
 8006366:	e066      	b.n	8006436 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006368:	231e      	movs	r3, #30
 800636a:	18fb      	adds	r3, r7, r3
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e061      	b.n	8006436 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006372:	231f      	movs	r3, #31
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d02f      	beq.n	80063dc <UART_SetConfig+0x35c>
 800637c:	dc32      	bgt.n	80063e4 <UART_SetConfig+0x364>
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00d      	beq.n	800639e <UART_SetConfig+0x31e>
 8006382:	dc2f      	bgt.n	80063e4 <UART_SetConfig+0x364>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <UART_SetConfig+0x30e>
 8006388:	2b02      	cmp	r3, #2
 800638a:	d005      	beq.n	8006398 <UART_SetConfig+0x318>
 800638c:	e02a      	b.n	80063e4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638e:	f7ff f8f7 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8006392:	0003      	movs	r3, r0
 8006394:	61bb      	str	r3, [r7, #24]
        break;
 8006396:	e02c      	b.n	80063f2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <UART_SetConfig+0x358>)
 800639a:	61bb      	str	r3, [r7, #24]
        break;
 800639c:	e029      	b.n	80063f2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639e:	f7ff f865 	bl	800546c <HAL_RCC_GetSysClockFreq>
 80063a2:	0003      	movs	r3, r0
 80063a4:	61bb      	str	r3, [r7, #24]
        break;
 80063a6:	e024      	b.n	80063f2 <UART_SetConfig+0x372>
 80063a8:	efff69f3 	.word	0xefff69f3
 80063ac:	ffffcfff 	.word	0xffffcfff
 80063b0:	fffff4ff 	.word	0xfffff4ff
 80063b4:	40013800 	.word	0x40013800
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40004400 	.word	0x40004400
 80063c0:	40004800 	.word	0x40004800
 80063c4:	40004c00 	.word	0x40004c00
 80063c8:	40005000 	.word	0x40005000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	40011800 	.word	0x40011800
 80063d4:	40011c00 	.word	0x40011c00
 80063d8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	61bb      	str	r3, [r7, #24]
        break;
 80063e2:	e006      	b.n	80063f2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063e8:	231e      	movs	r3, #30
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
        break;
 80063f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01e      	beq.n	8006436 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	085a      	lsrs	r2, r3, #1
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	18d2      	adds	r2, r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	0019      	movs	r1, r3
 8006408:	0010      	movs	r0, r2
 800640a:	f7f9 fe85 	bl	8000118 <__udivsi3>
 800640e:	0003      	movs	r3, r0
 8006410:	b29b      	uxth	r3, r3
 8006412:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b0f      	cmp	r3, #15
 8006418:	d909      	bls.n	800642e <UART_SetConfig+0x3ae>
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	025b      	lsls	r3, r3, #9
 8006420:	429a      	cmp	r2, r3
 8006422:	d204      	bcs.n	800642e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	60da      	str	r2, [r3, #12]
 800642c:	e003      	b.n	8006436 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800642e:	231e      	movs	r3, #30
 8006430:	18fb      	adds	r3, r7, r3
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006442:	231e      	movs	r3, #30
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	781b      	ldrb	r3, [r3, #0]
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b008      	add	sp, #32
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2201      	movs	r2, #1
 800645e:	4013      	ands	r3, r2
 8006460:	d00b      	beq.n	800647a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4a4a      	ldr	r2, [pc, #296]	; (8006594 <UART_AdvFeatureConfig+0x144>)
 800646a:	4013      	ands	r3, r2
 800646c:	0019      	movs	r1, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	2202      	movs	r2, #2
 8006480:	4013      	ands	r3, r2
 8006482:	d00b      	beq.n	800649c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4a43      	ldr	r2, [pc, #268]	; (8006598 <UART_AdvFeatureConfig+0x148>)
 800648c:	4013      	ands	r3, r2
 800648e:	0019      	movs	r1, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2204      	movs	r2, #4
 80064a2:	4013      	ands	r3, r2
 80064a4:	d00b      	beq.n	80064be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4a3b      	ldr	r2, [pc, #236]	; (800659c <UART_AdvFeatureConfig+0x14c>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	0019      	movs	r1, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2208      	movs	r2, #8
 80064c4:	4013      	ands	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4a34      	ldr	r2, [pc, #208]	; (80065a0 <UART_AdvFeatureConfig+0x150>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	0019      	movs	r1, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2210      	movs	r2, #16
 80064e6:	4013      	ands	r3, r2
 80064e8:	d00b      	beq.n	8006502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <UART_AdvFeatureConfig+0x154>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	0019      	movs	r1, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2220      	movs	r2, #32
 8006508:	4013      	ands	r3, r2
 800650a:	d00b      	beq.n	8006524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <UART_AdvFeatureConfig+0x158>)
 8006514:	4013      	ands	r3, r2
 8006516:	0019      	movs	r1, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	2240      	movs	r2, #64	; 0x40
 800652a:	4013      	ands	r3, r2
 800652c:	d01d      	beq.n	800656a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <UART_AdvFeatureConfig+0x15c>)
 8006536:	4013      	ands	r3, r2
 8006538:	0019      	movs	r1, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	035b      	lsls	r3, r3, #13
 800654e:	429a      	cmp	r2, r3
 8006550:	d10b      	bne.n	800656a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a15      	ldr	r2, [pc, #84]	; (80065b0 <UART_AdvFeatureConfig+0x160>)
 800655a:	4013      	ands	r3, r2
 800655c:	0019      	movs	r1, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	4013      	ands	r3, r2
 8006572:	d00b      	beq.n	800658c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4a0e      	ldr	r2, [pc, #56]	; (80065b4 <UART_AdvFeatureConfig+0x164>)
 800657c:	4013      	ands	r3, r2
 800657e:	0019      	movs	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
  }
}
 800658c:	46c0      	nop			; (mov r8, r8)
 800658e:	46bd      	mov	sp, r7
 8006590:	b002      	add	sp, #8
 8006592:	bd80      	pop	{r7, pc}
 8006594:	fffdffff 	.word	0xfffdffff
 8006598:	fffeffff 	.word	0xfffeffff
 800659c:	fffbffff 	.word	0xfffbffff
 80065a0:	ffff7fff 	.word	0xffff7fff
 80065a4:	ffffefff 	.word	0xffffefff
 80065a8:	ffffdfff 	.word	0xffffdfff
 80065ac:	ffefffff 	.word	0xffefffff
 80065b0:	ff9fffff 	.word	0xff9fffff
 80065b4:	fff7ffff 	.word	0xfff7ffff

080065b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2280      	movs	r2, #128	; 0x80
 80065c4:	2100      	movs	r1, #0
 80065c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c8:	f7fd f9ee 	bl	80039a8 <HAL_GetTick>
 80065cc:	0003      	movs	r3, r0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2208      	movs	r2, #8
 80065d8:	4013      	ands	r3, r2
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d10c      	bne.n	80065f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2280      	movs	r2, #128	; 0x80
 80065e2:	0391      	lsls	r1, r2, #14
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4a17      	ldr	r2, [pc, #92]	; (8006644 <UART_CheckIdleState+0x8c>)
 80065e8:	9200      	str	r2, [sp, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f000 f82c 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 80065f0:	1e03      	subs	r3, r0, #0
 80065f2:	d001      	beq.n	80065f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e021      	b.n	800663c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2204      	movs	r2, #4
 8006600:	4013      	ands	r3, r2
 8006602:	2b04      	cmp	r3, #4
 8006604:	d10c      	bne.n	8006620 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2280      	movs	r2, #128	; 0x80
 800660a:	03d1      	lsls	r1, r2, #15
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <UART_CheckIdleState+0x8c>)
 8006610:	9200      	str	r2, [sp, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	f000 f818 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8006618:	1e03      	subs	r3, r0, #0
 800661a:	d001      	beq.n	8006620 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e00d      	b.n	800663c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2274      	movs	r2, #116	; 0x74
 8006636:	2100      	movs	r1, #0
 8006638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b004      	add	sp, #16
 8006642:	bd80      	pop	{r7, pc}
 8006644:	01ffffff 	.word	0x01ffffff

08006648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b094      	sub	sp, #80	; 0x50
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	1dfb      	adds	r3, r7, #7
 8006656:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	e0a3      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800665c:	3301      	adds	r3, #1
 800665e:	d100      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006660:	e09f      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fd f9a1 	bl	80039a8 <HAL_GetTick>
 8006666:	0002      	movs	r2, r0
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <UART_WaitOnFlagUntilTimeout+0x30>
 8006672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006674:	2b00      	cmp	r3, #0
 8006676:	d13d      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006678:	f3ef 8310 	mrs	r3, PRIMASK
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
 8006682:	2301      	movs	r3, #1
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	494c      	ldr	r1, [pc, #304]	; (80067cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800669a:	400a      	ands	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f383 8810 	msr	PRIMASK, r3
}
 80066a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066aa:	f3ef 8310 	mrs	r3, PRIMASK
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
 80066b4:	2301      	movs	r3, #1
 80066b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	f383 8810 	msr	PRIMASK, r3
}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2101      	movs	r1, #1
 80066cc:	438a      	bics	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	f383 8810 	msr	PRIMASK, r3
}
 80066da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2274      	movs	r2, #116	; 0x74
 80066ec:	2100      	movs	r1, #0
 80066ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e067      	b.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2204      	movs	r2, #4
 80066fc:	4013      	ands	r3, r2
 80066fe:	d050      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	2380      	movs	r3, #128	; 0x80
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	401a      	ands	r2, r3
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	429a      	cmp	r2, r3
 8006712:	d146      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2280      	movs	r2, #128	; 0x80
 800671a:	0112      	lsls	r2, r2, #4
 800671c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671e:	f3ef 8310 	mrs	r3, PRIMASK
 8006722:	613b      	str	r3, [r7, #16]
  return(result);
 8006724:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f383 8810 	msr	PRIMASK, r3
}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4923      	ldr	r1, [pc, #140]	; (80067cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006740:	400a      	ands	r2, r1
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006746:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f383 8810 	msr	PRIMASK, r3
}
 800674e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006750:	f3ef 8310 	mrs	r3, PRIMASK
 8006754:	61fb      	str	r3, [r7, #28]
  return(result);
 8006756:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006758:	64bb      	str	r3, [r7, #72]	; 0x48
 800675a:	2301      	movs	r3, #1
 800675c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	f383 8810 	msr	PRIMASK, r3
}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2101      	movs	r1, #1
 8006772:	438a      	bics	r2, r1
 8006774:	609a      	str	r2, [r3, #8]
 8006776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	f383 8810 	msr	PRIMASK, r3
}
 8006780:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2280      	movs	r2, #128	; 0x80
 8006792:	2120      	movs	r1, #32
 8006794:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2274      	movs	r2, #116	; 0x74
 800679a:	2100      	movs	r1, #0
 800679c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e010      	b.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	425a      	negs	r2, r3
 80067b2:	4153      	adcs	r3, r2
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	001a      	movs	r2, r3
 80067b8:	1dfb      	adds	r3, r7, #7
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d100      	bne.n	80067c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80067c0:	e74b      	b.n	800665a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b014      	add	sp, #80	; 0x50
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	fffffe5f 	.word	0xfffffe5f

080067d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d8:	f3ef 8310 	mrs	r3, PRIMASK
 80067dc:	617b      	str	r3, [r7, #20]
  return(result);
 80067de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
 80067e2:	2301      	movs	r3, #1
 80067e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f383 8810 	msr	PRIMASK, r3
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4925      	ldr	r1, [pc, #148]	; (8006890 <UART_EndRxTransfer+0xc0>)
 80067fa:	400a      	ands	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f383 8810 	msr	PRIMASK, r3
}
 8006808:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800680a:	f3ef 8310 	mrs	r3, PRIMASK
 800680e:	623b      	str	r3, [r7, #32]
  return(result);
 8006810:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	633b      	str	r3, [r7, #48]	; 0x30
 8006814:	2301      	movs	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	f383 8810 	msr	PRIMASK, r3
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2101      	movs	r1, #1
 800682c:	438a      	bics	r2, r1
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	f383 8810 	msr	PRIMASK, r3
}
 800683a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006840:	2b01      	cmp	r3, #1
 8006842:	d118      	bne.n	8006876 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006844:	f3ef 8310 	mrs	r3, PRIMASK
 8006848:	60bb      	str	r3, [r7, #8]
  return(result);
 800684a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684e:	2301      	movs	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f383 8810 	msr	PRIMASK, r3
}
 8006858:	46c0      	nop			; (mov r8, r8)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2110      	movs	r1, #16
 8006866:	438a      	bics	r2, r1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f383 8810 	msr	PRIMASK, r3
}
 8006874:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	b00e      	add	sp, #56	; 0x38
 800688e:	bd80      	pop	{r7, pc}
 8006890:	fffffedf 	.word	0xfffffedf

08006894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	225a      	movs	r2, #90	; 0x5a
 80068a6:	2100      	movs	r1, #0
 80068a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2252      	movs	r2, #82	; 0x52
 80068ae:	2100      	movs	r1, #0
 80068b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7ff fbcf 	bl	8006058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46bd      	mov	sp, r7
 80068be:	b004      	add	sp, #16
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b08a      	sub	sp, #40	; 0x28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ce:	2b21      	cmp	r3, #33	; 0x21
 80068d0:	d14d      	bne.n	800696e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2252      	movs	r2, #82	; 0x52
 80068d6:	5a9b      	ldrh	r3, [r3, r2]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d132      	bne.n	8006944 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068de:	f3ef 8310 	mrs	r3, PRIMASK
 80068e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	2301      	movs	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f383 8810 	msr	PRIMASK, r3
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2180      	movs	r1, #128	; 0x80
 8006900:	438a      	bics	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006910:	f3ef 8310 	mrs	r3, PRIMASK
 8006914:	617b      	str	r3, [r7, #20]
  return(result);
 8006916:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	2301      	movs	r3, #1
 800691c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f383 8810 	msr	PRIMASK, r3
}
 8006924:	46c0      	nop			; (mov r8, r8)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	430a      	orrs	r2, r1
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f383 8810 	msr	PRIMASK, r3
}
 8006940:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006942:	e014      	b.n	800696e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006948:	781a      	ldrb	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	b292      	uxth	r2, r2
 8006950:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2252      	movs	r2, #82	; 0x52
 8006960:	5a9b      	ldrh	r3, [r3, r2]
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b299      	uxth	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2252      	movs	r2, #82	; 0x52
 800696c:	5299      	strh	r1, [r3, r2]
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b00a      	add	sp, #40	; 0x28
 8006974:	bd80      	pop	{r7, pc}

08006976 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b08c      	sub	sp, #48	; 0x30
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006982:	2b21      	cmp	r3, #33	; 0x21
 8006984:	d151      	bne.n	8006a2a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2252      	movs	r2, #82	; 0x52
 800698a:	5a9b      	ldrh	r3, [r3, r2]
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d132      	bne.n	80069f8 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006992:	f3ef 8310 	mrs	r3, PRIMASK
 8006996:	60fb      	str	r3, [r7, #12]
  return(result);
 8006998:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
 800699c:	2301      	movs	r3, #1
 800699e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f383 8810 	msr	PRIMASK, r3
}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2180      	movs	r1, #128	; 0x80
 80069b4:	438a      	bics	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f383 8810 	msr	PRIMASK, r3
}
 80069c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c4:	f3ef 8310 	mrs	r3, PRIMASK
 80069c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
 80069ce:	2301      	movs	r3, #1
 80069d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f383 8810 	msr	PRIMASK, r3
}
 80069d8:	46c0      	nop			; (mov r8, r8)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2140      	movs	r1, #64	; 0x40
 80069e6:	430a      	orrs	r2, r1
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	f383 8810 	msr	PRIMASK, r3
}
 80069f4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80069f6:	e018      	b.n	8006a2a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	05d2      	lsls	r2, r2, #23
 8006a08:	0dd2      	lsrs	r2, r2, #23
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	1c9a      	adds	r2, r3, #2
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2252      	movs	r2, #82	; 0x52
 8006a1c:	5a9b      	ldrh	r3, [r3, r2]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b299      	uxth	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2252      	movs	r2, #82	; 0x52
 8006a28:	5299      	strh	r1, [r3, r2]
}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b00c      	add	sp, #48	; 0x30
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a40:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	2301      	movs	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f383 8810 	msr	PRIMASK, r3
}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2140      	movs	r1, #64	; 0x40
 8006a5c:	438a      	bics	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f383 8810 	msr	PRIMASK, r3
}
 8006a6a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7fb ffd0 	bl	8002a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b006      	add	sp, #24
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <__errno>:
 8006a98:	4b01      	ldr	r3, [pc, #4]	; (8006aa0 <__errno+0x8>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	4770      	bx	lr
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	2000009c 	.word	0x2000009c

08006aa4 <__libc_init_array>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	4d0c      	ldr	r5, [pc, #48]	; (8006adc <__libc_init_array+0x38>)
 8006aaa:	4c0d      	ldr	r4, [pc, #52]	; (8006ae0 <__libc_init_array+0x3c>)
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	42a6      	cmp	r6, r4
 8006ab2:	d109      	bne.n	8006ac8 <__libc_init_array+0x24>
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	f000 ff9b 	bl	80079f0 <_init>
 8006aba:	4d0a      	ldr	r5, [pc, #40]	; (8006ae4 <__libc_init_array+0x40>)
 8006abc:	4c0a      	ldr	r4, [pc, #40]	; (8006ae8 <__libc_init_array+0x44>)
 8006abe:	1b64      	subs	r4, r4, r5
 8006ac0:	10a4      	asrs	r4, r4, #2
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	d105      	bne.n	8006ad2 <__libc_init_array+0x2e>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	00b3      	lsls	r3, r6, #2
 8006aca:	58eb      	ldr	r3, [r5, r3]
 8006acc:	4798      	blx	r3
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7ee      	b.n	8006ab0 <__libc_init_array+0xc>
 8006ad2:	00b3      	lsls	r3, r6, #2
 8006ad4:	58eb      	ldr	r3, [r5, r3]
 8006ad6:	4798      	blx	r3
 8006ad8:	3601      	adds	r6, #1
 8006ada:	e7f2      	b.n	8006ac2 <__libc_init_array+0x1e>
 8006adc:	08007c10 	.word	0x08007c10
 8006ae0:	08007c10 	.word	0x08007c10
 8006ae4:	08007c10 	.word	0x08007c10
 8006ae8:	08007c14 	.word	0x08007c14

08006aec <memset>:
 8006aec:	0003      	movs	r3, r0
 8006aee:	1882      	adds	r2, r0, r2
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	7019      	strb	r1, [r3, #0]
 8006af8:	3301      	adds	r3, #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <siprintf>:
 8006afc:	b40e      	push	{r1, r2, r3}
 8006afe:	b500      	push	{lr}
 8006b00:	490b      	ldr	r1, [pc, #44]	; (8006b30 <siprintf+0x34>)
 8006b02:	b09c      	sub	sp, #112	; 0x70
 8006b04:	ab1d      	add	r3, sp, #116	; 0x74
 8006b06:	9002      	str	r0, [sp, #8]
 8006b08:	9006      	str	r0, [sp, #24]
 8006b0a:	9107      	str	r1, [sp, #28]
 8006b0c:	9104      	str	r1, [sp, #16]
 8006b0e:	4809      	ldr	r0, [pc, #36]	; (8006b34 <siprintf+0x38>)
 8006b10:	4909      	ldr	r1, [pc, #36]	; (8006b38 <siprintf+0x3c>)
 8006b12:	cb04      	ldmia	r3!, {r2}
 8006b14:	9105      	str	r1, [sp, #20]
 8006b16:	6800      	ldr	r0, [r0, #0]
 8006b18:	a902      	add	r1, sp, #8
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	f000 f870 	bl	8006c00 <_svfiprintf_r>
 8006b20:	2300      	movs	r3, #0
 8006b22:	9a02      	ldr	r2, [sp, #8]
 8006b24:	7013      	strb	r3, [r2, #0]
 8006b26:	b01c      	add	sp, #112	; 0x70
 8006b28:	bc08      	pop	{r3}
 8006b2a:	b003      	add	sp, #12
 8006b2c:	4718      	bx	r3
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	7fffffff 	.word	0x7fffffff
 8006b34:	2000009c 	.word	0x2000009c
 8006b38:	ffff0208 	.word	0xffff0208

08006b3c <__ssputs_r>:
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3e:	688e      	ldr	r6, [r1, #8]
 8006b40:	b085      	sub	sp, #20
 8006b42:	0007      	movs	r7, r0
 8006b44:	000c      	movs	r4, r1
 8006b46:	9203      	str	r2, [sp, #12]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	429e      	cmp	r6, r3
 8006b4c:	d83c      	bhi.n	8006bc8 <__ssputs_r+0x8c>
 8006b4e:	2390      	movs	r3, #144	; 0x90
 8006b50:	898a      	ldrh	r2, [r1, #12]
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	421a      	tst	r2, r3
 8006b56:	d034      	beq.n	8006bc2 <__ssputs_r+0x86>
 8006b58:	6909      	ldr	r1, [r1, #16]
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	6960      	ldr	r0, [r4, #20]
 8006b5e:	1a5b      	subs	r3, r3, r1
 8006b60:	9302      	str	r3, [sp, #8]
 8006b62:	2303      	movs	r3, #3
 8006b64:	4343      	muls	r3, r0
 8006b66:	0fdd      	lsrs	r5, r3, #31
 8006b68:	18ed      	adds	r5, r5, r3
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	9802      	ldr	r0, [sp, #8]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	181b      	adds	r3, r3, r0
 8006b72:	106d      	asrs	r5, r5, #1
 8006b74:	42ab      	cmp	r3, r5
 8006b76:	d900      	bls.n	8006b7a <__ssputs_r+0x3e>
 8006b78:	001d      	movs	r5, r3
 8006b7a:	0553      	lsls	r3, r2, #21
 8006b7c:	d532      	bpl.n	8006be4 <__ssputs_r+0xa8>
 8006b7e:	0029      	movs	r1, r5
 8006b80:	0038      	movs	r0, r7
 8006b82:	f000 fb53 	bl	800722c <_malloc_r>
 8006b86:	1e06      	subs	r6, r0, #0
 8006b88:	d109      	bne.n	8006b9e <__ssputs_r+0x62>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	603b      	str	r3, [r7, #0]
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2001      	movs	r0, #1
 8006b92:	89a2      	ldrh	r2, [r4, #12]
 8006b94:	4240      	negs	r0, r0
 8006b96:	4313      	orrs	r3, r2
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	b005      	add	sp, #20
 8006b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9e:	9a02      	ldr	r2, [sp, #8]
 8006ba0:	6921      	ldr	r1, [r4, #16]
 8006ba2:	f000 faba 	bl	800711a <memcpy>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <__ssputs_r+0xc0>)
 8006baa:	401a      	ands	r2, r3
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	9b02      	ldr	r3, [sp, #8]
 8006bb4:	6126      	str	r6, [r4, #16]
 8006bb6:	18f6      	adds	r6, r6, r3
 8006bb8:	6026      	str	r6, [r4, #0]
 8006bba:	6165      	str	r5, [r4, #20]
 8006bbc:	9e01      	ldr	r6, [sp, #4]
 8006bbe:	1aed      	subs	r5, r5, r3
 8006bc0:	60a5      	str	r5, [r4, #8]
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	429e      	cmp	r6, r3
 8006bc6:	d900      	bls.n	8006bca <__ssputs_r+0x8e>
 8006bc8:	9e01      	ldr	r6, [sp, #4]
 8006bca:	0032      	movs	r2, r6
 8006bcc:	9903      	ldr	r1, [sp, #12]
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	f000 faac 	bl	800712c <memmove>
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	1b9b      	subs	r3, r3, r6
 8006bda:	60a3      	str	r3, [r4, #8]
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	199e      	adds	r6, r3, r6
 8006be0:	6026      	str	r6, [r4, #0]
 8006be2:	e7da      	b.n	8006b9a <__ssputs_r+0x5e>
 8006be4:	002a      	movs	r2, r5
 8006be6:	0038      	movs	r0, r7
 8006be8:	f000 fb96 	bl	8007318 <_realloc_r>
 8006bec:	1e06      	subs	r6, r0, #0
 8006bee:	d1e0      	bne.n	8006bb2 <__ssputs_r+0x76>
 8006bf0:	0038      	movs	r0, r7
 8006bf2:	6921      	ldr	r1, [r4, #16]
 8006bf4:	f000 faae 	bl	8007154 <_free_r>
 8006bf8:	e7c7      	b.n	8006b8a <__ssputs_r+0x4e>
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	fffffb7f 	.word	0xfffffb7f

08006c00 <_svfiprintf_r>:
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	b0a1      	sub	sp, #132	; 0x84
 8006c04:	9003      	str	r0, [sp, #12]
 8006c06:	001d      	movs	r5, r3
 8006c08:	898b      	ldrh	r3, [r1, #12]
 8006c0a:	000f      	movs	r7, r1
 8006c0c:	0016      	movs	r6, r2
 8006c0e:	061b      	lsls	r3, r3, #24
 8006c10:	d511      	bpl.n	8006c36 <_svfiprintf_r+0x36>
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10e      	bne.n	8006c36 <_svfiprintf_r+0x36>
 8006c18:	2140      	movs	r1, #64	; 0x40
 8006c1a:	f000 fb07 	bl	800722c <_malloc_r>
 8006c1e:	6038      	str	r0, [r7, #0]
 8006c20:	6138      	str	r0, [r7, #16]
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d105      	bne.n	8006c32 <_svfiprintf_r+0x32>
 8006c26:	230c      	movs	r3, #12
 8006c28:	9a03      	ldr	r2, [sp, #12]
 8006c2a:	3801      	subs	r0, #1
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	b021      	add	sp, #132	; 0x84
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	2300      	movs	r3, #0
 8006c38:	ac08      	add	r4, sp, #32
 8006c3a:	6163      	str	r3, [r4, #20]
 8006c3c:	3320      	adds	r3, #32
 8006c3e:	7663      	strb	r3, [r4, #25]
 8006c40:	3310      	adds	r3, #16
 8006c42:	76a3      	strb	r3, [r4, #26]
 8006c44:	9507      	str	r5, [sp, #28]
 8006c46:	0035      	movs	r5, r6
 8006c48:	782b      	ldrb	r3, [r5, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <_svfiprintf_r+0x52>
 8006c4e:	2b25      	cmp	r3, #37	; 0x25
 8006c50:	d147      	bne.n	8006ce2 <_svfiprintf_r+0xe2>
 8006c52:	1bab      	subs	r3, r5, r6
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	42b5      	cmp	r5, r6
 8006c58:	d00c      	beq.n	8006c74 <_svfiprintf_r+0x74>
 8006c5a:	0032      	movs	r2, r6
 8006c5c:	0039      	movs	r1, r7
 8006c5e:	9803      	ldr	r0, [sp, #12]
 8006c60:	f7ff ff6c 	bl	8006b3c <__ssputs_r>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d100      	bne.n	8006c6a <_svfiprintf_r+0x6a>
 8006c68:	e0ae      	b.n	8006dc8 <_svfiprintf_r+0x1c8>
 8006c6a:	6962      	ldr	r2, [r4, #20]
 8006c6c:	9b05      	ldr	r3, [sp, #20]
 8006c6e:	4694      	mov	ip, r2
 8006c70:	4463      	add	r3, ip
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	782b      	ldrb	r3, [r5, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d100      	bne.n	8006c7c <_svfiprintf_r+0x7c>
 8006c7a:	e0a5      	b.n	8006dc8 <_svfiprintf_r+0x1c8>
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4252      	negs	r2, r2
 8006c82:	6062      	str	r2, [r4, #4]
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	3254      	adds	r2, #84	; 0x54
 8006c88:	1852      	adds	r2, r2, r1
 8006c8a:	1c6e      	adds	r6, r5, #1
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	60e3      	str	r3, [r4, #12]
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	7013      	strb	r3, [r2, #0]
 8006c94:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c96:	2205      	movs	r2, #5
 8006c98:	7831      	ldrb	r1, [r6, #0]
 8006c9a:	4854      	ldr	r0, [pc, #336]	; (8006dec <_svfiprintf_r+0x1ec>)
 8006c9c:	f000 fa32 	bl	8007104 <memchr>
 8006ca0:	1c75      	adds	r5, r6, #1
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d11f      	bne.n	8006ce6 <_svfiprintf_r+0xe6>
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	06d3      	lsls	r3, r2, #27
 8006caa:	d504      	bpl.n	8006cb6 <_svfiprintf_r+0xb6>
 8006cac:	2353      	movs	r3, #83	; 0x53
 8006cae:	a904      	add	r1, sp, #16
 8006cb0:	185b      	adds	r3, r3, r1
 8006cb2:	2120      	movs	r1, #32
 8006cb4:	7019      	strb	r1, [r3, #0]
 8006cb6:	0713      	lsls	r3, r2, #28
 8006cb8:	d504      	bpl.n	8006cc4 <_svfiprintf_r+0xc4>
 8006cba:	2353      	movs	r3, #83	; 0x53
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	185b      	adds	r3, r3, r1
 8006cc0:	212b      	movs	r1, #43	; 0x2b
 8006cc2:	7019      	strb	r1, [r3, #0]
 8006cc4:	7833      	ldrb	r3, [r6, #0]
 8006cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc8:	d016      	beq.n	8006cf8 <_svfiprintf_r+0xf8>
 8006cca:	0035      	movs	r5, r6
 8006ccc:	2100      	movs	r1, #0
 8006cce:	200a      	movs	r0, #10
 8006cd0:	68e3      	ldr	r3, [r4, #12]
 8006cd2:	782a      	ldrb	r2, [r5, #0]
 8006cd4:	1c6e      	adds	r6, r5, #1
 8006cd6:	3a30      	subs	r2, #48	; 0x30
 8006cd8:	2a09      	cmp	r2, #9
 8006cda:	d94e      	bls.n	8006d7a <_svfiprintf_r+0x17a>
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d111      	bne.n	8006d04 <_svfiprintf_r+0x104>
 8006ce0:	e017      	b.n	8006d12 <_svfiprintf_r+0x112>
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	e7b0      	b.n	8006c48 <_svfiprintf_r+0x48>
 8006ce6:	4b41      	ldr	r3, [pc, #260]	; (8006dec <_svfiprintf_r+0x1ec>)
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	1ac0      	subs	r0, r0, r3
 8006cec:	2301      	movs	r3, #1
 8006cee:	4083      	lsls	r3, r0
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	002e      	movs	r6, r5
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	e7ce      	b.n	8006c96 <_svfiprintf_r+0x96>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	1d19      	adds	r1, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9107      	str	r1, [sp, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	db01      	blt.n	8006d08 <_svfiprintf_r+0x108>
 8006d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d06:	e004      	b.n	8006d12 <_svfiprintf_r+0x112>
 8006d08:	425b      	negs	r3, r3
 8006d0a:	60e3      	str	r3, [r4, #12]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	782b      	ldrb	r3, [r5, #0]
 8006d14:	2b2e      	cmp	r3, #46	; 0x2e
 8006d16:	d10a      	bne.n	8006d2e <_svfiprintf_r+0x12e>
 8006d18:	786b      	ldrb	r3, [r5, #1]
 8006d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1c:	d135      	bne.n	8006d8a <_svfiprintf_r+0x18a>
 8006d1e:	9b07      	ldr	r3, [sp, #28]
 8006d20:	3502      	adds	r5, #2
 8006d22:	1d1a      	adds	r2, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9207      	str	r2, [sp, #28]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	db2b      	blt.n	8006d84 <_svfiprintf_r+0x184>
 8006d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2e:	4e30      	ldr	r6, [pc, #192]	; (8006df0 <_svfiprintf_r+0x1f0>)
 8006d30:	2203      	movs	r2, #3
 8006d32:	0030      	movs	r0, r6
 8006d34:	7829      	ldrb	r1, [r5, #0]
 8006d36:	f000 f9e5 	bl	8007104 <memchr>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d006      	beq.n	8006d4c <_svfiprintf_r+0x14c>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	1b80      	subs	r0, r0, r6
 8006d42:	4083      	lsls	r3, r0
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	3501      	adds	r5, #1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	7829      	ldrb	r1, [r5, #0]
 8006d4e:	2206      	movs	r2, #6
 8006d50:	4828      	ldr	r0, [pc, #160]	; (8006df4 <_svfiprintf_r+0x1f4>)
 8006d52:	1c6e      	adds	r6, r5, #1
 8006d54:	7621      	strb	r1, [r4, #24]
 8006d56:	f000 f9d5 	bl	8007104 <memchr>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d03c      	beq.n	8006dd8 <_svfiprintf_r+0x1d8>
 8006d5e:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <_svfiprintf_r+0x1f8>)
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d125      	bne.n	8006db0 <_svfiprintf_r+0x1b0>
 8006d64:	2207      	movs	r2, #7
 8006d66:	9b07      	ldr	r3, [sp, #28]
 8006d68:	3307      	adds	r3, #7
 8006d6a:	4393      	bics	r3, r2
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	9307      	str	r3, [sp, #28]
 8006d70:	6963      	ldr	r3, [r4, #20]
 8006d72:	9a04      	ldr	r2, [sp, #16]
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	6163      	str	r3, [r4, #20]
 8006d78:	e765      	b.n	8006c46 <_svfiprintf_r+0x46>
 8006d7a:	4343      	muls	r3, r0
 8006d7c:	0035      	movs	r5, r6
 8006d7e:	2101      	movs	r1, #1
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	e7a6      	b.n	8006cd2 <_svfiprintf_r+0xd2>
 8006d84:	2301      	movs	r3, #1
 8006d86:	425b      	negs	r3, r3
 8006d88:	e7d0      	b.n	8006d2c <_svfiprintf_r+0x12c>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	200a      	movs	r0, #10
 8006d8e:	001a      	movs	r2, r3
 8006d90:	3501      	adds	r5, #1
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	7829      	ldrb	r1, [r5, #0]
 8006d96:	1c6e      	adds	r6, r5, #1
 8006d98:	3930      	subs	r1, #48	; 0x30
 8006d9a:	2909      	cmp	r1, #9
 8006d9c:	d903      	bls.n	8006da6 <_svfiprintf_r+0x1a6>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0c5      	beq.n	8006d2e <_svfiprintf_r+0x12e>
 8006da2:	9209      	str	r2, [sp, #36]	; 0x24
 8006da4:	e7c3      	b.n	8006d2e <_svfiprintf_r+0x12e>
 8006da6:	4342      	muls	r2, r0
 8006da8:	0035      	movs	r5, r6
 8006daa:	2301      	movs	r3, #1
 8006dac:	1852      	adds	r2, r2, r1
 8006dae:	e7f1      	b.n	8006d94 <_svfiprintf_r+0x194>
 8006db0:	ab07      	add	r3, sp, #28
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	003a      	movs	r2, r7
 8006db6:	0021      	movs	r1, r4
 8006db8:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <_svfiprintf_r+0x1fc>)
 8006dba:	9803      	ldr	r0, [sp, #12]
 8006dbc:	e000      	b.n	8006dc0 <_svfiprintf_r+0x1c0>
 8006dbe:	bf00      	nop
 8006dc0:	9004      	str	r0, [sp, #16]
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	d1d3      	bne.n	8006d70 <_svfiprintf_r+0x170>
 8006dc8:	89bb      	ldrh	r3, [r7, #12]
 8006dca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006dcc:	065b      	lsls	r3, r3, #25
 8006dce:	d400      	bmi.n	8006dd2 <_svfiprintf_r+0x1d2>
 8006dd0:	e72d      	b.n	8006c2e <_svfiprintf_r+0x2e>
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	4240      	negs	r0, r0
 8006dd6:	e72a      	b.n	8006c2e <_svfiprintf_r+0x2e>
 8006dd8:	ab07      	add	r3, sp, #28
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	003a      	movs	r2, r7
 8006dde:	0021      	movs	r1, r4
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <_svfiprintf_r+0x1fc>)
 8006de2:	9803      	ldr	r0, [sp, #12]
 8006de4:	f000 f87c 	bl	8006ee0 <_printf_i>
 8006de8:	e7ea      	b.n	8006dc0 <_svfiprintf_r+0x1c0>
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	08007b68 	.word	0x08007b68
 8006df0:	08007b6e 	.word	0x08007b6e
 8006df4:	08007b72 	.word	0x08007b72
 8006df8:	00000000 	.word	0x00000000
 8006dfc:	08006b3d 	.word	0x08006b3d

08006e00 <_printf_common>:
 8006e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e02:	0015      	movs	r5, r2
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	688a      	ldr	r2, [r1, #8]
 8006e08:	690b      	ldr	r3, [r1, #16]
 8006e0a:	000c      	movs	r4, r1
 8006e0c:	9000      	str	r0, [sp, #0]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	da00      	bge.n	8006e14 <_printf_common+0x14>
 8006e12:	0013      	movs	r3, r2
 8006e14:	0022      	movs	r2, r4
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	3243      	adds	r2, #67	; 0x43
 8006e1a:	7812      	ldrb	r2, [r2, #0]
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	d001      	beq.n	8006e24 <_printf_common+0x24>
 8006e20:	3301      	adds	r3, #1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	069b      	lsls	r3, r3, #26
 8006e28:	d502      	bpl.n	8006e30 <_printf_common+0x30>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	2306      	movs	r3, #6
 8006e34:	0017      	movs	r7, r2
 8006e36:	401f      	ands	r7, r3
 8006e38:	421a      	tst	r2, r3
 8006e3a:	d027      	beq.n	8006e8c <_printf_common+0x8c>
 8006e3c:	0023      	movs	r3, r4
 8006e3e:	3343      	adds	r3, #67	; 0x43
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	1e5a      	subs	r2, r3, #1
 8006e44:	4193      	sbcs	r3, r2
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d430      	bmi.n	8006eae <_printf_common+0xae>
 8006e4c:	0022      	movs	r2, r4
 8006e4e:	9901      	ldr	r1, [sp, #4]
 8006e50:	9800      	ldr	r0, [sp, #0]
 8006e52:	9e08      	ldr	r6, [sp, #32]
 8006e54:	3243      	adds	r2, #67	; 0x43
 8006e56:	47b0      	blx	r6
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d025      	beq.n	8006ea8 <_printf_common+0xa8>
 8006e5c:	2306      	movs	r3, #6
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	682a      	ldr	r2, [r5, #0]
 8006e62:	68e1      	ldr	r1, [r4, #12]
 8006e64:	2500      	movs	r5, #0
 8006e66:	4003      	ands	r3, r0
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d103      	bne.n	8006e74 <_printf_common+0x74>
 8006e6c:	1a8d      	subs	r5, r1, r2
 8006e6e:	43eb      	mvns	r3, r5
 8006e70:	17db      	asrs	r3, r3, #31
 8006e72:	401d      	ands	r5, r3
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	dd01      	ble.n	8006e80 <_printf_common+0x80>
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	18ed      	adds	r5, r5, r3
 8006e80:	2700      	movs	r7, #0
 8006e82:	42bd      	cmp	r5, r7
 8006e84:	d120      	bne.n	8006ec8 <_printf_common+0xc8>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e010      	b.n	8006eac <_printf_common+0xac>
 8006e8a:	3701      	adds	r7, #1
 8006e8c:	68e3      	ldr	r3, [r4, #12]
 8006e8e:	682a      	ldr	r2, [r5, #0]
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	42bb      	cmp	r3, r7
 8006e94:	ddd2      	ble.n	8006e3c <_printf_common+0x3c>
 8006e96:	0022      	movs	r2, r4
 8006e98:	2301      	movs	r3, #1
 8006e9a:	9901      	ldr	r1, [sp, #4]
 8006e9c:	9800      	ldr	r0, [sp, #0]
 8006e9e:	9e08      	ldr	r6, [sp, #32]
 8006ea0:	3219      	adds	r2, #25
 8006ea2:	47b0      	blx	r6
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d1f0      	bne.n	8006e8a <_printf_common+0x8a>
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	4240      	negs	r0, r0
 8006eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eae:	2030      	movs	r0, #48	; 0x30
 8006eb0:	18e1      	adds	r1, r4, r3
 8006eb2:	3143      	adds	r1, #67	; 0x43
 8006eb4:	7008      	strb	r0, [r1, #0]
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	3145      	adds	r1, #69	; 0x45
 8006ebc:	7809      	ldrb	r1, [r1, #0]
 8006ebe:	18a2      	adds	r2, r4, r2
 8006ec0:	3243      	adds	r2, #67	; 0x43
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	7011      	strb	r1, [r2, #0]
 8006ec6:	e7c1      	b.n	8006e4c <_printf_common+0x4c>
 8006ec8:	0022      	movs	r2, r4
 8006eca:	2301      	movs	r3, #1
 8006ecc:	9901      	ldr	r1, [sp, #4]
 8006ece:	9800      	ldr	r0, [sp, #0]
 8006ed0:	9e08      	ldr	r6, [sp, #32]
 8006ed2:	321a      	adds	r2, #26
 8006ed4:	47b0      	blx	r6
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d0e6      	beq.n	8006ea8 <_printf_common+0xa8>
 8006eda:	3701      	adds	r7, #1
 8006edc:	e7d1      	b.n	8006e82 <_printf_common+0x82>
	...

08006ee0 <_printf_i>:
 8006ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee2:	b08b      	sub	sp, #44	; 0x2c
 8006ee4:	9206      	str	r2, [sp, #24]
 8006ee6:	000a      	movs	r2, r1
 8006ee8:	3243      	adds	r2, #67	; 0x43
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	9005      	str	r0, [sp, #20]
 8006eee:	9204      	str	r2, [sp, #16]
 8006ef0:	7e0a      	ldrb	r2, [r1, #24]
 8006ef2:	000c      	movs	r4, r1
 8006ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ef6:	2a78      	cmp	r2, #120	; 0x78
 8006ef8:	d807      	bhi.n	8006f0a <_printf_i+0x2a>
 8006efa:	2a62      	cmp	r2, #98	; 0x62
 8006efc:	d809      	bhi.n	8006f12 <_printf_i+0x32>
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	d100      	bne.n	8006f04 <_printf_i+0x24>
 8006f02:	e0c1      	b.n	8007088 <_printf_i+0x1a8>
 8006f04:	2a58      	cmp	r2, #88	; 0x58
 8006f06:	d100      	bne.n	8006f0a <_printf_i+0x2a>
 8006f08:	e08c      	b.n	8007024 <_printf_i+0x144>
 8006f0a:	0026      	movs	r6, r4
 8006f0c:	3642      	adds	r6, #66	; 0x42
 8006f0e:	7032      	strb	r2, [r6, #0]
 8006f10:	e022      	b.n	8006f58 <_printf_i+0x78>
 8006f12:	0010      	movs	r0, r2
 8006f14:	3863      	subs	r0, #99	; 0x63
 8006f16:	2815      	cmp	r0, #21
 8006f18:	d8f7      	bhi.n	8006f0a <_printf_i+0x2a>
 8006f1a:	f7f9 f8f3 	bl	8000104 <__gnu_thumb1_case_shi>
 8006f1e:	0016      	.short	0x0016
 8006f20:	fff6001f 	.word	0xfff6001f
 8006f24:	fff6fff6 	.word	0xfff6fff6
 8006f28:	001ffff6 	.word	0x001ffff6
 8006f2c:	fff6fff6 	.word	0xfff6fff6
 8006f30:	fff6fff6 	.word	0xfff6fff6
 8006f34:	003600a8 	.word	0x003600a8
 8006f38:	fff6009a 	.word	0xfff6009a
 8006f3c:	00b9fff6 	.word	0x00b9fff6
 8006f40:	0036fff6 	.word	0x0036fff6
 8006f44:	fff6fff6 	.word	0xfff6fff6
 8006f48:	009e      	.short	0x009e
 8006f4a:	0026      	movs	r6, r4
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	3642      	adds	r6, #66	; 0x42
 8006f50:	1d11      	adds	r1, r2, #4
 8006f52:	6019      	str	r1, [r3, #0]
 8006f54:	6813      	ldr	r3, [r2, #0]
 8006f56:	7033      	strb	r3, [r6, #0]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0a7      	b.n	80070ac <_printf_i+0x1cc>
 8006f5c:	6808      	ldr	r0, [r1, #0]
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	1d0a      	adds	r2, r1, #4
 8006f62:	0605      	lsls	r5, r0, #24
 8006f64:	d50b      	bpl.n	8006f7e <_printf_i+0x9e>
 8006f66:	680d      	ldr	r5, [r1, #0]
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	da03      	bge.n	8006f76 <_printf_i+0x96>
 8006f6e:	232d      	movs	r3, #45	; 0x2d
 8006f70:	9a04      	ldr	r2, [sp, #16]
 8006f72:	426d      	negs	r5, r5
 8006f74:	7013      	strb	r3, [r2, #0]
 8006f76:	4b61      	ldr	r3, [pc, #388]	; (80070fc <_printf_i+0x21c>)
 8006f78:	270a      	movs	r7, #10
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	e01b      	b.n	8006fb6 <_printf_i+0xd6>
 8006f7e:	680d      	ldr	r5, [r1, #0]
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	0641      	lsls	r1, r0, #25
 8006f84:	d5f1      	bpl.n	8006f6a <_printf_i+0x8a>
 8006f86:	b22d      	sxth	r5, r5
 8006f88:	e7ef      	b.n	8006f6a <_printf_i+0x8a>
 8006f8a:	680d      	ldr	r5, [r1, #0]
 8006f8c:	6819      	ldr	r1, [r3, #0]
 8006f8e:	1d08      	adds	r0, r1, #4
 8006f90:	6018      	str	r0, [r3, #0]
 8006f92:	062e      	lsls	r6, r5, #24
 8006f94:	d501      	bpl.n	8006f9a <_printf_i+0xba>
 8006f96:	680d      	ldr	r5, [r1, #0]
 8006f98:	e003      	b.n	8006fa2 <_printf_i+0xc2>
 8006f9a:	066d      	lsls	r5, r5, #25
 8006f9c:	d5fb      	bpl.n	8006f96 <_printf_i+0xb6>
 8006f9e:	680d      	ldr	r5, [r1, #0]
 8006fa0:	b2ad      	uxth	r5, r5
 8006fa2:	4b56      	ldr	r3, [pc, #344]	; (80070fc <_printf_i+0x21c>)
 8006fa4:	2708      	movs	r7, #8
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	2a6f      	cmp	r2, #111	; 0x6f
 8006faa:	d000      	beq.n	8006fae <_printf_i+0xce>
 8006fac:	3702      	adds	r7, #2
 8006fae:	0023      	movs	r3, r4
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	3343      	adds	r3, #67	; 0x43
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	6863      	ldr	r3, [r4, #4]
 8006fb8:	60a3      	str	r3, [r4, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	db03      	blt.n	8006fc6 <_printf_i+0xe6>
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	6821      	ldr	r1, [r4, #0]
 8006fc2:	4391      	bics	r1, r2
 8006fc4:	6021      	str	r1, [r4, #0]
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	d102      	bne.n	8006fd0 <_printf_i+0xf0>
 8006fca:	9e04      	ldr	r6, [sp, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00c      	beq.n	8006fea <_printf_i+0x10a>
 8006fd0:	9e04      	ldr	r6, [sp, #16]
 8006fd2:	0028      	movs	r0, r5
 8006fd4:	0039      	movs	r1, r7
 8006fd6:	f7f9 f925 	bl	8000224 <__aeabi_uidivmod>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	3e01      	subs	r6, #1
 8006fde:	5c5b      	ldrb	r3, [r3, r1]
 8006fe0:	7033      	strb	r3, [r6, #0]
 8006fe2:	002b      	movs	r3, r5
 8006fe4:	0005      	movs	r5, r0
 8006fe6:	429f      	cmp	r7, r3
 8006fe8:	d9f3      	bls.n	8006fd2 <_printf_i+0xf2>
 8006fea:	2f08      	cmp	r7, #8
 8006fec:	d109      	bne.n	8007002 <_printf_i+0x122>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	07db      	lsls	r3, r3, #31
 8006ff2:	d506      	bpl.n	8007002 <_printf_i+0x122>
 8006ff4:	6863      	ldr	r3, [r4, #4]
 8006ff6:	6922      	ldr	r2, [r4, #16]
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	dc02      	bgt.n	8007002 <_printf_i+0x122>
 8006ffc:	2330      	movs	r3, #48	; 0x30
 8006ffe:	3e01      	subs	r6, #1
 8007000:	7033      	strb	r3, [r6, #0]
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	1b9b      	subs	r3, r3, r6
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	0021      	movs	r1, r4
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	aa09      	add	r2, sp, #36	; 0x24
 8007014:	f7ff fef4 	bl	8006e00 <_printf_common>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d14c      	bne.n	80070b6 <_printf_i+0x1d6>
 800701c:	2001      	movs	r0, #1
 800701e:	4240      	negs	r0, r0
 8007020:	b00b      	add	sp, #44	; 0x2c
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007024:	3145      	adds	r1, #69	; 0x45
 8007026:	700a      	strb	r2, [r1, #0]
 8007028:	4a34      	ldr	r2, [pc, #208]	; (80070fc <_printf_i+0x21c>)
 800702a:	9203      	str	r2, [sp, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	6821      	ldr	r1, [r4, #0]
 8007030:	ca20      	ldmia	r2!, {r5}
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	0608      	lsls	r0, r1, #24
 8007036:	d516      	bpl.n	8007066 <_printf_i+0x186>
 8007038:	07cb      	lsls	r3, r1, #31
 800703a:	d502      	bpl.n	8007042 <_printf_i+0x162>
 800703c:	2320      	movs	r3, #32
 800703e:	4319      	orrs	r1, r3
 8007040:	6021      	str	r1, [r4, #0]
 8007042:	2710      	movs	r7, #16
 8007044:	2d00      	cmp	r5, #0
 8007046:	d1b2      	bne.n	8006fae <_printf_i+0xce>
 8007048:	2320      	movs	r3, #32
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	439a      	bics	r2, r3
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	e7ad      	b.n	8006fae <_printf_i+0xce>
 8007052:	2220      	movs	r2, #32
 8007054:	6809      	ldr	r1, [r1, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	0022      	movs	r2, r4
 800705c:	2178      	movs	r1, #120	; 0x78
 800705e:	3245      	adds	r2, #69	; 0x45
 8007060:	7011      	strb	r1, [r2, #0]
 8007062:	4a27      	ldr	r2, [pc, #156]	; (8007100 <_printf_i+0x220>)
 8007064:	e7e1      	b.n	800702a <_printf_i+0x14a>
 8007066:	0648      	lsls	r0, r1, #25
 8007068:	d5e6      	bpl.n	8007038 <_printf_i+0x158>
 800706a:	b2ad      	uxth	r5, r5
 800706c:	e7e4      	b.n	8007038 <_printf_i+0x158>
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	680d      	ldr	r5, [r1, #0]
 8007072:	1d10      	adds	r0, r2, #4
 8007074:	6949      	ldr	r1, [r1, #20]
 8007076:	6018      	str	r0, [r3, #0]
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	062e      	lsls	r6, r5, #24
 800707c:	d501      	bpl.n	8007082 <_printf_i+0x1a2>
 800707e:	6019      	str	r1, [r3, #0]
 8007080:	e002      	b.n	8007088 <_printf_i+0x1a8>
 8007082:	066d      	lsls	r5, r5, #25
 8007084:	d5fb      	bpl.n	800707e <_printf_i+0x19e>
 8007086:	8019      	strh	r1, [r3, #0]
 8007088:	2300      	movs	r3, #0
 800708a:	9e04      	ldr	r6, [sp, #16]
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	e7bb      	b.n	8007008 <_printf_i+0x128>
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	1d11      	adds	r1, r2, #4
 8007094:	6019      	str	r1, [r3, #0]
 8007096:	6816      	ldr	r6, [r2, #0]
 8007098:	2100      	movs	r1, #0
 800709a:	0030      	movs	r0, r6
 800709c:	6862      	ldr	r2, [r4, #4]
 800709e:	f000 f831 	bl	8007104 <memchr>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d001      	beq.n	80070aa <_printf_i+0x1ca>
 80070a6:	1b80      	subs	r0, r0, r6
 80070a8:	6060      	str	r0, [r4, #4]
 80070aa:	6863      	ldr	r3, [r4, #4]
 80070ac:	6123      	str	r3, [r4, #16]
 80070ae:	2300      	movs	r3, #0
 80070b0:	9a04      	ldr	r2, [sp, #16]
 80070b2:	7013      	strb	r3, [r2, #0]
 80070b4:	e7a8      	b.n	8007008 <_printf_i+0x128>
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	0032      	movs	r2, r6
 80070ba:	9906      	ldr	r1, [sp, #24]
 80070bc:	9805      	ldr	r0, [sp, #20]
 80070be:	9d07      	ldr	r5, [sp, #28]
 80070c0:	47a8      	blx	r5
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	d0aa      	beq.n	800701c <_printf_i+0x13c>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	079b      	lsls	r3, r3, #30
 80070ca:	d415      	bmi.n	80070f8 <_printf_i+0x218>
 80070cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ce:	68e0      	ldr	r0, [r4, #12]
 80070d0:	4298      	cmp	r0, r3
 80070d2:	daa5      	bge.n	8007020 <_printf_i+0x140>
 80070d4:	0018      	movs	r0, r3
 80070d6:	e7a3      	b.n	8007020 <_printf_i+0x140>
 80070d8:	0022      	movs	r2, r4
 80070da:	2301      	movs	r3, #1
 80070dc:	9906      	ldr	r1, [sp, #24]
 80070de:	9805      	ldr	r0, [sp, #20]
 80070e0:	9e07      	ldr	r6, [sp, #28]
 80070e2:	3219      	adds	r2, #25
 80070e4:	47b0      	blx	r6
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d098      	beq.n	800701c <_printf_i+0x13c>
 80070ea:	3501      	adds	r5, #1
 80070ec:	68e3      	ldr	r3, [r4, #12]
 80070ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	42ab      	cmp	r3, r5
 80070f4:	dcf0      	bgt.n	80070d8 <_printf_i+0x1f8>
 80070f6:	e7e9      	b.n	80070cc <_printf_i+0x1ec>
 80070f8:	2500      	movs	r5, #0
 80070fa:	e7f7      	b.n	80070ec <_printf_i+0x20c>
 80070fc:	08007b79 	.word	0x08007b79
 8007100:	08007b8a 	.word	0x08007b8a

08007104 <memchr>:
 8007104:	b2c9      	uxtb	r1, r1
 8007106:	1882      	adds	r2, r0, r2
 8007108:	4290      	cmp	r0, r2
 800710a:	d101      	bne.n	8007110 <memchr+0xc>
 800710c:	2000      	movs	r0, #0
 800710e:	4770      	bx	lr
 8007110:	7803      	ldrb	r3, [r0, #0]
 8007112:	428b      	cmp	r3, r1
 8007114:	d0fb      	beq.n	800710e <memchr+0xa>
 8007116:	3001      	adds	r0, #1
 8007118:	e7f6      	b.n	8007108 <memchr+0x4>

0800711a <memcpy>:
 800711a:	2300      	movs	r3, #0
 800711c:	b510      	push	{r4, lr}
 800711e:	429a      	cmp	r2, r3
 8007120:	d100      	bne.n	8007124 <memcpy+0xa>
 8007122:	bd10      	pop	{r4, pc}
 8007124:	5ccc      	ldrb	r4, [r1, r3]
 8007126:	54c4      	strb	r4, [r0, r3]
 8007128:	3301      	adds	r3, #1
 800712a:	e7f8      	b.n	800711e <memcpy+0x4>

0800712c <memmove>:
 800712c:	b510      	push	{r4, lr}
 800712e:	4288      	cmp	r0, r1
 8007130:	d902      	bls.n	8007138 <memmove+0xc>
 8007132:	188b      	adds	r3, r1, r2
 8007134:	4298      	cmp	r0, r3
 8007136:	d303      	bcc.n	8007140 <memmove+0x14>
 8007138:	2300      	movs	r3, #0
 800713a:	e007      	b.n	800714c <memmove+0x20>
 800713c:	5c8b      	ldrb	r3, [r1, r2]
 800713e:	5483      	strb	r3, [r0, r2]
 8007140:	3a01      	subs	r2, #1
 8007142:	d2fb      	bcs.n	800713c <memmove+0x10>
 8007144:	bd10      	pop	{r4, pc}
 8007146:	5ccc      	ldrb	r4, [r1, r3]
 8007148:	54c4      	strb	r4, [r0, r3]
 800714a:	3301      	adds	r3, #1
 800714c:	429a      	cmp	r2, r3
 800714e:	d1fa      	bne.n	8007146 <memmove+0x1a>
 8007150:	e7f8      	b.n	8007144 <memmove+0x18>
	...

08007154 <_free_r>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	0005      	movs	r5, r0
 8007158:	2900      	cmp	r1, #0
 800715a:	d010      	beq.n	800717e <_free_r+0x2a>
 800715c:	1f0c      	subs	r4, r1, #4
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da00      	bge.n	8007166 <_free_r+0x12>
 8007164:	18e4      	adds	r4, r4, r3
 8007166:	0028      	movs	r0, r5
 8007168:	f000 f918 	bl	800739c <__malloc_lock>
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <_free_r+0x90>)
 800716e:	6813      	ldr	r3, [r2, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <_free_r+0x2c>
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	6014      	str	r4, [r2, #0]
 8007178:	0028      	movs	r0, r5
 800717a:	f000 f917 	bl	80073ac <__malloc_unlock>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	42a3      	cmp	r3, r4
 8007182:	d908      	bls.n	8007196 <_free_r+0x42>
 8007184:	6821      	ldr	r1, [r4, #0]
 8007186:	1860      	adds	r0, r4, r1
 8007188:	4283      	cmp	r3, r0
 800718a:	d1f3      	bne.n	8007174 <_free_r+0x20>
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	1841      	adds	r1, r0, r1
 8007192:	6021      	str	r1, [r4, #0]
 8007194:	e7ee      	b.n	8007174 <_free_r+0x20>
 8007196:	001a      	movs	r2, r3
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <_free_r+0x4e>
 800719e:	42a3      	cmp	r3, r4
 80071a0:	d9f9      	bls.n	8007196 <_free_r+0x42>
 80071a2:	6811      	ldr	r1, [r2, #0]
 80071a4:	1850      	adds	r0, r2, r1
 80071a6:	42a0      	cmp	r0, r4
 80071a8:	d10b      	bne.n	80071c2 <_free_r+0x6e>
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	1809      	adds	r1, r1, r0
 80071ae:	1850      	adds	r0, r2, r1
 80071b0:	6011      	str	r1, [r2, #0]
 80071b2:	4283      	cmp	r3, r0
 80071b4:	d1e0      	bne.n	8007178 <_free_r+0x24>
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	1841      	adds	r1, r0, r1
 80071bc:	6011      	str	r1, [r2, #0]
 80071be:	6053      	str	r3, [r2, #4]
 80071c0:	e7da      	b.n	8007178 <_free_r+0x24>
 80071c2:	42a0      	cmp	r0, r4
 80071c4:	d902      	bls.n	80071cc <_free_r+0x78>
 80071c6:	230c      	movs	r3, #12
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	e7d5      	b.n	8007178 <_free_r+0x24>
 80071cc:	6821      	ldr	r1, [r4, #0]
 80071ce:	1860      	adds	r0, r4, r1
 80071d0:	4283      	cmp	r3, r0
 80071d2:	d103      	bne.n	80071dc <_free_r+0x88>
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	1841      	adds	r1, r0, r1
 80071da:	6021      	str	r1, [r4, #0]
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6054      	str	r4, [r2, #4]
 80071e0:	e7ca      	b.n	8007178 <_free_r+0x24>
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	200002ec 	.word	0x200002ec

080071e8 <sbrk_aligned>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	4e0f      	ldr	r6, [pc, #60]	; (8007228 <sbrk_aligned+0x40>)
 80071ec:	000d      	movs	r5, r1
 80071ee:	6831      	ldr	r1, [r6, #0]
 80071f0:	0004      	movs	r4, r0
 80071f2:	2900      	cmp	r1, #0
 80071f4:	d102      	bne.n	80071fc <sbrk_aligned+0x14>
 80071f6:	f000 f8bf 	bl	8007378 <_sbrk_r>
 80071fa:	6030      	str	r0, [r6, #0]
 80071fc:	0029      	movs	r1, r5
 80071fe:	0020      	movs	r0, r4
 8007200:	f000 f8ba 	bl	8007378 <_sbrk_r>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d00a      	beq.n	800721e <sbrk_aligned+0x36>
 8007208:	2303      	movs	r3, #3
 800720a:	1cc5      	adds	r5, r0, #3
 800720c:	439d      	bics	r5, r3
 800720e:	42a8      	cmp	r0, r5
 8007210:	d007      	beq.n	8007222 <sbrk_aligned+0x3a>
 8007212:	1a29      	subs	r1, r5, r0
 8007214:	0020      	movs	r0, r4
 8007216:	f000 f8af 	bl	8007378 <_sbrk_r>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d101      	bne.n	8007222 <sbrk_aligned+0x3a>
 800721e:	2501      	movs	r5, #1
 8007220:	426d      	negs	r5, r5
 8007222:	0028      	movs	r0, r5
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	200002f0 	.word	0x200002f0

0800722c <_malloc_r>:
 800722c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800722e:	2203      	movs	r2, #3
 8007230:	1ccb      	adds	r3, r1, #3
 8007232:	4393      	bics	r3, r2
 8007234:	3308      	adds	r3, #8
 8007236:	0006      	movs	r6, r0
 8007238:	001f      	movs	r7, r3
 800723a:	2b0c      	cmp	r3, #12
 800723c:	d232      	bcs.n	80072a4 <_malloc_r+0x78>
 800723e:	270c      	movs	r7, #12
 8007240:	42b9      	cmp	r1, r7
 8007242:	d831      	bhi.n	80072a8 <_malloc_r+0x7c>
 8007244:	0030      	movs	r0, r6
 8007246:	f000 f8a9 	bl	800739c <__malloc_lock>
 800724a:	4d32      	ldr	r5, [pc, #200]	; (8007314 <_malloc_r+0xe8>)
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	001c      	movs	r4, r3
 8007250:	2c00      	cmp	r4, #0
 8007252:	d12e      	bne.n	80072b2 <_malloc_r+0x86>
 8007254:	0039      	movs	r1, r7
 8007256:	0030      	movs	r0, r6
 8007258:	f7ff ffc6 	bl	80071e8 <sbrk_aligned>
 800725c:	0004      	movs	r4, r0
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	d11e      	bne.n	80072a0 <_malloc_r+0x74>
 8007262:	682c      	ldr	r4, [r5, #0]
 8007264:	0025      	movs	r5, r4
 8007266:	2d00      	cmp	r5, #0
 8007268:	d14a      	bne.n	8007300 <_malloc_r+0xd4>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	0029      	movs	r1, r5
 800726e:	18e3      	adds	r3, r4, r3
 8007270:	0030      	movs	r0, r6
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	f000 f880 	bl	8007378 <_sbrk_r>
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	4283      	cmp	r3, r0
 800727c:	d143      	bne.n	8007306 <_malloc_r+0xda>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	3703      	adds	r7, #3
 8007282:	1aff      	subs	r7, r7, r3
 8007284:	2303      	movs	r3, #3
 8007286:	439f      	bics	r7, r3
 8007288:	3708      	adds	r7, #8
 800728a:	2f0c      	cmp	r7, #12
 800728c:	d200      	bcs.n	8007290 <_malloc_r+0x64>
 800728e:	270c      	movs	r7, #12
 8007290:	0039      	movs	r1, r7
 8007292:	0030      	movs	r0, r6
 8007294:	f7ff ffa8 	bl	80071e8 <sbrk_aligned>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d034      	beq.n	8007306 <_malloc_r+0xda>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	19df      	adds	r7, r3, r7
 80072a0:	6027      	str	r7, [r4, #0]
 80072a2:	e013      	b.n	80072cc <_malloc_r+0xa0>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dacb      	bge.n	8007240 <_malloc_r+0x14>
 80072a8:	230c      	movs	r3, #12
 80072aa:	2500      	movs	r5, #0
 80072ac:	6033      	str	r3, [r6, #0]
 80072ae:	0028      	movs	r0, r5
 80072b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	1bd1      	subs	r1, r2, r7
 80072b6:	d420      	bmi.n	80072fa <_malloc_r+0xce>
 80072b8:	290b      	cmp	r1, #11
 80072ba:	d917      	bls.n	80072ec <_malloc_r+0xc0>
 80072bc:	19e2      	adds	r2, r4, r7
 80072be:	6027      	str	r7, [r4, #0]
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d111      	bne.n	80072e8 <_malloc_r+0xbc>
 80072c4:	602a      	str	r2, [r5, #0]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	6011      	str	r1, [r2, #0]
 80072ca:	6053      	str	r3, [r2, #4]
 80072cc:	0030      	movs	r0, r6
 80072ce:	0025      	movs	r5, r4
 80072d0:	f000 f86c 	bl	80073ac <__malloc_unlock>
 80072d4:	2207      	movs	r2, #7
 80072d6:	350b      	adds	r5, #11
 80072d8:	1d23      	adds	r3, r4, #4
 80072da:	4395      	bics	r5, r2
 80072dc:	1aea      	subs	r2, r5, r3
 80072de:	429d      	cmp	r5, r3
 80072e0:	d0e5      	beq.n	80072ae <_malloc_r+0x82>
 80072e2:	1b5b      	subs	r3, r3, r5
 80072e4:	50a3      	str	r3, [r4, r2]
 80072e6:	e7e2      	b.n	80072ae <_malloc_r+0x82>
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	e7ec      	b.n	80072c6 <_malloc_r+0x9a>
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	42a3      	cmp	r3, r4
 80072f0:	d101      	bne.n	80072f6 <_malloc_r+0xca>
 80072f2:	602a      	str	r2, [r5, #0]
 80072f4:	e7ea      	b.n	80072cc <_malloc_r+0xa0>
 80072f6:	605a      	str	r2, [r3, #4]
 80072f8:	e7e8      	b.n	80072cc <_malloc_r+0xa0>
 80072fa:	0023      	movs	r3, r4
 80072fc:	6864      	ldr	r4, [r4, #4]
 80072fe:	e7a7      	b.n	8007250 <_malloc_r+0x24>
 8007300:	002c      	movs	r4, r5
 8007302:	686d      	ldr	r5, [r5, #4]
 8007304:	e7af      	b.n	8007266 <_malloc_r+0x3a>
 8007306:	230c      	movs	r3, #12
 8007308:	0030      	movs	r0, r6
 800730a:	6033      	str	r3, [r6, #0]
 800730c:	f000 f84e 	bl	80073ac <__malloc_unlock>
 8007310:	e7cd      	b.n	80072ae <_malloc_r+0x82>
 8007312:	46c0      	nop			; (mov r8, r8)
 8007314:	200002ec 	.word	0x200002ec

08007318 <_realloc_r>:
 8007318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800731a:	0007      	movs	r7, r0
 800731c:	000e      	movs	r6, r1
 800731e:	0014      	movs	r4, r2
 8007320:	2900      	cmp	r1, #0
 8007322:	d105      	bne.n	8007330 <_realloc_r+0x18>
 8007324:	0011      	movs	r1, r2
 8007326:	f7ff ff81 	bl	800722c <_malloc_r>
 800732a:	0005      	movs	r5, r0
 800732c:	0028      	movs	r0, r5
 800732e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007330:	2a00      	cmp	r2, #0
 8007332:	d103      	bne.n	800733c <_realloc_r+0x24>
 8007334:	f7ff ff0e 	bl	8007154 <_free_r>
 8007338:	0025      	movs	r5, r4
 800733a:	e7f7      	b.n	800732c <_realloc_r+0x14>
 800733c:	f000 f83e 	bl	80073bc <_malloc_usable_size_r>
 8007340:	9001      	str	r0, [sp, #4]
 8007342:	4284      	cmp	r4, r0
 8007344:	d803      	bhi.n	800734e <_realloc_r+0x36>
 8007346:	0035      	movs	r5, r6
 8007348:	0843      	lsrs	r3, r0, #1
 800734a:	42a3      	cmp	r3, r4
 800734c:	d3ee      	bcc.n	800732c <_realloc_r+0x14>
 800734e:	0021      	movs	r1, r4
 8007350:	0038      	movs	r0, r7
 8007352:	f7ff ff6b 	bl	800722c <_malloc_r>
 8007356:	1e05      	subs	r5, r0, #0
 8007358:	d0e8      	beq.n	800732c <_realloc_r+0x14>
 800735a:	9b01      	ldr	r3, [sp, #4]
 800735c:	0022      	movs	r2, r4
 800735e:	429c      	cmp	r4, r3
 8007360:	d900      	bls.n	8007364 <_realloc_r+0x4c>
 8007362:	001a      	movs	r2, r3
 8007364:	0031      	movs	r1, r6
 8007366:	0028      	movs	r0, r5
 8007368:	f7ff fed7 	bl	800711a <memcpy>
 800736c:	0031      	movs	r1, r6
 800736e:	0038      	movs	r0, r7
 8007370:	f7ff fef0 	bl	8007154 <_free_r>
 8007374:	e7da      	b.n	800732c <_realloc_r+0x14>
	...

08007378 <_sbrk_r>:
 8007378:	2300      	movs	r3, #0
 800737a:	b570      	push	{r4, r5, r6, lr}
 800737c:	4d06      	ldr	r5, [pc, #24]	; (8007398 <_sbrk_r+0x20>)
 800737e:	0004      	movs	r4, r0
 8007380:	0008      	movs	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7fc fa50 	bl	8003828 <_sbrk>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d103      	bne.n	8007394 <_sbrk_r+0x1c>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d000      	beq.n	8007394 <_sbrk_r+0x1c>
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	200002f4 	.word	0x200002f4

0800739c <__malloc_lock>:
 800739c:	b510      	push	{r4, lr}
 800739e:	4802      	ldr	r0, [pc, #8]	; (80073a8 <__malloc_lock+0xc>)
 80073a0:	f000 f814 	bl	80073cc <__retarget_lock_acquire_recursive>
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	200002f8 	.word	0x200002f8

080073ac <__malloc_unlock>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	4802      	ldr	r0, [pc, #8]	; (80073b8 <__malloc_unlock+0xc>)
 80073b0:	f000 f80d 	bl	80073ce <__retarget_lock_release_recursive>
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	200002f8 	.word	0x200002f8

080073bc <_malloc_usable_size_r>:
 80073bc:	1f0b      	subs	r3, r1, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	1f18      	subs	r0, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da01      	bge.n	80073ca <_malloc_usable_size_r+0xe>
 80073c6:	580b      	ldr	r3, [r1, r0]
 80073c8:	18c0      	adds	r0, r0, r3
 80073ca:	4770      	bx	lr

080073cc <__retarget_lock_acquire_recursive>:
 80073cc:	4770      	bx	lr

080073ce <__retarget_lock_release_recursive>:
 80073ce:	4770      	bx	lr

080073d0 <atan>:
 80073d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d2:	4b98      	ldr	r3, [pc, #608]	; (8007634 <atan+0x264>)
 80073d4:	b085      	sub	sp, #20
 80073d6:	004e      	lsls	r6, r1, #1
 80073d8:	0004      	movs	r4, r0
 80073da:	000d      	movs	r5, r1
 80073dc:	9103      	str	r1, [sp, #12]
 80073de:	0876      	lsrs	r6, r6, #1
 80073e0:	429e      	cmp	r6, r3
 80073e2:	dd18      	ble.n	8007416 <atan+0x46>
 80073e4:	4b94      	ldr	r3, [pc, #592]	; (8007638 <atan+0x268>)
 80073e6:	429e      	cmp	r6, r3
 80073e8:	dc02      	bgt.n	80073f0 <atan+0x20>
 80073ea:	d10a      	bne.n	8007402 <atan+0x32>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d008      	beq.n	8007402 <atan+0x32>
 80073f0:	0022      	movs	r2, r4
 80073f2:	002b      	movs	r3, r5
 80073f4:	0020      	movs	r0, r4
 80073f6:	0029      	movs	r1, r5
 80073f8:	f7f9 fa7a 	bl	80008f0 <__aeabi_dadd>
 80073fc:	0004      	movs	r4, r0
 80073fe:	000d      	movs	r5, r1
 8007400:	e005      	b.n	800740e <atan+0x3e>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	4c8d      	ldr	r4, [pc, #564]	; (800763c <atan+0x26c>)
 8007406:	2b00      	cmp	r3, #0
 8007408:	dd00      	ble.n	800740c <atan+0x3c>
 800740a:	e110      	b.n	800762e <atan+0x25e>
 800740c:	4d8c      	ldr	r5, [pc, #560]	; (8007640 <atan+0x270>)
 800740e:	0020      	movs	r0, r4
 8007410:	0029      	movs	r1, r5
 8007412:	b005      	add	sp, #20
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007416:	4b8b      	ldr	r3, [pc, #556]	; (8007644 <atan+0x274>)
 8007418:	429e      	cmp	r6, r3
 800741a:	dc0f      	bgt.n	800743c <atan+0x6c>
 800741c:	4b8a      	ldr	r3, [pc, #552]	; (8007648 <atan+0x278>)
 800741e:	429e      	cmp	r6, r3
 8007420:	dc09      	bgt.n	8007436 <atan+0x66>
 8007422:	4a8a      	ldr	r2, [pc, #552]	; (800764c <atan+0x27c>)
 8007424:	4b8a      	ldr	r3, [pc, #552]	; (8007650 <atan+0x280>)
 8007426:	f7f9 fa63 	bl	80008f0 <__aeabi_dadd>
 800742a:	2200      	movs	r2, #0
 800742c:	4b89      	ldr	r3, [pc, #548]	; (8007654 <atan+0x284>)
 800742e:	f7f8 ff29 	bl	8000284 <__aeabi_dcmpgt>
 8007432:	2800      	cmp	r0, #0
 8007434:	d1eb      	bne.n	800740e <atan+0x3e>
 8007436:	2301      	movs	r3, #1
 8007438:	425b      	negs	r3, r3
 800743a:	e025      	b.n	8007488 <atan+0xb8>
 800743c:	f000 f948 	bl	80076d0 <fabs>
 8007440:	4b85      	ldr	r3, [pc, #532]	; (8007658 <atan+0x288>)
 8007442:	0004      	movs	r4, r0
 8007444:	000d      	movs	r5, r1
 8007446:	429e      	cmp	r6, r3
 8007448:	dd00      	ble.n	800744c <atan+0x7c>
 800744a:	e0aa      	b.n	80075a2 <atan+0x1d2>
 800744c:	4b83      	ldr	r3, [pc, #524]	; (800765c <atan+0x28c>)
 800744e:	429e      	cmp	r6, r3
 8007450:	dd00      	ble.n	8007454 <atan+0x84>
 8007452:	e090      	b.n	8007576 <atan+0x1a6>
 8007454:	0002      	movs	r2, r0
 8007456:	000b      	movs	r3, r1
 8007458:	f7f9 fa4a 	bl	80008f0 <__aeabi_dadd>
 800745c:	2200      	movs	r2, #0
 800745e:	4b7d      	ldr	r3, [pc, #500]	; (8007654 <atan+0x284>)
 8007460:	f7fa fbf0 	bl	8001c44 <__aeabi_dsub>
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	0006      	movs	r6, r0
 8007468:	000f      	movs	r7, r1
 800746a:	2200      	movs	r2, #0
 800746c:	0020      	movs	r0, r4
 800746e:	0029      	movs	r1, r5
 8007470:	05db      	lsls	r3, r3, #23
 8007472:	f7f9 fa3d 	bl	80008f0 <__aeabi_dadd>
 8007476:	000b      	movs	r3, r1
 8007478:	0002      	movs	r2, r0
 800747a:	0039      	movs	r1, r7
 800747c:	0030      	movs	r0, r6
 800747e:	f7f9 fd73 	bl	8000f68 <__aeabi_ddiv>
 8007482:	2300      	movs	r3, #0
 8007484:	0004      	movs	r4, r0
 8007486:	000d      	movs	r5, r1
 8007488:	0022      	movs	r2, r4
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	0020      	movs	r0, r4
 800748e:	002b      	movs	r3, r5
 8007490:	0029      	movs	r1, r5
 8007492:	f7fa f96b 	bl	800176c <__aeabi_dmul>
 8007496:	0002      	movs	r2, r0
 8007498:	000b      	movs	r3, r1
 800749a:	9000      	str	r0, [sp, #0]
 800749c:	9101      	str	r1, [sp, #4]
 800749e:	f7fa f965 	bl	800176c <__aeabi_dmul>
 80074a2:	0006      	movs	r6, r0
 80074a4:	000f      	movs	r7, r1
 80074a6:	4a6e      	ldr	r2, [pc, #440]	; (8007660 <atan+0x290>)
 80074a8:	4b6e      	ldr	r3, [pc, #440]	; (8007664 <atan+0x294>)
 80074aa:	f7fa f95f 	bl	800176c <__aeabi_dmul>
 80074ae:	4a6e      	ldr	r2, [pc, #440]	; (8007668 <atan+0x298>)
 80074b0:	4b6e      	ldr	r3, [pc, #440]	; (800766c <atan+0x29c>)
 80074b2:	f7f9 fa1d 	bl	80008f0 <__aeabi_dadd>
 80074b6:	0032      	movs	r2, r6
 80074b8:	003b      	movs	r3, r7
 80074ba:	f7fa f957 	bl	800176c <__aeabi_dmul>
 80074be:	4a6c      	ldr	r2, [pc, #432]	; (8007670 <atan+0x2a0>)
 80074c0:	4b6c      	ldr	r3, [pc, #432]	; (8007674 <atan+0x2a4>)
 80074c2:	f7f9 fa15 	bl	80008f0 <__aeabi_dadd>
 80074c6:	0032      	movs	r2, r6
 80074c8:	003b      	movs	r3, r7
 80074ca:	f7fa f94f 	bl	800176c <__aeabi_dmul>
 80074ce:	4a6a      	ldr	r2, [pc, #424]	; (8007678 <atan+0x2a8>)
 80074d0:	4b6a      	ldr	r3, [pc, #424]	; (800767c <atan+0x2ac>)
 80074d2:	f7f9 fa0d 	bl	80008f0 <__aeabi_dadd>
 80074d6:	0032      	movs	r2, r6
 80074d8:	003b      	movs	r3, r7
 80074da:	f7fa f947 	bl	800176c <__aeabi_dmul>
 80074de:	4a68      	ldr	r2, [pc, #416]	; (8007680 <atan+0x2b0>)
 80074e0:	4b68      	ldr	r3, [pc, #416]	; (8007684 <atan+0x2b4>)
 80074e2:	f7f9 fa05 	bl	80008f0 <__aeabi_dadd>
 80074e6:	0032      	movs	r2, r6
 80074e8:	003b      	movs	r3, r7
 80074ea:	f7fa f93f 	bl	800176c <__aeabi_dmul>
 80074ee:	4a66      	ldr	r2, [pc, #408]	; (8007688 <atan+0x2b8>)
 80074f0:	4b66      	ldr	r3, [pc, #408]	; (800768c <atan+0x2bc>)
 80074f2:	f7f9 f9fd 	bl	80008f0 <__aeabi_dadd>
 80074f6:	9a00      	ldr	r2, [sp, #0]
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	f7fa f937 	bl	800176c <__aeabi_dmul>
 80074fe:	4a64      	ldr	r2, [pc, #400]	; (8007690 <atan+0x2c0>)
 8007500:	9000      	str	r0, [sp, #0]
 8007502:	9101      	str	r1, [sp, #4]
 8007504:	4b63      	ldr	r3, [pc, #396]	; (8007694 <atan+0x2c4>)
 8007506:	0030      	movs	r0, r6
 8007508:	0039      	movs	r1, r7
 800750a:	f7fa f92f 	bl	800176c <__aeabi_dmul>
 800750e:	4a62      	ldr	r2, [pc, #392]	; (8007698 <atan+0x2c8>)
 8007510:	4b62      	ldr	r3, [pc, #392]	; (800769c <atan+0x2cc>)
 8007512:	f7fa fb97 	bl	8001c44 <__aeabi_dsub>
 8007516:	0032      	movs	r2, r6
 8007518:	003b      	movs	r3, r7
 800751a:	f7fa f927 	bl	800176c <__aeabi_dmul>
 800751e:	4a60      	ldr	r2, [pc, #384]	; (80076a0 <atan+0x2d0>)
 8007520:	4b60      	ldr	r3, [pc, #384]	; (80076a4 <atan+0x2d4>)
 8007522:	f7fa fb8f 	bl	8001c44 <__aeabi_dsub>
 8007526:	0032      	movs	r2, r6
 8007528:	003b      	movs	r3, r7
 800752a:	f7fa f91f 	bl	800176c <__aeabi_dmul>
 800752e:	4a5e      	ldr	r2, [pc, #376]	; (80076a8 <atan+0x2d8>)
 8007530:	4b5e      	ldr	r3, [pc, #376]	; (80076ac <atan+0x2dc>)
 8007532:	f7fa fb87 	bl	8001c44 <__aeabi_dsub>
 8007536:	0032      	movs	r2, r6
 8007538:	003b      	movs	r3, r7
 800753a:	f7fa f917 	bl	800176c <__aeabi_dmul>
 800753e:	4a5c      	ldr	r2, [pc, #368]	; (80076b0 <atan+0x2e0>)
 8007540:	4b5c      	ldr	r3, [pc, #368]	; (80076b4 <atan+0x2e4>)
 8007542:	f7fa fb7f 	bl	8001c44 <__aeabi_dsub>
 8007546:	0032      	movs	r2, r6
 8007548:	003b      	movs	r3, r7
 800754a:	f7fa f90f 	bl	800176c <__aeabi_dmul>
 800754e:	0002      	movs	r2, r0
 8007550:	000b      	movs	r3, r1
 8007552:	9800      	ldr	r0, [sp, #0]
 8007554:	9901      	ldr	r1, [sp, #4]
 8007556:	f7f9 f9cb 	bl	80008f0 <__aeabi_dadd>
 800755a:	002b      	movs	r3, r5
 800755c:	0022      	movs	r2, r4
 800755e:	f7fa f905 	bl	800176c <__aeabi_dmul>
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	3301      	adds	r3, #1
 8007566:	d143      	bne.n	80075f0 <atan+0x220>
 8007568:	0002      	movs	r2, r0
 800756a:	000b      	movs	r3, r1
 800756c:	0020      	movs	r0, r4
 800756e:	0029      	movs	r1, r5
 8007570:	f7fa fb68 	bl	8001c44 <__aeabi_dsub>
 8007574:	e742      	b.n	80073fc <atan+0x2c>
 8007576:	2200      	movs	r2, #0
 8007578:	4b36      	ldr	r3, [pc, #216]	; (8007654 <atan+0x284>)
 800757a:	f7fa fb63 	bl	8001c44 <__aeabi_dsub>
 800757e:	2200      	movs	r2, #0
 8007580:	0006      	movs	r6, r0
 8007582:	000f      	movs	r7, r1
 8007584:	0020      	movs	r0, r4
 8007586:	0029      	movs	r1, r5
 8007588:	4b32      	ldr	r3, [pc, #200]	; (8007654 <atan+0x284>)
 800758a:	f7f9 f9b1 	bl	80008f0 <__aeabi_dadd>
 800758e:	000b      	movs	r3, r1
 8007590:	0002      	movs	r2, r0
 8007592:	0039      	movs	r1, r7
 8007594:	0030      	movs	r0, r6
 8007596:	f7f9 fce7 	bl	8000f68 <__aeabi_ddiv>
 800759a:	2301      	movs	r3, #1
 800759c:	0004      	movs	r4, r0
 800759e:	000d      	movs	r5, r1
 80075a0:	e772      	b.n	8007488 <atan+0xb8>
 80075a2:	4b45      	ldr	r3, [pc, #276]	; (80076b8 <atan+0x2e8>)
 80075a4:	429e      	cmp	r6, r3
 80075a6:	dc19      	bgt.n	80075dc <atan+0x20c>
 80075a8:	2200      	movs	r2, #0
 80075aa:	4b44      	ldr	r3, [pc, #272]	; (80076bc <atan+0x2ec>)
 80075ac:	f7fa fb4a 	bl	8001c44 <__aeabi_dsub>
 80075b0:	2200      	movs	r2, #0
 80075b2:	0006      	movs	r6, r0
 80075b4:	000f      	movs	r7, r1
 80075b6:	0020      	movs	r0, r4
 80075b8:	0029      	movs	r1, r5
 80075ba:	4b40      	ldr	r3, [pc, #256]	; (80076bc <atan+0x2ec>)
 80075bc:	f7fa f8d6 	bl	800176c <__aeabi_dmul>
 80075c0:	2200      	movs	r2, #0
 80075c2:	4b24      	ldr	r3, [pc, #144]	; (8007654 <atan+0x284>)
 80075c4:	f7f9 f994 	bl	80008f0 <__aeabi_dadd>
 80075c8:	000b      	movs	r3, r1
 80075ca:	0002      	movs	r2, r0
 80075cc:	0039      	movs	r1, r7
 80075ce:	0030      	movs	r0, r6
 80075d0:	f7f9 fcca 	bl	8000f68 <__aeabi_ddiv>
 80075d4:	2302      	movs	r3, #2
 80075d6:	0004      	movs	r4, r0
 80075d8:	000d      	movs	r5, r1
 80075da:	e755      	b.n	8007488 <atan+0xb8>
 80075dc:	000b      	movs	r3, r1
 80075de:	0002      	movs	r2, r0
 80075e0:	4937      	ldr	r1, [pc, #220]	; (80076c0 <atan+0x2f0>)
 80075e2:	2000      	movs	r0, #0
 80075e4:	f7f9 fcc0 	bl	8000f68 <__aeabi_ddiv>
 80075e8:	2303      	movs	r3, #3
 80075ea:	0004      	movs	r4, r0
 80075ec:	000d      	movs	r5, r1
 80075ee:	e74b      	b.n	8007488 <atan+0xb8>
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	4f34      	ldr	r7, [pc, #208]	; (80076c4 <atan+0x2f4>)
 80075f4:	00de      	lsls	r6, r3, #3
 80075f6:	4b34      	ldr	r3, [pc, #208]	; (80076c8 <atan+0x2f8>)
 80075f8:	19bf      	adds	r7, r7, r6
 80075fa:	199e      	adds	r6, r3, r6
 80075fc:	6832      	ldr	r2, [r6, #0]
 80075fe:	6873      	ldr	r3, [r6, #4]
 8007600:	f7fa fb20 	bl	8001c44 <__aeabi_dsub>
 8007604:	0022      	movs	r2, r4
 8007606:	002b      	movs	r3, r5
 8007608:	f7fa fb1c 	bl	8001c44 <__aeabi_dsub>
 800760c:	000b      	movs	r3, r1
 800760e:	0002      	movs	r2, r0
 8007610:	6838      	ldr	r0, [r7, #0]
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	f7fa fb16 	bl	8001c44 <__aeabi_dsub>
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	0004      	movs	r4, r0
 800761c:	000d      	movs	r5, r1
 800761e:	2b00      	cmp	r3, #0
 8007620:	db00      	blt.n	8007624 <atan+0x254>
 8007622:	e6f4      	b.n	800740e <atan+0x3e>
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	0609      	lsls	r1, r1, #24
 8007628:	186b      	adds	r3, r5, r1
 800762a:	001d      	movs	r5, r3
 800762c:	e6ef      	b.n	800740e <atan+0x3e>
 800762e:	4d27      	ldr	r5, [pc, #156]	; (80076cc <atan+0x2fc>)
 8007630:	e6ed      	b.n	800740e <atan+0x3e>
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	440fffff 	.word	0x440fffff
 8007638:	7ff00000 	.word	0x7ff00000
 800763c:	54442d18 	.word	0x54442d18
 8007640:	bff921fb 	.word	0xbff921fb
 8007644:	3fdbffff 	.word	0x3fdbffff
 8007648:	3e1fffff 	.word	0x3e1fffff
 800764c:	8800759c 	.word	0x8800759c
 8007650:	7e37e43c 	.word	0x7e37e43c
 8007654:	3ff00000 	.word	0x3ff00000
 8007658:	3ff2ffff 	.word	0x3ff2ffff
 800765c:	3fe5ffff 	.word	0x3fe5ffff
 8007660:	e322da11 	.word	0xe322da11
 8007664:	3f90ad3a 	.word	0x3f90ad3a
 8007668:	24760deb 	.word	0x24760deb
 800766c:	3fa97b4b 	.word	0x3fa97b4b
 8007670:	a0d03d51 	.word	0xa0d03d51
 8007674:	3fb10d66 	.word	0x3fb10d66
 8007678:	c54c206e 	.word	0xc54c206e
 800767c:	3fb745cd 	.word	0x3fb745cd
 8007680:	920083ff 	.word	0x920083ff
 8007684:	3fc24924 	.word	0x3fc24924
 8007688:	5555550d 	.word	0x5555550d
 800768c:	3fd55555 	.word	0x3fd55555
 8007690:	2c6a6c2f 	.word	0x2c6a6c2f
 8007694:	bfa2b444 	.word	0xbfa2b444
 8007698:	52defd9a 	.word	0x52defd9a
 800769c:	3fadde2d 	.word	0x3fadde2d
 80076a0:	af749a6d 	.word	0xaf749a6d
 80076a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80076a8:	fe231671 	.word	0xfe231671
 80076ac:	3fbc71c6 	.word	0x3fbc71c6
 80076b0:	9998ebc4 	.word	0x9998ebc4
 80076b4:	3fc99999 	.word	0x3fc99999
 80076b8:	40037fff 	.word	0x40037fff
 80076bc:	3ff80000 	.word	0x3ff80000
 80076c0:	bff00000 	.word	0xbff00000
 80076c4:	08007ba0 	.word	0x08007ba0
 80076c8:	08007bc0 	.word	0x08007bc0
 80076cc:	3ff921fb 	.word	0x3ff921fb

080076d0 <fabs>:
 80076d0:	004b      	lsls	r3, r1, #1
 80076d2:	0859      	lsrs	r1, r3, #1
 80076d4:	4770      	bx	lr

080076d6 <atan2>:
 80076d6:	b510      	push	{r4, lr}
 80076d8:	f000 f828 	bl	800772c <__ieee754_atan2>
 80076dc:	bd10      	pop	{r4, pc}

080076de <sqrt>:
 80076de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e0:	0004      	movs	r4, r0
 80076e2:	000d      	movs	r5, r1
 80076e4:	f000 f8ce 	bl	8007884 <__ieee754_sqrt>
 80076e8:	0022      	movs	r2, r4
 80076ea:	0006      	movs	r6, r0
 80076ec:	000f      	movs	r7, r1
 80076ee:	002b      	movs	r3, r5
 80076f0:	0020      	movs	r0, r4
 80076f2:	0029      	movs	r1, r5
 80076f4:	f7fa fe38 	bl	8002368 <__aeabi_dcmpun>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d113      	bne.n	8007724 <sqrt+0x46>
 80076fc:	2200      	movs	r2, #0
 80076fe:	2300      	movs	r3, #0
 8007700:	0020      	movs	r0, r4
 8007702:	0029      	movs	r1, r5
 8007704:	f7f8 fdaa 	bl	800025c <__aeabi_dcmplt>
 8007708:	2800      	cmp	r0, #0
 800770a:	d00b      	beq.n	8007724 <sqrt+0x46>
 800770c:	f7ff f9c4 	bl	8006a98 <__errno>
 8007710:	2321      	movs	r3, #33	; 0x21
 8007712:	2200      	movs	r2, #0
 8007714:	6003      	str	r3, [r0, #0]
 8007716:	2300      	movs	r3, #0
 8007718:	0010      	movs	r0, r2
 800771a:	0019      	movs	r1, r3
 800771c:	f7f9 fc24 	bl	8000f68 <__aeabi_ddiv>
 8007720:	0006      	movs	r6, r0
 8007722:	000f      	movs	r7, r1
 8007724:	0030      	movs	r0, r6
 8007726:	0039      	movs	r1, r7
 8007728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800772c <__ieee754_atan2>:
 800772c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772e:	0016      	movs	r6, r2
 8007730:	001d      	movs	r5, r3
 8007732:	005a      	lsls	r2, r3, #1
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4273      	negs	r3, r6
 8007738:	4333      	orrs	r3, r6
 800773a:	4f46      	ldr	r7, [pc, #280]	; (8007854 <__ieee754_atan2+0x128>)
 800773c:	0852      	lsrs	r2, r2, #1
 800773e:	0fdb      	lsrs	r3, r3, #31
 8007740:	4313      	orrs	r3, r2
 8007742:	42bb      	cmp	r3, r7
 8007744:	d809      	bhi.n	800775a <__ieee754_atan2+0x2e>
 8007746:	4244      	negs	r4, r0
 8007748:	004b      	lsls	r3, r1, #1
 800774a:	4304      	orrs	r4, r0
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	0fe4      	lsrs	r4, r4, #31
 8007750:	9100      	str	r1, [sp, #0]
 8007752:	9001      	str	r0, [sp, #4]
 8007754:	431c      	orrs	r4, r3
 8007756:	42bc      	cmp	r4, r7
 8007758:	d905      	bls.n	8007766 <__ieee754_atan2+0x3a>
 800775a:	0032      	movs	r2, r6
 800775c:	002b      	movs	r3, r5
 800775e:	f7f9 f8c7 	bl	80008f0 <__aeabi_dadd>
 8007762:	b003      	add	sp, #12
 8007764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007766:	4c3c      	ldr	r4, [pc, #240]	; (8007858 <__ieee754_atan2+0x12c>)
 8007768:	192c      	adds	r4, r5, r4
 800776a:	4334      	orrs	r4, r6
 800776c:	d102      	bne.n	8007774 <__ieee754_atan2+0x48>
 800776e:	f7ff fe2f 	bl	80073d0 <atan>
 8007772:	e7f6      	b.n	8007762 <__ieee754_atan2+0x36>
 8007774:	17ac      	asrs	r4, r5, #30
 8007776:	46a4      	mov	ip, r4
 8007778:	2402      	movs	r4, #2
 800777a:	4667      	mov	r7, ip
 800777c:	403c      	ands	r4, r7
 800777e:	9f00      	ldr	r7, [sp, #0]
 8007780:	0fff      	lsrs	r7, r7, #31
 8007782:	433c      	orrs	r4, r7
 8007784:	9f01      	ldr	r7, [sp, #4]
 8007786:	431f      	orrs	r7, r3
 8007788:	d106      	bne.n	8007798 <__ieee754_atan2+0x6c>
 800778a:	2c02      	cmp	r4, #2
 800778c:	d056      	beq.n	800783c <__ieee754_atan2+0x110>
 800778e:	2c03      	cmp	r4, #3
 8007790:	d1e7      	bne.n	8007762 <__ieee754_atan2+0x36>
 8007792:	4832      	ldr	r0, [pc, #200]	; (800785c <__ieee754_atan2+0x130>)
 8007794:	4932      	ldr	r1, [pc, #200]	; (8007860 <__ieee754_atan2+0x134>)
 8007796:	e7e4      	b.n	8007762 <__ieee754_atan2+0x36>
 8007798:	0017      	movs	r7, r2
 800779a:	4337      	orrs	r7, r6
 800779c:	d105      	bne.n	80077aa <__ieee754_atan2+0x7e>
 800779e:	9b00      	ldr	r3, [sp, #0]
 80077a0:	482e      	ldr	r0, [pc, #184]	; (800785c <__ieee754_atan2+0x130>)
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da53      	bge.n	800784e <__ieee754_atan2+0x122>
 80077a6:	492f      	ldr	r1, [pc, #188]	; (8007864 <__ieee754_atan2+0x138>)
 80077a8:	e7db      	b.n	8007762 <__ieee754_atan2+0x36>
 80077aa:	4f2a      	ldr	r7, [pc, #168]	; (8007854 <__ieee754_atan2+0x128>)
 80077ac:	42ba      	cmp	r2, r7
 80077ae:	d10f      	bne.n	80077d0 <__ieee754_atan2+0xa4>
 80077b0:	3c01      	subs	r4, #1
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d107      	bne.n	80077c6 <__ieee754_atan2+0x9a>
 80077b6:	2c02      	cmp	r4, #2
 80077b8:	d843      	bhi.n	8007842 <__ieee754_atan2+0x116>
 80077ba:	4b2b      	ldr	r3, [pc, #172]	; (8007868 <__ieee754_atan2+0x13c>)
 80077bc:	00e4      	lsls	r4, r4, #3
 80077be:	191c      	adds	r4, r3, r4
 80077c0:	6820      	ldr	r0, [r4, #0]
 80077c2:	6861      	ldr	r1, [r4, #4]
 80077c4:	e7cd      	b.n	8007762 <__ieee754_atan2+0x36>
 80077c6:	2c02      	cmp	r4, #2
 80077c8:	d83e      	bhi.n	8007848 <__ieee754_atan2+0x11c>
 80077ca:	4b28      	ldr	r3, [pc, #160]	; (800786c <__ieee754_atan2+0x140>)
 80077cc:	00e4      	lsls	r4, r4, #3
 80077ce:	e7f6      	b.n	80077be <__ieee754_atan2+0x92>
 80077d0:	4f20      	ldr	r7, [pc, #128]	; (8007854 <__ieee754_atan2+0x128>)
 80077d2:	42bb      	cmp	r3, r7
 80077d4:	d0e3      	beq.n	800779e <__ieee754_atan2+0x72>
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	151b      	asrs	r3, r3, #20
 80077da:	2b3c      	cmp	r3, #60	; 0x3c
 80077dc:	dc18      	bgt.n	8007810 <__ieee754_atan2+0xe4>
 80077de:	2d00      	cmp	r5, #0
 80077e0:	da01      	bge.n	80077e6 <__ieee754_atan2+0xba>
 80077e2:	333c      	adds	r3, #60	; 0x3c
 80077e4:	db17      	blt.n	8007816 <__ieee754_atan2+0xea>
 80077e6:	0032      	movs	r2, r6
 80077e8:	002b      	movs	r3, r5
 80077ea:	f7f9 fbbd 	bl	8000f68 <__aeabi_ddiv>
 80077ee:	f7ff ff6f 	bl	80076d0 <fabs>
 80077f2:	f7ff fded 	bl	80073d0 <atan>
 80077f6:	2c01      	cmp	r4, #1
 80077f8:	d010      	beq.n	800781c <__ieee754_atan2+0xf0>
 80077fa:	2c02      	cmp	r4, #2
 80077fc:	d013      	beq.n	8007826 <__ieee754_atan2+0xfa>
 80077fe:	2c00      	cmp	r4, #0
 8007800:	d0af      	beq.n	8007762 <__ieee754_atan2+0x36>
 8007802:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <__ieee754_atan2+0x144>)
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <__ieee754_atan2+0x148>)
 8007806:	f7fa fa1d 	bl	8001c44 <__aeabi_dsub>
 800780a:	4a14      	ldr	r2, [pc, #80]	; (800785c <__ieee754_atan2+0x130>)
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <__ieee754_atan2+0x14c>)
 800780e:	e012      	b.n	8007836 <__ieee754_atan2+0x10a>
 8007810:	4812      	ldr	r0, [pc, #72]	; (800785c <__ieee754_atan2+0x130>)
 8007812:	491a      	ldr	r1, [pc, #104]	; (800787c <__ieee754_atan2+0x150>)
 8007814:	e7ef      	b.n	80077f6 <__ieee754_atan2+0xca>
 8007816:	2000      	movs	r0, #0
 8007818:	2100      	movs	r1, #0
 800781a:	e7ec      	b.n	80077f6 <__ieee754_atan2+0xca>
 800781c:	2480      	movs	r4, #128	; 0x80
 800781e:	0624      	lsls	r4, r4, #24
 8007820:	190b      	adds	r3, r1, r4
 8007822:	0019      	movs	r1, r3
 8007824:	e79d      	b.n	8007762 <__ieee754_atan2+0x36>
 8007826:	4a12      	ldr	r2, [pc, #72]	; (8007870 <__ieee754_atan2+0x144>)
 8007828:	4b12      	ldr	r3, [pc, #72]	; (8007874 <__ieee754_atan2+0x148>)
 800782a:	f7fa fa0b 	bl	8001c44 <__aeabi_dsub>
 800782e:	0002      	movs	r2, r0
 8007830:	000b      	movs	r3, r1
 8007832:	480a      	ldr	r0, [pc, #40]	; (800785c <__ieee754_atan2+0x130>)
 8007834:	4910      	ldr	r1, [pc, #64]	; (8007878 <__ieee754_atan2+0x14c>)
 8007836:	f7fa fa05 	bl	8001c44 <__aeabi_dsub>
 800783a:	e792      	b.n	8007762 <__ieee754_atan2+0x36>
 800783c:	4807      	ldr	r0, [pc, #28]	; (800785c <__ieee754_atan2+0x130>)
 800783e:	490e      	ldr	r1, [pc, #56]	; (8007878 <__ieee754_atan2+0x14c>)
 8007840:	e78f      	b.n	8007762 <__ieee754_atan2+0x36>
 8007842:	4806      	ldr	r0, [pc, #24]	; (800785c <__ieee754_atan2+0x130>)
 8007844:	490e      	ldr	r1, [pc, #56]	; (8007880 <__ieee754_atan2+0x154>)
 8007846:	e78c      	b.n	8007762 <__ieee754_atan2+0x36>
 8007848:	2000      	movs	r0, #0
 800784a:	2100      	movs	r1, #0
 800784c:	e789      	b.n	8007762 <__ieee754_atan2+0x36>
 800784e:	490b      	ldr	r1, [pc, #44]	; (800787c <__ieee754_atan2+0x150>)
 8007850:	e787      	b.n	8007762 <__ieee754_atan2+0x36>
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	7ff00000 	.word	0x7ff00000
 8007858:	c0100000 	.word	0xc0100000
 800785c:	54442d18 	.word	0x54442d18
 8007860:	c00921fb 	.word	0xc00921fb
 8007864:	bff921fb 	.word	0xbff921fb
 8007868:	08007be0 	.word	0x08007be0
 800786c:	08007bf8 	.word	0x08007bf8
 8007870:	33145c07 	.word	0x33145c07
 8007874:	3ca1a626 	.word	0x3ca1a626
 8007878:	400921fb 	.word	0x400921fb
 800787c:	3ff921fb 	.word	0x3ff921fb
 8007880:	3fe921fb 	.word	0x3fe921fb

08007884 <__ieee754_sqrt>:
 8007884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007886:	000b      	movs	r3, r1
 8007888:	000c      	movs	r4, r1
 800788a:	4956      	ldr	r1, [pc, #344]	; (80079e4 <__ieee754_sqrt+0x160>)
 800788c:	0005      	movs	r5, r0
 800788e:	0002      	movs	r2, r0
 8007890:	0008      	movs	r0, r1
 8007892:	b085      	sub	sp, #20
 8007894:	4020      	ands	r0, r4
 8007896:	4288      	cmp	r0, r1
 8007898:	d10f      	bne.n	80078ba <__ieee754_sqrt+0x36>
 800789a:	0028      	movs	r0, r5
 800789c:	0021      	movs	r1, r4
 800789e:	f7f9 ff65 	bl	800176c <__aeabi_dmul>
 80078a2:	0002      	movs	r2, r0
 80078a4:	000b      	movs	r3, r1
 80078a6:	0028      	movs	r0, r5
 80078a8:	0021      	movs	r1, r4
 80078aa:	f7f9 f821 	bl	80008f0 <__aeabi_dadd>
 80078ae:	0005      	movs	r5, r0
 80078b0:	000c      	movs	r4, r1
 80078b2:	0028      	movs	r0, r5
 80078b4:	0021      	movs	r1, r4
 80078b6:	b005      	add	sp, #20
 80078b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	dc10      	bgt.n	80078e0 <__ieee754_sqrt+0x5c>
 80078be:	0061      	lsls	r1, r4, #1
 80078c0:	0849      	lsrs	r1, r1, #1
 80078c2:	4329      	orrs	r1, r5
 80078c4:	d0f5      	beq.n	80078b2 <__ieee754_sqrt+0x2e>
 80078c6:	2100      	movs	r1, #0
 80078c8:	428c      	cmp	r4, r1
 80078ca:	d100      	bne.n	80078ce <__ieee754_sqrt+0x4a>
 80078cc:	e080      	b.n	80079d0 <__ieee754_sqrt+0x14c>
 80078ce:	0028      	movs	r0, r5
 80078d0:	0021      	movs	r1, r4
 80078d2:	f7fa f9b7 	bl	8001c44 <__aeabi_dsub>
 80078d6:	0002      	movs	r2, r0
 80078d8:	000b      	movs	r3, r1
 80078da:	f7f9 fb45 	bl	8000f68 <__aeabi_ddiv>
 80078de:	e7e6      	b.n	80078ae <__ieee754_sqrt+0x2a>
 80078e0:	1521      	asrs	r1, r4, #20
 80078e2:	d075      	beq.n	80079d0 <__ieee754_sqrt+0x14c>
 80078e4:	4840      	ldr	r0, [pc, #256]	; (80079e8 <__ieee754_sqrt+0x164>)
 80078e6:	031b      	lsls	r3, r3, #12
 80078e8:	180c      	adds	r4, r1, r0
 80078ea:	2080      	movs	r0, #128	; 0x80
 80078ec:	0b1b      	lsrs	r3, r3, #12
 80078ee:	0340      	lsls	r0, r0, #13
 80078f0:	4303      	orrs	r3, r0
 80078f2:	07c9      	lsls	r1, r1, #31
 80078f4:	d403      	bmi.n	80078fe <__ieee754_sqrt+0x7a>
 80078f6:	0fd1      	lsrs	r1, r2, #31
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	185b      	adds	r3, r3, r1
 80078fc:	0052      	lsls	r2, r2, #1
 80078fe:	1061      	asrs	r1, r4, #1
 8007900:	2400      	movs	r4, #0
 8007902:	9103      	str	r1, [sp, #12]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	0fd1      	lsrs	r1, r2, #31
 8007908:	185b      	adds	r3, r3, r1
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	2516      	movs	r5, #22
 800790e:	0020      	movs	r0, r4
 8007910:	0052      	lsls	r2, r2, #1
 8007912:	0389      	lsls	r1, r1, #14
 8007914:	1846      	adds	r6, r0, r1
 8007916:	429e      	cmp	r6, r3
 8007918:	dc02      	bgt.n	8007920 <__ieee754_sqrt+0x9c>
 800791a:	1870      	adds	r0, r6, r1
 800791c:	1b9b      	subs	r3, r3, r6
 800791e:	1864      	adds	r4, r4, r1
 8007920:	0fd6      	lsrs	r6, r2, #31
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	3d01      	subs	r5, #1
 8007926:	18f3      	adds	r3, r6, r3
 8007928:	0052      	lsls	r2, r2, #1
 800792a:	0849      	lsrs	r1, r1, #1
 800792c:	2d00      	cmp	r5, #0
 800792e:	d1f1      	bne.n	8007914 <__ieee754_sqrt+0x90>
 8007930:	2620      	movs	r6, #32
 8007932:	2780      	movs	r7, #128	; 0x80
 8007934:	0029      	movs	r1, r5
 8007936:	9601      	str	r6, [sp, #4]
 8007938:	063f      	lsls	r7, r7, #24
 800793a:	197e      	adds	r6, r7, r5
 800793c:	46b4      	mov	ip, r6
 800793e:	4283      	cmp	r3, r0
 8007940:	dc02      	bgt.n	8007948 <__ieee754_sqrt+0xc4>
 8007942:	d114      	bne.n	800796e <__ieee754_sqrt+0xea>
 8007944:	4296      	cmp	r6, r2
 8007946:	d812      	bhi.n	800796e <__ieee754_sqrt+0xea>
 8007948:	4665      	mov	r5, ip
 800794a:	4666      	mov	r6, ip
 800794c:	19ed      	adds	r5, r5, r7
 800794e:	9002      	str	r0, [sp, #8]
 8007950:	2e00      	cmp	r6, #0
 8007952:	da03      	bge.n	800795c <__ieee754_sqrt+0xd8>
 8007954:	43ee      	mvns	r6, r5
 8007956:	0ff6      	lsrs	r6, r6, #31
 8007958:	1986      	adds	r6, r0, r6
 800795a:	9602      	str	r6, [sp, #8]
 800795c:	1a1b      	subs	r3, r3, r0
 800795e:	4562      	cmp	r2, ip
 8007960:	4180      	sbcs	r0, r0
 8007962:	4240      	negs	r0, r0
 8007964:	1a1b      	subs	r3, r3, r0
 8007966:	4660      	mov	r0, ip
 8007968:	1a12      	subs	r2, r2, r0
 800796a:	9802      	ldr	r0, [sp, #8]
 800796c:	19c9      	adds	r1, r1, r7
 800796e:	0fd6      	lsrs	r6, r2, #31
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	199b      	adds	r3, r3, r6
 8007974:	9e01      	ldr	r6, [sp, #4]
 8007976:	0052      	lsls	r2, r2, #1
 8007978:	3e01      	subs	r6, #1
 800797a:	087f      	lsrs	r7, r7, #1
 800797c:	9601      	str	r6, [sp, #4]
 800797e:	2e00      	cmp	r6, #0
 8007980:	d1db      	bne.n	800793a <__ieee754_sqrt+0xb6>
 8007982:	4313      	orrs	r3, r2
 8007984:	d003      	beq.n	800798e <__ieee754_sqrt+0x10a>
 8007986:	1c4b      	adds	r3, r1, #1
 8007988:	d127      	bne.n	80079da <__ieee754_sqrt+0x156>
 800798a:	0031      	movs	r1, r6
 800798c:	3401      	adds	r4, #1
 800798e:	4b17      	ldr	r3, [pc, #92]	; (80079ec <__ieee754_sqrt+0x168>)
 8007990:	1060      	asrs	r0, r4, #1
 8007992:	18c0      	adds	r0, r0, r3
 8007994:	0849      	lsrs	r1, r1, #1
 8007996:	07e3      	lsls	r3, r4, #31
 8007998:	d502      	bpl.n	80079a0 <__ieee754_sqrt+0x11c>
 800799a:	2380      	movs	r3, #128	; 0x80
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	4319      	orrs	r1, r3
 80079a0:	9b03      	ldr	r3, [sp, #12]
 80079a2:	000d      	movs	r5, r1
 80079a4:	051c      	lsls	r4, r3, #20
 80079a6:	1823      	adds	r3, r4, r0
 80079a8:	001c      	movs	r4, r3
 80079aa:	e782      	b.n	80078b2 <__ieee754_sqrt+0x2e>
 80079ac:	0ad3      	lsrs	r3, r2, #11
 80079ae:	3815      	subs	r0, #21
 80079b0:	0552      	lsls	r2, r2, #21
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0fa      	beq.n	80079ac <__ieee754_sqrt+0x128>
 80079b6:	2480      	movs	r4, #128	; 0x80
 80079b8:	0364      	lsls	r4, r4, #13
 80079ba:	4223      	tst	r3, r4
 80079bc:	d00a      	beq.n	80079d4 <__ieee754_sqrt+0x150>
 80079be:	2420      	movs	r4, #32
 80079c0:	0016      	movs	r6, r2
 80079c2:	1a64      	subs	r4, r4, r1
 80079c4:	40e6      	lsrs	r6, r4
 80079c6:	1e4d      	subs	r5, r1, #1
 80079c8:	408a      	lsls	r2, r1
 80079ca:	4333      	orrs	r3, r6
 80079cc:	1b41      	subs	r1, r0, r5
 80079ce:	e789      	b.n	80078e4 <__ieee754_sqrt+0x60>
 80079d0:	2000      	movs	r0, #0
 80079d2:	e7ee      	b.n	80079b2 <__ieee754_sqrt+0x12e>
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	3101      	adds	r1, #1
 80079d8:	e7ef      	b.n	80079ba <__ieee754_sqrt+0x136>
 80079da:	2301      	movs	r3, #1
 80079dc:	3101      	adds	r1, #1
 80079de:	4399      	bics	r1, r3
 80079e0:	e7d5      	b.n	800798e <__ieee754_sqrt+0x10a>
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	7ff00000 	.word	0x7ff00000
 80079e8:	fffffc01 	.word	0xfffffc01
 80079ec:	3fe00000 	.word	0x3fe00000

080079f0 <_init>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr

080079fc <_fini>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr
