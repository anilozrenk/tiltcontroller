
tilt_controlled_controller_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007854  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007910  08007910  00017910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b18  08007b18  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08007b18  08007b18  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b18  08007b18  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007b20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000100  08007c20  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08007c20  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbf0  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213a  00000000  00000000  0002dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002975  00000000  00000000  000312d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb04  00000000  00000000  00033c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a180b  00000000  00000000  00042749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  000e3fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080078f8 	.word	0x080078f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	080078f8 	.word	0x080078f8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f001 fa2f 	bl	80016a4 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 f97f 	bl	8001554 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 fa21 	bl	80016a4 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fa17 	bl	80016a4 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f9a7 	bl	80015d8 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 f99d 	bl	80015d8 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f002 f86f 	bl	80023a4 <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f001 fcb8 	bl	8001c44 <__aeabi_dsub>
 80002d4:	f002 f866 	bl	80023a4 <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__aeabi_fadd>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	46c6      	mov	lr, r8
 80002ec:	0243      	lsls	r3, r0, #9
 80002ee:	0a5b      	lsrs	r3, r3, #9
 80002f0:	024e      	lsls	r6, r1, #9
 80002f2:	0045      	lsls	r5, r0, #1
 80002f4:	004f      	lsls	r7, r1, #1
 80002f6:	00da      	lsls	r2, r3, #3
 80002f8:	0fc4      	lsrs	r4, r0, #31
 80002fa:	469c      	mov	ip, r3
 80002fc:	0a70      	lsrs	r0, r6, #9
 80002fe:	4690      	mov	r8, r2
 8000300:	b500      	push	{lr}
 8000302:	0e2d      	lsrs	r5, r5, #24
 8000304:	0e3f      	lsrs	r7, r7, #24
 8000306:	0fc9      	lsrs	r1, r1, #31
 8000308:	09b6      	lsrs	r6, r6, #6
 800030a:	428c      	cmp	r4, r1
 800030c:	d04b      	beq.n	80003a6 <__aeabi_fadd+0xbe>
 800030e:	1bea      	subs	r2, r5, r7
 8000310:	2a00      	cmp	r2, #0
 8000312:	dd36      	ble.n	8000382 <__aeabi_fadd+0x9a>
 8000314:	2f00      	cmp	r7, #0
 8000316:	d061      	beq.n	80003dc <__aeabi_fadd+0xf4>
 8000318:	2dff      	cmp	r5, #255	; 0xff
 800031a:	d100      	bne.n	800031e <__aeabi_fadd+0x36>
 800031c:	e0ad      	b.n	800047a <__aeabi_fadd+0x192>
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	04db      	lsls	r3, r3, #19
 8000322:	431e      	orrs	r6, r3
 8000324:	2a1b      	cmp	r2, #27
 8000326:	dc00      	bgt.n	800032a <__aeabi_fadd+0x42>
 8000328:	e0d3      	b.n	80004d2 <__aeabi_fadd+0x1ea>
 800032a:	2001      	movs	r0, #1
 800032c:	4643      	mov	r3, r8
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	0143      	lsls	r3, r0, #5
 8000332:	d400      	bmi.n	8000336 <__aeabi_fadd+0x4e>
 8000334:	e08c      	b.n	8000450 <__aeabi_fadd+0x168>
 8000336:	0180      	lsls	r0, r0, #6
 8000338:	0987      	lsrs	r7, r0, #6
 800033a:	0038      	movs	r0, r7
 800033c:	f002 f8be 	bl	80024bc <__clzsi2>
 8000340:	3805      	subs	r0, #5
 8000342:	4087      	lsls	r7, r0
 8000344:	4285      	cmp	r5, r0
 8000346:	dc00      	bgt.n	800034a <__aeabi_fadd+0x62>
 8000348:	e0b6      	b.n	80004b8 <__aeabi_fadd+0x1d0>
 800034a:	1a2d      	subs	r5, r5, r0
 800034c:	48b3      	ldr	r0, [pc, #716]	; (800061c <__aeabi_fadd+0x334>)
 800034e:	4038      	ands	r0, r7
 8000350:	0743      	lsls	r3, r0, #29
 8000352:	d004      	beq.n	800035e <__aeabi_fadd+0x76>
 8000354:	230f      	movs	r3, #15
 8000356:	4003      	ands	r3, r0
 8000358:	2b04      	cmp	r3, #4
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0x76>
 800035c:	3004      	adds	r0, #4
 800035e:	0143      	lsls	r3, r0, #5
 8000360:	d400      	bmi.n	8000364 <__aeabi_fadd+0x7c>
 8000362:	e078      	b.n	8000456 <__aeabi_fadd+0x16e>
 8000364:	1c6a      	adds	r2, r5, #1
 8000366:	2dfe      	cmp	r5, #254	; 0xfe
 8000368:	d065      	beq.n	8000436 <__aeabi_fadd+0x14e>
 800036a:	0180      	lsls	r0, r0, #6
 800036c:	0a43      	lsrs	r3, r0, #9
 800036e:	469c      	mov	ip, r3
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	4663      	mov	r3, ip
 8000374:	05d0      	lsls	r0, r2, #23
 8000376:	4318      	orrs	r0, r3
 8000378:	07e4      	lsls	r4, r4, #31
 800037a:	4320      	orrs	r0, r4
 800037c:	bc80      	pop	{r7}
 800037e:	46b8      	mov	r8, r7
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	2a00      	cmp	r2, #0
 8000384:	d035      	beq.n	80003f2 <__aeabi_fadd+0x10a>
 8000386:	1b7a      	subs	r2, r7, r5
 8000388:	2d00      	cmp	r5, #0
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xa6>
 800038c:	e0af      	b.n	80004ee <__aeabi_fadd+0x206>
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d100      	bne.n	8000396 <__aeabi_fadd+0xae>
 8000394:	e0a7      	b.n	80004e6 <__aeabi_fadd+0x1fe>
 8000396:	1e53      	subs	r3, r2, #1
 8000398:	2a01      	cmp	r2, #1
 800039a:	d100      	bne.n	800039e <__aeabi_fadd+0xb6>
 800039c:	e12f      	b.n	80005fe <__aeabi_fadd+0x316>
 800039e:	2aff      	cmp	r2, #255	; 0xff
 80003a0:	d069      	beq.n	8000476 <__aeabi_fadd+0x18e>
 80003a2:	001a      	movs	r2, r3
 80003a4:	e0aa      	b.n	80004fc <__aeabi_fadd+0x214>
 80003a6:	1be9      	subs	r1, r5, r7
 80003a8:	2900      	cmp	r1, #0
 80003aa:	dd70      	ble.n	800048e <__aeabi_fadd+0x1a6>
 80003ac:	2f00      	cmp	r7, #0
 80003ae:	d037      	beq.n	8000420 <__aeabi_fadd+0x138>
 80003b0:	2dff      	cmp	r5, #255	; 0xff
 80003b2:	d062      	beq.n	800047a <__aeabi_fadd+0x192>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	04db      	lsls	r3, r3, #19
 80003b8:	431e      	orrs	r6, r3
 80003ba:	291b      	cmp	r1, #27
 80003bc:	dc00      	bgt.n	80003c0 <__aeabi_fadd+0xd8>
 80003be:	e0b0      	b.n	8000522 <__aeabi_fadd+0x23a>
 80003c0:	2001      	movs	r0, #1
 80003c2:	4440      	add	r0, r8
 80003c4:	0143      	lsls	r3, r0, #5
 80003c6:	d543      	bpl.n	8000450 <__aeabi_fadd+0x168>
 80003c8:	3501      	adds	r5, #1
 80003ca:	2dff      	cmp	r5, #255	; 0xff
 80003cc:	d033      	beq.n	8000436 <__aeabi_fadd+0x14e>
 80003ce:	2301      	movs	r3, #1
 80003d0:	4a93      	ldr	r2, [pc, #588]	; (8000620 <__aeabi_fadd+0x338>)
 80003d2:	4003      	ands	r3, r0
 80003d4:	0840      	lsrs	r0, r0, #1
 80003d6:	4010      	ands	r0, r2
 80003d8:	4318      	orrs	r0, r3
 80003da:	e7b9      	b.n	8000350 <__aeabi_fadd+0x68>
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d100      	bne.n	80003e2 <__aeabi_fadd+0xfa>
 80003e0:	e083      	b.n	80004ea <__aeabi_fadd+0x202>
 80003e2:	1e51      	subs	r1, r2, #1
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	d100      	bne.n	80003ea <__aeabi_fadd+0x102>
 80003e8:	e0d8      	b.n	800059c <__aeabi_fadd+0x2b4>
 80003ea:	2aff      	cmp	r2, #255	; 0xff
 80003ec:	d045      	beq.n	800047a <__aeabi_fadd+0x192>
 80003ee:	000a      	movs	r2, r1
 80003f0:	e798      	b.n	8000324 <__aeabi_fadd+0x3c>
 80003f2:	27fe      	movs	r7, #254	; 0xfe
 80003f4:	1c6a      	adds	r2, r5, #1
 80003f6:	4217      	tst	r7, r2
 80003f8:	d000      	beq.n	80003fc <__aeabi_fadd+0x114>
 80003fa:	e086      	b.n	800050a <__aeabi_fadd+0x222>
 80003fc:	2d00      	cmp	r5, #0
 80003fe:	d000      	beq.n	8000402 <__aeabi_fadd+0x11a>
 8000400:	e0b7      	b.n	8000572 <__aeabi_fadd+0x28a>
 8000402:	4643      	mov	r3, r8
 8000404:	2b00      	cmp	r3, #0
 8000406:	d100      	bne.n	800040a <__aeabi_fadd+0x122>
 8000408:	e0f3      	b.n	80005f2 <__aeabi_fadd+0x30a>
 800040a:	2200      	movs	r2, #0
 800040c:	2e00      	cmp	r6, #0
 800040e:	d0b0      	beq.n	8000372 <__aeabi_fadd+0x8a>
 8000410:	1b98      	subs	r0, r3, r6
 8000412:	0143      	lsls	r3, r0, #5
 8000414:	d400      	bmi.n	8000418 <__aeabi_fadd+0x130>
 8000416:	e0fa      	b.n	800060e <__aeabi_fadd+0x326>
 8000418:	4643      	mov	r3, r8
 800041a:	000c      	movs	r4, r1
 800041c:	1af0      	subs	r0, r6, r3
 800041e:	e797      	b.n	8000350 <__aeabi_fadd+0x68>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_fadd+0x13e>
 8000424:	e0c8      	b.n	80005b8 <__aeabi_fadd+0x2d0>
 8000426:	1e4a      	subs	r2, r1, #1
 8000428:	2901      	cmp	r1, #1
 800042a:	d100      	bne.n	800042e <__aeabi_fadd+0x146>
 800042c:	e0ae      	b.n	800058c <__aeabi_fadd+0x2a4>
 800042e:	29ff      	cmp	r1, #255	; 0xff
 8000430:	d023      	beq.n	800047a <__aeabi_fadd+0x192>
 8000432:	0011      	movs	r1, r2
 8000434:	e7c1      	b.n	80003ba <__aeabi_fadd+0xd2>
 8000436:	2300      	movs	r3, #0
 8000438:	22ff      	movs	r2, #255	; 0xff
 800043a:	469c      	mov	ip, r3
 800043c:	e799      	b.n	8000372 <__aeabi_fadd+0x8a>
 800043e:	21fe      	movs	r1, #254	; 0xfe
 8000440:	1c6a      	adds	r2, r5, #1
 8000442:	4211      	tst	r1, r2
 8000444:	d077      	beq.n	8000536 <__aeabi_fadd+0x24e>
 8000446:	2aff      	cmp	r2, #255	; 0xff
 8000448:	d0f5      	beq.n	8000436 <__aeabi_fadd+0x14e>
 800044a:	0015      	movs	r5, r2
 800044c:	4446      	add	r6, r8
 800044e:	0870      	lsrs	r0, r6, #1
 8000450:	0743      	lsls	r3, r0, #29
 8000452:	d000      	beq.n	8000456 <__aeabi_fadd+0x16e>
 8000454:	e77e      	b.n	8000354 <__aeabi_fadd+0x6c>
 8000456:	08c3      	lsrs	r3, r0, #3
 8000458:	2dff      	cmp	r5, #255	; 0xff
 800045a:	d00e      	beq.n	800047a <__aeabi_fadd+0x192>
 800045c:	025b      	lsls	r3, r3, #9
 800045e:	0a5b      	lsrs	r3, r3, #9
 8000460:	469c      	mov	ip, r3
 8000462:	b2ea      	uxtb	r2, r5
 8000464:	e785      	b.n	8000372 <__aeabi_fadd+0x8a>
 8000466:	2e00      	cmp	r6, #0
 8000468:	d007      	beq.n	800047a <__aeabi_fadd+0x192>
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	03d2      	lsls	r2, r2, #15
 800046e:	4213      	tst	r3, r2
 8000470:	d003      	beq.n	800047a <__aeabi_fadd+0x192>
 8000472:	4210      	tst	r0, r2
 8000474:	d101      	bne.n	800047a <__aeabi_fadd+0x192>
 8000476:	000c      	movs	r4, r1
 8000478:	0003      	movs	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0db      	beq.n	8000436 <__aeabi_fadd+0x14e>
 800047e:	2080      	movs	r0, #128	; 0x80
 8000480:	03c0      	lsls	r0, r0, #15
 8000482:	4318      	orrs	r0, r3
 8000484:	0240      	lsls	r0, r0, #9
 8000486:	0a43      	lsrs	r3, r0, #9
 8000488:	469c      	mov	ip, r3
 800048a:	22ff      	movs	r2, #255	; 0xff
 800048c:	e771      	b.n	8000372 <__aeabi_fadd+0x8a>
 800048e:	2900      	cmp	r1, #0
 8000490:	d0d5      	beq.n	800043e <__aeabi_fadd+0x156>
 8000492:	1b7a      	subs	r2, r7, r5
 8000494:	2d00      	cmp	r5, #0
 8000496:	d160      	bne.n	800055a <__aeabi_fadd+0x272>
 8000498:	4643      	mov	r3, r8
 800049a:	2b00      	cmp	r3, #0
 800049c:	d024      	beq.n	80004e8 <__aeabi_fadd+0x200>
 800049e:	1e53      	subs	r3, r2, #1
 80004a0:	2a01      	cmp	r2, #1
 80004a2:	d073      	beq.n	800058c <__aeabi_fadd+0x2a4>
 80004a4:	2aff      	cmp	r2, #255	; 0xff
 80004a6:	d0e7      	beq.n	8000478 <__aeabi_fadd+0x190>
 80004a8:	001a      	movs	r2, r3
 80004aa:	2a1b      	cmp	r2, #27
 80004ac:	dc00      	bgt.n	80004b0 <__aeabi_fadd+0x1c8>
 80004ae:	e085      	b.n	80005bc <__aeabi_fadd+0x2d4>
 80004b0:	2001      	movs	r0, #1
 80004b2:	003d      	movs	r5, r7
 80004b4:	1980      	adds	r0, r0, r6
 80004b6:	e785      	b.n	80003c4 <__aeabi_fadd+0xdc>
 80004b8:	2320      	movs	r3, #32
 80004ba:	003a      	movs	r2, r7
 80004bc:	1b45      	subs	r5, r0, r5
 80004be:	0038      	movs	r0, r7
 80004c0:	3501      	adds	r5, #1
 80004c2:	40ea      	lsrs	r2, r5
 80004c4:	1b5d      	subs	r5, r3, r5
 80004c6:	40a8      	lsls	r0, r5
 80004c8:	1e43      	subs	r3, r0, #1
 80004ca:	4198      	sbcs	r0, r3
 80004cc:	2500      	movs	r5, #0
 80004ce:	4310      	orrs	r0, r2
 80004d0:	e73e      	b.n	8000350 <__aeabi_fadd+0x68>
 80004d2:	2320      	movs	r3, #32
 80004d4:	0030      	movs	r0, r6
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	0031      	movs	r1, r6
 80004da:	4098      	lsls	r0, r3
 80004dc:	40d1      	lsrs	r1, r2
 80004de:	1e43      	subs	r3, r0, #1
 80004e0:	4198      	sbcs	r0, r3
 80004e2:	4308      	orrs	r0, r1
 80004e4:	e722      	b.n	800032c <__aeabi_fadd+0x44>
 80004e6:	000c      	movs	r4, r1
 80004e8:	0003      	movs	r3, r0
 80004ea:	0015      	movs	r5, r2
 80004ec:	e7b4      	b.n	8000458 <__aeabi_fadd+0x170>
 80004ee:	2fff      	cmp	r7, #255	; 0xff
 80004f0:	d0c1      	beq.n	8000476 <__aeabi_fadd+0x18e>
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	4640      	mov	r0, r8
 80004f6:	04db      	lsls	r3, r3, #19
 80004f8:	4318      	orrs	r0, r3
 80004fa:	4680      	mov	r8, r0
 80004fc:	2a1b      	cmp	r2, #27
 80004fe:	dd51      	ble.n	80005a4 <__aeabi_fadd+0x2bc>
 8000500:	2001      	movs	r0, #1
 8000502:	000c      	movs	r4, r1
 8000504:	003d      	movs	r5, r7
 8000506:	1a30      	subs	r0, r6, r0
 8000508:	e712      	b.n	8000330 <__aeabi_fadd+0x48>
 800050a:	4643      	mov	r3, r8
 800050c:	1b9f      	subs	r7, r3, r6
 800050e:	017b      	lsls	r3, r7, #5
 8000510:	d42b      	bmi.n	800056a <__aeabi_fadd+0x282>
 8000512:	2f00      	cmp	r7, #0
 8000514:	d000      	beq.n	8000518 <__aeabi_fadd+0x230>
 8000516:	e710      	b.n	800033a <__aeabi_fadd+0x52>
 8000518:	2300      	movs	r3, #0
 800051a:	2400      	movs	r4, #0
 800051c:	2200      	movs	r2, #0
 800051e:	469c      	mov	ip, r3
 8000520:	e727      	b.n	8000372 <__aeabi_fadd+0x8a>
 8000522:	2320      	movs	r3, #32
 8000524:	0032      	movs	r2, r6
 8000526:	0030      	movs	r0, r6
 8000528:	40ca      	lsrs	r2, r1
 800052a:	1a59      	subs	r1, r3, r1
 800052c:	4088      	lsls	r0, r1
 800052e:	1e43      	subs	r3, r0, #1
 8000530:	4198      	sbcs	r0, r3
 8000532:	4310      	orrs	r0, r2
 8000534:	e745      	b.n	80003c2 <__aeabi_fadd+0xda>
 8000536:	2d00      	cmp	r5, #0
 8000538:	d14a      	bne.n	80005d0 <__aeabi_fadd+0x2e8>
 800053a:	4643      	mov	r3, r8
 800053c:	2b00      	cmp	r3, #0
 800053e:	d063      	beq.n	8000608 <__aeabi_fadd+0x320>
 8000540:	2200      	movs	r2, #0
 8000542:	2e00      	cmp	r6, #0
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x260>
 8000546:	e714      	b.n	8000372 <__aeabi_fadd+0x8a>
 8000548:	0030      	movs	r0, r6
 800054a:	4440      	add	r0, r8
 800054c:	0143      	lsls	r3, r0, #5
 800054e:	d400      	bmi.n	8000552 <__aeabi_fadd+0x26a>
 8000550:	e77e      	b.n	8000450 <__aeabi_fadd+0x168>
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <__aeabi_fadd+0x334>)
 8000554:	3501      	adds	r5, #1
 8000556:	4018      	ands	r0, r3
 8000558:	e77a      	b.n	8000450 <__aeabi_fadd+0x168>
 800055a:	2fff      	cmp	r7, #255	; 0xff
 800055c:	d08c      	beq.n	8000478 <__aeabi_fadd+0x190>
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	4641      	mov	r1, r8
 8000562:	04db      	lsls	r3, r3, #19
 8000564:	4319      	orrs	r1, r3
 8000566:	4688      	mov	r8, r1
 8000568:	e79f      	b.n	80004aa <__aeabi_fadd+0x1c2>
 800056a:	4643      	mov	r3, r8
 800056c:	000c      	movs	r4, r1
 800056e:	1af7      	subs	r7, r6, r3
 8000570:	e6e3      	b.n	800033a <__aeabi_fadd+0x52>
 8000572:	4642      	mov	r2, r8
 8000574:	2a00      	cmp	r2, #0
 8000576:	d000      	beq.n	800057a <__aeabi_fadd+0x292>
 8000578:	e775      	b.n	8000466 <__aeabi_fadd+0x17e>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d000      	beq.n	8000580 <__aeabi_fadd+0x298>
 800057e:	e77a      	b.n	8000476 <__aeabi_fadd+0x18e>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	03db      	lsls	r3, r3, #15
 8000584:	2400      	movs	r4, #0
 8000586:	469c      	mov	ip, r3
 8000588:	22ff      	movs	r2, #255	; 0xff
 800058a:	e6f2      	b.n	8000372 <__aeabi_fadd+0x8a>
 800058c:	0030      	movs	r0, r6
 800058e:	4440      	add	r0, r8
 8000590:	2501      	movs	r5, #1
 8000592:	0143      	lsls	r3, r0, #5
 8000594:	d400      	bmi.n	8000598 <__aeabi_fadd+0x2b0>
 8000596:	e75b      	b.n	8000450 <__aeabi_fadd+0x168>
 8000598:	2502      	movs	r5, #2
 800059a:	e718      	b.n	80003ce <__aeabi_fadd+0xe6>
 800059c:	4643      	mov	r3, r8
 800059e:	2501      	movs	r5, #1
 80005a0:	1b98      	subs	r0, r3, r6
 80005a2:	e6c5      	b.n	8000330 <__aeabi_fadd+0x48>
 80005a4:	2320      	movs	r3, #32
 80005a6:	4644      	mov	r4, r8
 80005a8:	4640      	mov	r0, r8
 80005aa:	40d4      	lsrs	r4, r2
 80005ac:	1a9a      	subs	r2, r3, r2
 80005ae:	4090      	lsls	r0, r2
 80005b0:	1e43      	subs	r3, r0, #1
 80005b2:	4198      	sbcs	r0, r3
 80005b4:	4320      	orrs	r0, r4
 80005b6:	e7a4      	b.n	8000502 <__aeabi_fadd+0x21a>
 80005b8:	000d      	movs	r5, r1
 80005ba:	e74d      	b.n	8000458 <__aeabi_fadd+0x170>
 80005bc:	2320      	movs	r3, #32
 80005be:	4641      	mov	r1, r8
 80005c0:	4640      	mov	r0, r8
 80005c2:	40d1      	lsrs	r1, r2
 80005c4:	1a9a      	subs	r2, r3, r2
 80005c6:	4090      	lsls	r0, r2
 80005c8:	1e43      	subs	r3, r0, #1
 80005ca:	4198      	sbcs	r0, r3
 80005cc:	4308      	orrs	r0, r1
 80005ce:	e770      	b.n	80004b2 <__aeabi_fadd+0x1ca>
 80005d0:	4642      	mov	r2, r8
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x2f0>
 80005d6:	e74f      	b.n	8000478 <__aeabi_fadd+0x190>
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x2f6>
 80005dc:	e74d      	b.n	800047a <__aeabi_fadd+0x192>
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	03d2      	lsls	r2, r2, #15
 80005e2:	4213      	tst	r3, r2
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x300>
 80005e6:	e748      	b.n	800047a <__aeabi_fadd+0x192>
 80005e8:	4210      	tst	r0, r2
 80005ea:	d000      	beq.n	80005ee <__aeabi_fadd+0x306>
 80005ec:	e745      	b.n	800047a <__aeabi_fadd+0x192>
 80005ee:	0003      	movs	r3, r0
 80005f0:	e743      	b.n	800047a <__aeabi_fadd+0x192>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d090      	beq.n	8000518 <__aeabi_fadd+0x230>
 80005f6:	000c      	movs	r4, r1
 80005f8:	4684      	mov	ip, r0
 80005fa:	2200      	movs	r2, #0
 80005fc:	e6b9      	b.n	8000372 <__aeabi_fadd+0x8a>
 80005fe:	4643      	mov	r3, r8
 8000600:	000c      	movs	r4, r1
 8000602:	1af0      	subs	r0, r6, r3
 8000604:	3501      	adds	r5, #1
 8000606:	e693      	b.n	8000330 <__aeabi_fadd+0x48>
 8000608:	4684      	mov	ip, r0
 800060a:	2200      	movs	r2, #0
 800060c:	e6b1      	b.n	8000372 <__aeabi_fadd+0x8a>
 800060e:	2800      	cmp	r0, #0
 8000610:	d000      	beq.n	8000614 <__aeabi_fadd+0x32c>
 8000612:	e71d      	b.n	8000450 <__aeabi_fadd+0x168>
 8000614:	2300      	movs	r3, #0
 8000616:	2400      	movs	r4, #0
 8000618:	469c      	mov	ip, r3
 800061a:	e6aa      	b.n	8000372 <__aeabi_fadd+0x8a>
 800061c:	fbffffff 	.word	0xfbffffff
 8000620:	7dffffff 	.word	0x7dffffff

08000624 <__aeabi_fdiv>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	464f      	mov	r7, r9
 8000628:	4646      	mov	r6, r8
 800062a:	46d6      	mov	lr, sl
 800062c:	0245      	lsls	r5, r0, #9
 800062e:	b5c0      	push	{r6, r7, lr}
 8000630:	0047      	lsls	r7, r0, #1
 8000632:	1c0c      	adds	r4, r1, #0
 8000634:	0a6d      	lsrs	r5, r5, #9
 8000636:	0e3f      	lsrs	r7, r7, #24
 8000638:	0fc6      	lsrs	r6, r0, #31
 800063a:	2f00      	cmp	r7, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fdiv+0x1c>
 800063e:	e070      	b.n	8000722 <__aeabi_fdiv+0xfe>
 8000640:	2fff      	cmp	r7, #255	; 0xff
 8000642:	d100      	bne.n	8000646 <__aeabi_fdiv+0x22>
 8000644:	e075      	b.n	8000732 <__aeabi_fdiv+0x10e>
 8000646:	00eb      	lsls	r3, r5, #3
 8000648:	2580      	movs	r5, #128	; 0x80
 800064a:	04ed      	lsls	r5, r5, #19
 800064c:	431d      	orrs	r5, r3
 800064e:	2300      	movs	r3, #0
 8000650:	4699      	mov	r9, r3
 8000652:	469a      	mov	sl, r3
 8000654:	3f7f      	subs	r7, #127	; 0x7f
 8000656:	0260      	lsls	r0, r4, #9
 8000658:	0a43      	lsrs	r3, r0, #9
 800065a:	4698      	mov	r8, r3
 800065c:	0063      	lsls	r3, r4, #1
 800065e:	0e1b      	lsrs	r3, r3, #24
 8000660:	0fe4      	lsrs	r4, r4, #31
 8000662:	2b00      	cmp	r3, #0
 8000664:	d04e      	beq.n	8000704 <__aeabi_fdiv+0xe0>
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d046      	beq.n	80006f8 <__aeabi_fdiv+0xd4>
 800066a:	4642      	mov	r2, r8
 800066c:	00d0      	lsls	r0, r2, #3
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	04d2      	lsls	r2, r2, #19
 8000672:	4302      	orrs	r2, r0
 8000674:	4690      	mov	r8, r2
 8000676:	2200      	movs	r2, #0
 8000678:	3b7f      	subs	r3, #127	; 0x7f
 800067a:	0031      	movs	r1, r6
 800067c:	1aff      	subs	r7, r7, r3
 800067e:	464b      	mov	r3, r9
 8000680:	4061      	eors	r1, r4
 8000682:	b2c9      	uxtb	r1, r1
 8000684:	4313      	orrs	r3, r2
 8000686:	2b0f      	cmp	r3, #15
 8000688:	d900      	bls.n	800068c <__aeabi_fdiv+0x68>
 800068a:	e0b5      	b.n	80007f8 <__aeabi_fdiv+0x1d4>
 800068c:	486e      	ldr	r0, [pc, #440]	; (8000848 <__aeabi_fdiv+0x224>)
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	58c3      	ldr	r3, [r0, r3]
 8000692:	469f      	mov	pc, r3
 8000694:	2300      	movs	r3, #0
 8000696:	4698      	mov	r8, r3
 8000698:	0026      	movs	r6, r4
 800069a:	4645      	mov	r5, r8
 800069c:	4692      	mov	sl, r2
 800069e:	4653      	mov	r3, sl
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fdiv+0x82>
 80006a4:	e089      	b.n	80007ba <__aeabi_fdiv+0x196>
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d100      	bne.n	80006ac <__aeabi_fdiv+0x88>
 80006aa:	e09e      	b.n	80007ea <__aeabi_fdiv+0x1c6>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d018      	beq.n	80006e2 <__aeabi_fdiv+0xbe>
 80006b0:	003b      	movs	r3, r7
 80006b2:	337f      	adds	r3, #127	; 0x7f
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dd69      	ble.n	800078c <__aeabi_fdiv+0x168>
 80006b8:	076a      	lsls	r2, r5, #29
 80006ba:	d004      	beq.n	80006c6 <__aeabi_fdiv+0xa2>
 80006bc:	220f      	movs	r2, #15
 80006be:	402a      	ands	r2, r5
 80006c0:	2a04      	cmp	r2, #4
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fdiv+0xa2>
 80006c4:	3504      	adds	r5, #4
 80006c6:	012a      	lsls	r2, r5, #4
 80006c8:	d503      	bpl.n	80006d2 <__aeabi_fdiv+0xae>
 80006ca:	4b60      	ldr	r3, [pc, #384]	; (800084c <__aeabi_fdiv+0x228>)
 80006cc:	401d      	ands	r5, r3
 80006ce:	003b      	movs	r3, r7
 80006d0:	3380      	adds	r3, #128	; 0x80
 80006d2:	2bfe      	cmp	r3, #254	; 0xfe
 80006d4:	dd00      	ble.n	80006d8 <__aeabi_fdiv+0xb4>
 80006d6:	e070      	b.n	80007ba <__aeabi_fdiv+0x196>
 80006d8:	01ad      	lsls	r5, r5, #6
 80006da:	0a6d      	lsrs	r5, r5, #9
 80006dc:	b2d8      	uxtb	r0, r3
 80006de:	e002      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80006e0:	000e      	movs	r6, r1
 80006e2:	2000      	movs	r0, #0
 80006e4:	2500      	movs	r5, #0
 80006e6:	05c0      	lsls	r0, r0, #23
 80006e8:	4328      	orrs	r0, r5
 80006ea:	07f6      	lsls	r6, r6, #31
 80006ec:	4330      	orrs	r0, r6
 80006ee:	bce0      	pop	{r5, r6, r7}
 80006f0:	46ba      	mov	sl, r7
 80006f2:	46b1      	mov	r9, r6
 80006f4:	46a8      	mov	r8, r5
 80006f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f8:	4643      	mov	r3, r8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d13f      	bne.n	800077e <__aeabi_fdiv+0x15a>
 80006fe:	2202      	movs	r2, #2
 8000700:	3fff      	subs	r7, #255	; 0xff
 8000702:	e003      	b.n	800070c <__aeabi_fdiv+0xe8>
 8000704:	4643      	mov	r3, r8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d12d      	bne.n	8000766 <__aeabi_fdiv+0x142>
 800070a:	2201      	movs	r2, #1
 800070c:	0031      	movs	r1, r6
 800070e:	464b      	mov	r3, r9
 8000710:	4061      	eors	r1, r4
 8000712:	b2c9      	uxtb	r1, r1
 8000714:	4313      	orrs	r3, r2
 8000716:	2b0f      	cmp	r3, #15
 8000718:	d834      	bhi.n	8000784 <__aeabi_fdiv+0x160>
 800071a:	484d      	ldr	r0, [pc, #308]	; (8000850 <__aeabi_fdiv+0x22c>)
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	58c3      	ldr	r3, [r0, r3]
 8000720:	469f      	mov	pc, r3
 8000722:	2d00      	cmp	r5, #0
 8000724:	d113      	bne.n	800074e <__aeabi_fdiv+0x12a>
 8000726:	2304      	movs	r3, #4
 8000728:	4699      	mov	r9, r3
 800072a:	3b03      	subs	r3, #3
 800072c:	2700      	movs	r7, #0
 800072e:	469a      	mov	sl, r3
 8000730:	e791      	b.n	8000656 <__aeabi_fdiv+0x32>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d105      	bne.n	8000742 <__aeabi_fdiv+0x11e>
 8000736:	2308      	movs	r3, #8
 8000738:	4699      	mov	r9, r3
 800073a:	3b06      	subs	r3, #6
 800073c:	27ff      	movs	r7, #255	; 0xff
 800073e:	469a      	mov	sl, r3
 8000740:	e789      	b.n	8000656 <__aeabi_fdiv+0x32>
 8000742:	230c      	movs	r3, #12
 8000744:	4699      	mov	r9, r3
 8000746:	3b09      	subs	r3, #9
 8000748:	27ff      	movs	r7, #255	; 0xff
 800074a:	469a      	mov	sl, r3
 800074c:	e783      	b.n	8000656 <__aeabi_fdiv+0x32>
 800074e:	0028      	movs	r0, r5
 8000750:	f001 feb4 	bl	80024bc <__clzsi2>
 8000754:	2776      	movs	r7, #118	; 0x76
 8000756:	1f43      	subs	r3, r0, #5
 8000758:	409d      	lsls	r5, r3
 800075a:	2300      	movs	r3, #0
 800075c:	427f      	negs	r7, r7
 800075e:	4699      	mov	r9, r3
 8000760:	469a      	mov	sl, r3
 8000762:	1a3f      	subs	r7, r7, r0
 8000764:	e777      	b.n	8000656 <__aeabi_fdiv+0x32>
 8000766:	4640      	mov	r0, r8
 8000768:	f001 fea8 	bl	80024bc <__clzsi2>
 800076c:	4642      	mov	r2, r8
 800076e:	1f43      	subs	r3, r0, #5
 8000770:	409a      	lsls	r2, r3
 8000772:	2376      	movs	r3, #118	; 0x76
 8000774:	425b      	negs	r3, r3
 8000776:	4690      	mov	r8, r2
 8000778:	1a1b      	subs	r3, r3, r0
 800077a:	2200      	movs	r2, #0
 800077c:	e77d      	b.n	800067a <__aeabi_fdiv+0x56>
 800077e:	23ff      	movs	r3, #255	; 0xff
 8000780:	2203      	movs	r2, #3
 8000782:	e77a      	b.n	800067a <__aeabi_fdiv+0x56>
 8000784:	000e      	movs	r6, r1
 8000786:	20ff      	movs	r0, #255	; 0xff
 8000788:	2500      	movs	r5, #0
 800078a:	e7ac      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 800078c:	2001      	movs	r0, #1
 800078e:	1ac0      	subs	r0, r0, r3
 8000790:	281b      	cmp	r0, #27
 8000792:	dca6      	bgt.n	80006e2 <__aeabi_fdiv+0xbe>
 8000794:	379e      	adds	r7, #158	; 0x9e
 8000796:	002a      	movs	r2, r5
 8000798:	40bd      	lsls	r5, r7
 800079a:	40c2      	lsrs	r2, r0
 800079c:	1e6b      	subs	r3, r5, #1
 800079e:	419d      	sbcs	r5, r3
 80007a0:	4315      	orrs	r5, r2
 80007a2:	076b      	lsls	r3, r5, #29
 80007a4:	d004      	beq.n	80007b0 <__aeabi_fdiv+0x18c>
 80007a6:	230f      	movs	r3, #15
 80007a8:	402b      	ands	r3, r5
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fdiv+0x18c>
 80007ae:	3504      	adds	r5, #4
 80007b0:	016b      	lsls	r3, r5, #5
 80007b2:	d544      	bpl.n	800083e <__aeabi_fdiv+0x21a>
 80007b4:	2001      	movs	r0, #1
 80007b6:	2500      	movs	r5, #0
 80007b8:	e795      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	2500      	movs	r5, #0
 80007be:	e792      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007c0:	2580      	movs	r5, #128	; 0x80
 80007c2:	2600      	movs	r6, #0
 80007c4:	20ff      	movs	r0, #255	; 0xff
 80007c6:	03ed      	lsls	r5, r5, #15
 80007c8:	e78d      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007ca:	2300      	movs	r3, #0
 80007cc:	4698      	mov	r8, r3
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	03c0      	lsls	r0, r0, #15
 80007d2:	4205      	tst	r5, r0
 80007d4:	d009      	beq.n	80007ea <__aeabi_fdiv+0x1c6>
 80007d6:	4643      	mov	r3, r8
 80007d8:	4203      	tst	r3, r0
 80007da:	d106      	bne.n	80007ea <__aeabi_fdiv+0x1c6>
 80007dc:	4645      	mov	r5, r8
 80007de:	4305      	orrs	r5, r0
 80007e0:	026d      	lsls	r5, r5, #9
 80007e2:	0026      	movs	r6, r4
 80007e4:	20ff      	movs	r0, #255	; 0xff
 80007e6:	0a6d      	lsrs	r5, r5, #9
 80007e8:	e77d      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007ea:	2080      	movs	r0, #128	; 0x80
 80007ec:	03c0      	lsls	r0, r0, #15
 80007ee:	4305      	orrs	r5, r0
 80007f0:	026d      	lsls	r5, r5, #9
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	e776      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 80007f8:	4642      	mov	r2, r8
 80007fa:	016b      	lsls	r3, r5, #5
 80007fc:	0150      	lsls	r0, r2, #5
 80007fe:	4283      	cmp	r3, r0
 8000800:	d219      	bcs.n	8000836 <__aeabi_fdiv+0x212>
 8000802:	221b      	movs	r2, #27
 8000804:	2500      	movs	r5, #0
 8000806:	3f01      	subs	r7, #1
 8000808:	2601      	movs	r6, #1
 800080a:	001c      	movs	r4, r3
 800080c:	006d      	lsls	r5, r5, #1
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2c00      	cmp	r4, #0
 8000812:	db01      	blt.n	8000818 <__aeabi_fdiv+0x1f4>
 8000814:	4298      	cmp	r0, r3
 8000816:	d801      	bhi.n	800081c <__aeabi_fdiv+0x1f8>
 8000818:	1a1b      	subs	r3, r3, r0
 800081a:	4335      	orrs	r5, r6
 800081c:	3a01      	subs	r2, #1
 800081e:	2a00      	cmp	r2, #0
 8000820:	d1f3      	bne.n	800080a <__aeabi_fdiv+0x1e6>
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	4193      	sbcs	r3, r2
 8000826:	431d      	orrs	r5, r3
 8000828:	003b      	movs	r3, r7
 800082a:	337f      	adds	r3, #127	; 0x7f
 800082c:	000e      	movs	r6, r1
 800082e:	2b00      	cmp	r3, #0
 8000830:	dd00      	ble.n	8000834 <__aeabi_fdiv+0x210>
 8000832:	e741      	b.n	80006b8 <__aeabi_fdiv+0x94>
 8000834:	e7aa      	b.n	800078c <__aeabi_fdiv+0x168>
 8000836:	221a      	movs	r2, #26
 8000838:	2501      	movs	r5, #1
 800083a:	1a1b      	subs	r3, r3, r0
 800083c:	e7e4      	b.n	8000808 <__aeabi_fdiv+0x1e4>
 800083e:	01ad      	lsls	r5, r5, #6
 8000840:	2000      	movs	r0, #0
 8000842:	0a6d      	lsrs	r5, r5, #9
 8000844:	e74f      	b.n	80006e6 <__aeabi_fdiv+0xc2>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	0800793c 	.word	0x0800793c
 800084c:	f7ffffff 	.word	0xf7ffffff
 8000850:	0800797c 	.word	0x0800797c

08000854 <__aeabi_i2f>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	2800      	cmp	r0, #0
 8000858:	d013      	beq.n	8000882 <__aeabi_i2f+0x2e>
 800085a:	17c3      	asrs	r3, r0, #31
 800085c:	18c6      	adds	r6, r0, r3
 800085e:	405e      	eors	r6, r3
 8000860:	0fc4      	lsrs	r4, r0, #31
 8000862:	0030      	movs	r0, r6
 8000864:	f001 fe2a 	bl	80024bc <__clzsi2>
 8000868:	239e      	movs	r3, #158	; 0x9e
 800086a:	0005      	movs	r5, r0
 800086c:	1a1b      	subs	r3, r3, r0
 800086e:	2b96      	cmp	r3, #150	; 0x96
 8000870:	dc0f      	bgt.n	8000892 <__aeabi_i2f+0x3e>
 8000872:	2808      	cmp	r0, #8
 8000874:	dd01      	ble.n	800087a <__aeabi_i2f+0x26>
 8000876:	3d08      	subs	r5, #8
 8000878:	40ae      	lsls	r6, r5
 800087a:	0276      	lsls	r6, r6, #9
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	e002      	b.n	8000888 <__aeabi_i2f+0x34>
 8000882:	2400      	movs	r4, #0
 8000884:	2000      	movs	r0, #0
 8000886:	2600      	movs	r6, #0
 8000888:	05c0      	lsls	r0, r0, #23
 800088a:	4330      	orrs	r0, r6
 800088c:	07e4      	lsls	r4, r4, #31
 800088e:	4320      	orrs	r0, r4
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000892:	2b99      	cmp	r3, #153	; 0x99
 8000894:	dd0c      	ble.n	80008b0 <__aeabi_i2f+0x5c>
 8000896:	2205      	movs	r2, #5
 8000898:	0031      	movs	r1, r6
 800089a:	1a12      	subs	r2, r2, r0
 800089c:	40d1      	lsrs	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	0001      	movs	r1, r0
 80008a2:	0030      	movs	r0, r6
 80008a4:	311b      	adds	r1, #27
 80008a6:	4088      	lsls	r0, r1
 80008a8:	1e41      	subs	r1, r0, #1
 80008aa:	4188      	sbcs	r0, r1
 80008ac:	4302      	orrs	r2, r0
 80008ae:	0016      	movs	r6, r2
 80008b0:	2d05      	cmp	r5, #5
 80008b2:	dc12      	bgt.n	80008da <__aeabi_i2f+0x86>
 80008b4:	0031      	movs	r1, r6
 80008b6:	4f0d      	ldr	r7, [pc, #52]	; (80008ec <__aeabi_i2f+0x98>)
 80008b8:	4039      	ands	r1, r7
 80008ba:	0772      	lsls	r2, r6, #29
 80008bc:	d009      	beq.n	80008d2 <__aeabi_i2f+0x7e>
 80008be:	200f      	movs	r0, #15
 80008c0:	4030      	ands	r0, r6
 80008c2:	2804      	cmp	r0, #4
 80008c4:	d005      	beq.n	80008d2 <__aeabi_i2f+0x7e>
 80008c6:	3104      	adds	r1, #4
 80008c8:	014a      	lsls	r2, r1, #5
 80008ca:	d502      	bpl.n	80008d2 <__aeabi_i2f+0x7e>
 80008cc:	239f      	movs	r3, #159	; 0x9f
 80008ce:	4039      	ands	r1, r7
 80008d0:	1b5b      	subs	r3, r3, r5
 80008d2:	0189      	lsls	r1, r1, #6
 80008d4:	0a4e      	lsrs	r6, r1, #9
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	e7d6      	b.n	8000888 <__aeabi_i2f+0x34>
 80008da:	1f6a      	subs	r2, r5, #5
 80008dc:	4096      	lsls	r6, r2
 80008de:	0031      	movs	r1, r6
 80008e0:	4f02      	ldr	r7, [pc, #8]	; (80008ec <__aeabi_i2f+0x98>)
 80008e2:	4039      	ands	r1, r7
 80008e4:	0772      	lsls	r2, r6, #29
 80008e6:	d0f4      	beq.n	80008d2 <__aeabi_i2f+0x7e>
 80008e8:	e7e9      	b.n	80008be <__aeabi_i2f+0x6a>
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	fbffffff 	.word	0xfbffffff

080008f0 <__aeabi_dadd>:
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f2:	464f      	mov	r7, r9
 80008f4:	4646      	mov	r6, r8
 80008f6:	46d6      	mov	lr, sl
 80008f8:	000d      	movs	r5, r1
 80008fa:	0004      	movs	r4, r0
 80008fc:	b5c0      	push	{r6, r7, lr}
 80008fe:	001f      	movs	r7, r3
 8000900:	0011      	movs	r1, r2
 8000902:	0328      	lsls	r0, r5, #12
 8000904:	0f62      	lsrs	r2, r4, #29
 8000906:	0a40      	lsrs	r0, r0, #9
 8000908:	4310      	orrs	r0, r2
 800090a:	007a      	lsls	r2, r7, #1
 800090c:	0d52      	lsrs	r2, r2, #21
 800090e:	00e3      	lsls	r3, r4, #3
 8000910:	033c      	lsls	r4, r7, #12
 8000912:	4691      	mov	r9, r2
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0ffa      	lsrs	r2, r7, #31
 8000918:	0f4f      	lsrs	r7, r1, #29
 800091a:	006e      	lsls	r6, r5, #1
 800091c:	4327      	orrs	r7, r4
 800091e:	4692      	mov	sl, r2
 8000920:	46b8      	mov	r8, r7
 8000922:	0d76      	lsrs	r6, r6, #21
 8000924:	0fed      	lsrs	r5, r5, #31
 8000926:	00c9      	lsls	r1, r1, #3
 8000928:	4295      	cmp	r5, r2
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x3e>
 800092c:	e099      	b.n	8000a62 <__aeabi_dadd+0x172>
 800092e:	464c      	mov	r4, r9
 8000930:	1b34      	subs	r4, r6, r4
 8000932:	46a4      	mov	ip, r4
 8000934:	2c00      	cmp	r4, #0
 8000936:	dc00      	bgt.n	800093a <__aeabi_dadd+0x4a>
 8000938:	e07c      	b.n	8000a34 <__aeabi_dadd+0x144>
 800093a:	464a      	mov	r2, r9
 800093c:	2a00      	cmp	r2, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x52>
 8000940:	e0b8      	b.n	8000ab4 <__aeabi_dadd+0x1c4>
 8000942:	4ac5      	ldr	r2, [pc, #788]	; (8000c58 <__aeabi_dadd+0x368>)
 8000944:	4296      	cmp	r6, r2
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x5a>
 8000948:	e11c      	b.n	8000b84 <__aeabi_dadd+0x294>
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	003c      	movs	r4, r7
 800094e:	0412      	lsls	r2, r2, #16
 8000950:	4314      	orrs	r4, r2
 8000952:	46a0      	mov	r8, r4
 8000954:	4662      	mov	r2, ip
 8000956:	2a38      	cmp	r2, #56	; 0x38
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x6c>
 800095a:	e161      	b.n	8000c20 <__aeabi_dadd+0x330>
 800095c:	2a1f      	cmp	r2, #31
 800095e:	dd00      	ble.n	8000962 <__aeabi_dadd+0x72>
 8000960:	e1cc      	b.n	8000cfc <__aeabi_dadd+0x40c>
 8000962:	4664      	mov	r4, ip
 8000964:	2220      	movs	r2, #32
 8000966:	1b12      	subs	r2, r2, r4
 8000968:	4644      	mov	r4, r8
 800096a:	4094      	lsls	r4, r2
 800096c:	000f      	movs	r7, r1
 800096e:	46a1      	mov	r9, r4
 8000970:	4664      	mov	r4, ip
 8000972:	4091      	lsls	r1, r2
 8000974:	40e7      	lsrs	r7, r4
 8000976:	464c      	mov	r4, r9
 8000978:	1e4a      	subs	r2, r1, #1
 800097a:	4191      	sbcs	r1, r2
 800097c:	433c      	orrs	r4, r7
 800097e:	4642      	mov	r2, r8
 8000980:	4321      	orrs	r1, r4
 8000982:	4664      	mov	r4, ip
 8000984:	40e2      	lsrs	r2, r4
 8000986:	1a80      	subs	r0, r0, r2
 8000988:	1a5c      	subs	r4, r3, r1
 800098a:	42a3      	cmp	r3, r4
 800098c:	419b      	sbcs	r3, r3
 800098e:	425f      	negs	r7, r3
 8000990:	1bc7      	subs	r7, r0, r7
 8000992:	023b      	lsls	r3, r7, #8
 8000994:	d400      	bmi.n	8000998 <__aeabi_dadd+0xa8>
 8000996:	e0d0      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000998:	027f      	lsls	r7, r7, #9
 800099a:	0a7f      	lsrs	r7, r7, #9
 800099c:	2f00      	cmp	r7, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0xb2>
 80009a0:	e0ff      	b.n	8000ba2 <__aeabi_dadd+0x2b2>
 80009a2:	0038      	movs	r0, r7
 80009a4:	f001 fd8a 	bl	80024bc <__clzsi2>
 80009a8:	0001      	movs	r1, r0
 80009aa:	3908      	subs	r1, #8
 80009ac:	2320      	movs	r3, #32
 80009ae:	0022      	movs	r2, r4
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	408f      	lsls	r7, r1
 80009b4:	40da      	lsrs	r2, r3
 80009b6:	408c      	lsls	r4, r1
 80009b8:	4317      	orrs	r7, r2
 80009ba:	42b1      	cmp	r1, r6
 80009bc:	da00      	bge.n	80009c0 <__aeabi_dadd+0xd0>
 80009be:	e0ff      	b.n	8000bc0 <__aeabi_dadd+0x2d0>
 80009c0:	1b89      	subs	r1, r1, r6
 80009c2:	1c4b      	adds	r3, r1, #1
 80009c4:	2b1f      	cmp	r3, #31
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0xda>
 80009c8:	e0a8      	b.n	8000b1c <__aeabi_dadd+0x22c>
 80009ca:	2220      	movs	r2, #32
 80009cc:	0039      	movs	r1, r7
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	0020      	movs	r0, r4
 80009d2:	4094      	lsls	r4, r2
 80009d4:	4091      	lsls	r1, r2
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	1e62      	subs	r2, r4, #1
 80009da:	4194      	sbcs	r4, r2
 80009dc:	40df      	lsrs	r7, r3
 80009de:	2600      	movs	r6, #0
 80009e0:	4301      	orrs	r1, r0
 80009e2:	430c      	orrs	r4, r1
 80009e4:	0763      	lsls	r3, r4, #29
 80009e6:	d009      	beq.n	80009fc <__aeabi_dadd+0x10c>
 80009e8:	230f      	movs	r3, #15
 80009ea:	4023      	ands	r3, r4
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d005      	beq.n	80009fc <__aeabi_dadd+0x10c>
 80009f0:	1d23      	adds	r3, r4, #4
 80009f2:	42a3      	cmp	r3, r4
 80009f4:	41a4      	sbcs	r4, r4
 80009f6:	4264      	negs	r4, r4
 80009f8:	193f      	adds	r7, r7, r4
 80009fa:	001c      	movs	r4, r3
 80009fc:	023b      	lsls	r3, r7, #8
 80009fe:	d400      	bmi.n	8000a02 <__aeabi_dadd+0x112>
 8000a00:	e09e      	b.n	8000b40 <__aeabi_dadd+0x250>
 8000a02:	4b95      	ldr	r3, [pc, #596]	; (8000c58 <__aeabi_dadd+0x368>)
 8000a04:	3601      	adds	r6, #1
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x11c>
 8000a0a:	e0b7      	b.n	8000b7c <__aeabi_dadd+0x28c>
 8000a0c:	4a93      	ldr	r2, [pc, #588]	; (8000c5c <__aeabi_dadd+0x36c>)
 8000a0e:	08e4      	lsrs	r4, r4, #3
 8000a10:	4017      	ands	r7, r2
 8000a12:	077b      	lsls	r3, r7, #29
 8000a14:	0571      	lsls	r1, r6, #21
 8000a16:	027f      	lsls	r7, r7, #9
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	0b3f      	lsrs	r7, r7, #12
 8000a1c:	0d4a      	lsrs	r2, r1, #21
 8000a1e:	0512      	lsls	r2, r2, #20
 8000a20:	433a      	orrs	r2, r7
 8000a22:	07ed      	lsls	r5, r5, #31
 8000a24:	432a      	orrs	r2, r5
 8000a26:	0018      	movs	r0, r3
 8000a28:	0011      	movs	r1, r2
 8000a2a:	bce0      	pop	{r5, r6, r7}
 8000a2c:	46ba      	mov	sl, r7
 8000a2e:	46b1      	mov	r9, r6
 8000a30:	46a8      	mov	r8, r5
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d04b      	beq.n	8000ad0 <__aeabi_dadd+0x1e0>
 8000a38:	464c      	mov	r4, r9
 8000a3a:	1ba4      	subs	r4, r4, r6
 8000a3c:	46a4      	mov	ip, r4
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x154>
 8000a42:	e123      	b.n	8000c8c <__aeabi_dadd+0x39c>
 8000a44:	0004      	movs	r4, r0
 8000a46:	431c      	orrs	r4, r3
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x15c>
 8000a4a:	e1af      	b.n	8000dac <__aeabi_dadd+0x4bc>
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	1e54      	subs	r4, r2, #1
 8000a50:	2a01      	cmp	r2, #1
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x166>
 8000a54:	e215      	b.n	8000e82 <__aeabi_dadd+0x592>
 8000a56:	4d80      	ldr	r5, [pc, #512]	; (8000c58 <__aeabi_dadd+0x368>)
 8000a58:	45ac      	cmp	ip, r5
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x16e>
 8000a5c:	e1c8      	b.n	8000df0 <__aeabi_dadd+0x500>
 8000a5e:	46a4      	mov	ip, r4
 8000a60:	e11b      	b.n	8000c9a <__aeabi_dadd+0x3aa>
 8000a62:	464a      	mov	r2, r9
 8000a64:	1ab2      	subs	r2, r6, r2
 8000a66:	4694      	mov	ip, r2
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dadd+0x17e>
 8000a6c:	e0ac      	b.n	8000bc8 <__aeabi_dadd+0x2d8>
 8000a6e:	464a      	mov	r2, r9
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d043      	beq.n	8000afc <__aeabi_dadd+0x20c>
 8000a74:	4a78      	ldr	r2, [pc, #480]	; (8000c58 <__aeabi_dadd+0x368>)
 8000a76:	4296      	cmp	r6, r2
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x18c>
 8000a7a:	e1af      	b.n	8000ddc <__aeabi_dadd+0x4ec>
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	003c      	movs	r4, r7
 8000a80:	0412      	lsls	r2, r2, #16
 8000a82:	4314      	orrs	r4, r2
 8000a84:	46a0      	mov	r8, r4
 8000a86:	4662      	mov	r2, ip
 8000a88:	2a38      	cmp	r2, #56	; 0x38
 8000a8a:	dc67      	bgt.n	8000b5c <__aeabi_dadd+0x26c>
 8000a8c:	2a1f      	cmp	r2, #31
 8000a8e:	dc00      	bgt.n	8000a92 <__aeabi_dadd+0x1a2>
 8000a90:	e15f      	b.n	8000d52 <__aeabi_dadd+0x462>
 8000a92:	4647      	mov	r7, r8
 8000a94:	3a20      	subs	r2, #32
 8000a96:	40d7      	lsrs	r7, r2
 8000a98:	4662      	mov	r2, ip
 8000a9a:	2a20      	cmp	r2, #32
 8000a9c:	d005      	beq.n	8000aaa <__aeabi_dadd+0x1ba>
 8000a9e:	4664      	mov	r4, ip
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	1b12      	subs	r2, r2, r4
 8000aa4:	4644      	mov	r4, r8
 8000aa6:	4094      	lsls	r4, r2
 8000aa8:	4321      	orrs	r1, r4
 8000aaa:	1e4a      	subs	r2, r1, #1
 8000aac:	4191      	sbcs	r1, r2
 8000aae:	000c      	movs	r4, r1
 8000ab0:	433c      	orrs	r4, r7
 8000ab2:	e057      	b.n	8000b64 <__aeabi_dadd+0x274>
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x1cc>
 8000aba:	e105      	b.n	8000cc8 <__aeabi_dadd+0x3d8>
 8000abc:	0022      	movs	r2, r4
 8000abe:	3a01      	subs	r2, #1
 8000ac0:	2c01      	cmp	r4, #1
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x1d6>
 8000ac4:	e182      	b.n	8000dcc <__aeabi_dadd+0x4dc>
 8000ac6:	4c64      	ldr	r4, [pc, #400]	; (8000c58 <__aeabi_dadd+0x368>)
 8000ac8:	45a4      	cmp	ip, r4
 8000aca:	d05b      	beq.n	8000b84 <__aeabi_dadd+0x294>
 8000acc:	4694      	mov	ip, r2
 8000ace:	e741      	b.n	8000954 <__aeabi_dadd+0x64>
 8000ad0:	4c63      	ldr	r4, [pc, #396]	; (8000c60 <__aeabi_dadd+0x370>)
 8000ad2:	1c77      	adds	r7, r6, #1
 8000ad4:	4227      	tst	r7, r4
 8000ad6:	d000      	beq.n	8000ada <__aeabi_dadd+0x1ea>
 8000ad8:	e0c4      	b.n	8000c64 <__aeabi_dadd+0x374>
 8000ada:	0004      	movs	r4, r0
 8000adc:	431c      	orrs	r4, r3
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_dadd+0x1f4>
 8000ae2:	e169      	b.n	8000db8 <__aeabi_dadd+0x4c8>
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x1fa>
 8000ae8:	e1bf      	b.n	8000e6a <__aeabi_dadd+0x57a>
 8000aea:	4644      	mov	r4, r8
 8000aec:	430c      	orrs	r4, r1
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x202>
 8000af0:	e1d0      	b.n	8000e94 <__aeabi_dadd+0x5a4>
 8000af2:	0742      	lsls	r2, r0, #29
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	08c0      	lsrs	r0, r0, #3
 8000afa:	e029      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000afc:	003a      	movs	r2, r7
 8000afe:	430a      	orrs	r2, r1
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dadd+0x214>
 8000b02:	e170      	b.n	8000de6 <__aeabi_dadd+0x4f6>
 8000b04:	4662      	mov	r2, ip
 8000b06:	4664      	mov	r4, ip
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	2c01      	cmp	r4, #1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x220>
 8000b0e:	e0e0      	b.n	8000cd2 <__aeabi_dadd+0x3e2>
 8000b10:	4c51      	ldr	r4, [pc, #324]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x228>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x4ec>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	e7b4      	b.n	8000a86 <__aeabi_dadd+0x196>
 8000b1c:	003a      	movs	r2, r7
 8000b1e:	391f      	subs	r1, #31
 8000b20:	40ca      	lsrs	r2, r1
 8000b22:	0011      	movs	r1, r2
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	d003      	beq.n	8000b30 <__aeabi_dadd+0x240>
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	409f      	lsls	r7, r3
 8000b2e:	433c      	orrs	r4, r7
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	2700      	movs	r7, #0
 8000b36:	2600      	movs	r6, #0
 8000b38:	430c      	orrs	r4, r1
 8000b3a:	0763      	lsls	r3, r4, #29
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dadd+0x250>
 8000b3e:	e753      	b.n	80009e8 <__aeabi_dadd+0xf8>
 8000b40:	46b4      	mov	ip, r6
 8000b42:	08e4      	lsrs	r4, r4, #3
 8000b44:	077b      	lsls	r3, r7, #29
 8000b46:	4323      	orrs	r3, r4
 8000b48:	08f8      	lsrs	r0, r7, #3
 8000b4a:	4a43      	ldr	r2, [pc, #268]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b4c:	4594      	cmp	ip, r2
 8000b4e:	d01d      	beq.n	8000b8c <__aeabi_dadd+0x29c>
 8000b50:	4662      	mov	r2, ip
 8000b52:	0307      	lsls	r7, r0, #12
 8000b54:	0552      	lsls	r2, r2, #21
 8000b56:	0b3f      	lsrs	r7, r7, #12
 8000b58:	0d52      	lsrs	r2, r2, #21
 8000b5a:	e760      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000b5c:	4644      	mov	r4, r8
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	1e62      	subs	r2, r4, #1
 8000b62:	4194      	sbcs	r4, r2
 8000b64:	18e4      	adds	r4, r4, r3
 8000b66:	429c      	cmp	r4, r3
 8000b68:	419b      	sbcs	r3, r3
 8000b6a:	425f      	negs	r7, r3
 8000b6c:	183f      	adds	r7, r7, r0
 8000b6e:	023b      	lsls	r3, r7, #8
 8000b70:	d5e3      	bpl.n	8000b3a <__aeabi_dadd+0x24a>
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b74:	3601      	adds	r6, #1
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d000      	beq.n	8000b7c <__aeabi_dadd+0x28c>
 8000b7a:	e0b5      	b.n	8000ce8 <__aeabi_dadd+0x3f8>
 8000b7c:	0032      	movs	r2, r6
 8000b7e:	2700      	movs	r7, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e74c      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000b84:	0742      	lsls	r2, r0, #29
 8000b86:	08db      	lsrs	r3, r3, #3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	08c0      	lsrs	r0, r0, #3
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4302      	orrs	r2, r0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x2a4>
 8000b92:	e1e1      	b.n	8000f58 <__aeabi_dadd+0x668>
 8000b94:	2780      	movs	r7, #128	; 0x80
 8000b96:	033f      	lsls	r7, r7, #12
 8000b98:	4307      	orrs	r7, r0
 8000b9a:	033f      	lsls	r7, r7, #12
 8000b9c:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <__aeabi_dadd+0x368>)
 8000b9e:	0b3f      	lsrs	r7, r7, #12
 8000ba0:	e73d      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f001 fc8a 	bl	80024bc <__clzsi2>
 8000ba8:	0001      	movs	r1, r0
 8000baa:	3118      	adds	r1, #24
 8000bac:	291f      	cmp	r1, #31
 8000bae:	dc00      	bgt.n	8000bb2 <__aeabi_dadd+0x2c2>
 8000bb0:	e6fc      	b.n	80009ac <__aeabi_dadd+0xbc>
 8000bb2:	3808      	subs	r0, #8
 8000bb4:	4084      	lsls	r4, r0
 8000bb6:	0027      	movs	r7, r4
 8000bb8:	2400      	movs	r4, #0
 8000bba:	42b1      	cmp	r1, r6
 8000bbc:	db00      	blt.n	8000bc0 <__aeabi_dadd+0x2d0>
 8000bbe:	e6ff      	b.n	80009c0 <__aeabi_dadd+0xd0>
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <__aeabi_dadd+0x36c>)
 8000bc2:	1a76      	subs	r6, r6, r1
 8000bc4:	4017      	ands	r7, r2
 8000bc6:	e70d      	b.n	80009e4 <__aeabi_dadd+0xf4>
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d02f      	beq.n	8000c2c <__aeabi_dadd+0x33c>
 8000bcc:	464a      	mov	r2, r9
 8000bce:	1b92      	subs	r2, r2, r6
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x2e8>
 8000bd6:	e0ad      	b.n	8000d34 <__aeabi_dadd+0x444>
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <__aeabi_dadd+0x368>)
 8000bda:	4591      	cmp	r9, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x2f0>
 8000bde:	e10f      	b.n	8000e00 <__aeabi_dadd+0x510>
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	0412      	lsls	r2, r2, #16
 8000be4:	4310      	orrs	r0, r2
 8000be6:	4662      	mov	r2, ip
 8000be8:	2a38      	cmp	r2, #56	; 0x38
 8000bea:	dd00      	ble.n	8000bee <__aeabi_dadd+0x2fe>
 8000bec:	e10f      	b.n	8000e0e <__aeabi_dadd+0x51e>
 8000bee:	2a1f      	cmp	r2, #31
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_dadd+0x304>
 8000bf2:	e180      	b.n	8000ef6 <__aeabi_dadd+0x606>
 8000bf4:	4664      	mov	r4, ip
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	001e      	movs	r6, r3
 8000bfa:	1b12      	subs	r2, r2, r4
 8000bfc:	4667      	mov	r7, ip
 8000bfe:	0004      	movs	r4, r0
 8000c00:	4093      	lsls	r3, r2
 8000c02:	4094      	lsls	r4, r2
 8000c04:	40fe      	lsrs	r6, r7
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	4193      	sbcs	r3, r2
 8000c0a:	40f8      	lsrs	r0, r7
 8000c0c:	4334      	orrs	r4, r6
 8000c0e:	431c      	orrs	r4, r3
 8000c10:	4480      	add	r8, r0
 8000c12:	1864      	adds	r4, r4, r1
 8000c14:	428c      	cmp	r4, r1
 8000c16:	41bf      	sbcs	r7, r7
 8000c18:	427f      	negs	r7, r7
 8000c1a:	464e      	mov	r6, r9
 8000c1c:	4447      	add	r7, r8
 8000c1e:	e7a6      	b.n	8000b6e <__aeabi_dadd+0x27e>
 8000c20:	4642      	mov	r2, r8
 8000c22:	430a      	orrs	r2, r1
 8000c24:	0011      	movs	r1, r2
 8000c26:	1e4a      	subs	r2, r1, #1
 8000c28:	4191      	sbcs	r1, r2
 8000c2a:	e6ad      	b.n	8000988 <__aeabi_dadd+0x98>
 8000c2c:	4c0c      	ldr	r4, [pc, #48]	; (8000c60 <__aeabi_dadd+0x370>)
 8000c2e:	1c72      	adds	r2, r6, #1
 8000c30:	4222      	tst	r2, r4
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x346>
 8000c34:	e0a1      	b.n	8000d7a <__aeabi_dadd+0x48a>
 8000c36:	0002      	movs	r2, r0
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_dadd+0x350>
 8000c3e:	e0fa      	b.n	8000e36 <__aeabi_dadd+0x546>
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x356>
 8000c44:	e145      	b.n	8000ed2 <__aeabi_dadd+0x5e2>
 8000c46:	003a      	movs	r2, r7
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dadd+0x35e>
 8000c4c:	e146      	b.n	8000edc <__aeabi_dadd+0x5ec>
 8000c4e:	0742      	lsls	r2, r0, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	08c0      	lsrs	r0, r0, #3
 8000c56:	e77b      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000c58:	000007ff 	.word	0x000007ff
 8000c5c:	ff7fffff 	.word	0xff7fffff
 8000c60:	000007fe 	.word	0x000007fe
 8000c64:	4647      	mov	r7, r8
 8000c66:	1a5c      	subs	r4, r3, r1
 8000c68:	1bc2      	subs	r2, r0, r7
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	41bf      	sbcs	r7, r7
 8000c6e:	427f      	negs	r7, r7
 8000c70:	46b9      	mov	r9, r7
 8000c72:	0017      	movs	r7, r2
 8000c74:	464a      	mov	r2, r9
 8000c76:	1abf      	subs	r7, r7, r2
 8000c78:	023a      	lsls	r2, r7, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x38e>
 8000c7c:	e08d      	b.n	8000d9a <__aeabi_dadd+0x4aa>
 8000c7e:	0023      	movs	r3, r4
 8000c80:	433b      	orrs	r3, r7
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x396>
 8000c84:	e68a      	b.n	800099c <__aeabi_dadd+0xac>
 8000c86:	2000      	movs	r0, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e761      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000c8c:	4cb4      	ldr	r4, [pc, #720]	; (8000f60 <__aeabi_dadd+0x670>)
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x3a4>
 8000c92:	e0ad      	b.n	8000df0 <__aeabi_dadd+0x500>
 8000c94:	2480      	movs	r4, #128	; 0x80
 8000c96:	0424      	lsls	r4, r4, #16
 8000c98:	4320      	orrs	r0, r4
 8000c9a:	4664      	mov	r4, ip
 8000c9c:	2c38      	cmp	r4, #56	; 0x38
 8000c9e:	dc3d      	bgt.n	8000d1c <__aeabi_dadd+0x42c>
 8000ca0:	4662      	mov	r2, ip
 8000ca2:	2c1f      	cmp	r4, #31
 8000ca4:	dd00      	ble.n	8000ca8 <__aeabi_dadd+0x3b8>
 8000ca6:	e0b7      	b.n	8000e18 <__aeabi_dadd+0x528>
 8000ca8:	2520      	movs	r5, #32
 8000caa:	001e      	movs	r6, r3
 8000cac:	1b2d      	subs	r5, r5, r4
 8000cae:	0004      	movs	r4, r0
 8000cb0:	40ab      	lsls	r3, r5
 8000cb2:	40ac      	lsls	r4, r5
 8000cb4:	40d6      	lsrs	r6, r2
 8000cb6:	40d0      	lsrs	r0, r2
 8000cb8:	4642      	mov	r2, r8
 8000cba:	1e5d      	subs	r5, r3, #1
 8000cbc:	41ab      	sbcs	r3, r5
 8000cbe:	4334      	orrs	r4, r6
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	4323      	orrs	r3, r4
 8000cc6:	e02c      	b.n	8000d22 <__aeabi_dadd+0x432>
 8000cc8:	0742      	lsls	r2, r0, #29
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	e73b      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000cd2:	185c      	adds	r4, r3, r1
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	4440      	add	r0, r8
 8000cda:	425b      	negs	r3, r3
 8000cdc:	18c7      	adds	r7, r0, r3
 8000cde:	2601      	movs	r6, #1
 8000ce0:	023b      	lsls	r3, r7, #8
 8000ce2:	d400      	bmi.n	8000ce6 <__aeabi_dadd+0x3f6>
 8000ce4:	e729      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000ce6:	2602      	movs	r6, #2
 8000ce8:	4a9e      	ldr	r2, [pc, #632]	; (8000f64 <__aeabi_dadd+0x674>)
 8000cea:	0863      	lsrs	r3, r4, #1
 8000cec:	4017      	ands	r7, r2
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4014      	ands	r4, r2
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	07fb      	lsls	r3, r7, #31
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	087f      	lsrs	r7, r7, #1
 8000cfa:	e673      	b.n	80009e4 <__aeabi_dadd+0xf4>
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	3a20      	subs	r2, #32
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	4662      	mov	r2, ip
 8000d04:	2a20      	cmp	r2, #32
 8000d06:	d005      	beq.n	8000d14 <__aeabi_dadd+0x424>
 8000d08:	4667      	mov	r7, ip
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	1bd2      	subs	r2, r2, r7
 8000d0e:	4647      	mov	r7, r8
 8000d10:	4097      	lsls	r7, r2
 8000d12:	4339      	orrs	r1, r7
 8000d14:	1e4a      	subs	r2, r1, #1
 8000d16:	4191      	sbcs	r1, r2
 8000d18:	4321      	orrs	r1, r4
 8000d1a:	e635      	b.n	8000988 <__aeabi_dadd+0x98>
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	1e58      	subs	r0, r3, #1
 8000d20:	4183      	sbcs	r3, r0
 8000d22:	1acc      	subs	r4, r1, r3
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	41bf      	sbcs	r7, r7
 8000d28:	4643      	mov	r3, r8
 8000d2a:	427f      	negs	r7, r7
 8000d2c:	4655      	mov	r5, sl
 8000d2e:	464e      	mov	r6, r9
 8000d30:	1bdf      	subs	r7, r3, r7
 8000d32:	e62e      	b.n	8000992 <__aeabi_dadd+0xa2>
 8000d34:	0002      	movs	r2, r0
 8000d36:	431a      	orrs	r2, r3
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x44c>
 8000d3a:	e0bd      	b.n	8000eb8 <__aeabi_dadd+0x5c8>
 8000d3c:	4662      	mov	r2, ip
 8000d3e:	4664      	mov	r4, ip
 8000d40:	3a01      	subs	r2, #1
 8000d42:	2c01      	cmp	r4, #1
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x458>
 8000d46:	e0e5      	b.n	8000f14 <__aeabi_dadd+0x624>
 8000d48:	4c85      	ldr	r4, [pc, #532]	; (8000f60 <__aeabi_dadd+0x670>)
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d058      	beq.n	8000e00 <__aeabi_dadd+0x510>
 8000d4e:	4694      	mov	ip, r2
 8000d50:	e749      	b.n	8000be6 <__aeabi_dadd+0x2f6>
 8000d52:	4664      	mov	r4, ip
 8000d54:	2220      	movs	r2, #32
 8000d56:	1b12      	subs	r2, r2, r4
 8000d58:	4644      	mov	r4, r8
 8000d5a:	4094      	lsls	r4, r2
 8000d5c:	000f      	movs	r7, r1
 8000d5e:	46a1      	mov	r9, r4
 8000d60:	4664      	mov	r4, ip
 8000d62:	4091      	lsls	r1, r2
 8000d64:	40e7      	lsrs	r7, r4
 8000d66:	464c      	mov	r4, r9
 8000d68:	1e4a      	subs	r2, r1, #1
 8000d6a:	4191      	sbcs	r1, r2
 8000d6c:	433c      	orrs	r4, r7
 8000d6e:	4642      	mov	r2, r8
 8000d70:	430c      	orrs	r4, r1
 8000d72:	4661      	mov	r1, ip
 8000d74:	40ca      	lsrs	r2, r1
 8000d76:	1880      	adds	r0, r0, r2
 8000d78:	e6f4      	b.n	8000b64 <__aeabi_dadd+0x274>
 8000d7a:	4c79      	ldr	r4, [pc, #484]	; (8000f60 <__aeabi_dadd+0x670>)
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x492>
 8000d80:	e6fd      	b.n	8000b7e <__aeabi_dadd+0x28e>
 8000d82:	1859      	adds	r1, r3, r1
 8000d84:	4299      	cmp	r1, r3
 8000d86:	419b      	sbcs	r3, r3
 8000d88:	4440      	add	r0, r8
 8000d8a:	425f      	negs	r7, r3
 8000d8c:	19c7      	adds	r7, r0, r7
 8000d8e:	07fc      	lsls	r4, r7, #31
 8000d90:	0849      	lsrs	r1, r1, #1
 8000d92:	0016      	movs	r6, r2
 8000d94:	430c      	orrs	r4, r1
 8000d96:	087f      	lsrs	r7, r7, #1
 8000d98:	e6cf      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000d9a:	1acc      	subs	r4, r1, r3
 8000d9c:	42a1      	cmp	r1, r4
 8000d9e:	41bf      	sbcs	r7, r7
 8000da0:	4643      	mov	r3, r8
 8000da2:	427f      	negs	r7, r7
 8000da4:	1a18      	subs	r0, r3, r0
 8000da6:	4655      	mov	r5, sl
 8000da8:	1bc7      	subs	r7, r0, r7
 8000daa:	e5f7      	b.n	800099c <__aeabi_dadd+0xac>
 8000dac:	08c9      	lsrs	r1, r1, #3
 8000dae:	077b      	lsls	r3, r7, #29
 8000db0:	4655      	mov	r5, sl
 8000db2:	430b      	orrs	r3, r1
 8000db4:	08f8      	lsrs	r0, r7, #3
 8000db6:	e6c8      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d000      	beq.n	8000dbe <__aeabi_dadd+0x4ce>
 8000dbc:	e081      	b.n	8000ec2 <__aeabi_dadd+0x5d2>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	d115      	bne.n	8000df0 <__aeabi_dadd+0x500>
 8000dc4:	2080      	movs	r0, #128	; 0x80
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	0300      	lsls	r0, r0, #12
 8000dca:	e6e3      	b.n	8000b94 <__aeabi_dadd+0x2a4>
 8000dcc:	1a5c      	subs	r4, r3, r1
 8000dce:	42a3      	cmp	r3, r4
 8000dd0:	419b      	sbcs	r3, r3
 8000dd2:	1bc7      	subs	r7, r0, r7
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	1aff      	subs	r7, r7, r3
 8000dda:	e5da      	b.n	8000992 <__aeabi_dadd+0xa2>
 8000ddc:	0742      	lsls	r2, r0, #29
 8000dde:	08db      	lsrs	r3, r3, #3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	08c0      	lsrs	r0, r0, #3
 8000de4:	e6d2      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000de6:	0742      	lsls	r2, r0, #29
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	08c0      	lsrs	r0, r0, #3
 8000dee:	e6ac      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000df0:	4643      	mov	r3, r8
 8000df2:	4642      	mov	r2, r8
 8000df4:	08c9      	lsrs	r1, r1, #3
 8000df6:	075b      	lsls	r3, r3, #29
 8000df8:	4655      	mov	r5, sl
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	08d0      	lsrs	r0, r2, #3
 8000dfe:	e6c5      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000e00:	4643      	mov	r3, r8
 8000e02:	4642      	mov	r2, r8
 8000e04:	075b      	lsls	r3, r3, #29
 8000e06:	08c9      	lsrs	r1, r1, #3
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	08d0      	lsrs	r0, r2, #3
 8000e0c:	e6be      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000e0e:	4303      	orrs	r3, r0
 8000e10:	001c      	movs	r4, r3
 8000e12:	1e63      	subs	r3, r4, #1
 8000e14:	419c      	sbcs	r4, r3
 8000e16:	e6fc      	b.n	8000c12 <__aeabi_dadd+0x322>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	3c20      	subs	r4, #32
 8000e1c:	40e2      	lsrs	r2, r4
 8000e1e:	0014      	movs	r4, r2
 8000e20:	4662      	mov	r2, ip
 8000e22:	2a20      	cmp	r2, #32
 8000e24:	d003      	beq.n	8000e2e <__aeabi_dadd+0x53e>
 8000e26:	2540      	movs	r5, #64	; 0x40
 8000e28:	1aad      	subs	r5, r5, r2
 8000e2a:	40a8      	lsls	r0, r5
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	1e58      	subs	r0, r3, #1
 8000e30:	4183      	sbcs	r3, r0
 8000e32:	4323      	orrs	r3, r4
 8000e34:	e775      	b.n	8000d22 <__aeabi_dadd+0x432>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d0e2      	beq.n	8000e00 <__aeabi_dadd+0x510>
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	d0cd      	beq.n	8000ddc <__aeabi_dadd+0x4ec>
 8000e40:	0742      	lsls	r2, r0, #29
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0312      	lsls	r2, r2, #12
 8000e4c:	4210      	tst	r0, r2
 8000e4e:	d006      	beq.n	8000e5e <__aeabi_dadd+0x56e>
 8000e50:	08fc      	lsrs	r4, r7, #3
 8000e52:	4214      	tst	r4, r2
 8000e54:	d103      	bne.n	8000e5e <__aeabi_dadd+0x56e>
 8000e56:	0020      	movs	r0, r4
 8000e58:	08cb      	lsrs	r3, r1, #3
 8000e5a:	077a      	lsls	r2, r7, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	0752      	lsls	r2, r2, #29
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e690      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000e6a:	4643      	mov	r3, r8
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x582>
 8000e70:	e709      	b.n	8000c86 <__aeabi_dadd+0x396>
 8000e72:	4643      	mov	r3, r8
 8000e74:	4642      	mov	r2, r8
 8000e76:	08c9      	lsrs	r1, r1, #3
 8000e78:	075b      	lsls	r3, r3, #29
 8000e7a:	4655      	mov	r5, sl
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	08d0      	lsrs	r0, r2, #3
 8000e80:	e666      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000e82:	1acc      	subs	r4, r1, r3
 8000e84:	42a1      	cmp	r1, r4
 8000e86:	4189      	sbcs	r1, r1
 8000e88:	1a3f      	subs	r7, r7, r0
 8000e8a:	4249      	negs	r1, r1
 8000e8c:	4655      	mov	r5, sl
 8000e8e:	2601      	movs	r6, #1
 8000e90:	1a7f      	subs	r7, r7, r1
 8000e92:	e57e      	b.n	8000992 <__aeabi_dadd+0xa2>
 8000e94:	4642      	mov	r2, r8
 8000e96:	1a5c      	subs	r4, r3, r1
 8000e98:	1a87      	subs	r7, r0, r2
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	1abf      	subs	r7, r7, r2
 8000ea2:	023a      	lsls	r2, r7, #8
 8000ea4:	d53d      	bpl.n	8000f22 <__aeabi_dadd+0x632>
 8000ea6:	1acc      	subs	r4, r1, r3
 8000ea8:	42a1      	cmp	r1, r4
 8000eaa:	4189      	sbcs	r1, r1
 8000eac:	4643      	mov	r3, r8
 8000eae:	4249      	negs	r1, r1
 8000eb0:	1a1f      	subs	r7, r3, r0
 8000eb2:	4655      	mov	r5, sl
 8000eb4:	1a7f      	subs	r7, r7, r1
 8000eb6:	e595      	b.n	80009e4 <__aeabi_dadd+0xf4>
 8000eb8:	077b      	lsls	r3, r7, #29
 8000eba:	08c9      	lsrs	r1, r1, #3
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	08f8      	lsrs	r0, r7, #3
 8000ec0:	e643      	b.n	8000b4a <__aeabi_dadd+0x25a>
 8000ec2:	4644      	mov	r4, r8
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	430c      	orrs	r4, r1
 8000ec8:	d130      	bne.n	8000f2c <__aeabi_dadd+0x63c>
 8000eca:	0742      	lsls	r2, r0, #29
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	08c0      	lsrs	r0, r0, #3
 8000ed0:	e65c      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000ed2:	077b      	lsls	r3, r7, #29
 8000ed4:	08c9      	lsrs	r1, r1, #3
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	08f8      	lsrs	r0, r7, #3
 8000eda:	e639      	b.n	8000b50 <__aeabi_dadd+0x260>
 8000edc:	185c      	adds	r4, r3, r1
 8000ede:	429c      	cmp	r4, r3
 8000ee0:	419b      	sbcs	r3, r3
 8000ee2:	4440      	add	r0, r8
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	18c7      	adds	r7, r0, r3
 8000ee8:	023b      	lsls	r3, r7, #8
 8000eea:	d400      	bmi.n	8000eee <__aeabi_dadd+0x5fe>
 8000eec:	e625      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <__aeabi_dadd+0x674>)
 8000ef0:	2601      	movs	r6, #1
 8000ef2:	401f      	ands	r7, r3
 8000ef4:	e621      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000ef6:	0004      	movs	r4, r0
 8000ef8:	3a20      	subs	r2, #32
 8000efa:	40d4      	lsrs	r4, r2
 8000efc:	4662      	mov	r2, ip
 8000efe:	2a20      	cmp	r2, #32
 8000f00:	d004      	beq.n	8000f0c <__aeabi_dadd+0x61c>
 8000f02:	2240      	movs	r2, #64	; 0x40
 8000f04:	4666      	mov	r6, ip
 8000f06:	1b92      	subs	r2, r2, r6
 8000f08:	4090      	lsls	r0, r2
 8000f0a:	4303      	orrs	r3, r0
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	4193      	sbcs	r3, r2
 8000f10:	431c      	orrs	r4, r3
 8000f12:	e67e      	b.n	8000c12 <__aeabi_dadd+0x322>
 8000f14:	185c      	adds	r4, r3, r1
 8000f16:	428c      	cmp	r4, r1
 8000f18:	4189      	sbcs	r1, r1
 8000f1a:	4440      	add	r0, r8
 8000f1c:	4249      	negs	r1, r1
 8000f1e:	1847      	adds	r7, r0, r1
 8000f20:	e6dd      	b.n	8000cde <__aeabi_dadd+0x3ee>
 8000f22:	0023      	movs	r3, r4
 8000f24:	433b      	orrs	r3, r7
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x63a>
 8000f28:	e6ad      	b.n	8000c86 <__aeabi_dadd+0x396>
 8000f2a:	e606      	b.n	8000b3a <__aeabi_dadd+0x24a>
 8000f2c:	0744      	lsls	r4, r0, #29
 8000f2e:	4323      	orrs	r3, r4
 8000f30:	2480      	movs	r4, #128	; 0x80
 8000f32:	08c0      	lsrs	r0, r0, #3
 8000f34:	0324      	lsls	r4, r4, #12
 8000f36:	4220      	tst	r0, r4
 8000f38:	d008      	beq.n	8000f4c <__aeabi_dadd+0x65c>
 8000f3a:	4642      	mov	r2, r8
 8000f3c:	08d6      	lsrs	r6, r2, #3
 8000f3e:	4226      	tst	r6, r4
 8000f40:	d104      	bne.n	8000f4c <__aeabi_dadd+0x65c>
 8000f42:	4655      	mov	r5, sl
 8000f44:	0030      	movs	r0, r6
 8000f46:	08cb      	lsrs	r3, r1, #3
 8000f48:	0751      	lsls	r1, r2, #29
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	0f5a      	lsrs	r2, r3, #29
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	0752      	lsls	r2, r2, #29
 8000f54:	4313      	orrs	r3, r2
 8000f56:	e619      	b.n	8000b8c <__aeabi_dadd+0x29c>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4a01      	ldr	r2, [pc, #4]	; (8000f60 <__aeabi_dadd+0x670>)
 8000f5c:	001f      	movs	r7, r3
 8000f5e:	e55e      	b.n	8000a1e <__aeabi_dadd+0x12e>
 8000f60:	000007ff 	.word	0x000007ff
 8000f64:	ff7fffff 	.word	0xff7fffff

08000f68 <__aeabi_ddiv>:
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	4657      	mov	r7, sl
 8000f6c:	464e      	mov	r6, r9
 8000f6e:	4645      	mov	r5, r8
 8000f70:	46de      	mov	lr, fp
 8000f72:	b5e0      	push	{r5, r6, r7, lr}
 8000f74:	4681      	mov	r9, r0
 8000f76:	0005      	movs	r5, r0
 8000f78:	030c      	lsls	r4, r1, #12
 8000f7a:	0048      	lsls	r0, r1, #1
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	001f      	movs	r7, r3
 8000f80:	b085      	sub	sp, #20
 8000f82:	0b24      	lsrs	r4, r4, #12
 8000f84:	0d40      	lsrs	r0, r0, #21
 8000f86:	0fce      	lsrs	r6, r1, #31
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x26>
 8000f8c:	e156      	b.n	800123c <__aeabi_ddiv+0x2d4>
 8000f8e:	4bd4      	ldr	r3, [pc, #848]	; (80012e0 <__aeabi_ddiv+0x378>)
 8000f90:	4298      	cmp	r0, r3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x2e>
 8000f94:	e172      	b.n	800127c <__aeabi_ddiv+0x314>
 8000f96:	0f6b      	lsrs	r3, r5, #29
 8000f98:	00e4      	lsls	r4, r4, #3
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4bcf      	ldr	r3, [pc, #828]	; (80012e4 <__aeabi_ddiv+0x37c>)
 8000fa6:	00ed      	lsls	r5, r5, #3
 8000fa8:	469b      	mov	fp, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	4699      	mov	r9, r3
 8000fae:	4483      	add	fp, r0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	033c      	lsls	r4, r7, #12
 8000fb4:	007b      	lsls	r3, r7, #1
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	0b24      	lsrs	r4, r4, #12
 8000fba:	0d5b      	lsrs	r3, r3, #21
 8000fbc:	0fff      	lsrs	r7, r7, #31
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_ddiv+0x5c>
 8000fc2:	e11f      	b.n	8001204 <__aeabi_ddiv+0x29c>
 8000fc4:	4ac6      	ldr	r2, [pc, #792]	; (80012e0 <__aeabi_ddiv+0x378>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x64>
 8000fca:	e162      	b.n	8001292 <__aeabi_ddiv+0x32a>
 8000fcc:	49c5      	ldr	r1, [pc, #788]	; (80012e4 <__aeabi_ddiv+0x37c>)
 8000fce:	0f42      	lsrs	r2, r0, #29
 8000fd0:	468c      	mov	ip, r1
 8000fd2:	00e4      	lsls	r4, r4, #3
 8000fd4:	4659      	mov	r1, fp
 8000fd6:	4314      	orrs	r4, r2
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	4463      	add	r3, ip
 8000fdc:	0412      	lsls	r2, r2, #16
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	4314      	orrs	r4, r2
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	00c2      	lsls	r2, r0, #3
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	0033      	movs	r3, r6
 8000fea:	407b      	eors	r3, r7
 8000fec:	469a      	mov	sl, r3
 8000fee:	464b      	mov	r3, r9
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d827      	bhi.n	8001044 <__aeabi_ddiv+0xdc>
 8000ff4:	49bc      	ldr	r1, [pc, #752]	; (80012e8 <__aeabi_ddiv+0x380>)
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	58cb      	ldr	r3, [r1, r3]
 8000ffa:	469f      	mov	pc, r3
 8000ffc:	46b2      	mov	sl, r6
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d016      	beq.n	8001032 <__aeabi_ddiv+0xca>
 8001004:	2b03      	cmp	r3, #3
 8001006:	d100      	bne.n	800100a <__aeabi_ddiv+0xa2>
 8001008:	e28e      	b.n	8001528 <__aeabi_ddiv+0x5c0>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d000      	beq.n	8001010 <__aeabi_ddiv+0xa8>
 800100e:	e0d9      	b.n	80011c4 <__aeabi_ddiv+0x25c>
 8001010:	2300      	movs	r3, #0
 8001012:	2400      	movs	r4, #0
 8001014:	2500      	movs	r5, #0
 8001016:	4652      	mov	r2, sl
 8001018:	051b      	lsls	r3, r3, #20
 800101a:	4323      	orrs	r3, r4
 800101c:	07d2      	lsls	r2, r2, #31
 800101e:	4313      	orrs	r3, r2
 8001020:	0028      	movs	r0, r5
 8001022:	0019      	movs	r1, r3
 8001024:	b005      	add	sp, #20
 8001026:	bcf0      	pop	{r4, r5, r6, r7}
 8001028:	46bb      	mov	fp, r7
 800102a:	46b2      	mov	sl, r6
 800102c:	46a9      	mov	r9, r5
 800102e:	46a0      	mov	r8, r4
 8001030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001032:	2400      	movs	r4, #0
 8001034:	2500      	movs	r5, #0
 8001036:	4baa      	ldr	r3, [pc, #680]	; (80012e0 <__aeabi_ddiv+0x378>)
 8001038:	e7ed      	b.n	8001016 <__aeabi_ddiv+0xae>
 800103a:	46ba      	mov	sl, r7
 800103c:	46a0      	mov	r8, r4
 800103e:	0015      	movs	r5, r2
 8001040:	9000      	str	r0, [sp, #0]
 8001042:	e7dc      	b.n	8000ffe <__aeabi_ddiv+0x96>
 8001044:	4544      	cmp	r4, r8
 8001046:	d200      	bcs.n	800104a <__aeabi_ddiv+0xe2>
 8001048:	e1c7      	b.n	80013da <__aeabi_ddiv+0x472>
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0xe6>
 800104c:	e1c2      	b.n	80013d4 <__aeabi_ddiv+0x46c>
 800104e:	2301      	movs	r3, #1
 8001050:	425b      	negs	r3, r3
 8001052:	469c      	mov	ip, r3
 8001054:	002e      	movs	r6, r5
 8001056:	4640      	mov	r0, r8
 8001058:	2500      	movs	r5, #0
 800105a:	44e3      	add	fp, ip
 800105c:	0223      	lsls	r3, r4, #8
 800105e:	0e14      	lsrs	r4, r2, #24
 8001060:	431c      	orrs	r4, r3
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	4699      	mov	r9, r3
 8001066:	0423      	lsls	r3, r4, #16
 8001068:	0c1f      	lsrs	r7, r3, #16
 800106a:	0212      	lsls	r2, r2, #8
 800106c:	4649      	mov	r1, r9
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	9701      	str	r7, [sp, #4]
 8001072:	f7ff f8d7 	bl	8000224 <__aeabi_uidivmod>
 8001076:	0002      	movs	r2, r0
 8001078:	437a      	muls	r2, r7
 800107a:	040b      	lsls	r3, r1, #16
 800107c:	0c31      	lsrs	r1, r6, #16
 800107e:	4680      	mov	r8, r0
 8001080:	4319      	orrs	r1, r3
 8001082:	428a      	cmp	r2, r1
 8001084:	d907      	bls.n	8001096 <__aeabi_ddiv+0x12e>
 8001086:	2301      	movs	r3, #1
 8001088:	425b      	negs	r3, r3
 800108a:	469c      	mov	ip, r3
 800108c:	1909      	adds	r1, r1, r4
 800108e:	44e0      	add	r8, ip
 8001090:	428c      	cmp	r4, r1
 8001092:	d800      	bhi.n	8001096 <__aeabi_ddiv+0x12e>
 8001094:	e207      	b.n	80014a6 <__aeabi_ddiv+0x53e>
 8001096:	1a88      	subs	r0, r1, r2
 8001098:	4649      	mov	r1, r9
 800109a:	f7ff f8c3 	bl	8000224 <__aeabi_uidivmod>
 800109e:	0409      	lsls	r1, r1, #16
 80010a0:	468c      	mov	ip, r1
 80010a2:	0431      	lsls	r1, r6, #16
 80010a4:	4666      	mov	r6, ip
 80010a6:	9a01      	ldr	r2, [sp, #4]
 80010a8:	0c09      	lsrs	r1, r1, #16
 80010aa:	4342      	muls	r2, r0
 80010ac:	0003      	movs	r3, r0
 80010ae:	4331      	orrs	r1, r6
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d904      	bls.n	80010be <__aeabi_ddiv+0x156>
 80010b4:	1909      	adds	r1, r1, r4
 80010b6:	3b01      	subs	r3, #1
 80010b8:	428c      	cmp	r4, r1
 80010ba:	d800      	bhi.n	80010be <__aeabi_ddiv+0x156>
 80010bc:	e1ed      	b.n	800149a <__aeabi_ddiv+0x532>
 80010be:	1a88      	subs	r0, r1, r2
 80010c0:	4642      	mov	r2, r8
 80010c2:	0412      	lsls	r2, r2, #16
 80010c4:	431a      	orrs	r2, r3
 80010c6:	4690      	mov	r8, r2
 80010c8:	4641      	mov	r1, r8
 80010ca:	9b00      	ldr	r3, [sp, #0]
 80010cc:	040e      	lsls	r6, r1, #16
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	001f      	movs	r7, r3
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	0c36      	lsrs	r6, r6, #16
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	0c19      	lsrs	r1, r3, #16
 80010dc:	000b      	movs	r3, r1
 80010de:	4373      	muls	r3, r6
 80010e0:	0c12      	lsrs	r2, r2, #16
 80010e2:	437e      	muls	r6, r7
 80010e4:	9103      	str	r1, [sp, #12]
 80010e6:	4351      	muls	r1, r2
 80010e8:	437a      	muls	r2, r7
 80010ea:	0c1f      	lsrs	r7, r3, #16
 80010ec:	46bc      	mov	ip, r7
 80010ee:	1876      	adds	r6, r6, r1
 80010f0:	4466      	add	r6, ip
 80010f2:	42b1      	cmp	r1, r6
 80010f4:	d903      	bls.n	80010fe <__aeabi_ddiv+0x196>
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	0249      	lsls	r1, r1, #9
 80010fa:	468c      	mov	ip, r1
 80010fc:	4462      	add	r2, ip
 80010fe:	0c31      	lsrs	r1, r6, #16
 8001100:	188a      	adds	r2, r1, r2
 8001102:	0431      	lsls	r1, r6, #16
 8001104:	041e      	lsls	r6, r3, #16
 8001106:	0c36      	lsrs	r6, r6, #16
 8001108:	198e      	adds	r6, r1, r6
 800110a:	4290      	cmp	r0, r2
 800110c:	d302      	bcc.n	8001114 <__aeabi_ddiv+0x1ac>
 800110e:	d112      	bne.n	8001136 <__aeabi_ddiv+0x1ce>
 8001110:	42b5      	cmp	r5, r6
 8001112:	d210      	bcs.n	8001136 <__aeabi_ddiv+0x1ce>
 8001114:	4643      	mov	r3, r8
 8001116:	1e59      	subs	r1, r3, #1
 8001118:	9b00      	ldr	r3, [sp, #0]
 800111a:	469c      	mov	ip, r3
 800111c:	4465      	add	r5, ip
 800111e:	001f      	movs	r7, r3
 8001120:	429d      	cmp	r5, r3
 8001122:	419b      	sbcs	r3, r3
 8001124:	425b      	negs	r3, r3
 8001126:	191b      	adds	r3, r3, r4
 8001128:	18c0      	adds	r0, r0, r3
 800112a:	4284      	cmp	r4, r0
 800112c:	d200      	bcs.n	8001130 <__aeabi_ddiv+0x1c8>
 800112e:	e1a0      	b.n	8001472 <__aeabi_ddiv+0x50a>
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x1cc>
 8001132:	e19b      	b.n	800146c <__aeabi_ddiv+0x504>
 8001134:	4688      	mov	r8, r1
 8001136:	1bae      	subs	r6, r5, r6
 8001138:	42b5      	cmp	r5, r6
 800113a:	41ad      	sbcs	r5, r5
 800113c:	1a80      	subs	r0, r0, r2
 800113e:	426d      	negs	r5, r5
 8001140:	1b40      	subs	r0, r0, r5
 8001142:	4284      	cmp	r4, r0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x1e0>
 8001146:	e1d5      	b.n	80014f4 <__aeabi_ddiv+0x58c>
 8001148:	4649      	mov	r1, r9
 800114a:	f7ff f86b 	bl	8000224 <__aeabi_uidivmod>
 800114e:	9a01      	ldr	r2, [sp, #4]
 8001150:	040b      	lsls	r3, r1, #16
 8001152:	4342      	muls	r2, r0
 8001154:	0c31      	lsrs	r1, r6, #16
 8001156:	0005      	movs	r5, r0
 8001158:	4319      	orrs	r1, r3
 800115a:	428a      	cmp	r2, r1
 800115c:	d900      	bls.n	8001160 <__aeabi_ddiv+0x1f8>
 800115e:	e16c      	b.n	800143a <__aeabi_ddiv+0x4d2>
 8001160:	1a88      	subs	r0, r1, r2
 8001162:	4649      	mov	r1, r9
 8001164:	f7ff f85e 	bl	8000224 <__aeabi_uidivmod>
 8001168:	9a01      	ldr	r2, [sp, #4]
 800116a:	0436      	lsls	r6, r6, #16
 800116c:	4342      	muls	r2, r0
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	0c36      	lsrs	r6, r6, #16
 8001172:	0003      	movs	r3, r0
 8001174:	430e      	orrs	r6, r1
 8001176:	42b2      	cmp	r2, r6
 8001178:	d900      	bls.n	800117c <__aeabi_ddiv+0x214>
 800117a:	e153      	b.n	8001424 <__aeabi_ddiv+0x4bc>
 800117c:	9803      	ldr	r0, [sp, #12]
 800117e:	1ab6      	subs	r6, r6, r2
 8001180:	0002      	movs	r2, r0
 8001182:	042d      	lsls	r5, r5, #16
 8001184:	431d      	orrs	r5, r3
 8001186:	9f02      	ldr	r7, [sp, #8]
 8001188:	042b      	lsls	r3, r5, #16
 800118a:	0c1b      	lsrs	r3, r3, #16
 800118c:	435a      	muls	r2, r3
 800118e:	437b      	muls	r3, r7
 8001190:	469c      	mov	ip, r3
 8001192:	0c29      	lsrs	r1, r5, #16
 8001194:	4348      	muls	r0, r1
 8001196:	0c13      	lsrs	r3, r2, #16
 8001198:	4484      	add	ip, r0
 800119a:	4463      	add	r3, ip
 800119c:	4379      	muls	r1, r7
 800119e:	4298      	cmp	r0, r3
 80011a0:	d903      	bls.n	80011aa <__aeabi_ddiv+0x242>
 80011a2:	2080      	movs	r0, #128	; 0x80
 80011a4:	0240      	lsls	r0, r0, #9
 80011a6:	4684      	mov	ip, r0
 80011a8:	4461      	add	r1, ip
 80011aa:	0c18      	lsrs	r0, r3, #16
 80011ac:	0412      	lsls	r2, r2, #16
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	0c12      	lsrs	r2, r2, #16
 80011b2:	1841      	adds	r1, r0, r1
 80011b4:	189b      	adds	r3, r3, r2
 80011b6:	428e      	cmp	r6, r1
 80011b8:	d200      	bcs.n	80011bc <__aeabi_ddiv+0x254>
 80011ba:	e0ff      	b.n	80013bc <__aeabi_ddiv+0x454>
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x258>
 80011be:	e0fa      	b.n	80013b6 <__aeabi_ddiv+0x44e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	431d      	orrs	r5, r3
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <__aeabi_ddiv+0x384>)
 80011c6:	445a      	add	r2, fp
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	dc00      	bgt.n	80011ce <__aeabi_ddiv+0x266>
 80011cc:	e0aa      	b.n	8001324 <__aeabi_ddiv+0x3bc>
 80011ce:	076b      	lsls	r3, r5, #29
 80011d0:	d000      	beq.n	80011d4 <__aeabi_ddiv+0x26c>
 80011d2:	e13d      	b.n	8001450 <__aeabi_ddiv+0x4e8>
 80011d4:	08ed      	lsrs	r5, r5, #3
 80011d6:	4643      	mov	r3, r8
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	d506      	bpl.n	80011ea <__aeabi_ddiv+0x282>
 80011dc:	4642      	mov	r2, r8
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <__aeabi_ddiv+0x388>)
 80011e0:	401a      	ands	r2, r3
 80011e2:	4690      	mov	r8, r2
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	445a      	add	r2, fp
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <__aeabi_ddiv+0x38c>)
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dd00      	ble.n	80011f2 <__aeabi_ddiv+0x28a>
 80011f0:	e71f      	b.n	8001032 <__aeabi_ddiv+0xca>
 80011f2:	4643      	mov	r3, r8
 80011f4:	075b      	lsls	r3, r3, #29
 80011f6:	431d      	orrs	r5, r3
 80011f8:	4643      	mov	r3, r8
 80011fa:	0552      	lsls	r2, r2, #21
 80011fc:	025c      	lsls	r4, r3, #9
 80011fe:	0b24      	lsrs	r4, r4, #12
 8001200:	0d53      	lsrs	r3, r2, #21
 8001202:	e708      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001204:	4652      	mov	r2, sl
 8001206:	4322      	orrs	r2, r4
 8001208:	d100      	bne.n	800120c <__aeabi_ddiv+0x2a4>
 800120a:	e07b      	b.n	8001304 <__aeabi_ddiv+0x39c>
 800120c:	2c00      	cmp	r4, #0
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0x2aa>
 8001210:	e0fa      	b.n	8001408 <__aeabi_ddiv+0x4a0>
 8001212:	0020      	movs	r0, r4
 8001214:	f001 f952 	bl	80024bc <__clzsi2>
 8001218:	0002      	movs	r2, r0
 800121a:	3a0b      	subs	r2, #11
 800121c:	231d      	movs	r3, #29
 800121e:	0001      	movs	r1, r0
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	4652      	mov	r2, sl
 8001224:	3908      	subs	r1, #8
 8001226:	40da      	lsrs	r2, r3
 8001228:	408c      	lsls	r4, r1
 800122a:	4314      	orrs	r4, r2
 800122c:	4652      	mov	r2, sl
 800122e:	408a      	lsls	r2, r1
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <__aeabi_ddiv+0x390>)
 8001232:	4458      	add	r0, fp
 8001234:	469b      	mov	fp, r3
 8001236:	4483      	add	fp, r0
 8001238:	2000      	movs	r0, #0
 800123a:	e6d5      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 800123c:	464b      	mov	r3, r9
 800123e:	4323      	orrs	r3, r4
 8001240:	4698      	mov	r8, r3
 8001242:	d044      	beq.n	80012ce <__aeabi_ddiv+0x366>
 8001244:	2c00      	cmp	r4, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x2e2>
 8001248:	e0ce      	b.n	80013e8 <__aeabi_ddiv+0x480>
 800124a:	0020      	movs	r0, r4
 800124c:	f001 f936 	bl	80024bc <__clzsi2>
 8001250:	0001      	movs	r1, r0
 8001252:	0002      	movs	r2, r0
 8001254:	390b      	subs	r1, #11
 8001256:	231d      	movs	r3, #29
 8001258:	1a5b      	subs	r3, r3, r1
 800125a:	4649      	mov	r1, r9
 800125c:	0010      	movs	r0, r2
 800125e:	40d9      	lsrs	r1, r3
 8001260:	3808      	subs	r0, #8
 8001262:	4084      	lsls	r4, r0
 8001264:	000b      	movs	r3, r1
 8001266:	464d      	mov	r5, r9
 8001268:	4323      	orrs	r3, r4
 800126a:	4698      	mov	r8, r3
 800126c:	4085      	lsls	r5, r0
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <__aeabi_ddiv+0x394>)
 8001270:	1a83      	subs	r3, r0, r2
 8001272:	469b      	mov	fp, r3
 8001274:	2300      	movs	r3, #0
 8001276:	4699      	mov	r9, r3
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	e69a      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 800127c:	464b      	mov	r3, r9
 800127e:	4323      	orrs	r3, r4
 8001280:	4698      	mov	r8, r3
 8001282:	d11d      	bne.n	80012c0 <__aeabi_ddiv+0x358>
 8001284:	2308      	movs	r3, #8
 8001286:	4699      	mov	r9, r3
 8001288:	3b06      	subs	r3, #6
 800128a:	2500      	movs	r5, #0
 800128c:	4683      	mov	fp, r0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	e68f      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 8001292:	4652      	mov	r2, sl
 8001294:	4322      	orrs	r2, r4
 8001296:	d109      	bne.n	80012ac <__aeabi_ddiv+0x344>
 8001298:	2302      	movs	r3, #2
 800129a:	4649      	mov	r1, r9
 800129c:	4319      	orrs	r1, r3
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <__aeabi_ddiv+0x398>)
 80012a0:	4689      	mov	r9, r1
 80012a2:	469c      	mov	ip, r3
 80012a4:	2400      	movs	r4, #0
 80012a6:	2002      	movs	r0, #2
 80012a8:	44e3      	add	fp, ip
 80012aa:	e69d      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 80012ac:	2303      	movs	r3, #3
 80012ae:	464a      	mov	r2, r9
 80012b0:	431a      	orrs	r2, r3
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <__aeabi_ddiv+0x398>)
 80012b4:	4691      	mov	r9, r2
 80012b6:	469c      	mov	ip, r3
 80012b8:	4652      	mov	r2, sl
 80012ba:	2003      	movs	r0, #3
 80012bc:	44e3      	add	fp, ip
 80012be:	e693      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 80012c0:	230c      	movs	r3, #12
 80012c2:	4699      	mov	r9, r3
 80012c4:	3b09      	subs	r3, #9
 80012c6:	46a0      	mov	r8, r4
 80012c8:	4683      	mov	fp, r0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	e671      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 80012ce:	2304      	movs	r3, #4
 80012d0:	4699      	mov	r9, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	469b      	mov	fp, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	2500      	movs	r5, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	e669      	b.n	8000fb2 <__aeabi_ddiv+0x4a>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000007ff 	.word	0x000007ff
 80012e4:	fffffc01 	.word	0xfffffc01
 80012e8:	080079bc 	.word	0x080079bc
 80012ec:	000003ff 	.word	0x000003ff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	000003f3 	.word	0x000003f3
 80012fc:	fffffc0d 	.word	0xfffffc0d
 8001300:	fffff801 	.word	0xfffff801
 8001304:	4649      	mov	r1, r9
 8001306:	2301      	movs	r3, #1
 8001308:	4319      	orrs	r1, r3
 800130a:	4689      	mov	r9, r1
 800130c:	2400      	movs	r4, #0
 800130e:	2001      	movs	r0, #1
 8001310:	e66a      	b.n	8000fe8 <__aeabi_ddiv+0x80>
 8001312:	2300      	movs	r3, #0
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	469a      	mov	sl, r3
 8001318:	2500      	movs	r5, #0
 800131a:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <__aeabi_ddiv+0x5dc>)
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	e67a      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001320:	2501      	movs	r5, #1
 8001322:	426d      	negs	r5, r5
 8001324:	2301      	movs	r3, #1
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	2b38      	cmp	r3, #56	; 0x38
 800132a:	dd00      	ble.n	800132e <__aeabi_ddiv+0x3c6>
 800132c:	e670      	b.n	8001010 <__aeabi_ddiv+0xa8>
 800132e:	2b1f      	cmp	r3, #31
 8001330:	dc00      	bgt.n	8001334 <__aeabi_ddiv+0x3cc>
 8001332:	e0bf      	b.n	80014b4 <__aeabi_ddiv+0x54c>
 8001334:	211f      	movs	r1, #31
 8001336:	4249      	negs	r1, r1
 8001338:	1a8a      	subs	r2, r1, r2
 800133a:	4641      	mov	r1, r8
 800133c:	40d1      	lsrs	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	2b20      	cmp	r3, #32
 8001342:	d004      	beq.n	800134e <__aeabi_ddiv+0x3e6>
 8001344:	4641      	mov	r1, r8
 8001346:	4b80      	ldr	r3, [pc, #512]	; (8001548 <__aeabi_ddiv+0x5e0>)
 8001348:	445b      	add	r3, fp
 800134a:	4099      	lsls	r1, r3
 800134c:	430d      	orrs	r5, r1
 800134e:	1e6b      	subs	r3, r5, #1
 8001350:	419d      	sbcs	r5, r3
 8001352:	2307      	movs	r3, #7
 8001354:	432a      	orrs	r2, r5
 8001356:	001d      	movs	r5, r3
 8001358:	2400      	movs	r4, #0
 800135a:	4015      	ands	r5, r2
 800135c:	4213      	tst	r3, r2
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x3fa>
 8001360:	e0d4      	b.n	800150c <__aeabi_ddiv+0x5a4>
 8001362:	210f      	movs	r1, #15
 8001364:	2300      	movs	r3, #0
 8001366:	4011      	ands	r1, r2
 8001368:	2904      	cmp	r1, #4
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0x406>
 800136c:	e0cb      	b.n	8001506 <__aeabi_ddiv+0x59e>
 800136e:	1d11      	adds	r1, r2, #4
 8001370:	4291      	cmp	r1, r2
 8001372:	4192      	sbcs	r2, r2
 8001374:	4252      	negs	r2, r2
 8001376:	189b      	adds	r3, r3, r2
 8001378:	000a      	movs	r2, r1
 800137a:	0219      	lsls	r1, r3, #8
 800137c:	d400      	bmi.n	8001380 <__aeabi_ddiv+0x418>
 800137e:	e0c2      	b.n	8001506 <__aeabi_ddiv+0x59e>
 8001380:	2301      	movs	r3, #1
 8001382:	2400      	movs	r4, #0
 8001384:	2500      	movs	r5, #0
 8001386:	e646      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	4641      	mov	r1, r8
 800138c:	031b      	lsls	r3, r3, #12
 800138e:	4219      	tst	r1, r3
 8001390:	d008      	beq.n	80013a4 <__aeabi_ddiv+0x43c>
 8001392:	421c      	tst	r4, r3
 8001394:	d106      	bne.n	80013a4 <__aeabi_ddiv+0x43c>
 8001396:	431c      	orrs	r4, r3
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	46ba      	mov	sl, r7
 800139c:	0015      	movs	r5, r2
 800139e:	4b69      	ldr	r3, [pc, #420]	; (8001544 <__aeabi_ddiv+0x5dc>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e638      	b.n	8001016 <__aeabi_ddiv+0xae>
 80013a4:	2480      	movs	r4, #128	; 0x80
 80013a6:	4643      	mov	r3, r8
 80013a8:	0324      	lsls	r4, r4, #12
 80013aa:	431c      	orrs	r4, r3
 80013ac:	0324      	lsls	r4, r4, #12
 80013ae:	46b2      	mov	sl, r6
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <__aeabi_ddiv+0x5dc>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	e62f      	b.n	8001016 <__aeabi_ddiv+0xae>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_ddiv+0x454>
 80013ba:	e703      	b.n	80011c4 <__aeabi_ddiv+0x25c>
 80013bc:	19a6      	adds	r6, r4, r6
 80013be:	1e68      	subs	r0, r5, #1
 80013c0:	42a6      	cmp	r6, r4
 80013c2:	d200      	bcs.n	80013c6 <__aeabi_ddiv+0x45e>
 80013c4:	e08d      	b.n	80014e2 <__aeabi_ddiv+0x57a>
 80013c6:	428e      	cmp	r6, r1
 80013c8:	d200      	bcs.n	80013cc <__aeabi_ddiv+0x464>
 80013ca:	e0a3      	b.n	8001514 <__aeabi_ddiv+0x5ac>
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x468>
 80013ce:	e0b3      	b.n	8001538 <__aeabi_ddiv+0x5d0>
 80013d0:	0005      	movs	r5, r0
 80013d2:	e6f5      	b.n	80011c0 <__aeabi_ddiv+0x258>
 80013d4:	42aa      	cmp	r2, r5
 80013d6:	d900      	bls.n	80013da <__aeabi_ddiv+0x472>
 80013d8:	e639      	b.n	800104e <__aeabi_ddiv+0xe6>
 80013da:	4643      	mov	r3, r8
 80013dc:	07de      	lsls	r6, r3, #31
 80013de:	0858      	lsrs	r0, r3, #1
 80013e0:	086b      	lsrs	r3, r5, #1
 80013e2:	431e      	orrs	r6, r3
 80013e4:	07ed      	lsls	r5, r5, #31
 80013e6:	e639      	b.n	800105c <__aeabi_ddiv+0xf4>
 80013e8:	4648      	mov	r0, r9
 80013ea:	f001 f867 	bl	80024bc <__clzsi2>
 80013ee:	0001      	movs	r1, r0
 80013f0:	0002      	movs	r2, r0
 80013f2:	3115      	adds	r1, #21
 80013f4:	3220      	adds	r2, #32
 80013f6:	291c      	cmp	r1, #28
 80013f8:	dc00      	bgt.n	80013fc <__aeabi_ddiv+0x494>
 80013fa:	e72c      	b.n	8001256 <__aeabi_ddiv+0x2ee>
 80013fc:	464b      	mov	r3, r9
 80013fe:	3808      	subs	r0, #8
 8001400:	4083      	lsls	r3, r0
 8001402:	2500      	movs	r5, #0
 8001404:	4698      	mov	r8, r3
 8001406:	e732      	b.n	800126e <__aeabi_ddiv+0x306>
 8001408:	f001 f858 	bl	80024bc <__clzsi2>
 800140c:	0003      	movs	r3, r0
 800140e:	001a      	movs	r2, r3
 8001410:	3215      	adds	r2, #21
 8001412:	3020      	adds	r0, #32
 8001414:	2a1c      	cmp	r2, #28
 8001416:	dc00      	bgt.n	800141a <__aeabi_ddiv+0x4b2>
 8001418:	e700      	b.n	800121c <__aeabi_ddiv+0x2b4>
 800141a:	4654      	mov	r4, sl
 800141c:	3b08      	subs	r3, #8
 800141e:	2200      	movs	r2, #0
 8001420:	409c      	lsls	r4, r3
 8001422:	e705      	b.n	8001230 <__aeabi_ddiv+0x2c8>
 8001424:	1936      	adds	r6, r6, r4
 8001426:	3b01      	subs	r3, #1
 8001428:	42b4      	cmp	r4, r6
 800142a:	d900      	bls.n	800142e <__aeabi_ddiv+0x4c6>
 800142c:	e6a6      	b.n	800117c <__aeabi_ddiv+0x214>
 800142e:	42b2      	cmp	r2, r6
 8001430:	d800      	bhi.n	8001434 <__aeabi_ddiv+0x4cc>
 8001432:	e6a3      	b.n	800117c <__aeabi_ddiv+0x214>
 8001434:	1e83      	subs	r3, r0, #2
 8001436:	1936      	adds	r6, r6, r4
 8001438:	e6a0      	b.n	800117c <__aeabi_ddiv+0x214>
 800143a:	1909      	adds	r1, r1, r4
 800143c:	3d01      	subs	r5, #1
 800143e:	428c      	cmp	r4, r1
 8001440:	d900      	bls.n	8001444 <__aeabi_ddiv+0x4dc>
 8001442:	e68d      	b.n	8001160 <__aeabi_ddiv+0x1f8>
 8001444:	428a      	cmp	r2, r1
 8001446:	d800      	bhi.n	800144a <__aeabi_ddiv+0x4e2>
 8001448:	e68a      	b.n	8001160 <__aeabi_ddiv+0x1f8>
 800144a:	1e85      	subs	r5, r0, #2
 800144c:	1909      	adds	r1, r1, r4
 800144e:	e687      	b.n	8001160 <__aeabi_ddiv+0x1f8>
 8001450:	230f      	movs	r3, #15
 8001452:	402b      	ands	r3, r5
 8001454:	2b04      	cmp	r3, #4
 8001456:	d100      	bne.n	800145a <__aeabi_ddiv+0x4f2>
 8001458:	e6bc      	b.n	80011d4 <__aeabi_ddiv+0x26c>
 800145a:	2305      	movs	r3, #5
 800145c:	425b      	negs	r3, r3
 800145e:	42ab      	cmp	r3, r5
 8001460:	419b      	sbcs	r3, r3
 8001462:	3504      	adds	r5, #4
 8001464:	425b      	negs	r3, r3
 8001466:	08ed      	lsrs	r5, r5, #3
 8001468:	4498      	add	r8, r3
 800146a:	e6b4      	b.n	80011d6 <__aeabi_ddiv+0x26e>
 800146c:	42af      	cmp	r7, r5
 800146e:	d900      	bls.n	8001472 <__aeabi_ddiv+0x50a>
 8001470:	e660      	b.n	8001134 <__aeabi_ddiv+0x1cc>
 8001472:	4282      	cmp	r2, r0
 8001474:	d804      	bhi.n	8001480 <__aeabi_ddiv+0x518>
 8001476:	d000      	beq.n	800147a <__aeabi_ddiv+0x512>
 8001478:	e65c      	b.n	8001134 <__aeabi_ddiv+0x1cc>
 800147a:	42ae      	cmp	r6, r5
 800147c:	d800      	bhi.n	8001480 <__aeabi_ddiv+0x518>
 800147e:	e659      	b.n	8001134 <__aeabi_ddiv+0x1cc>
 8001480:	2302      	movs	r3, #2
 8001482:	425b      	negs	r3, r3
 8001484:	469c      	mov	ip, r3
 8001486:	9b00      	ldr	r3, [sp, #0]
 8001488:	44e0      	add	r8, ip
 800148a:	469c      	mov	ip, r3
 800148c:	4465      	add	r5, ip
 800148e:	429d      	cmp	r5, r3
 8001490:	419b      	sbcs	r3, r3
 8001492:	425b      	negs	r3, r3
 8001494:	191b      	adds	r3, r3, r4
 8001496:	18c0      	adds	r0, r0, r3
 8001498:	e64d      	b.n	8001136 <__aeabi_ddiv+0x1ce>
 800149a:	428a      	cmp	r2, r1
 800149c:	d800      	bhi.n	80014a0 <__aeabi_ddiv+0x538>
 800149e:	e60e      	b.n	80010be <__aeabi_ddiv+0x156>
 80014a0:	1e83      	subs	r3, r0, #2
 80014a2:	1909      	adds	r1, r1, r4
 80014a4:	e60b      	b.n	80010be <__aeabi_ddiv+0x156>
 80014a6:	428a      	cmp	r2, r1
 80014a8:	d800      	bhi.n	80014ac <__aeabi_ddiv+0x544>
 80014aa:	e5f4      	b.n	8001096 <__aeabi_ddiv+0x12e>
 80014ac:	1e83      	subs	r3, r0, #2
 80014ae:	4698      	mov	r8, r3
 80014b0:	1909      	adds	r1, r1, r4
 80014b2:	e5f0      	b.n	8001096 <__aeabi_ddiv+0x12e>
 80014b4:	4925      	ldr	r1, [pc, #148]	; (800154c <__aeabi_ddiv+0x5e4>)
 80014b6:	0028      	movs	r0, r5
 80014b8:	4459      	add	r1, fp
 80014ba:	408d      	lsls	r5, r1
 80014bc:	4642      	mov	r2, r8
 80014be:	408a      	lsls	r2, r1
 80014c0:	1e69      	subs	r1, r5, #1
 80014c2:	418d      	sbcs	r5, r1
 80014c4:	4641      	mov	r1, r8
 80014c6:	40d8      	lsrs	r0, r3
 80014c8:	40d9      	lsrs	r1, r3
 80014ca:	4302      	orrs	r2, r0
 80014cc:	432a      	orrs	r2, r5
 80014ce:	000b      	movs	r3, r1
 80014d0:	0751      	lsls	r1, r2, #29
 80014d2:	d100      	bne.n	80014d6 <__aeabi_ddiv+0x56e>
 80014d4:	e751      	b.n	800137a <__aeabi_ddiv+0x412>
 80014d6:	210f      	movs	r1, #15
 80014d8:	4011      	ands	r1, r2
 80014da:	2904      	cmp	r1, #4
 80014dc:	d000      	beq.n	80014e0 <__aeabi_ddiv+0x578>
 80014de:	e746      	b.n	800136e <__aeabi_ddiv+0x406>
 80014e0:	e74b      	b.n	800137a <__aeabi_ddiv+0x412>
 80014e2:	0005      	movs	r5, r0
 80014e4:	428e      	cmp	r6, r1
 80014e6:	d000      	beq.n	80014ea <__aeabi_ddiv+0x582>
 80014e8:	e66a      	b.n	80011c0 <__aeabi_ddiv+0x258>
 80014ea:	9a00      	ldr	r2, [sp, #0]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d000      	beq.n	80014f2 <__aeabi_ddiv+0x58a>
 80014f0:	e666      	b.n	80011c0 <__aeabi_ddiv+0x258>
 80014f2:	e667      	b.n	80011c4 <__aeabi_ddiv+0x25c>
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <__aeabi_ddiv+0x5e8>)
 80014f6:	445a      	add	r2, fp
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	dc00      	bgt.n	80014fe <__aeabi_ddiv+0x596>
 80014fc:	e710      	b.n	8001320 <__aeabi_ddiv+0x3b8>
 80014fe:	2301      	movs	r3, #1
 8001500:	2500      	movs	r5, #0
 8001502:	4498      	add	r8, r3
 8001504:	e667      	b.n	80011d6 <__aeabi_ddiv+0x26e>
 8001506:	075d      	lsls	r5, r3, #29
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	0b1c      	lsrs	r4, r3, #12
 800150c:	08d2      	lsrs	r2, r2, #3
 800150e:	2300      	movs	r3, #0
 8001510:	4315      	orrs	r5, r2
 8001512:	e580      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001514:	9800      	ldr	r0, [sp, #0]
 8001516:	3d02      	subs	r5, #2
 8001518:	0042      	lsls	r2, r0, #1
 800151a:	4282      	cmp	r2, r0
 800151c:	41bf      	sbcs	r7, r7
 800151e:	427f      	negs	r7, r7
 8001520:	193c      	adds	r4, r7, r4
 8001522:	1936      	adds	r6, r6, r4
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	e7dd      	b.n	80014e4 <__aeabi_ddiv+0x57c>
 8001528:	2480      	movs	r4, #128	; 0x80
 800152a:	4643      	mov	r3, r8
 800152c:	0324      	lsls	r4, r4, #12
 800152e:	431c      	orrs	r4, r3
 8001530:	0324      	lsls	r4, r4, #12
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__aeabi_ddiv+0x5dc>)
 8001534:	0b24      	lsrs	r4, r4, #12
 8001536:	e56e      	b.n	8001016 <__aeabi_ddiv+0xae>
 8001538:	9a00      	ldr	r2, [sp, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d3ea      	bcc.n	8001514 <__aeabi_ddiv+0x5ac>
 800153e:	0005      	movs	r5, r0
 8001540:	e7d3      	b.n	80014ea <__aeabi_ddiv+0x582>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff
 8001548:	0000043e 	.word	0x0000043e
 800154c:	0000041e 	.word	0x0000041e
 8001550:	000003ff 	.word	0x000003ff

08001554 <__eqdf2>:
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	464e      	mov	r6, r9
 8001558:	4645      	mov	r5, r8
 800155a:	46de      	mov	lr, fp
 800155c:	4657      	mov	r7, sl
 800155e:	4690      	mov	r8, r2
 8001560:	b5e0      	push	{r5, r6, r7, lr}
 8001562:	0017      	movs	r7, r2
 8001564:	031a      	lsls	r2, r3, #12
 8001566:	0b12      	lsrs	r2, r2, #12
 8001568:	0005      	movs	r5, r0
 800156a:	4684      	mov	ip, r0
 800156c:	4819      	ldr	r0, [pc, #100]	; (80015d4 <__eqdf2+0x80>)
 800156e:	030e      	lsls	r6, r1, #12
 8001570:	004c      	lsls	r4, r1, #1
 8001572:	4691      	mov	r9, r2
 8001574:	005a      	lsls	r2, r3, #1
 8001576:	0fdb      	lsrs	r3, r3, #31
 8001578:	469b      	mov	fp, r3
 800157a:	0b36      	lsrs	r6, r6, #12
 800157c:	0d64      	lsrs	r4, r4, #21
 800157e:	0fc9      	lsrs	r1, r1, #31
 8001580:	0d52      	lsrs	r2, r2, #21
 8001582:	4284      	cmp	r4, r0
 8001584:	d019      	beq.n	80015ba <__eqdf2+0x66>
 8001586:	4282      	cmp	r2, r0
 8001588:	d010      	beq.n	80015ac <__eqdf2+0x58>
 800158a:	2001      	movs	r0, #1
 800158c:	4294      	cmp	r4, r2
 800158e:	d10e      	bne.n	80015ae <__eqdf2+0x5a>
 8001590:	454e      	cmp	r6, r9
 8001592:	d10c      	bne.n	80015ae <__eqdf2+0x5a>
 8001594:	2001      	movs	r0, #1
 8001596:	45c4      	cmp	ip, r8
 8001598:	d109      	bne.n	80015ae <__eqdf2+0x5a>
 800159a:	4559      	cmp	r1, fp
 800159c:	d017      	beq.n	80015ce <__eqdf2+0x7a>
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d105      	bne.n	80015ae <__eqdf2+0x5a>
 80015a2:	0030      	movs	r0, r6
 80015a4:	4328      	orrs	r0, r5
 80015a6:	1e43      	subs	r3, r0, #1
 80015a8:	4198      	sbcs	r0, r3
 80015aa:	e000      	b.n	80015ae <__eqdf2+0x5a>
 80015ac:	2001      	movs	r0, #1
 80015ae:	bcf0      	pop	{r4, r5, r6, r7}
 80015b0:	46bb      	mov	fp, r7
 80015b2:	46b2      	mov	sl, r6
 80015b4:	46a9      	mov	r9, r5
 80015b6:	46a0      	mov	r8, r4
 80015b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ba:	0033      	movs	r3, r6
 80015bc:	2001      	movs	r0, #1
 80015be:	432b      	orrs	r3, r5
 80015c0:	d1f5      	bne.n	80015ae <__eqdf2+0x5a>
 80015c2:	42a2      	cmp	r2, r4
 80015c4:	d1f3      	bne.n	80015ae <__eqdf2+0x5a>
 80015c6:	464b      	mov	r3, r9
 80015c8:	433b      	orrs	r3, r7
 80015ca:	d1f0      	bne.n	80015ae <__eqdf2+0x5a>
 80015cc:	e7e2      	b.n	8001594 <__eqdf2+0x40>
 80015ce:	2000      	movs	r0, #0
 80015d0:	e7ed      	b.n	80015ae <__eqdf2+0x5a>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	000007ff 	.word	0x000007ff

080015d8 <__gedf2>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4647      	mov	r7, r8
 80015dc:	46ce      	mov	lr, r9
 80015de:	0004      	movs	r4, r0
 80015e0:	0018      	movs	r0, r3
 80015e2:	0016      	movs	r6, r2
 80015e4:	031b      	lsls	r3, r3, #12
 80015e6:	0b1b      	lsrs	r3, r3, #12
 80015e8:	4d2d      	ldr	r5, [pc, #180]	; (80016a0 <__gedf2+0xc8>)
 80015ea:	004a      	lsls	r2, r1, #1
 80015ec:	4699      	mov	r9, r3
 80015ee:	b580      	push	{r7, lr}
 80015f0:	0043      	lsls	r3, r0, #1
 80015f2:	030f      	lsls	r7, r1, #12
 80015f4:	46a4      	mov	ip, r4
 80015f6:	46b0      	mov	r8, r6
 80015f8:	0b3f      	lsrs	r7, r7, #12
 80015fa:	0d52      	lsrs	r2, r2, #21
 80015fc:	0fc9      	lsrs	r1, r1, #31
 80015fe:	0d5b      	lsrs	r3, r3, #21
 8001600:	0fc0      	lsrs	r0, r0, #31
 8001602:	42aa      	cmp	r2, r5
 8001604:	d021      	beq.n	800164a <__gedf2+0x72>
 8001606:	42ab      	cmp	r3, r5
 8001608:	d013      	beq.n	8001632 <__gedf2+0x5a>
 800160a:	2a00      	cmp	r2, #0
 800160c:	d122      	bne.n	8001654 <__gedf2+0x7c>
 800160e:	433c      	orrs	r4, r7
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <__gedf2+0x42>
 8001614:	464d      	mov	r5, r9
 8001616:	432e      	orrs	r6, r5
 8001618:	d022      	beq.n	8001660 <__gedf2+0x88>
 800161a:	2c00      	cmp	r4, #0
 800161c:	d010      	beq.n	8001640 <__gedf2+0x68>
 800161e:	4281      	cmp	r1, r0
 8001620:	d022      	beq.n	8001668 <__gedf2+0x90>
 8001622:	2002      	movs	r0, #2
 8001624:	3901      	subs	r1, #1
 8001626:	4008      	ands	r0, r1
 8001628:	3801      	subs	r0, #1
 800162a:	bcc0      	pop	{r6, r7}
 800162c:	46b9      	mov	r9, r7
 800162e:	46b0      	mov	r8, r6
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001632:	464d      	mov	r5, r9
 8001634:	432e      	orrs	r6, r5
 8001636:	d129      	bne.n	800168c <__gedf2+0xb4>
 8001638:	2a00      	cmp	r2, #0
 800163a:	d1f0      	bne.n	800161e <__gedf2+0x46>
 800163c:	433c      	orrs	r4, r7
 800163e:	d1ee      	bne.n	800161e <__gedf2+0x46>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1f2      	bne.n	800162a <__gedf2+0x52>
 8001644:	2001      	movs	r0, #1
 8001646:	4240      	negs	r0, r0
 8001648:	e7ef      	b.n	800162a <__gedf2+0x52>
 800164a:	003d      	movs	r5, r7
 800164c:	4325      	orrs	r5, r4
 800164e:	d11d      	bne.n	800168c <__gedf2+0xb4>
 8001650:	4293      	cmp	r3, r2
 8001652:	d0ee      	beq.n	8001632 <__gedf2+0x5a>
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e2      	bne.n	800161e <__gedf2+0x46>
 8001658:	464c      	mov	r4, r9
 800165a:	4326      	orrs	r6, r4
 800165c:	d1df      	bne.n	800161e <__gedf2+0x46>
 800165e:	e7e0      	b.n	8001622 <__gedf2+0x4a>
 8001660:	2000      	movs	r0, #0
 8001662:	2c00      	cmp	r4, #0
 8001664:	d0e1      	beq.n	800162a <__gedf2+0x52>
 8001666:	e7dc      	b.n	8001622 <__gedf2+0x4a>
 8001668:	429a      	cmp	r2, r3
 800166a:	dc0a      	bgt.n	8001682 <__gedf2+0xaa>
 800166c:	dbe8      	blt.n	8001640 <__gedf2+0x68>
 800166e:	454f      	cmp	r7, r9
 8001670:	d8d7      	bhi.n	8001622 <__gedf2+0x4a>
 8001672:	d00e      	beq.n	8001692 <__gedf2+0xba>
 8001674:	2000      	movs	r0, #0
 8001676:	454f      	cmp	r7, r9
 8001678:	d2d7      	bcs.n	800162a <__gedf2+0x52>
 800167a:	2900      	cmp	r1, #0
 800167c:	d0e2      	beq.n	8001644 <__gedf2+0x6c>
 800167e:	0008      	movs	r0, r1
 8001680:	e7d3      	b.n	800162a <__gedf2+0x52>
 8001682:	4243      	negs	r3, r0
 8001684:	4158      	adcs	r0, r3
 8001686:	0040      	lsls	r0, r0, #1
 8001688:	3801      	subs	r0, #1
 800168a:	e7ce      	b.n	800162a <__gedf2+0x52>
 800168c:	2002      	movs	r0, #2
 800168e:	4240      	negs	r0, r0
 8001690:	e7cb      	b.n	800162a <__gedf2+0x52>
 8001692:	45c4      	cmp	ip, r8
 8001694:	d8c5      	bhi.n	8001622 <__gedf2+0x4a>
 8001696:	2000      	movs	r0, #0
 8001698:	45c4      	cmp	ip, r8
 800169a:	d2c6      	bcs.n	800162a <__gedf2+0x52>
 800169c:	e7ed      	b.n	800167a <__gedf2+0xa2>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	000007ff 	.word	0x000007ff

080016a4 <__ledf2>:
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	4647      	mov	r7, r8
 80016a8:	46ce      	mov	lr, r9
 80016aa:	0004      	movs	r4, r0
 80016ac:	0018      	movs	r0, r3
 80016ae:	0016      	movs	r6, r2
 80016b0:	031b      	lsls	r3, r3, #12
 80016b2:	0b1b      	lsrs	r3, r3, #12
 80016b4:	4d2c      	ldr	r5, [pc, #176]	; (8001768 <__ledf2+0xc4>)
 80016b6:	004a      	lsls	r2, r1, #1
 80016b8:	4699      	mov	r9, r3
 80016ba:	b580      	push	{r7, lr}
 80016bc:	0043      	lsls	r3, r0, #1
 80016be:	030f      	lsls	r7, r1, #12
 80016c0:	46a4      	mov	ip, r4
 80016c2:	46b0      	mov	r8, r6
 80016c4:	0b3f      	lsrs	r7, r7, #12
 80016c6:	0d52      	lsrs	r2, r2, #21
 80016c8:	0fc9      	lsrs	r1, r1, #31
 80016ca:	0d5b      	lsrs	r3, r3, #21
 80016cc:	0fc0      	lsrs	r0, r0, #31
 80016ce:	42aa      	cmp	r2, r5
 80016d0:	d00d      	beq.n	80016ee <__ledf2+0x4a>
 80016d2:	42ab      	cmp	r3, r5
 80016d4:	d010      	beq.n	80016f8 <__ledf2+0x54>
 80016d6:	2a00      	cmp	r2, #0
 80016d8:	d127      	bne.n	800172a <__ledf2+0x86>
 80016da:	433c      	orrs	r4, r7
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <__ledf2+0x60>
 80016e0:	464d      	mov	r5, r9
 80016e2:	432e      	orrs	r6, r5
 80016e4:	d10e      	bne.n	8001704 <__ledf2+0x60>
 80016e6:	2000      	movs	r0, #0
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d015      	beq.n	8001718 <__ledf2+0x74>
 80016ec:	e00e      	b.n	800170c <__ledf2+0x68>
 80016ee:	003d      	movs	r5, r7
 80016f0:	4325      	orrs	r5, r4
 80016f2:	d110      	bne.n	8001716 <__ledf2+0x72>
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d118      	bne.n	800172a <__ledf2+0x86>
 80016f8:	464d      	mov	r5, r9
 80016fa:	432e      	orrs	r6, r5
 80016fc:	d10b      	bne.n	8001716 <__ledf2+0x72>
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d102      	bne.n	8001708 <__ledf2+0x64>
 8001702:	433c      	orrs	r4, r7
 8001704:	2c00      	cmp	r4, #0
 8001706:	d00b      	beq.n	8001720 <__ledf2+0x7c>
 8001708:	4281      	cmp	r1, r0
 800170a:	d014      	beq.n	8001736 <__ledf2+0x92>
 800170c:	2002      	movs	r0, #2
 800170e:	3901      	subs	r1, #1
 8001710:	4008      	ands	r0, r1
 8001712:	3801      	subs	r0, #1
 8001714:	e000      	b.n	8001718 <__ledf2+0x74>
 8001716:	2002      	movs	r0, #2
 8001718:	bcc0      	pop	{r6, r7}
 800171a:	46b9      	mov	r9, r7
 800171c:	46b0      	mov	r8, r6
 800171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001720:	2800      	cmp	r0, #0
 8001722:	d1f9      	bne.n	8001718 <__ledf2+0x74>
 8001724:	2001      	movs	r0, #1
 8001726:	4240      	negs	r0, r0
 8001728:	e7f6      	b.n	8001718 <__ledf2+0x74>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ec      	bne.n	8001708 <__ledf2+0x64>
 800172e:	464c      	mov	r4, r9
 8001730:	4326      	orrs	r6, r4
 8001732:	d1e9      	bne.n	8001708 <__ledf2+0x64>
 8001734:	e7ea      	b.n	800170c <__ledf2+0x68>
 8001736:	429a      	cmp	r2, r3
 8001738:	dd04      	ble.n	8001744 <__ledf2+0xa0>
 800173a:	4243      	negs	r3, r0
 800173c:	4158      	adcs	r0, r3
 800173e:	0040      	lsls	r0, r0, #1
 8001740:	3801      	subs	r0, #1
 8001742:	e7e9      	b.n	8001718 <__ledf2+0x74>
 8001744:	429a      	cmp	r2, r3
 8001746:	dbeb      	blt.n	8001720 <__ledf2+0x7c>
 8001748:	454f      	cmp	r7, r9
 800174a:	d8df      	bhi.n	800170c <__ledf2+0x68>
 800174c:	d006      	beq.n	800175c <__ledf2+0xb8>
 800174e:	2000      	movs	r0, #0
 8001750:	454f      	cmp	r7, r9
 8001752:	d2e1      	bcs.n	8001718 <__ledf2+0x74>
 8001754:	2900      	cmp	r1, #0
 8001756:	d0e5      	beq.n	8001724 <__ledf2+0x80>
 8001758:	0008      	movs	r0, r1
 800175a:	e7dd      	b.n	8001718 <__ledf2+0x74>
 800175c:	45c4      	cmp	ip, r8
 800175e:	d8d5      	bhi.n	800170c <__ledf2+0x68>
 8001760:	2000      	movs	r0, #0
 8001762:	45c4      	cmp	ip, r8
 8001764:	d2d8      	bcs.n	8001718 <__ledf2+0x74>
 8001766:	e7f5      	b.n	8001754 <__ledf2+0xb0>
 8001768:	000007ff 	.word	0x000007ff

0800176c <__aeabi_dmul>:
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	4657      	mov	r7, sl
 8001770:	464e      	mov	r6, r9
 8001772:	4645      	mov	r5, r8
 8001774:	46de      	mov	lr, fp
 8001776:	b5e0      	push	{r5, r6, r7, lr}
 8001778:	4698      	mov	r8, r3
 800177a:	030c      	lsls	r4, r1, #12
 800177c:	004b      	lsls	r3, r1, #1
 800177e:	0006      	movs	r6, r0
 8001780:	4692      	mov	sl, r2
 8001782:	b087      	sub	sp, #28
 8001784:	0b24      	lsrs	r4, r4, #12
 8001786:	0d5b      	lsrs	r3, r3, #21
 8001788:	0fcf      	lsrs	r7, r1, #31
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_dmul+0x24>
 800178e:	e15c      	b.n	8001a4a <__aeabi_dmul+0x2de>
 8001790:	4ad9      	ldr	r2, [pc, #868]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d100      	bne.n	8001798 <__aeabi_dmul+0x2c>
 8001796:	e175      	b.n	8001a84 <__aeabi_dmul+0x318>
 8001798:	0f42      	lsrs	r2, r0, #29
 800179a:	00e4      	lsls	r4, r4, #3
 800179c:	4314      	orrs	r4, r2
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	0412      	lsls	r2, r2, #16
 80017a2:	4314      	orrs	r4, r2
 80017a4:	4ad5      	ldr	r2, [pc, #852]	; (8001afc <__aeabi_dmul+0x390>)
 80017a6:	00c5      	lsls	r5, r0, #3
 80017a8:	4694      	mov	ip, r2
 80017aa:	4463      	add	r3, ip
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2300      	movs	r3, #0
 80017b0:	4699      	mov	r9, r3
 80017b2:	469b      	mov	fp, r3
 80017b4:	4643      	mov	r3, r8
 80017b6:	4642      	mov	r2, r8
 80017b8:	031e      	lsls	r6, r3, #12
 80017ba:	0fd2      	lsrs	r2, r2, #31
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4650      	mov	r0, sl
 80017c0:	4690      	mov	r8, r2
 80017c2:	0b36      	lsrs	r6, r6, #12
 80017c4:	0d5b      	lsrs	r3, r3, #21
 80017c6:	d100      	bne.n	80017ca <__aeabi_dmul+0x5e>
 80017c8:	e120      	b.n	8001a0c <__aeabi_dmul+0x2a0>
 80017ca:	4acb      	ldr	r2, [pc, #812]	; (8001af8 <__aeabi_dmul+0x38c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0x66>
 80017d0:	e162      	b.n	8001a98 <__aeabi_dmul+0x32c>
 80017d2:	49ca      	ldr	r1, [pc, #808]	; (8001afc <__aeabi_dmul+0x390>)
 80017d4:	0f42      	lsrs	r2, r0, #29
 80017d6:	468c      	mov	ip, r1
 80017d8:	9900      	ldr	r1, [sp, #0]
 80017da:	4463      	add	r3, ip
 80017dc:	00f6      	lsls	r6, r6, #3
 80017de:	468c      	mov	ip, r1
 80017e0:	4316      	orrs	r6, r2
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	449c      	add	ip, r3
 80017e6:	0412      	lsls	r2, r2, #16
 80017e8:	4663      	mov	r3, ip
 80017ea:	4316      	orrs	r6, r2
 80017ec:	00c2      	lsls	r2, r0, #3
 80017ee:	2000      	movs	r0, #0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	9900      	ldr	r1, [sp, #0]
 80017f4:	4643      	mov	r3, r8
 80017f6:	3101      	adds	r1, #1
 80017f8:	468c      	mov	ip, r1
 80017fa:	4649      	mov	r1, r9
 80017fc:	407b      	eors	r3, r7
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	290f      	cmp	r1, #15
 8001802:	d826      	bhi.n	8001852 <__aeabi_dmul+0xe6>
 8001804:	4bbe      	ldr	r3, [pc, #760]	; (8001b00 <__aeabi_dmul+0x394>)
 8001806:	0089      	lsls	r1, r1, #2
 8001808:	5859      	ldr	r1, [r3, r1]
 800180a:	468f      	mov	pc, r1
 800180c:	4643      	mov	r3, r8
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	0034      	movs	r4, r6
 8001812:	0015      	movs	r5, r2
 8001814:	4683      	mov	fp, r0
 8001816:	465b      	mov	r3, fp
 8001818:	2b02      	cmp	r3, #2
 800181a:	d016      	beq.n	800184a <__aeabi_dmul+0xde>
 800181c:	2b03      	cmp	r3, #3
 800181e:	d100      	bne.n	8001822 <__aeabi_dmul+0xb6>
 8001820:	e203      	b.n	8001c2a <__aeabi_dmul+0x4be>
 8001822:	2b01      	cmp	r3, #1
 8001824:	d000      	beq.n	8001828 <__aeabi_dmul+0xbc>
 8001826:	e0cd      	b.n	80019c4 <__aeabi_dmul+0x258>
 8001828:	2200      	movs	r2, #0
 800182a:	2400      	movs	r4, #0
 800182c:	2500      	movs	r5, #0
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	0512      	lsls	r2, r2, #20
 8001832:	4322      	orrs	r2, r4
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	431a      	orrs	r2, r3
 8001838:	0028      	movs	r0, r5
 800183a:	0011      	movs	r1, r2
 800183c:	b007      	add	sp, #28
 800183e:	bcf0      	pop	{r4, r5, r6, r7}
 8001840:	46bb      	mov	fp, r7
 8001842:	46b2      	mov	sl, r6
 8001844:	46a9      	mov	r9, r5
 8001846:	46a0      	mov	r8, r4
 8001848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184a:	2400      	movs	r4, #0
 800184c:	2500      	movs	r5, #0
 800184e:	4aaa      	ldr	r2, [pc, #680]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001850:	e7ed      	b.n	800182e <__aeabi_dmul+0xc2>
 8001852:	0c28      	lsrs	r0, r5, #16
 8001854:	042d      	lsls	r5, r5, #16
 8001856:	0c2d      	lsrs	r5, r5, #16
 8001858:	002b      	movs	r3, r5
 800185a:	0c11      	lsrs	r1, r2, #16
 800185c:	0412      	lsls	r2, r2, #16
 800185e:	0c12      	lsrs	r2, r2, #16
 8001860:	4353      	muls	r3, r2
 8001862:	4698      	mov	r8, r3
 8001864:	0013      	movs	r3, r2
 8001866:	002f      	movs	r7, r5
 8001868:	4343      	muls	r3, r0
 800186a:	4699      	mov	r9, r3
 800186c:	434f      	muls	r7, r1
 800186e:	444f      	add	r7, r9
 8001870:	46bb      	mov	fp, r7
 8001872:	4647      	mov	r7, r8
 8001874:	000b      	movs	r3, r1
 8001876:	0c3f      	lsrs	r7, r7, #16
 8001878:	46ba      	mov	sl, r7
 800187a:	4343      	muls	r3, r0
 800187c:	44da      	add	sl, fp
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	45d1      	cmp	r9, sl
 8001882:	d904      	bls.n	800188e <__aeabi_dmul+0x122>
 8001884:	2780      	movs	r7, #128	; 0x80
 8001886:	027f      	lsls	r7, r7, #9
 8001888:	46b9      	mov	r9, r7
 800188a:	444b      	add	r3, r9
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4653      	mov	r3, sl
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469b      	mov	fp, r3
 8001894:	4653      	mov	r3, sl
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	4643      	mov	r3, r8
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	4698      	mov	r8, r3
 80018a0:	003b      	movs	r3, r7
 80018a2:	4443      	add	r3, r8
 80018a4:	9304      	str	r3, [sp, #16]
 80018a6:	0c33      	lsrs	r3, r6, #16
 80018a8:	0436      	lsls	r6, r6, #16
 80018aa:	0c36      	lsrs	r6, r6, #16
 80018ac:	4698      	mov	r8, r3
 80018ae:	0033      	movs	r3, r6
 80018b0:	4343      	muls	r3, r0
 80018b2:	4699      	mov	r9, r3
 80018b4:	4643      	mov	r3, r8
 80018b6:	4343      	muls	r3, r0
 80018b8:	002f      	movs	r7, r5
 80018ba:	469a      	mov	sl, r3
 80018bc:	4643      	mov	r3, r8
 80018be:	4377      	muls	r7, r6
 80018c0:	435d      	muls	r5, r3
 80018c2:	0c38      	lsrs	r0, r7, #16
 80018c4:	444d      	add	r5, r9
 80018c6:	1945      	adds	r5, r0, r5
 80018c8:	45a9      	cmp	r9, r5
 80018ca:	d903      	bls.n	80018d4 <__aeabi_dmul+0x168>
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	4699      	mov	r9, r3
 80018d2:	44ca      	add	sl, r9
 80018d4:	043f      	lsls	r7, r7, #16
 80018d6:	0c28      	lsrs	r0, r5, #16
 80018d8:	0c3f      	lsrs	r7, r7, #16
 80018da:	042d      	lsls	r5, r5, #16
 80018dc:	19ed      	adds	r5, r5, r7
 80018de:	0c27      	lsrs	r7, r4, #16
 80018e0:	0424      	lsls	r4, r4, #16
 80018e2:	0c24      	lsrs	r4, r4, #16
 80018e4:	0003      	movs	r3, r0
 80018e6:	0020      	movs	r0, r4
 80018e8:	4350      	muls	r0, r2
 80018ea:	437a      	muls	r2, r7
 80018ec:	4691      	mov	r9, r2
 80018ee:	003a      	movs	r2, r7
 80018f0:	4453      	add	r3, sl
 80018f2:	9305      	str	r3, [sp, #20]
 80018f4:	0c03      	lsrs	r3, r0, #16
 80018f6:	469a      	mov	sl, r3
 80018f8:	434a      	muls	r2, r1
 80018fa:	4361      	muls	r1, r4
 80018fc:	4449      	add	r1, r9
 80018fe:	4451      	add	r1, sl
 8001900:	44ab      	add	fp, r5
 8001902:	4589      	cmp	r9, r1
 8001904:	d903      	bls.n	800190e <__aeabi_dmul+0x1a2>
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4699      	mov	r9, r3
 800190c:	444a      	add	r2, r9
 800190e:	0400      	lsls	r0, r0, #16
 8001910:	0c0b      	lsrs	r3, r1, #16
 8001912:	0c00      	lsrs	r0, r0, #16
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	1809      	adds	r1, r1, r0
 8001918:	0020      	movs	r0, r4
 800191a:	4699      	mov	r9, r3
 800191c:	4643      	mov	r3, r8
 800191e:	4370      	muls	r0, r6
 8001920:	435c      	muls	r4, r3
 8001922:	437e      	muls	r6, r7
 8001924:	435f      	muls	r7, r3
 8001926:	0c03      	lsrs	r3, r0, #16
 8001928:	4698      	mov	r8, r3
 800192a:	19a4      	adds	r4, r4, r6
 800192c:	4444      	add	r4, r8
 800192e:	444a      	add	r2, r9
 8001930:	9703      	str	r7, [sp, #12]
 8001932:	42a6      	cmp	r6, r4
 8001934:	d904      	bls.n	8001940 <__aeabi_dmul+0x1d4>
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	4698      	mov	r8, r3
 800193c:	4447      	add	r7, r8
 800193e:	9703      	str	r7, [sp, #12]
 8001940:	0423      	lsls	r3, r4, #16
 8001942:	9e02      	ldr	r6, [sp, #8]
 8001944:	469a      	mov	sl, r3
 8001946:	9b05      	ldr	r3, [sp, #20]
 8001948:	445e      	add	r6, fp
 800194a:	4698      	mov	r8, r3
 800194c:	42ae      	cmp	r6, r5
 800194e:	41ad      	sbcs	r5, r5
 8001950:	1876      	adds	r6, r6, r1
 8001952:	428e      	cmp	r6, r1
 8001954:	4189      	sbcs	r1, r1
 8001956:	0400      	lsls	r0, r0, #16
 8001958:	0c00      	lsrs	r0, r0, #16
 800195a:	4450      	add	r0, sl
 800195c:	4440      	add	r0, r8
 800195e:	426d      	negs	r5, r5
 8001960:	1947      	adds	r7, r0, r5
 8001962:	46b8      	mov	r8, r7
 8001964:	4693      	mov	fp, r2
 8001966:	4249      	negs	r1, r1
 8001968:	4689      	mov	r9, r1
 800196a:	44c3      	add	fp, r8
 800196c:	44d9      	add	r9, fp
 800196e:	4298      	cmp	r0, r3
 8001970:	4180      	sbcs	r0, r0
 8001972:	45a8      	cmp	r8, r5
 8001974:	41ad      	sbcs	r5, r5
 8001976:	4593      	cmp	fp, r2
 8001978:	4192      	sbcs	r2, r2
 800197a:	4589      	cmp	r9, r1
 800197c:	4189      	sbcs	r1, r1
 800197e:	426d      	negs	r5, r5
 8001980:	4240      	negs	r0, r0
 8001982:	4328      	orrs	r0, r5
 8001984:	0c24      	lsrs	r4, r4, #16
 8001986:	4252      	negs	r2, r2
 8001988:	4249      	negs	r1, r1
 800198a:	430a      	orrs	r2, r1
 800198c:	9b03      	ldr	r3, [sp, #12]
 800198e:	1900      	adds	r0, r0, r4
 8001990:	1880      	adds	r0, r0, r2
 8001992:	18c7      	adds	r7, r0, r3
 8001994:	464b      	mov	r3, r9
 8001996:	0ddc      	lsrs	r4, r3, #23
 8001998:	9b04      	ldr	r3, [sp, #16]
 800199a:	0275      	lsls	r5, r6, #9
 800199c:	431d      	orrs	r5, r3
 800199e:	1e6a      	subs	r2, r5, #1
 80019a0:	4195      	sbcs	r5, r2
 80019a2:	464b      	mov	r3, r9
 80019a4:	0df6      	lsrs	r6, r6, #23
 80019a6:	027f      	lsls	r7, r7, #9
 80019a8:	4335      	orrs	r5, r6
 80019aa:	025a      	lsls	r2, r3, #9
 80019ac:	433c      	orrs	r4, r7
 80019ae:	4315      	orrs	r5, r2
 80019b0:	01fb      	lsls	r3, r7, #7
 80019b2:	d400      	bmi.n	80019b6 <__aeabi_dmul+0x24a>
 80019b4:	e11c      	b.n	8001bf0 <__aeabi_dmul+0x484>
 80019b6:	2101      	movs	r1, #1
 80019b8:	086a      	lsrs	r2, r5, #1
 80019ba:	400d      	ands	r5, r1
 80019bc:	4315      	orrs	r5, r2
 80019be:	07e2      	lsls	r2, r4, #31
 80019c0:	4315      	orrs	r5, r2
 80019c2:	0864      	lsrs	r4, r4, #1
 80019c4:	494f      	ldr	r1, [pc, #316]	; (8001b04 <__aeabi_dmul+0x398>)
 80019c6:	4461      	add	r1, ip
 80019c8:	2900      	cmp	r1, #0
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_dmul+0x262>
 80019cc:	e0b0      	b.n	8001b30 <__aeabi_dmul+0x3c4>
 80019ce:	076b      	lsls	r3, r5, #29
 80019d0:	d009      	beq.n	80019e6 <__aeabi_dmul+0x27a>
 80019d2:	220f      	movs	r2, #15
 80019d4:	402a      	ands	r2, r5
 80019d6:	2a04      	cmp	r2, #4
 80019d8:	d005      	beq.n	80019e6 <__aeabi_dmul+0x27a>
 80019da:	1d2a      	adds	r2, r5, #4
 80019dc:	42aa      	cmp	r2, r5
 80019de:	41ad      	sbcs	r5, r5
 80019e0:	426d      	negs	r5, r5
 80019e2:	1964      	adds	r4, r4, r5
 80019e4:	0015      	movs	r5, r2
 80019e6:	01e3      	lsls	r3, r4, #7
 80019e8:	d504      	bpl.n	80019f4 <__aeabi_dmul+0x288>
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <__aeabi_dmul+0x39c>)
 80019ee:	00c9      	lsls	r1, r1, #3
 80019f0:	4014      	ands	r4, r2
 80019f2:	4461      	add	r1, ip
 80019f4:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <__aeabi_dmul+0x3a0>)
 80019f6:	4291      	cmp	r1, r2
 80019f8:	dd00      	ble.n	80019fc <__aeabi_dmul+0x290>
 80019fa:	e726      	b.n	800184a <__aeabi_dmul+0xde>
 80019fc:	0762      	lsls	r2, r4, #29
 80019fe:	08ed      	lsrs	r5, r5, #3
 8001a00:	0264      	lsls	r4, r4, #9
 8001a02:	0549      	lsls	r1, r1, #21
 8001a04:	4315      	orrs	r5, r2
 8001a06:	0b24      	lsrs	r4, r4, #12
 8001a08:	0d4a      	lsrs	r2, r1, #21
 8001a0a:	e710      	b.n	800182e <__aeabi_dmul+0xc2>
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	4332      	orrs	r2, r6
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dmul+0x2a8>
 8001a12:	e07f      	b.n	8001b14 <__aeabi_dmul+0x3a8>
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dmul+0x2ae>
 8001a18:	e0dc      	b.n	8001bd4 <__aeabi_dmul+0x468>
 8001a1a:	0030      	movs	r0, r6
 8001a1c:	f000 fd4e 	bl	80024bc <__clzsi2>
 8001a20:	0002      	movs	r2, r0
 8001a22:	3a0b      	subs	r2, #11
 8001a24:	231d      	movs	r3, #29
 8001a26:	0001      	movs	r1, r0
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	4652      	mov	r2, sl
 8001a2c:	3908      	subs	r1, #8
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	408e      	lsls	r6, r1
 8001a32:	4316      	orrs	r6, r2
 8001a34:	4652      	mov	r2, sl
 8001a36:	408a      	lsls	r2, r1
 8001a38:	9b00      	ldr	r3, [sp, #0]
 8001a3a:	4935      	ldr	r1, [pc, #212]	; (8001b10 <__aeabi_dmul+0x3a4>)
 8001a3c:	1a18      	subs	r0, r3, r0
 8001a3e:	0003      	movs	r3, r0
 8001a40:	468c      	mov	ip, r1
 8001a42:	4463      	add	r3, ip
 8001a44:	2000      	movs	r0, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	e6d3      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001a4a:	0025      	movs	r5, r4
 8001a4c:	4305      	orrs	r5, r0
 8001a4e:	d04a      	beq.n	8001ae6 <__aeabi_dmul+0x37a>
 8001a50:	2c00      	cmp	r4, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x2ea>
 8001a54:	e0b0      	b.n	8001bb8 <__aeabi_dmul+0x44c>
 8001a56:	0020      	movs	r0, r4
 8001a58:	f000 fd30 	bl	80024bc <__clzsi2>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	0002      	movs	r2, r0
 8001a60:	390b      	subs	r1, #11
 8001a62:	231d      	movs	r3, #29
 8001a64:	0010      	movs	r0, r2
 8001a66:	1a5b      	subs	r3, r3, r1
 8001a68:	0031      	movs	r1, r6
 8001a6a:	0035      	movs	r5, r6
 8001a6c:	3808      	subs	r0, #8
 8001a6e:	4084      	lsls	r4, r0
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	4085      	lsls	r5, r0
 8001a74:	430c      	orrs	r4, r1
 8001a76:	4826      	ldr	r0, [pc, #152]	; (8001b10 <__aeabi_dmul+0x3a4>)
 8001a78:	1a83      	subs	r3, r0, r2
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	469b      	mov	fp, r3
 8001a82:	e697      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001a84:	0005      	movs	r5, r0
 8001a86:	4325      	orrs	r5, r4
 8001a88:	d126      	bne.n	8001ad8 <__aeabi_dmul+0x36c>
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	2400      	movs	r4, #0
 8001a92:	4691      	mov	r9, r2
 8001a94:	469b      	mov	fp, r3
 8001a96:	e68d      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001a98:	4652      	mov	r2, sl
 8001a9a:	9b00      	ldr	r3, [sp, #0]
 8001a9c:	4332      	orrs	r2, r6
 8001a9e:	d110      	bne.n	8001ac2 <__aeabi_dmul+0x356>
 8001aa0:	4915      	ldr	r1, [pc, #84]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	468c      	mov	ip, r1
 8001aa6:	4463      	add	r3, ip
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2302      	movs	r3, #2
 8001aae:	4319      	orrs	r1, r3
 8001ab0:	4689      	mov	r9, r1
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	e69d      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001ab6:	465b      	mov	r3, fp
 8001ab8:	9701      	str	r7, [sp, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dmul+0x354>
 8001abe:	e6ad      	b.n	800181c <__aeabi_dmul+0xb0>
 8001ac0:	e6c3      	b.n	800184a <__aeabi_dmul+0xde>
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <__aeabi_dmul+0x38c>)
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	4694      	mov	ip, r2
 8001ac8:	4463      	add	r3, ip
 8001aca:	464a      	mov	r2, r9
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2303      	movs	r3, #3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	4691      	mov	r9, r2
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	e68c      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001ad8:	220c      	movs	r2, #12
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2303      	movs	r3, #3
 8001ade:	0005      	movs	r5, r0
 8001ae0:	4691      	mov	r9, r2
 8001ae2:	469b      	mov	fp, r3
 8001ae4:	e666      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	4699      	mov	r9, r3
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	2400      	movs	r4, #0
 8001af2:	469b      	mov	fp, r3
 8001af4:	e65e      	b.n	80017b4 <__aeabi_dmul+0x48>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	000007ff 	.word	0x000007ff
 8001afc:	fffffc01 	.word	0xfffffc01
 8001b00:	080079fc 	.word	0x080079fc
 8001b04:	000003ff 	.word	0x000003ff
 8001b08:	feffffff 	.word	0xfeffffff
 8001b0c:	000007fe 	.word	0x000007fe
 8001b10:	fffffc0d 	.word	0xfffffc0d
 8001b14:	4649      	mov	r1, r9
 8001b16:	2301      	movs	r3, #1
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	2001      	movs	r0, #1
 8001b20:	e667      	b.n	80017f2 <__aeabi_dmul+0x86>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2480      	movs	r4, #128	; 0x80
 8001b26:	2500      	movs	r5, #0
 8001b28:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	0324      	lsls	r4, r4, #12
 8001b2e:	e67e      	b.n	800182e <__aeabi_dmul+0xc2>
 8001b30:	2001      	movs	r0, #1
 8001b32:	1a40      	subs	r0, r0, r1
 8001b34:	2838      	cmp	r0, #56	; 0x38
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dmul+0x3ce>
 8001b38:	e676      	b.n	8001828 <__aeabi_dmul+0xbc>
 8001b3a:	281f      	cmp	r0, #31
 8001b3c:	dd5b      	ble.n	8001bf6 <__aeabi_dmul+0x48a>
 8001b3e:	221f      	movs	r2, #31
 8001b40:	0023      	movs	r3, r4
 8001b42:	4252      	negs	r2, r2
 8001b44:	1a51      	subs	r1, r2, r1
 8001b46:	40cb      	lsrs	r3, r1
 8001b48:	0019      	movs	r1, r3
 8001b4a:	2820      	cmp	r0, #32
 8001b4c:	d003      	beq.n	8001b56 <__aeabi_dmul+0x3ea>
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <__aeabi_dmul+0x4d0>)
 8001b50:	4462      	add	r2, ip
 8001b52:	4094      	lsls	r4, r2
 8001b54:	4325      	orrs	r5, r4
 8001b56:	1e6a      	subs	r2, r5, #1
 8001b58:	4195      	sbcs	r5, r2
 8001b5a:	002a      	movs	r2, r5
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	2107      	movs	r1, #7
 8001b60:	000d      	movs	r5, r1
 8001b62:	2400      	movs	r4, #0
 8001b64:	4015      	ands	r5, r2
 8001b66:	4211      	tst	r1, r2
 8001b68:	d05b      	beq.n	8001c22 <__aeabi_dmul+0x4b6>
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	4011      	ands	r1, r2
 8001b70:	2904      	cmp	r1, #4
 8001b72:	d053      	beq.n	8001c1c <__aeabi_dmul+0x4b0>
 8001b74:	1d11      	adds	r1, r2, #4
 8001b76:	4291      	cmp	r1, r2
 8001b78:	4192      	sbcs	r2, r2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	18a4      	adds	r4, r4, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	0223      	lsls	r3, r4, #8
 8001b82:	d54b      	bpl.n	8001c1c <__aeabi_dmul+0x4b0>
 8001b84:	2201      	movs	r2, #1
 8001b86:	2400      	movs	r4, #0
 8001b88:	2500      	movs	r5, #0
 8001b8a:	e650      	b.n	800182e <__aeabi_dmul+0xc2>
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	031b      	lsls	r3, r3, #12
 8001b90:	421c      	tst	r4, r3
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_dmul+0x43c>
 8001b94:	421e      	tst	r6, r3
 8001b96:	d107      	bne.n	8001ba8 <__aeabi_dmul+0x43c>
 8001b98:	4333      	orrs	r3, r6
 8001b9a:	031c      	lsls	r4, r3, #12
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	0b24      	lsrs	r4, r4, #12
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	e642      	b.n	800182e <__aeabi_dmul+0xc2>
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0312      	lsls	r2, r2, #12
 8001bac:	4314      	orrs	r4, r2
 8001bae:	0324      	lsls	r4, r4, #12
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	9701      	str	r7, [sp, #4]
 8001bb6:	e63a      	b.n	800182e <__aeabi_dmul+0xc2>
 8001bb8:	f000 fc80 	bl	80024bc <__clzsi2>
 8001bbc:	0001      	movs	r1, r0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	3115      	adds	r1, #21
 8001bc2:	3220      	adds	r2, #32
 8001bc4:	291c      	cmp	r1, #28
 8001bc6:	dc00      	bgt.n	8001bca <__aeabi_dmul+0x45e>
 8001bc8:	e74b      	b.n	8001a62 <__aeabi_dmul+0x2f6>
 8001bca:	0034      	movs	r4, r6
 8001bcc:	3808      	subs	r0, #8
 8001bce:	2500      	movs	r5, #0
 8001bd0:	4084      	lsls	r4, r0
 8001bd2:	e750      	b.n	8001a76 <__aeabi_dmul+0x30a>
 8001bd4:	f000 fc72 	bl	80024bc <__clzsi2>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	001a      	movs	r2, r3
 8001bdc:	3215      	adds	r2, #21
 8001bde:	3020      	adds	r0, #32
 8001be0:	2a1c      	cmp	r2, #28
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x47a>
 8001be4:	e71e      	b.n	8001a24 <__aeabi_dmul+0x2b8>
 8001be6:	4656      	mov	r6, sl
 8001be8:	3b08      	subs	r3, #8
 8001bea:	2200      	movs	r2, #0
 8001bec:	409e      	lsls	r6, r3
 8001bee:	e723      	b.n	8001a38 <__aeabi_dmul+0x2cc>
 8001bf0:	9b00      	ldr	r3, [sp, #0]
 8001bf2:	469c      	mov	ip, r3
 8001bf4:	e6e6      	b.n	80019c4 <__aeabi_dmul+0x258>
 8001bf6:	4912      	ldr	r1, [pc, #72]	; (8001c40 <__aeabi_dmul+0x4d4>)
 8001bf8:	0022      	movs	r2, r4
 8001bfa:	4461      	add	r1, ip
 8001bfc:	002e      	movs	r6, r5
 8001bfe:	408d      	lsls	r5, r1
 8001c00:	408a      	lsls	r2, r1
 8001c02:	40c6      	lsrs	r6, r0
 8001c04:	1e69      	subs	r1, r5, #1
 8001c06:	418d      	sbcs	r5, r1
 8001c08:	4332      	orrs	r2, r6
 8001c0a:	432a      	orrs	r2, r5
 8001c0c:	40c4      	lsrs	r4, r0
 8001c0e:	0753      	lsls	r3, r2, #29
 8001c10:	d0b6      	beq.n	8001b80 <__aeabi_dmul+0x414>
 8001c12:	210f      	movs	r1, #15
 8001c14:	4011      	ands	r1, r2
 8001c16:	2904      	cmp	r1, #4
 8001c18:	d1ac      	bne.n	8001b74 <__aeabi_dmul+0x408>
 8001c1a:	e7b1      	b.n	8001b80 <__aeabi_dmul+0x414>
 8001c1c:	0765      	lsls	r5, r4, #29
 8001c1e:	0264      	lsls	r4, r4, #9
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	08d2      	lsrs	r2, r2, #3
 8001c24:	4315      	orrs	r5, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	e601      	b.n	800182e <__aeabi_dmul+0xc2>
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0312      	lsls	r2, r2, #12
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	4a01      	ldr	r2, [pc, #4]	; (8001c38 <__aeabi_dmul+0x4cc>)
 8001c34:	0b24      	lsrs	r4, r4, #12
 8001c36:	e5fa      	b.n	800182e <__aeabi_dmul+0xc2>
 8001c38:	000007ff 	.word	0x000007ff
 8001c3c:	0000043e 	.word	0x0000043e
 8001c40:	0000041e 	.word	0x0000041e

08001c44 <__aeabi_dsub>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	4657      	mov	r7, sl
 8001c48:	464e      	mov	r6, r9
 8001c4a:	4645      	mov	r5, r8
 8001c4c:	46de      	mov	lr, fp
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	001e      	movs	r6, r3
 8001c52:	0017      	movs	r7, r2
 8001c54:	004a      	lsls	r2, r1, #1
 8001c56:	030b      	lsls	r3, r1, #12
 8001c58:	0d52      	lsrs	r2, r2, #21
 8001c5a:	0a5b      	lsrs	r3, r3, #9
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	0f42      	lsrs	r2, r0, #29
 8001c60:	431a      	orrs	r2, r3
 8001c62:	0fcd      	lsrs	r5, r1, #31
 8001c64:	4ccd      	ldr	r4, [pc, #820]	; (8001f9c <__aeabi_dsub+0x358>)
 8001c66:	0331      	lsls	r1, r6, #12
 8001c68:	00c3      	lsls	r3, r0, #3
 8001c6a:	4694      	mov	ip, r2
 8001c6c:	0070      	lsls	r0, r6, #1
 8001c6e:	0f7a      	lsrs	r2, r7, #29
 8001c70:	0a49      	lsrs	r1, r1, #9
 8001c72:	00ff      	lsls	r7, r7, #3
 8001c74:	469a      	mov	sl, r3
 8001c76:	46b9      	mov	r9, r7
 8001c78:	0d40      	lsrs	r0, r0, #21
 8001c7a:	0ff6      	lsrs	r6, r6, #31
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	42a0      	cmp	r0, r4
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x40>
 8001c82:	e0b1      	b.n	8001de8 <__aeabi_dsub+0x1a4>
 8001c84:	2201      	movs	r2, #1
 8001c86:	4056      	eors	r6, r2
 8001c88:	46b3      	mov	fp, r6
 8001c8a:	42b5      	cmp	r5, r6
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x4c>
 8001c8e:	e088      	b.n	8001da2 <__aeabi_dsub+0x15e>
 8001c90:	4642      	mov	r2, r8
 8001c92:	1a12      	subs	r2, r2, r0
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dsub+0x56>
 8001c98:	e0ae      	b.n	8001df8 <__aeabi_dsub+0x1b4>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x5c>
 8001c9e:	e0c1      	b.n	8001e24 <__aeabi_dsub+0x1e0>
 8001ca0:	48be      	ldr	r0, [pc, #760]	; (8001f9c <__aeabi_dsub+0x358>)
 8001ca2:	4580      	cmp	r8, r0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x64>
 8001ca6:	e151      	b.n	8001f4c <__aeabi_dsub+0x308>
 8001ca8:	2080      	movs	r0, #128	; 0x80
 8001caa:	0400      	lsls	r0, r0, #16
 8001cac:	4301      	orrs	r1, r0
 8001cae:	2a38      	cmp	r2, #56	; 0x38
 8001cb0:	dd00      	ble.n	8001cb4 <__aeabi_dsub+0x70>
 8001cb2:	e17b      	b.n	8001fac <__aeabi_dsub+0x368>
 8001cb4:	2a1f      	cmp	r2, #31
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x76>
 8001cb8:	e1ee      	b.n	8002098 <__aeabi_dsub+0x454>
 8001cba:	2020      	movs	r0, #32
 8001cbc:	003e      	movs	r6, r7
 8001cbe:	1a80      	subs	r0, r0, r2
 8001cc0:	000c      	movs	r4, r1
 8001cc2:	40d6      	lsrs	r6, r2
 8001cc4:	40d1      	lsrs	r1, r2
 8001cc6:	4087      	lsls	r7, r0
 8001cc8:	4662      	mov	r2, ip
 8001cca:	4084      	lsls	r4, r0
 8001ccc:	1a52      	subs	r2, r2, r1
 8001cce:	1e78      	subs	r0, r7, #1
 8001cd0:	4187      	sbcs	r7, r0
 8001cd2:	4694      	mov	ip, r2
 8001cd4:	4334      	orrs	r4, r6
 8001cd6:	4327      	orrs	r7, r4
 8001cd8:	1bdc      	subs	r4, r3, r7
 8001cda:	42a3      	cmp	r3, r4
 8001cdc:	419b      	sbcs	r3, r3
 8001cde:	4662      	mov	r2, ip
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	d400      	bmi.n	8001cee <__aeabi_dsub+0xaa>
 8001cec:	e118      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	0258      	lsls	r0, r3, #9
 8001cf2:	0a43      	lsrs	r3, r0, #9
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0xba>
 8001cfc:	e137      	b.n	8001f6e <__aeabi_dsub+0x32a>
 8001cfe:	4648      	mov	r0, r9
 8001d00:	f000 fbdc 	bl	80024bc <__clzsi2>
 8001d04:	0001      	movs	r1, r0
 8001d06:	3908      	subs	r1, #8
 8001d08:	2320      	movs	r3, #32
 8001d0a:	0022      	movs	r2, r4
 8001d0c:	4648      	mov	r0, r9
 8001d0e:	1a5b      	subs	r3, r3, r1
 8001d10:	40da      	lsrs	r2, r3
 8001d12:	4088      	lsls	r0, r1
 8001d14:	408c      	lsls	r4, r1
 8001d16:	4643      	mov	r3, r8
 8001d18:	4310      	orrs	r0, r2
 8001d1a:	4588      	cmp	r8, r1
 8001d1c:	dd00      	ble.n	8001d20 <__aeabi_dsub+0xdc>
 8001d1e:	e136      	b.n	8001f8e <__aeabi_dsub+0x34a>
 8001d20:	1ac9      	subs	r1, r1, r3
 8001d22:	1c4b      	adds	r3, r1, #1
 8001d24:	2b1f      	cmp	r3, #31
 8001d26:	dd00      	ble.n	8001d2a <__aeabi_dsub+0xe6>
 8001d28:	e0ea      	b.n	8001f00 <__aeabi_dsub+0x2bc>
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	0026      	movs	r6, r4
 8001d2e:	1ad2      	subs	r2, r2, r3
 8001d30:	0001      	movs	r1, r0
 8001d32:	4094      	lsls	r4, r2
 8001d34:	40de      	lsrs	r6, r3
 8001d36:	40d8      	lsrs	r0, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4091      	lsls	r1, r2
 8001d3c:	1e62      	subs	r2, r4, #1
 8001d3e:	4194      	sbcs	r4, r2
 8001d40:	4681      	mov	r9, r0
 8001d42:	4698      	mov	r8, r3
 8001d44:	4331      	orrs	r1, r6
 8001d46:	430c      	orrs	r4, r1
 8001d48:	0763      	lsls	r3, r4, #29
 8001d4a:	d009      	beq.n	8001d60 <__aeabi_dsub+0x11c>
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	4023      	ands	r3, r4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d005      	beq.n	8001d60 <__aeabi_dsub+0x11c>
 8001d54:	1d23      	adds	r3, r4, #4
 8001d56:	42a3      	cmp	r3, r4
 8001d58:	41a4      	sbcs	r4, r4
 8001d5a:	4264      	negs	r4, r4
 8001d5c:	44a1      	add	r9, r4
 8001d5e:	001c      	movs	r4, r3
 8001d60:	464b      	mov	r3, r9
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	d400      	bmi.n	8001d68 <__aeabi_dsub+0x124>
 8001d66:	e0de      	b.n	8001f26 <__aeabi_dsub+0x2e2>
 8001d68:	4641      	mov	r1, r8
 8001d6a:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <__aeabi_dsub+0x358>)
 8001d6c:	3101      	adds	r1, #1
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x130>
 8001d72:	e0e7      	b.n	8001f44 <__aeabi_dsub+0x300>
 8001d74:	464b      	mov	r3, r9
 8001d76:	488a      	ldr	r0, [pc, #552]	; (8001fa0 <__aeabi_dsub+0x35c>)
 8001d78:	08e4      	lsrs	r4, r4, #3
 8001d7a:	4003      	ands	r3, r0
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	0549      	lsls	r1, r1, #21
 8001d80:	075b      	lsls	r3, r3, #29
 8001d82:	0240      	lsls	r0, r0, #9
 8001d84:	4323      	orrs	r3, r4
 8001d86:	0d4a      	lsrs	r2, r1, #21
 8001d88:	0b04      	lsrs	r4, r0, #12
 8001d8a:	0512      	lsls	r2, r2, #20
 8001d8c:	07ed      	lsls	r5, r5, #31
 8001d8e:	4322      	orrs	r2, r4
 8001d90:	432a      	orrs	r2, r5
 8001d92:	0018      	movs	r0, r3
 8001d94:	0011      	movs	r1, r2
 8001d96:	bcf0      	pop	{r4, r5, r6, r7}
 8001d98:	46bb      	mov	fp, r7
 8001d9a:	46b2      	mov	sl, r6
 8001d9c:	46a9      	mov	r9, r5
 8001d9e:	46a0      	mov	r8, r4
 8001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da2:	4642      	mov	r2, r8
 8001da4:	1a12      	subs	r2, r2, r0
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	dd52      	ble.n	8001e50 <__aeabi_dsub+0x20c>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x16c>
 8001dae:	e09c      	b.n	8001eea <__aeabi_dsub+0x2a6>
 8001db0:	45a0      	cmp	r8, r4
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x172>
 8001db4:	e0ca      	b.n	8001f4c <__aeabi_dsub+0x308>
 8001db6:	2080      	movs	r0, #128	; 0x80
 8001db8:	0400      	lsls	r0, r0, #16
 8001dba:	4301      	orrs	r1, r0
 8001dbc:	2a38      	cmp	r2, #56	; 0x38
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x17e>
 8001dc0:	e149      	b.n	8002056 <__aeabi_dsub+0x412>
 8001dc2:	2a1f      	cmp	r2, #31
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_dsub+0x184>
 8001dc6:	e197      	b.n	80020f8 <__aeabi_dsub+0x4b4>
 8001dc8:	0010      	movs	r0, r2
 8001dca:	000e      	movs	r6, r1
 8001dcc:	3820      	subs	r0, #32
 8001dce:	40c6      	lsrs	r6, r0
 8001dd0:	2a20      	cmp	r2, #32
 8001dd2:	d004      	beq.n	8001dde <__aeabi_dsub+0x19a>
 8001dd4:	2040      	movs	r0, #64	; 0x40
 8001dd6:	1a82      	subs	r2, r0, r2
 8001dd8:	4091      	lsls	r1, r2
 8001dda:	430f      	orrs	r7, r1
 8001ddc:	46b9      	mov	r9, r7
 8001dde:	464c      	mov	r4, r9
 8001de0:	1e62      	subs	r2, r4, #1
 8001de2:	4194      	sbcs	r4, r2
 8001de4:	4334      	orrs	r4, r6
 8001de6:	e13a      	b.n	800205e <__aeabi_dsub+0x41a>
 8001de8:	000a      	movs	r2, r1
 8001dea:	433a      	orrs	r2, r7
 8001dec:	d028      	beq.n	8001e40 <__aeabi_dsub+0x1fc>
 8001dee:	46b3      	mov	fp, r6
 8001df0:	42b5      	cmp	r5, r6
 8001df2:	d02b      	beq.n	8001e4c <__aeabi_dsub+0x208>
 8001df4:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <__aeabi_dsub+0x360>)
 8001df6:	4442      	add	r2, r8
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d05d      	beq.n	8001eb8 <__aeabi_dsub+0x274>
 8001dfc:	4642      	mov	r2, r8
 8001dfe:	4644      	mov	r4, r8
 8001e00:	1a82      	subs	r2, r0, r2
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x1c4>
 8001e06:	e0f5      	b.n	8001ff4 <__aeabi_dsub+0x3b0>
 8001e08:	4665      	mov	r5, ip
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x1cc>
 8001e0e:	e19c      	b.n	800214a <__aeabi_dsub+0x506>
 8001e10:	1e55      	subs	r5, r2, #1
 8001e12:	2a01      	cmp	r2, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x1d4>
 8001e16:	e1fb      	b.n	8002210 <__aeabi_dsub+0x5cc>
 8001e18:	4c60      	ldr	r4, [pc, #384]	; (8001f9c <__aeabi_dsub+0x358>)
 8001e1a:	42a2      	cmp	r2, r4
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x1dc>
 8001e1e:	e1bd      	b.n	800219c <__aeabi_dsub+0x558>
 8001e20:	002a      	movs	r2, r5
 8001e22:	e0f0      	b.n	8002006 <__aeabi_dsub+0x3c2>
 8001e24:	0008      	movs	r0, r1
 8001e26:	4338      	orrs	r0, r7
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x1e8>
 8001e2a:	e0c3      	b.n	8001fb4 <__aeabi_dsub+0x370>
 8001e2c:	1e50      	subs	r0, r2, #1
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x1f0>
 8001e32:	e1a8      	b.n	8002186 <__aeabi_dsub+0x542>
 8001e34:	4c59      	ldr	r4, [pc, #356]	; (8001f9c <__aeabi_dsub+0x358>)
 8001e36:	42a2      	cmp	r2, r4
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x1f8>
 8001e3a:	e087      	b.n	8001f4c <__aeabi_dsub+0x308>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	e736      	b.n	8001cae <__aeabi_dsub+0x6a>
 8001e40:	2201      	movs	r2, #1
 8001e42:	4056      	eors	r6, r2
 8001e44:	46b3      	mov	fp, r6
 8001e46:	42b5      	cmp	r5, r6
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x208>
 8001e4a:	e721      	b.n	8001c90 <__aeabi_dsub+0x4c>
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <__aeabi_dsub+0x360>)
 8001e4e:	4442      	add	r2, r8
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x212>
 8001e54:	e0b5      	b.n	8001fc2 <__aeabi_dsub+0x37e>
 8001e56:	4642      	mov	r2, r8
 8001e58:	4644      	mov	r4, r8
 8001e5a:	1a82      	subs	r2, r0, r2
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x21e>
 8001e60:	e138      	b.n	80020d4 <__aeabi_dsub+0x490>
 8001e62:	4e4e      	ldr	r6, [pc, #312]	; (8001f9c <__aeabi_dsub+0x358>)
 8001e64:	42b0      	cmp	r0, r6
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x226>
 8001e68:	e1de      	b.n	8002228 <__aeabi_dsub+0x5e4>
 8001e6a:	2680      	movs	r6, #128	; 0x80
 8001e6c:	4664      	mov	r4, ip
 8001e6e:	0436      	lsls	r6, r6, #16
 8001e70:	4334      	orrs	r4, r6
 8001e72:	46a4      	mov	ip, r4
 8001e74:	2a38      	cmp	r2, #56	; 0x38
 8001e76:	dd00      	ble.n	8001e7a <__aeabi_dsub+0x236>
 8001e78:	e196      	b.n	80021a8 <__aeabi_dsub+0x564>
 8001e7a:	2a1f      	cmp	r2, #31
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dsub+0x23c>
 8001e7e:	e224      	b.n	80022ca <__aeabi_dsub+0x686>
 8001e80:	2620      	movs	r6, #32
 8001e82:	1ab4      	subs	r4, r6, r2
 8001e84:	46a2      	mov	sl, r4
 8001e86:	4664      	mov	r4, ip
 8001e88:	4656      	mov	r6, sl
 8001e8a:	40b4      	lsls	r4, r6
 8001e8c:	46a1      	mov	r9, r4
 8001e8e:	001c      	movs	r4, r3
 8001e90:	464e      	mov	r6, r9
 8001e92:	40d4      	lsrs	r4, r2
 8001e94:	4326      	orrs	r6, r4
 8001e96:	0034      	movs	r4, r6
 8001e98:	4656      	mov	r6, sl
 8001e9a:	40b3      	lsls	r3, r6
 8001e9c:	1e5e      	subs	r6, r3, #1
 8001e9e:	41b3      	sbcs	r3, r6
 8001ea0:	431c      	orrs	r4, r3
 8001ea2:	4663      	mov	r3, ip
 8001ea4:	40d3      	lsrs	r3, r2
 8001ea6:	18c9      	adds	r1, r1, r3
 8001ea8:	19e4      	adds	r4, r4, r7
 8001eaa:	42bc      	cmp	r4, r7
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	427f      	negs	r7, r7
 8001eb0:	46b9      	mov	r9, r7
 8001eb2:	4680      	mov	r8, r0
 8001eb4:	4489      	add	r9, r1
 8001eb6:	e0d8      	b.n	800206a <__aeabi_dsub+0x426>
 8001eb8:	4640      	mov	r0, r8
 8001eba:	4c3b      	ldr	r4, [pc, #236]	; (8001fa8 <__aeabi_dsub+0x364>)
 8001ebc:	3001      	adds	r0, #1
 8001ebe:	4220      	tst	r0, r4
 8001ec0:	d000      	beq.n	8001ec4 <__aeabi_dsub+0x280>
 8001ec2:	e0b4      	b.n	800202e <__aeabi_dsub+0x3ea>
 8001ec4:	4640      	mov	r0, r8
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dsub+0x288>
 8001eca:	e144      	b.n	8002156 <__aeabi_dsub+0x512>
 8001ecc:	4660      	mov	r0, ip
 8001ece:	4318      	orrs	r0, r3
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x290>
 8001ed2:	e190      	b.n	80021f6 <__aeabi_dsub+0x5b2>
 8001ed4:	0008      	movs	r0, r1
 8001ed6:	4338      	orrs	r0, r7
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dsub+0x298>
 8001eda:	e1aa      	b.n	8002232 <__aeabi_dsub+0x5ee>
 8001edc:	4661      	mov	r1, ip
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	0749      	lsls	r1, r1, #29
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	4661      	mov	r1, ip
 8001ee6:	08cc      	lsrs	r4, r1, #3
 8001ee8:	e027      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 8001eea:	0008      	movs	r0, r1
 8001eec:	4338      	orrs	r0, r7
 8001eee:	d061      	beq.n	8001fb4 <__aeabi_dsub+0x370>
 8001ef0:	1e50      	subs	r0, r2, #1
 8001ef2:	2a01      	cmp	r2, #1
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x2b4>
 8001ef6:	e139      	b.n	800216c <__aeabi_dsub+0x528>
 8001ef8:	42a2      	cmp	r2, r4
 8001efa:	d027      	beq.n	8001f4c <__aeabi_dsub+0x308>
 8001efc:	0002      	movs	r2, r0
 8001efe:	e75d      	b.n	8001dbc <__aeabi_dsub+0x178>
 8001f00:	0002      	movs	r2, r0
 8001f02:	391f      	subs	r1, #31
 8001f04:	40ca      	lsrs	r2, r1
 8001f06:	0011      	movs	r1, r2
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d003      	beq.n	8001f14 <__aeabi_dsub+0x2d0>
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4098      	lsls	r0, r3
 8001f12:	4304      	orrs	r4, r0
 8001f14:	1e63      	subs	r3, r4, #1
 8001f16:	419c      	sbcs	r4, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4698      	mov	r8, r3
 8001f1e:	430c      	orrs	r4, r1
 8001f20:	0763      	lsls	r3, r4, #29
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x2e2>
 8001f24:	e712      	b.n	8001d4c <__aeabi_dsub+0x108>
 8001f26:	464b      	mov	r3, r9
 8001f28:	464a      	mov	r2, r9
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	075b      	lsls	r3, r3, #29
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	08d4      	lsrs	r4, r2, #3
 8001f32:	4642      	mov	r2, r8
 8001f34:	4919      	ldr	r1, [pc, #100]	; (8001f9c <__aeabi_dsub+0x358>)
 8001f36:	428a      	cmp	r2, r1
 8001f38:	d00e      	beq.n	8001f58 <__aeabi_dsub+0x314>
 8001f3a:	0324      	lsls	r4, r4, #12
 8001f3c:	0552      	lsls	r2, r2, #21
 8001f3e:	0b24      	lsrs	r4, r4, #12
 8001f40:	0d52      	lsrs	r2, r2, #21
 8001f42:	e722      	b.n	8001d8a <__aeabi_dsub+0x146>
 8001f44:	000a      	movs	r2, r1
 8001f46:	2400      	movs	r4, #0
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e71e      	b.n	8001d8a <__aeabi_dsub+0x146>
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4662      	mov	r2, ip
 8001f50:	0752      	lsls	r2, r2, #29
 8001f52:	4313      	orrs	r3, r2
 8001f54:	4662      	mov	r2, ip
 8001f56:	08d4      	lsrs	r4, r2, #3
 8001f58:	001a      	movs	r2, r3
 8001f5a:	4322      	orrs	r2, r4
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x31c>
 8001f5e:	e1fc      	b.n	800235a <__aeabi_dsub+0x716>
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	0312      	lsls	r2, r2, #12
 8001f64:	4314      	orrs	r4, r2
 8001f66:	0324      	lsls	r4, r4, #12
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <__aeabi_dsub+0x358>)
 8001f6a:	0b24      	lsrs	r4, r4, #12
 8001f6c:	e70d      	b.n	8001d8a <__aeabi_dsub+0x146>
 8001f6e:	0020      	movs	r0, r4
 8001f70:	f000 faa4 	bl	80024bc <__clzsi2>
 8001f74:	0001      	movs	r1, r0
 8001f76:	3118      	adds	r1, #24
 8001f78:	291f      	cmp	r1, #31
 8001f7a:	dc00      	bgt.n	8001f7e <__aeabi_dsub+0x33a>
 8001f7c:	e6c4      	b.n	8001d08 <__aeabi_dsub+0xc4>
 8001f7e:	3808      	subs	r0, #8
 8001f80:	4084      	lsls	r4, r0
 8001f82:	4643      	mov	r3, r8
 8001f84:	0020      	movs	r0, r4
 8001f86:	2400      	movs	r4, #0
 8001f88:	4588      	cmp	r8, r1
 8001f8a:	dc00      	bgt.n	8001f8e <__aeabi_dsub+0x34a>
 8001f8c:	e6c8      	b.n	8001d20 <__aeabi_dsub+0xdc>
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__aeabi_dsub+0x35c>)
 8001f90:	1a5b      	subs	r3, r3, r1
 8001f92:	4010      	ands	r0, r2
 8001f94:	4698      	mov	r8, r3
 8001f96:	4681      	mov	r9, r0
 8001f98:	e6d6      	b.n	8001d48 <__aeabi_dsub+0x104>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	000007ff 	.word	0x000007ff
 8001fa0:	ff7fffff 	.word	0xff7fffff
 8001fa4:	fffff801 	.word	0xfffff801
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	430f      	orrs	r7, r1
 8001fae:	1e7a      	subs	r2, r7, #1
 8001fb0:	4197      	sbcs	r7, r2
 8001fb2:	e691      	b.n	8001cd8 <__aeabi_dsub+0x94>
 8001fb4:	4661      	mov	r1, ip
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	0749      	lsls	r1, r1, #29
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	4661      	mov	r1, ip
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e7b8      	b.n	8001f34 <__aeabi_dsub+0x2f0>
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	4cd3      	ldr	r4, [pc, #844]	; (8002314 <__aeabi_dsub+0x6d0>)
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	4220      	tst	r0, r4
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x38a>
 8001fcc:	e0a2      	b.n	8002114 <__aeabi_dsub+0x4d0>
 8001fce:	4640      	mov	r0, r8
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x392>
 8001fd4:	e101      	b.n	80021da <__aeabi_dsub+0x596>
 8001fd6:	4660      	mov	r0, ip
 8001fd8:	4318      	orrs	r0, r3
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x39a>
 8001fdc:	e15e      	b.n	800229c <__aeabi_dsub+0x658>
 8001fde:	0008      	movs	r0, r1
 8001fe0:	4338      	orrs	r0, r7
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_dsub+0x3a2>
 8001fe4:	e15f      	b.n	80022a6 <__aeabi_dsub+0x662>
 8001fe6:	4661      	mov	r1, ip
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	0749      	lsls	r1, r1, #29
 8001fec:	430b      	orrs	r3, r1
 8001fee:	4661      	mov	r1, ip
 8001ff0:	08cc      	lsrs	r4, r1, #3
 8001ff2:	e7a2      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 8001ff4:	4dc8      	ldr	r5, [pc, #800]	; (8002318 <__aeabi_dsub+0x6d4>)
 8001ff6:	42a8      	cmp	r0, r5
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x3b8>
 8001ffa:	e0cf      	b.n	800219c <__aeabi_dsub+0x558>
 8001ffc:	2580      	movs	r5, #128	; 0x80
 8001ffe:	4664      	mov	r4, ip
 8002000:	042d      	lsls	r5, r5, #16
 8002002:	432c      	orrs	r4, r5
 8002004:	46a4      	mov	ip, r4
 8002006:	2a38      	cmp	r2, #56	; 0x38
 8002008:	dc56      	bgt.n	80020b8 <__aeabi_dsub+0x474>
 800200a:	2a1f      	cmp	r2, #31
 800200c:	dd00      	ble.n	8002010 <__aeabi_dsub+0x3cc>
 800200e:	e0d1      	b.n	80021b4 <__aeabi_dsub+0x570>
 8002010:	2520      	movs	r5, #32
 8002012:	001e      	movs	r6, r3
 8002014:	1aad      	subs	r5, r5, r2
 8002016:	4664      	mov	r4, ip
 8002018:	40ab      	lsls	r3, r5
 800201a:	40ac      	lsls	r4, r5
 800201c:	40d6      	lsrs	r6, r2
 800201e:	1e5d      	subs	r5, r3, #1
 8002020:	41ab      	sbcs	r3, r5
 8002022:	4334      	orrs	r4, r6
 8002024:	4323      	orrs	r3, r4
 8002026:	4664      	mov	r4, ip
 8002028:	40d4      	lsrs	r4, r2
 800202a:	1b09      	subs	r1, r1, r4
 800202c:	e049      	b.n	80020c2 <__aeabi_dsub+0x47e>
 800202e:	4660      	mov	r0, ip
 8002030:	1bdc      	subs	r4, r3, r7
 8002032:	1a46      	subs	r6, r0, r1
 8002034:	42a3      	cmp	r3, r4
 8002036:	4180      	sbcs	r0, r0
 8002038:	4240      	negs	r0, r0
 800203a:	4681      	mov	r9, r0
 800203c:	0030      	movs	r0, r6
 800203e:	464e      	mov	r6, r9
 8002040:	1b80      	subs	r0, r0, r6
 8002042:	4681      	mov	r9, r0
 8002044:	0200      	lsls	r0, r0, #8
 8002046:	d476      	bmi.n	8002136 <__aeabi_dsub+0x4f2>
 8002048:	464b      	mov	r3, r9
 800204a:	4323      	orrs	r3, r4
 800204c:	d000      	beq.n	8002050 <__aeabi_dsub+0x40c>
 800204e:	e652      	b.n	8001cf6 <__aeabi_dsub+0xb2>
 8002050:	2400      	movs	r4, #0
 8002052:	2500      	movs	r5, #0
 8002054:	e771      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 8002056:	4339      	orrs	r1, r7
 8002058:	000c      	movs	r4, r1
 800205a:	1e62      	subs	r2, r4, #1
 800205c:	4194      	sbcs	r4, r2
 800205e:	18e4      	adds	r4, r4, r3
 8002060:	429c      	cmp	r4, r3
 8002062:	419b      	sbcs	r3, r3
 8002064:	425b      	negs	r3, r3
 8002066:	4463      	add	r3, ip
 8002068:	4699      	mov	r9, r3
 800206a:	464b      	mov	r3, r9
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	d400      	bmi.n	8002072 <__aeabi_dsub+0x42e>
 8002070:	e756      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002072:	2301      	movs	r3, #1
 8002074:	469c      	mov	ip, r3
 8002076:	4ba8      	ldr	r3, [pc, #672]	; (8002318 <__aeabi_dsub+0x6d4>)
 8002078:	44e0      	add	r8, ip
 800207a:	4598      	cmp	r8, r3
 800207c:	d038      	beq.n	80020f0 <__aeabi_dsub+0x4ac>
 800207e:	464b      	mov	r3, r9
 8002080:	48a6      	ldr	r0, [pc, #664]	; (800231c <__aeabi_dsub+0x6d8>)
 8002082:	2201      	movs	r2, #1
 8002084:	4003      	ands	r3, r0
 8002086:	0018      	movs	r0, r3
 8002088:	0863      	lsrs	r3, r4, #1
 800208a:	4014      	ands	r4, r2
 800208c:	431c      	orrs	r4, r3
 800208e:	07c3      	lsls	r3, r0, #31
 8002090:	431c      	orrs	r4, r3
 8002092:	0843      	lsrs	r3, r0, #1
 8002094:	4699      	mov	r9, r3
 8002096:	e657      	b.n	8001d48 <__aeabi_dsub+0x104>
 8002098:	0010      	movs	r0, r2
 800209a:	000e      	movs	r6, r1
 800209c:	3820      	subs	r0, #32
 800209e:	40c6      	lsrs	r6, r0
 80020a0:	2a20      	cmp	r2, #32
 80020a2:	d004      	beq.n	80020ae <__aeabi_dsub+0x46a>
 80020a4:	2040      	movs	r0, #64	; 0x40
 80020a6:	1a82      	subs	r2, r0, r2
 80020a8:	4091      	lsls	r1, r2
 80020aa:	430f      	orrs	r7, r1
 80020ac:	46b9      	mov	r9, r7
 80020ae:	464f      	mov	r7, r9
 80020b0:	1e7a      	subs	r2, r7, #1
 80020b2:	4197      	sbcs	r7, r2
 80020b4:	4337      	orrs	r7, r6
 80020b6:	e60f      	b.n	8001cd8 <__aeabi_dsub+0x94>
 80020b8:	4662      	mov	r2, ip
 80020ba:	431a      	orrs	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	4193      	sbcs	r3, r2
 80020c2:	1afc      	subs	r4, r7, r3
 80020c4:	42a7      	cmp	r7, r4
 80020c6:	41bf      	sbcs	r7, r7
 80020c8:	427f      	negs	r7, r7
 80020ca:	1bcb      	subs	r3, r1, r7
 80020cc:	4699      	mov	r9, r3
 80020ce:	465d      	mov	r5, fp
 80020d0:	4680      	mov	r8, r0
 80020d2:	e608      	b.n	8001ce6 <__aeabi_dsub+0xa2>
 80020d4:	4666      	mov	r6, ip
 80020d6:	431e      	orrs	r6, r3
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x498>
 80020da:	e0be      	b.n	800225a <__aeabi_dsub+0x616>
 80020dc:	1e56      	subs	r6, r2, #1
 80020de:	2a01      	cmp	r2, #1
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x4a0>
 80020e2:	e109      	b.n	80022f8 <__aeabi_dsub+0x6b4>
 80020e4:	4c8c      	ldr	r4, [pc, #560]	; (8002318 <__aeabi_dsub+0x6d4>)
 80020e6:	42a2      	cmp	r2, r4
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x4a8>
 80020ea:	e119      	b.n	8002320 <__aeabi_dsub+0x6dc>
 80020ec:	0032      	movs	r2, r6
 80020ee:	e6c1      	b.n	8001e74 <__aeabi_dsub+0x230>
 80020f0:	4642      	mov	r2, r8
 80020f2:	2400      	movs	r4, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	e648      	b.n	8001d8a <__aeabi_dsub+0x146>
 80020f8:	2020      	movs	r0, #32
 80020fa:	000c      	movs	r4, r1
 80020fc:	1a80      	subs	r0, r0, r2
 80020fe:	003e      	movs	r6, r7
 8002100:	4087      	lsls	r7, r0
 8002102:	4084      	lsls	r4, r0
 8002104:	40d6      	lsrs	r6, r2
 8002106:	1e78      	subs	r0, r7, #1
 8002108:	4187      	sbcs	r7, r0
 800210a:	40d1      	lsrs	r1, r2
 800210c:	4334      	orrs	r4, r6
 800210e:	433c      	orrs	r4, r7
 8002110:	448c      	add	ip, r1
 8002112:	e7a4      	b.n	800205e <__aeabi_dsub+0x41a>
 8002114:	4a80      	ldr	r2, [pc, #512]	; (8002318 <__aeabi_dsub+0x6d4>)
 8002116:	4290      	cmp	r0, r2
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x4d8>
 800211a:	e0e9      	b.n	80022f0 <__aeabi_dsub+0x6ac>
 800211c:	19df      	adds	r7, r3, r7
 800211e:	429f      	cmp	r7, r3
 8002120:	419b      	sbcs	r3, r3
 8002122:	4461      	add	r1, ip
 8002124:	425b      	negs	r3, r3
 8002126:	18c9      	adds	r1, r1, r3
 8002128:	07cc      	lsls	r4, r1, #31
 800212a:	087f      	lsrs	r7, r7, #1
 800212c:	084b      	lsrs	r3, r1, #1
 800212e:	4699      	mov	r9, r3
 8002130:	4680      	mov	r8, r0
 8002132:	433c      	orrs	r4, r7
 8002134:	e6f4      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002136:	1afc      	subs	r4, r7, r3
 8002138:	42a7      	cmp	r7, r4
 800213a:	41bf      	sbcs	r7, r7
 800213c:	4663      	mov	r3, ip
 800213e:	427f      	negs	r7, r7
 8002140:	1ac9      	subs	r1, r1, r3
 8002142:	1bcb      	subs	r3, r1, r7
 8002144:	4699      	mov	r9, r3
 8002146:	465d      	mov	r5, fp
 8002148:	e5d5      	b.n	8001cf6 <__aeabi_dsub+0xb2>
 800214a:	08ff      	lsrs	r7, r7, #3
 800214c:	074b      	lsls	r3, r1, #29
 800214e:	465d      	mov	r5, fp
 8002150:	433b      	orrs	r3, r7
 8002152:	08cc      	lsrs	r4, r1, #3
 8002154:	e6ee      	b.n	8001f34 <__aeabi_dsub+0x2f0>
 8002156:	4662      	mov	r2, ip
 8002158:	431a      	orrs	r2, r3
 800215a:	d000      	beq.n	800215e <__aeabi_dsub+0x51a>
 800215c:	e082      	b.n	8002264 <__aeabi_dsub+0x620>
 800215e:	000b      	movs	r3, r1
 8002160:	433b      	orrs	r3, r7
 8002162:	d11b      	bne.n	800219c <__aeabi_dsub+0x558>
 8002164:	2480      	movs	r4, #128	; 0x80
 8002166:	2500      	movs	r5, #0
 8002168:	0324      	lsls	r4, r4, #12
 800216a:	e6f9      	b.n	8001f60 <__aeabi_dsub+0x31c>
 800216c:	19dc      	adds	r4, r3, r7
 800216e:	429c      	cmp	r4, r3
 8002170:	419b      	sbcs	r3, r3
 8002172:	4461      	add	r1, ip
 8002174:	4689      	mov	r9, r1
 8002176:	425b      	negs	r3, r3
 8002178:	4499      	add	r9, r3
 800217a:	464b      	mov	r3, r9
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	d444      	bmi.n	800220a <__aeabi_dsub+0x5c6>
 8002180:	2301      	movs	r3, #1
 8002182:	4698      	mov	r8, r3
 8002184:	e6cc      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002186:	1bdc      	subs	r4, r3, r7
 8002188:	4662      	mov	r2, ip
 800218a:	42a3      	cmp	r3, r4
 800218c:	419b      	sbcs	r3, r3
 800218e:	1a51      	subs	r1, r2, r1
 8002190:	425b      	negs	r3, r3
 8002192:	1acb      	subs	r3, r1, r3
 8002194:	4699      	mov	r9, r3
 8002196:	2301      	movs	r3, #1
 8002198:	4698      	mov	r8, r3
 800219a:	e5a4      	b.n	8001ce6 <__aeabi_dsub+0xa2>
 800219c:	08ff      	lsrs	r7, r7, #3
 800219e:	074b      	lsls	r3, r1, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	433b      	orrs	r3, r7
 80021a4:	08cc      	lsrs	r4, r1, #3
 80021a6:	e6d7      	b.n	8001f58 <__aeabi_dsub+0x314>
 80021a8:	4662      	mov	r2, ip
 80021aa:	431a      	orrs	r2, r3
 80021ac:	0014      	movs	r4, r2
 80021ae:	1e63      	subs	r3, r4, #1
 80021b0:	419c      	sbcs	r4, r3
 80021b2:	e679      	b.n	8001ea8 <__aeabi_dsub+0x264>
 80021b4:	0015      	movs	r5, r2
 80021b6:	4664      	mov	r4, ip
 80021b8:	3d20      	subs	r5, #32
 80021ba:	40ec      	lsrs	r4, r5
 80021bc:	46a0      	mov	r8, r4
 80021be:	2a20      	cmp	r2, #32
 80021c0:	d005      	beq.n	80021ce <__aeabi_dsub+0x58a>
 80021c2:	2540      	movs	r5, #64	; 0x40
 80021c4:	4664      	mov	r4, ip
 80021c6:	1aaa      	subs	r2, r5, r2
 80021c8:	4094      	lsls	r4, r2
 80021ca:	4323      	orrs	r3, r4
 80021cc:	469a      	mov	sl, r3
 80021ce:	4654      	mov	r4, sl
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	419c      	sbcs	r4, r3
 80021d4:	4643      	mov	r3, r8
 80021d6:	4323      	orrs	r3, r4
 80021d8:	e773      	b.n	80020c2 <__aeabi_dsub+0x47e>
 80021da:	4662      	mov	r2, ip
 80021dc:	431a      	orrs	r2, r3
 80021de:	d023      	beq.n	8002228 <__aeabi_dsub+0x5e4>
 80021e0:	000a      	movs	r2, r1
 80021e2:	433a      	orrs	r2, r7
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x5a4>
 80021e6:	e0a0      	b.n	800232a <__aeabi_dsub+0x6e6>
 80021e8:	4662      	mov	r2, ip
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	0752      	lsls	r2, r2, #29
 80021ee:	4313      	orrs	r3, r2
 80021f0:	4662      	mov	r2, ip
 80021f2:	08d4      	lsrs	r4, r2, #3
 80021f4:	e6b0      	b.n	8001f58 <__aeabi_dsub+0x314>
 80021f6:	000b      	movs	r3, r1
 80021f8:	433b      	orrs	r3, r7
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x5ba>
 80021fc:	e728      	b.n	8002050 <__aeabi_dsub+0x40c>
 80021fe:	08ff      	lsrs	r7, r7, #3
 8002200:	074b      	lsls	r3, r1, #29
 8002202:	465d      	mov	r5, fp
 8002204:	433b      	orrs	r3, r7
 8002206:	08cc      	lsrs	r4, r1, #3
 8002208:	e697      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 800220a:	2302      	movs	r3, #2
 800220c:	4698      	mov	r8, r3
 800220e:	e736      	b.n	800207e <__aeabi_dsub+0x43a>
 8002210:	1afc      	subs	r4, r7, r3
 8002212:	42a7      	cmp	r7, r4
 8002214:	41bf      	sbcs	r7, r7
 8002216:	4663      	mov	r3, ip
 8002218:	427f      	negs	r7, r7
 800221a:	1ac9      	subs	r1, r1, r3
 800221c:	1bcb      	subs	r3, r1, r7
 800221e:	4699      	mov	r9, r3
 8002220:	2301      	movs	r3, #1
 8002222:	465d      	mov	r5, fp
 8002224:	4698      	mov	r8, r3
 8002226:	e55e      	b.n	8001ce6 <__aeabi_dsub+0xa2>
 8002228:	074b      	lsls	r3, r1, #29
 800222a:	08ff      	lsrs	r7, r7, #3
 800222c:	433b      	orrs	r3, r7
 800222e:	08cc      	lsrs	r4, r1, #3
 8002230:	e692      	b.n	8001f58 <__aeabi_dsub+0x314>
 8002232:	1bdc      	subs	r4, r3, r7
 8002234:	4660      	mov	r0, ip
 8002236:	42a3      	cmp	r3, r4
 8002238:	41b6      	sbcs	r6, r6
 800223a:	1a40      	subs	r0, r0, r1
 800223c:	4276      	negs	r6, r6
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	4681      	mov	r9, r0
 8002242:	0200      	lsls	r0, r0, #8
 8002244:	d560      	bpl.n	8002308 <__aeabi_dsub+0x6c4>
 8002246:	1afc      	subs	r4, r7, r3
 8002248:	42a7      	cmp	r7, r4
 800224a:	41bf      	sbcs	r7, r7
 800224c:	4663      	mov	r3, ip
 800224e:	427f      	negs	r7, r7
 8002250:	1ac9      	subs	r1, r1, r3
 8002252:	1bcb      	subs	r3, r1, r7
 8002254:	4699      	mov	r9, r3
 8002256:	465d      	mov	r5, fp
 8002258:	e576      	b.n	8001d48 <__aeabi_dsub+0x104>
 800225a:	08ff      	lsrs	r7, r7, #3
 800225c:	074b      	lsls	r3, r1, #29
 800225e:	433b      	orrs	r3, r7
 8002260:	08cc      	lsrs	r4, r1, #3
 8002262:	e667      	b.n	8001f34 <__aeabi_dsub+0x2f0>
 8002264:	000a      	movs	r2, r1
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	433a      	orrs	r2, r7
 800226a:	d100      	bne.n	800226e <__aeabi_dsub+0x62a>
 800226c:	e66f      	b.n	8001f4e <__aeabi_dsub+0x30a>
 800226e:	4662      	mov	r2, ip
 8002270:	0752      	lsls	r2, r2, #29
 8002272:	4313      	orrs	r3, r2
 8002274:	4662      	mov	r2, ip
 8002276:	08d4      	lsrs	r4, r2, #3
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	0312      	lsls	r2, r2, #12
 800227c:	4214      	tst	r4, r2
 800227e:	d007      	beq.n	8002290 <__aeabi_dsub+0x64c>
 8002280:	08c8      	lsrs	r0, r1, #3
 8002282:	4210      	tst	r0, r2
 8002284:	d104      	bne.n	8002290 <__aeabi_dsub+0x64c>
 8002286:	465d      	mov	r5, fp
 8002288:	0004      	movs	r4, r0
 800228a:	08fb      	lsrs	r3, r7, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	0f5a      	lsrs	r2, r3, #29
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	0752      	lsls	r2, r2, #29
 8002298:	4313      	orrs	r3, r2
 800229a:	e65d      	b.n	8001f58 <__aeabi_dsub+0x314>
 800229c:	074b      	lsls	r3, r1, #29
 800229e:	08ff      	lsrs	r7, r7, #3
 80022a0:	433b      	orrs	r3, r7
 80022a2:	08cc      	lsrs	r4, r1, #3
 80022a4:	e649      	b.n	8001f3a <__aeabi_dsub+0x2f6>
 80022a6:	19dc      	adds	r4, r3, r7
 80022a8:	429c      	cmp	r4, r3
 80022aa:	419b      	sbcs	r3, r3
 80022ac:	4461      	add	r1, ip
 80022ae:	4689      	mov	r9, r1
 80022b0:	425b      	negs	r3, r3
 80022b2:	4499      	add	r9, r3
 80022b4:	464b      	mov	r3, r9
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	d400      	bmi.n	80022bc <__aeabi_dsub+0x678>
 80022ba:	e631      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 80022bc:	464a      	mov	r2, r9
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <__aeabi_dsub+0x6d8>)
 80022c0:	401a      	ands	r2, r3
 80022c2:	2301      	movs	r3, #1
 80022c4:	4691      	mov	r9, r2
 80022c6:	4698      	mov	r8, r3
 80022c8:	e62a      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 80022ca:	0016      	movs	r6, r2
 80022cc:	4664      	mov	r4, ip
 80022ce:	3e20      	subs	r6, #32
 80022d0:	40f4      	lsrs	r4, r6
 80022d2:	46a0      	mov	r8, r4
 80022d4:	2a20      	cmp	r2, #32
 80022d6:	d005      	beq.n	80022e4 <__aeabi_dsub+0x6a0>
 80022d8:	2640      	movs	r6, #64	; 0x40
 80022da:	4664      	mov	r4, ip
 80022dc:	1ab2      	subs	r2, r6, r2
 80022de:	4094      	lsls	r4, r2
 80022e0:	4323      	orrs	r3, r4
 80022e2:	469a      	mov	sl, r3
 80022e4:	4654      	mov	r4, sl
 80022e6:	1e63      	subs	r3, r4, #1
 80022e8:	419c      	sbcs	r4, r3
 80022ea:	4643      	mov	r3, r8
 80022ec:	431c      	orrs	r4, r3
 80022ee:	e5db      	b.n	8001ea8 <__aeabi_dsub+0x264>
 80022f0:	0002      	movs	r2, r0
 80022f2:	2400      	movs	r4, #0
 80022f4:	2300      	movs	r3, #0
 80022f6:	e548      	b.n	8001d8a <__aeabi_dsub+0x146>
 80022f8:	19dc      	adds	r4, r3, r7
 80022fa:	42bc      	cmp	r4, r7
 80022fc:	41bf      	sbcs	r7, r7
 80022fe:	4461      	add	r1, ip
 8002300:	4689      	mov	r9, r1
 8002302:	427f      	negs	r7, r7
 8002304:	44b9      	add	r9, r7
 8002306:	e738      	b.n	800217a <__aeabi_dsub+0x536>
 8002308:	464b      	mov	r3, r9
 800230a:	4323      	orrs	r3, r4
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x6cc>
 800230e:	e69f      	b.n	8002050 <__aeabi_dsub+0x40c>
 8002310:	e606      	b.n	8001f20 <__aeabi_dsub+0x2dc>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007fe 	.word	0x000007fe
 8002318:	000007ff 	.word	0x000007ff
 800231c:	ff7fffff 	.word	0xff7fffff
 8002320:	08ff      	lsrs	r7, r7, #3
 8002322:	074b      	lsls	r3, r1, #29
 8002324:	433b      	orrs	r3, r7
 8002326:	08cc      	lsrs	r4, r1, #3
 8002328:	e616      	b.n	8001f58 <__aeabi_dsub+0x314>
 800232a:	4662      	mov	r2, ip
 800232c:	08db      	lsrs	r3, r3, #3
 800232e:	0752      	lsls	r2, r2, #29
 8002330:	4313      	orrs	r3, r2
 8002332:	4662      	mov	r2, ip
 8002334:	08d4      	lsrs	r4, r2, #3
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	0312      	lsls	r2, r2, #12
 800233a:	4214      	tst	r4, r2
 800233c:	d007      	beq.n	800234e <__aeabi_dsub+0x70a>
 800233e:	08c8      	lsrs	r0, r1, #3
 8002340:	4210      	tst	r0, r2
 8002342:	d104      	bne.n	800234e <__aeabi_dsub+0x70a>
 8002344:	465d      	mov	r5, fp
 8002346:	0004      	movs	r4, r0
 8002348:	08fb      	lsrs	r3, r7, #3
 800234a:	0749      	lsls	r1, r1, #29
 800234c:	430b      	orrs	r3, r1
 800234e:	0f5a      	lsrs	r2, r3, #29
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	0752      	lsls	r2, r2, #29
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	4313      	orrs	r3, r2
 8002358:	e5fe      	b.n	8001f58 <__aeabi_dsub+0x314>
 800235a:	2300      	movs	r3, #0
 800235c:	4a01      	ldr	r2, [pc, #4]	; (8002364 <__aeabi_dsub+0x720>)
 800235e:	001c      	movs	r4, r3
 8002360:	e513      	b.n	8001d8a <__aeabi_dsub+0x146>
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	000007ff 	.word	0x000007ff

08002368 <__aeabi_dcmpun>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	0005      	movs	r5, r0
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <__aeabi_dcmpun+0x38>)
 800236e:	031c      	lsls	r4, r3, #12
 8002370:	0016      	movs	r6, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	030a      	lsls	r2, r1, #12
 8002376:	0049      	lsls	r1, r1, #1
 8002378:	0b12      	lsrs	r2, r2, #12
 800237a:	0d49      	lsrs	r1, r1, #21
 800237c:	0b24      	lsrs	r4, r4, #12
 800237e:	0d5b      	lsrs	r3, r3, #21
 8002380:	4281      	cmp	r1, r0
 8002382:	d008      	beq.n	8002396 <__aeabi_dcmpun+0x2e>
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <__aeabi_dcmpun+0x38>)
 8002386:	2000      	movs	r0, #0
 8002388:	4293      	cmp	r3, r2
 800238a:	d103      	bne.n	8002394 <__aeabi_dcmpun+0x2c>
 800238c:	0020      	movs	r0, r4
 800238e:	4330      	orrs	r0, r6
 8002390:	1e43      	subs	r3, r0, #1
 8002392:	4198      	sbcs	r0, r3
 8002394:	bd70      	pop	{r4, r5, r6, pc}
 8002396:	2001      	movs	r0, #1
 8002398:	432a      	orrs	r2, r5
 800239a:	d1fb      	bne.n	8002394 <__aeabi_dcmpun+0x2c>
 800239c:	e7f2      	b.n	8002384 <__aeabi_dcmpun+0x1c>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	000007ff 	.word	0x000007ff

080023a4 <__aeabi_d2iz>:
 80023a4:	000a      	movs	r2, r1
 80023a6:	b530      	push	{r4, r5, lr}
 80023a8:	4c13      	ldr	r4, [pc, #76]	; (80023f8 <__aeabi_d2iz+0x54>)
 80023aa:	0053      	lsls	r3, r2, #1
 80023ac:	0309      	lsls	r1, r1, #12
 80023ae:	0005      	movs	r5, r0
 80023b0:	0b09      	lsrs	r1, r1, #12
 80023b2:	2000      	movs	r0, #0
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	0fd2      	lsrs	r2, r2, #31
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	dd04      	ble.n	80023c6 <__aeabi_d2iz+0x22>
 80023bc:	480f      	ldr	r0, [pc, #60]	; (80023fc <__aeabi_d2iz+0x58>)
 80023be:	4283      	cmp	r3, r0
 80023c0:	dd02      	ble.n	80023c8 <__aeabi_d2iz+0x24>
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <__aeabi_d2iz+0x5c>)
 80023c4:	18d0      	adds	r0, r2, r3
 80023c6:	bd30      	pop	{r4, r5, pc}
 80023c8:	2080      	movs	r0, #128	; 0x80
 80023ca:	0340      	lsls	r0, r0, #13
 80023cc:	4301      	orrs	r1, r0
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <__aeabi_d2iz+0x60>)
 80023d0:	1ac0      	subs	r0, r0, r3
 80023d2:	281f      	cmp	r0, #31
 80023d4:	dd08      	ble.n	80023e8 <__aeabi_d2iz+0x44>
 80023d6:	480c      	ldr	r0, [pc, #48]	; (8002408 <__aeabi_d2iz+0x64>)
 80023d8:	1ac3      	subs	r3, r0, r3
 80023da:	40d9      	lsrs	r1, r3
 80023dc:	000b      	movs	r3, r1
 80023de:	4258      	negs	r0, r3
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d1f0      	bne.n	80023c6 <__aeabi_d2iz+0x22>
 80023e4:	0018      	movs	r0, r3
 80023e6:	e7ee      	b.n	80023c6 <__aeabi_d2iz+0x22>
 80023e8:	4c08      	ldr	r4, [pc, #32]	; (800240c <__aeabi_d2iz+0x68>)
 80023ea:	40c5      	lsrs	r5, r0
 80023ec:	46a4      	mov	ip, r4
 80023ee:	4463      	add	r3, ip
 80023f0:	4099      	lsls	r1, r3
 80023f2:	000b      	movs	r3, r1
 80023f4:	432b      	orrs	r3, r5
 80023f6:	e7f2      	b.n	80023de <__aeabi_d2iz+0x3a>
 80023f8:	000003fe 	.word	0x000003fe
 80023fc:	0000041d 	.word	0x0000041d
 8002400:	7fffffff 	.word	0x7fffffff
 8002404:	00000433 	.word	0x00000433
 8002408:	00000413 	.word	0x00000413
 800240c:	fffffbed 	.word	0xfffffbed

08002410 <__aeabi_i2d>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	2800      	cmp	r0, #0
 8002414:	d016      	beq.n	8002444 <__aeabi_i2d+0x34>
 8002416:	17c3      	asrs	r3, r0, #31
 8002418:	18c5      	adds	r5, r0, r3
 800241a:	405d      	eors	r5, r3
 800241c:	0fc4      	lsrs	r4, r0, #31
 800241e:	0028      	movs	r0, r5
 8002420:	f000 f84c 	bl	80024bc <__clzsi2>
 8002424:	4a11      	ldr	r2, [pc, #68]	; (800246c <__aeabi_i2d+0x5c>)
 8002426:	1a12      	subs	r2, r2, r0
 8002428:	280a      	cmp	r0, #10
 800242a:	dc16      	bgt.n	800245a <__aeabi_i2d+0x4a>
 800242c:	0003      	movs	r3, r0
 800242e:	002e      	movs	r6, r5
 8002430:	3315      	adds	r3, #21
 8002432:	409e      	lsls	r6, r3
 8002434:	230b      	movs	r3, #11
 8002436:	1a18      	subs	r0, r3, r0
 8002438:	40c5      	lsrs	r5, r0
 800243a:	0552      	lsls	r2, r2, #21
 800243c:	032d      	lsls	r5, r5, #12
 800243e:	0b2d      	lsrs	r5, r5, #12
 8002440:	0d53      	lsrs	r3, r2, #21
 8002442:	e003      	b.n	800244c <__aeabi_i2d+0x3c>
 8002444:	2400      	movs	r4, #0
 8002446:	2300      	movs	r3, #0
 8002448:	2500      	movs	r5, #0
 800244a:	2600      	movs	r6, #0
 800244c:	051b      	lsls	r3, r3, #20
 800244e:	432b      	orrs	r3, r5
 8002450:	07e4      	lsls	r4, r4, #31
 8002452:	4323      	orrs	r3, r4
 8002454:	0030      	movs	r0, r6
 8002456:	0019      	movs	r1, r3
 8002458:	bd70      	pop	{r4, r5, r6, pc}
 800245a:	380b      	subs	r0, #11
 800245c:	4085      	lsls	r5, r0
 800245e:	0552      	lsls	r2, r2, #21
 8002460:	032d      	lsls	r5, r5, #12
 8002462:	2600      	movs	r6, #0
 8002464:	0b2d      	lsrs	r5, r5, #12
 8002466:	0d53      	lsrs	r3, r2, #21
 8002468:	e7f0      	b.n	800244c <__aeabi_i2d+0x3c>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	0000041e 	.word	0x0000041e

08002470 <__aeabi_ui2d>:
 8002470:	b510      	push	{r4, lr}
 8002472:	1e04      	subs	r4, r0, #0
 8002474:	d010      	beq.n	8002498 <__aeabi_ui2d+0x28>
 8002476:	f000 f821 	bl	80024bc <__clzsi2>
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <__aeabi_ui2d+0x48>)
 800247c:	1a1b      	subs	r3, r3, r0
 800247e:	280a      	cmp	r0, #10
 8002480:	dc11      	bgt.n	80024a6 <__aeabi_ui2d+0x36>
 8002482:	220b      	movs	r2, #11
 8002484:	0021      	movs	r1, r4
 8002486:	1a12      	subs	r2, r2, r0
 8002488:	40d1      	lsrs	r1, r2
 800248a:	3015      	adds	r0, #21
 800248c:	030a      	lsls	r2, r1, #12
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	4084      	lsls	r4, r0
 8002492:	0b12      	lsrs	r2, r2, #12
 8002494:	0d5b      	lsrs	r3, r3, #21
 8002496:	e001      	b.n	800249c <__aeabi_ui2d+0x2c>
 8002498:	2300      	movs	r3, #0
 800249a:	2200      	movs	r2, #0
 800249c:	051b      	lsls	r3, r3, #20
 800249e:	4313      	orrs	r3, r2
 80024a0:	0020      	movs	r0, r4
 80024a2:	0019      	movs	r1, r3
 80024a4:	bd10      	pop	{r4, pc}
 80024a6:	0022      	movs	r2, r4
 80024a8:	380b      	subs	r0, #11
 80024aa:	4082      	lsls	r2, r0
 80024ac:	055b      	lsls	r3, r3, #21
 80024ae:	0312      	lsls	r2, r2, #12
 80024b0:	2400      	movs	r4, #0
 80024b2:	0b12      	lsrs	r2, r2, #12
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	e7f1      	b.n	800249c <__aeabi_ui2d+0x2c>
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	; (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <pwmSmooting>:
//		//EDIT BUFFER
//
//	}
//}

void pwmSmooting(typPWMOutputHandler *out,typPWMInputHandler *input,double kf){
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6178      	str	r0, [r7, #20]
 8002500:	6139      	str	r1, [r7, #16]
 8002502:	60ba      	str	r2, [r7, #8]
 8002504:	60fb      	str	r3, [r7, #12]
	out->pwmOutputA = kf * out->pwmOutputA + input->pwmInputA *(1-kf);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff ff80 	bl	8002410 <__aeabi_i2d>
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f7ff f92a 	bl	800176c <__aeabi_dmul>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	603a      	str	r2, [r7, #0]
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff ff73 	bl	8002410 <__aeabi_i2d>
 800252a:	0004      	movs	r4, r0
 800252c:	000d      	movs	r5, r1
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2000      	movs	r0, #0
 8002534:	4956      	ldr	r1, [pc, #344]	; (8002690 <pwmSmooting+0x198>)
 8002536:	f7ff fb85 	bl	8001c44 <__aeabi_dsub>
 800253a:	0002      	movs	r2, r0
 800253c:	000b      	movs	r3, r1
 800253e:	0020      	movs	r0, r4
 8002540:	0029      	movs	r1, r5
 8002542:	f7ff f913 	bl	800176c <__aeabi_dmul>
 8002546:	0002      	movs	r2, r0
 8002548:	000b      	movs	r3, r1
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	f7fe f9cf 	bl	80008f0 <__aeabi_dadd>
 8002552:	0002      	movs	r2, r0
 8002554:	000b      	movs	r3, r1
 8002556:	0010      	movs	r0, r2
 8002558:	0019      	movs	r1, r3
 800255a:	f7fd fea7 	bl	80002ac <__aeabi_d2uiz>
 800255e:	0003      	movs	r3, r0
 8002560:	b2da      	uxtb	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	701a      	strb	r2, [r3, #0]
	out->pwmOutputB = kf * out->pwmOutputB + input->pwmInputB *(1-kf);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff ff50 	bl	8002410 <__aeabi_i2d>
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f7ff f8fa 	bl	800176c <__aeabi_dmul>
 8002578:	0002      	movs	r2, r0
 800257a:	000b      	movs	r3, r1
 800257c:	603a      	str	r2, [r7, #0]
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff ff43 	bl	8002410 <__aeabi_i2d>
 800258a:	0004      	movs	r4, r0
 800258c:	000d      	movs	r5, r1
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2000      	movs	r0, #0
 8002594:	493e      	ldr	r1, [pc, #248]	; (8002690 <pwmSmooting+0x198>)
 8002596:	f7ff fb55 	bl	8001c44 <__aeabi_dsub>
 800259a:	0002      	movs	r2, r0
 800259c:	000b      	movs	r3, r1
 800259e:	0020      	movs	r0, r4
 80025a0:	0029      	movs	r1, r5
 80025a2:	f7ff f8e3 	bl	800176c <__aeabi_dmul>
 80025a6:	0002      	movs	r2, r0
 80025a8:	000b      	movs	r3, r1
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	f7fe f99f 	bl	80008f0 <__aeabi_dadd>
 80025b2:	0002      	movs	r2, r0
 80025b4:	000b      	movs	r3, r1
 80025b6:	0010      	movs	r0, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	f7fd fe77 	bl	80002ac <__aeabi_d2uiz>
 80025be:	0003      	movs	r3, r0
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	705a      	strb	r2, [r3, #1]
	out->pwmOutputC = kf * out->pwmOutputC + input->pwmInputC *(1-kf);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	789b      	ldrb	r3, [r3, #2]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff20 	bl	8002410 <__aeabi_i2d>
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f7ff f8ca 	bl	800176c <__aeabi_dmul>
 80025d8:	0002      	movs	r2, r0
 80025da:	000b      	movs	r3, r1
 80025dc:	603a      	str	r2, [r7, #0]
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	789b      	ldrb	r3, [r3, #2]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff13 	bl	8002410 <__aeabi_i2d>
 80025ea:	0004      	movs	r4, r0
 80025ec:	000d      	movs	r5, r1
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2000      	movs	r0, #0
 80025f4:	4926      	ldr	r1, [pc, #152]	; (8002690 <pwmSmooting+0x198>)
 80025f6:	f7ff fb25 	bl	8001c44 <__aeabi_dsub>
 80025fa:	0002      	movs	r2, r0
 80025fc:	000b      	movs	r3, r1
 80025fe:	0020      	movs	r0, r4
 8002600:	0029      	movs	r1, r5
 8002602:	f7ff f8b3 	bl	800176c <__aeabi_dmul>
 8002606:	0002      	movs	r2, r0
 8002608:	000b      	movs	r3, r1
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	f7fe f96f 	bl	80008f0 <__aeabi_dadd>
 8002612:	0002      	movs	r2, r0
 8002614:	000b      	movs	r3, r1
 8002616:	0010      	movs	r0, r2
 8002618:	0019      	movs	r1, r3
 800261a:	f7fd fe47 	bl	80002ac <__aeabi_d2uiz>
 800261e:	0003      	movs	r3, r0
 8002620:	b2da      	uxtb	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	709a      	strb	r2, [r3, #2]
	out->pwmOutputD = kf * out->pwmOutputD + input->pwmInputD *(1-kf);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	78db      	ldrb	r3, [r3, #3]
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff fef0 	bl	8002410 <__aeabi_i2d>
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f7ff f89a 	bl	800176c <__aeabi_dmul>
 8002638:	0002      	movs	r2, r0
 800263a:	000b      	movs	r3, r1
 800263c:	603a      	str	r2, [r7, #0]
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff fee3 	bl	8002410 <__aeabi_i2d>
 800264a:	0004      	movs	r4, r0
 800264c:	000d      	movs	r5, r1
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2000      	movs	r0, #0
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <pwmSmooting+0x198>)
 8002656:	f7ff faf5 	bl	8001c44 <__aeabi_dsub>
 800265a:	0002      	movs	r2, r0
 800265c:	000b      	movs	r3, r1
 800265e:	0020      	movs	r0, r4
 8002660:	0029      	movs	r1, r5
 8002662:	f7ff f883 	bl	800176c <__aeabi_dmul>
 8002666:	0002      	movs	r2, r0
 8002668:	000b      	movs	r3, r1
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	f7fe f93f 	bl	80008f0 <__aeabi_dadd>
 8002672:	0002      	movs	r2, r0
 8002674:	000b      	movs	r3, r1
 8002676:	0010      	movs	r0, r2
 8002678:	0019      	movs	r1, r3
 800267a:	f7fd fe17 	bl	80002ac <__aeabi_d2uiz>
 800267e:	0003      	movs	r3, r0
 8002680:	b2da      	uxtb	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	70da      	strb	r2, [r3, #3]
	//return exp->output = exp->kf * exp->output + exp->input * (1 - exp->kf);
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b006      	add	sp, #24
 800268c:	bdb0      	pop	{r4, r5, r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	3ff00000 	.word	0x3ff00000

08002694 <vectorState>:



uint8_t vectorState(typVector *vector){
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	if((vector->forward=0)&&(vector->left=0)&&(vector->right=0)&&(vector->backward=0)){
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
		return idle;
	}
	if(vector->backward>15){
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	d901      	bls.n	80026ae <vectorState+0x1a>
		return halt;
 80026aa:	2306      	movs	r3, #6
 80026ac:	e02b      	b.n	8002706 <vectorState+0x72>
	}
	if((vector->forward>0)&&(vector->left=0)&&(vector->right=0)&&(vector->backward=0)){
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <vectorState+0x28>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	705a      	strb	r2, [r3, #1]
			return forward;
		}
	if((vector->left>0)&&(vector->forward=0)&&(vector->right=0)&&(vector->backward=0)){
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <vectorState+0x36>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		return turn_left;
	}
	if((vector->right>0)&&(vector->forward=0)&&(vector->left=0)&&(vector->backward=0)){
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	789b      	ldrb	r3, [r3, #2]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <vectorState+0x44>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
		return turn_right;
	}
	if((vector->left>0)&&(vector->forward>0)&&(vector->right=0)&&(vector->backward=0)){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <vectorState+0x5a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <vectorState+0x5a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	709a      	strb	r2, [r3, #2]
		return forward_left;
	}
	if((vector->right>0)&&(vector->forward>0)&&(vector->left=0)&&(vector->backward=0)){
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <vectorState+0x70>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <vectorState+0x70>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
		return forward_right;
	}
	else return idle;
 8002704:	2305      	movs	r3, #5

}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <vectorToPwm>:

void vectorToPwm(typVector *hVec, typPWMInputHandler *pwmInput){
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	2320      	movs	r3, #32
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	60bb      	str	r3, [r7, #8]
	uint8_t state;
	state = vectorState(hVec);
 8002720:	250f      	movs	r5, #15
 8002722:	197c      	adds	r4, r7, r5
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ffb4 	bl	8002694 <vectorState>
 800272c:	0003      	movs	r3, r0
 800272e:	7023      	strb	r3, [r4, #0]
	switch (state) {
 8002730:	197b      	adds	r3, r7, r5
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b06      	cmp	r3, #6
 8002736:	d853      	bhi.n	80027e0 <vectorToPwm+0xd0>
 8002738:	009a      	lsls	r2, r3, #2
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <vectorToPwm+0xdc>)
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	469f      	mov	pc, r3
		case forward:
			pwmInput->pwmInputA=hVec->forward;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=hVec->forward;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	705a      	strb	r2, [r3, #1]
			break;
 8002752:	e046      	b.n	80027e2 <vectorToPwm+0xd2>
		case turn_left:
			pwmInput->pwmInputB=hVec->left;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	785a      	ldrb	r2, [r3, #1]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	705a      	strb	r2, [r3, #1]
			break;
 800275c:	e041      	b.n	80027e2 <vectorToPwm+0xd2>
		case turn_right:
			pwmInput->pwmInputA=hVec->right;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	789a      	ldrb	r2, [r3, #2]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	701a      	strb	r2, [r3, #0]
			break;
 8002766:	e03c      	b.n	80027e2 <vectorToPwm+0xd2>
		case forward_left:
			pwmInput->pwmInputA=(hVec->forward)/2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=(hVec->forward+hVec->left)/2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	001a      	movs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	18d3      	adds	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	da00      	bge.n	8002786 <vectorToPwm+0x76>
 8002784:	3301      	adds	r3, #1
 8002786:	105b      	asrs	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	705a      	strb	r2, [r3, #1]
			break;
 800278e:	e028      	b.n	80027e2 <vectorToPwm+0xd2>
		case forward_right:
			pwmInput->pwmInputB=(hVec->forward)/2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	705a      	strb	r2, [r3, #1]
			pwmInput->pwmInputA=(hVec->forward+hVec->right)/2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	001a      	movs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	789b      	ldrb	r3, [r3, #2]
 80027a6:	18d3      	adds	r3, r2, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da00      	bge.n	80027ae <vectorToPwm+0x9e>
 80027ac:	3301      	adds	r3, #1
 80027ae:	105b      	asrs	r3, r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	701a      	strb	r2, [r3, #0]
			break;
 80027b6:	e014      	b.n	80027e2 <vectorToPwm+0xd2>
		case halt:
			pwmInput->pwmInputA=0;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=0;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
			pwmInput->pwmInputC=0;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	709a      	strb	r2, [r3, #2]
			pwmInput->pwmInputD=0;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	70da      	strb	r2, [r3, #3]
			break;
 80027d0:	e007      	b.n	80027e2 <vectorToPwm+0xd2>
		case idle:
			pwmInput->pwmInputC=120;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2278      	movs	r2, #120	; 0x78
 80027d6:	709a      	strb	r2, [r3, #2]
			pwmInput->pwmInputD=120;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2278      	movs	r2, #120	; 0x78
 80027dc:	70da      	strb	r2, [r3, #3]
			break;
 80027de:	e000      	b.n	80027e2 <vectorToPwm+0xd2>
		default:
			break;
 80027e0:	46c0      	nop			; (mov r8, r8)
			*delta_x=0;
		}
		if ((*delta_x > (-1*death_zone))&&(*delta_x<0)) {
			*delta_x=0;
		}
	}}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	08007a3c 	.word	0x08007a3c

080027f0 <angleToVector>:

void angleToVector(typVector *hVec,double curr_angle_x,double start_angle_x,double curr_angle_y,double start_angle_y ,double death_zone){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	603a      	str	r2, [r7, #0]
 80027fa:	607b      	str	r3, [r7, #4]
	 double pmax = 45;
 80027fc:	2200      	movs	r2, #0
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <angleToVector+0x12c>)
 8002800:	62ba      	str	r2, [r7, #40]	; 0x28
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
	 double nmax = -45;
 8002804:	2200      	movs	r2, #0
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <angleToVector+0x130>)
 8002808:	623a      	str	r2, [r7, #32]
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
	 double delta_x = curr_angle_x - start_angle_x;
 800280c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800280e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002810:	6838      	ldr	r0, [r7, #0]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	f7ff fa16 	bl	8001c44 <__aeabi_dsub>
 8002818:	0002      	movs	r2, r0
 800281a:	000b      	movs	r3, r1
 800281c:	61ba      	str	r2, [r7, #24]
 800281e:	61fb      	str	r3, [r7, #28]
	 double delta_y = curr_angle_y - start_angle_y;
 8002820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002824:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002828:	f7ff fa0c 	bl	8001c44 <__aeabi_dsub>
 800282c:	0002      	movs	r2, r0
 800282e:	000b      	movs	r3, r1
 8002830:	613a      	str	r2, [r7, #16]
 8002832:	617b      	str	r3, [r7, #20]
	// deathzone(&delta_x, pmax, nmax, death_zone);
	 //deathzone(&delta_y, pmax, nmax, death_zone);
	 if(delta_y>=0){
 8002834:	2200      	movs	r2, #0
 8002836:	2300      	movs	r3, #0
 8002838:	6938      	ldr	r0, [r7, #16]
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	f7fd fd2c 	bl	8000298 <__aeabi_dcmpge>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d05a      	beq.n	80028fa <angleToVector+0x10a>
		 if(delta_x<0){
 8002844:	2200      	movs	r2, #0
 8002846:	2300      	movs	r3, #0
 8002848:	69b8      	ldr	r0, [r7, #24]
 800284a:	69f9      	ldr	r1, [r7, #28]
 800284c:	f7fd fd06 	bl	800025c <__aeabi_dcmplt>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d01b      	beq.n	800288c <angleToVector+0x9c>
			 hVec->left = delta_x*255/nmax;
 8002854:	2200      	movs	r2, #0
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <angleToVector+0x134>)
 8002858:	69b8      	ldr	r0, [r7, #24]
 800285a:	69f9      	ldr	r1, [r7, #28]
 800285c:	f7fe ff86 	bl	800176c <__aeabi_dmul>
 8002860:	0002      	movs	r2, r0
 8002862:	000b      	movs	r3, r1
 8002864:	0010      	movs	r0, r2
 8002866:	0019      	movs	r1, r3
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	f7fe fb7c 	bl	8000f68 <__aeabi_ddiv>
 8002870:	0002      	movs	r2, r0
 8002872:	000b      	movs	r3, r1
 8002874:	0010      	movs	r0, r2
 8002876:	0019      	movs	r1, r3
 8002878:	f7fd fd18 	bl	80002ac <__aeabi_d2uiz>
 800287c:	0003      	movs	r3, r0
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	705a      	strb	r2, [r3, #1]
			 hVec->right = 0;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	709a      	strb	r2, [r3, #2]
 800288a:	e01a      	b.n	80028c2 <angleToVector+0xd2>
		 }
		 else{
			 hVec->right = delta_x*255/pmax;
 800288c:	2200      	movs	r2, #0
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <angleToVector+0x134>)
 8002890:	69b8      	ldr	r0, [r7, #24]
 8002892:	69f9      	ldr	r1, [r7, #28]
 8002894:	f7fe ff6a 	bl	800176c <__aeabi_dmul>
 8002898:	0002      	movs	r2, r0
 800289a:	000b      	movs	r3, r1
 800289c:	0010      	movs	r0, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	f7fe fb60 	bl	8000f68 <__aeabi_ddiv>
 80028a8:	0002      	movs	r2, r0
 80028aa:	000b      	movs	r3, r1
 80028ac:	0010      	movs	r0, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	f7fd fcfc 	bl	80002ac <__aeabi_d2uiz>
 80028b4:	0003      	movs	r3, r0
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	709a      	strb	r2, [r3, #2]
			 hVec->left = 0;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	705a      	strb	r2, [r3, #1]
		 }
		 hVec->forward= delta_y*255/pmax;
 80028c2:	2200      	movs	r2, #0
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <angleToVector+0x134>)
 80028c6:	6938      	ldr	r0, [r7, #16]
 80028c8:	6979      	ldr	r1, [r7, #20]
 80028ca:	f7fe ff4f 	bl	800176c <__aeabi_dmul>
 80028ce:	0002      	movs	r2, r0
 80028d0:	000b      	movs	r3, r1
 80028d2:	0010      	movs	r0, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	f7fe fb45 	bl	8000f68 <__aeabi_ddiv>
 80028de:	0002      	movs	r2, r0
 80028e0:	000b      	movs	r3, r1
 80028e2:	0010      	movs	r0, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	f7fd fce1 	bl	80002ac <__aeabi_d2uiz>
 80028ea:	0003      	movs	r3, r0
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	701a      	strb	r2, [r3, #0]
		 hVec->backward= 0;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	70da      	strb	r2, [r3, #3]
	 }
	 else{
		 hVec->backward=0;
		 hVec->left=0; hVec->right=0; hVec->forward=0;
	 }
 }
 80028f8:	e00b      	b.n	8002912 <angleToVector+0x122>
		 hVec->backward=0;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	70da      	strb	r2, [r3, #3]
		 hVec->left=0; hVec->right=0; hVec->forward=0;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	705a      	strb	r2, [r3, #1]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	709a      	strb	r2, [r3, #2]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
 }
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b00c      	add	sp, #48	; 0x30
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	40468000 	.word	0x40468000
 8002920:	c0468000 	.word	0xc0468000
 8002924:	406fe000 	.word	0x406fe000

08002928 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
     if(huart->Instance == huart1.Instance)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_UART_TxCpltCallback+0x28>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d105      	bne.n	8002948 <HAL_UART_TxCpltCallback+0x20>
     {
     HAL_UART_Transmit_IT(&huart1, tx_buffer, sizeof(tx_buffer));
 800293c:	4905      	ldr	r1, [pc, #20]	; (8002954 <HAL_UART_TxCpltCallback+0x2c>)
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_UART_TxCpltCallback+0x28>)
 8002940:	220a      	movs	r2, #10
 8002942:	0018      	movs	r0, r3
 8002944:	f002 ffb4 	bl	80058b0 <HAL_UART_Transmit_IT>
     }

 }
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000168 	.word	0x20000168
 8002954:	200002d4 	.word	0x200002d4

08002958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	b091      	sub	sp, #68	; 0x44
 800295c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295e:	f000 ff4d 	bl	80037fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002962:	f000 f875 	bl	8002a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002966:	f000 f97b 	bl	8002c60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800296a:	f000 f949 	bl	8002c00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800296e:	f000 f8d7 	bl	8002b20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002972:	f000 f915 	bl	8002ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <main+0xd0>)
 8002978:	0018      	movs	r0, r3
 800297a:	f000 f9ee 	bl	8002d5a <MPU6050_Init>


  HAL_Delay(500);
 800297e:	23fa      	movs	r3, #250	; 0xfa
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	0018      	movs	r0, r3
 8002984:	f000 ff9e 	bl	80038c4 <HAL_Delay>
  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <main+0xd4>)
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <main+0xd0>)
 800298c:	0011      	movs	r1, r2
 800298e:	0018      	movs	r0, r3
 8002990:	f000 fa48 	bl	8002e24 <MPU6050_Read_All>
//  T+ADDR?
//
//  +ADDR:0021:11:01C461
  x_angle_base=MPU6050.KalmanAngleX;
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <main+0xd4>)
 8002996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	61ba      	str	r2, [r7, #24]
 800299c:	61fb      	str	r3, [r7, #28]
  y_angle_base=MPU6050.KalmanAngleY;
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <main+0xd4>)
 80029a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	613a      	str	r2, [r7, #16]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <main+0xd4>)
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <main+0xd0>)
 80029ac:	0011      	movs	r1, r2
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fa38 	bl	8002e24 <MPU6050_Read_All>
	  angleToVector(&hVector, MPU6050.KalmanAngleX, MPU6050.KalmanAngleY, x_angle_base, y_angle_base, 3);
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <main+0xd4>)
 80029b6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80029b8:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <main+0xd4>)
 80029bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	4e1b      	ldr	r6, [pc, #108]	; (8002a30 <main+0xd8>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	491b      	ldr	r1, [pc, #108]	; (8002a34 <main+0xdc>)
 80029c6:	9006      	str	r0, [sp, #24]
 80029c8:	9107      	str	r1, [sp, #28]
 80029ca:	6938      	ldr	r0, [r7, #16]
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	9004      	str	r0, [sp, #16]
 80029d0:	9105      	str	r1, [sp, #20]
 80029d2:	69b8      	ldr	r0, [r7, #24]
 80029d4:	69f9      	ldr	r1, [r7, #28]
 80029d6:	9002      	str	r0, [sp, #8]
 80029d8:	9103      	str	r1, [sp, #12]
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	0022      	movs	r2, r4
 80029e0:	002b      	movs	r3, r5
 80029e2:	0030      	movs	r0, r6
 80029e4:	f7ff ff04 	bl	80027f0 <angleToVector>
	  vectorToPwm(&hVector, &hInput);
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <main+0xe0>)
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <main+0xd8>)
 80029ec:	0011      	movs	r1, r2
 80029ee:	0018      	movs	r0, r3
 80029f0:	f7ff fe8e 	bl	8002710 <vectorToPwm>
	  pwmSmooting(&hOutput,&hInput, KF);
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <main+0xe4>)
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <main+0xe8>)
 80029f8:	490f      	ldr	r1, [pc, #60]	; (8002a38 <main+0xe0>)
 80029fa:	4812      	ldr	r0, [pc, #72]	; (8002a44 <main+0xec>)
 80029fc:	f7ff fd7c 	bl	80024f8 <pwmSmooting>



	  HAL_Delay(500);
 8002a00:	23fa      	movs	r3, #250	; 0xfa
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 ff5d 	bl	80038c4 <HAL_Delay>

	  char bufi[11];
	  sprintf(bufi,"deneme 123");
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <main+0xf0>)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	0011      	movs	r1, r2
 8002a10:	0018      	movs	r0, r3
 8002a12:	f003 fff7 	bl	8006a04 <siprintf>
	  HAL_UART_Transmit(&huart1, bufi, sizeof(bufi), 500);
 8002a16:	23fa      	movs	r3, #250	; 0xfa
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	1d39      	adds	r1, r7, #4
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <main+0xf4>)
 8002a1e:	220b      	movs	r2, #11
 8002a20:	f002 fe9c 	bl	800575c <HAL_UART_Transmit>
  {
 8002a24:	e7c0      	b.n	80029a8 <main+0x50>
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	2000011c 	.word	0x2000011c
 8002a2c:	20000270 	.word	0x20000270
 8002a30:	200002d0 	.word	0x200002d0
 8002a34:	40080000 	.word	0x40080000
 8002a38:	200002c8 	.word	0x200002c8
 8002a3c:	9999999a 	.word	0x9999999a
 8002a40:	3fe99999 	.word	0x3fe99999
 8002a44:	200002cc 	.word	0x200002cc
 8002a48:	08007910 	.word	0x08007910
 8002a4c:	20000168 	.word	0x20000168

08002a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b099      	sub	sp, #100	; 0x64
 8002a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a56:	242c      	movs	r4, #44	; 0x2c
 8002a58:	193b      	adds	r3, r7, r4
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	2334      	movs	r3, #52	; 0x34
 8002a5e:	001a      	movs	r2, r3
 8002a60:	2100      	movs	r1, #0
 8002a62:	f003 ffc7 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a66:	231c      	movs	r3, #28
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	001a      	movs	r2, r3
 8002a70:	2100      	movs	r1, #0
 8002a72:	f003 ffbf 	bl	80069f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a76:	003b      	movs	r3, r7
 8002a78:	0018      	movs	r0, r3
 8002a7a:	231c      	movs	r3, #28
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	f003 ffb8 	bl	80069f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a84:	0021      	movs	r1, r4
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2202      	movs	r2, #2
 8002a8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2201      	movs	r2, #1
 8002a90:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2210      	movs	r2, #16
 8002a96:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	0212      	lsls	r2, r2, #8
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	22a0      	movs	r2, #160	; 0xa0
 8002aaa:	0392      	lsls	r2, r2, #14
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f001 fffc 	bl	8004ab4 <HAL_RCC_OscConfig>
 8002abc:	1e03      	subs	r3, r0, #0
 8002abe:	d001      	beq.n	8002ac4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002ac0:	f000 f946 	bl	8002d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac4:	211c      	movs	r1, #28
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2202      	movs	r2, #2
 8002ad0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f002 fb6c 	bl	80051c0 <HAL_RCC_ClockConfig>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002aec:	f000 f930 	bl	8002d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002af0:	003b      	movs	r3, r7
 8002af2:	2223      	movs	r2, #35	; 0x23
 8002af4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002af6:	003b      	movs	r3, r7
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002afc:	003b      	movs	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002b02:	003b      	movs	r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b08:	003b      	movs	r3, r7
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f002 fcd2 	bl	80054b4 <HAL_RCCEx_PeriphCLKConfig>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d001      	beq.n	8002b18 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002b14:	f000 f91c 	bl	8002d50 <Error_Handler>
  }
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b019      	add	sp, #100	; 0x64
 8002b1e:	bd90      	pop	{r4, r7, pc}

08002b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <MX_I2C1_Init+0x78>)
 8002b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <MX_I2C1_Init+0x7c>)
 8002b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b42:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f001 f9c7 	bl	8003ef0 <HAL_I2C_Init>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b66:	f000 f8f3 	bl	8002d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f001 ff08 	bl	8004984 <HAL_I2CEx_ConfigAnalogFilter>
 8002b74:	1e03      	subs	r3, r0, #0
 8002b76:	d001      	beq.n	8002b7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b78:	f000 f8ea 	bl	8002d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <MX_I2C1_Init+0x74>)
 8002b7e:	2100      	movs	r1, #0
 8002b80:	0018      	movs	r0, r3
 8002b82:	f001 ff4b 	bl	8004a1c <HAL_I2CEx_ConfigDigitalFilter>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d001      	beq.n	8002b8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b8a:	f000 f8e1 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000011c 	.word	0x2000011c
 8002b98:	40005400 	.word	0x40005400
 8002b9c:	2000090e 	.word	0x2000090e

08002ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <MX_USART1_UART_Init+0x5c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bac:	2296      	movs	r2, #150	; 0x96
 8002bae:	0192      	lsls	r2, r2, #6
 8002bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <MX_USART1_UART_Init+0x58>)
 8002be4:	0018      	movs	r0, r3
 8002be6:	f002 fd65 	bl	80056b4 <HAL_UART_Init>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002bee:	f000 f8af 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000168 	.word	0x20000168
 8002bfc:	40013800 	.word	0x40013800

08002c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c06:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <MX_USART2_UART_Init+0x5c>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c0c:	2296      	movs	r2, #150	; 0x96
 8002c0e:	0192      	lsls	r2, r2, #6
 8002c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c44:	0018      	movs	r0, r3
 8002c46:	f002 fd35 	bl	80056b4 <HAL_UART_Init>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c4e:	f000 f87f 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200001ec 	.word	0x200001ec
 8002c5c:	40004400 	.word	0x40004400

08002c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b08b      	sub	sp, #44	; 0x2c
 8002c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c66:	2414      	movs	r4, #20
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2314      	movs	r3, #20
 8002c6e:	001a      	movs	r2, r3
 8002c70:	2100      	movs	r1, #0
 8002c72:	f003 febf 	bl	80069f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0309      	lsls	r1, r1, #12
 8002c80:	430a      	orrs	r2, r1
 8002c82:	615a      	str	r2, [r3, #20]
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	031b      	lsls	r3, r3, #12
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	03c9      	lsls	r1, r1, #15
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	615a      	str	r2, [r3, #20]
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	03db      	lsls	r3, r3, #15
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0289      	lsls	r1, r1, #10
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	615a      	str	r2, [r3, #20]
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	02c9      	lsls	r1, r1, #11
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	615a      	str	r2, [r3, #20]
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <MX_GPIO_Init+0xe8>)
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	02db      	lsls	r3, r3, #11
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ce6:	2390      	movs	r3, #144	; 0x90
 8002ce8:	05db      	lsls	r3, r3, #23
 8002cea:	2200      	movs	r2, #0
 8002cec:	2120      	movs	r1, #32
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f001 f8e0 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0192      	lsls	r2, r2, #6
 8002cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	2284      	movs	r2, #132	; 0x84
 8002d00:	0392      	lsls	r2, r2, #14
 8002d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <MX_GPIO_Init+0xec>)
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f000 ff57 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d16:	0021      	movs	r1, r4
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2201      	movs	r2, #1
 8002d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d30:	187a      	adds	r2, r7, r1
 8002d32:	2390      	movs	r3, #144	; 0x90
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	0011      	movs	r1, r2
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 ff43 	bl	8003bc4 <HAL_GPIO_Init>

}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b00b      	add	sp, #44	; 0x2c
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	48000800 	.word	0x48000800

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <Error_Handler+0x8>

08002d5a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002d5a:	b590      	push	{r4, r7, lr}
 8002d5c:	b089      	sub	sp, #36	; 0x24
 8002d5e:	af04      	add	r7, sp, #16
 8002d60:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002d62:	23fa      	movs	r3, #250	; 0xfa
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	240f      	movs	r4, #15
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2301      	movs	r3, #1
 8002d76:	2275      	movs	r2, #117	; 0x75
 8002d78:	21d0      	movs	r1, #208	; 0xd0
 8002d7a:	f001 fa7d 	bl	8004278 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b68      	cmp	r3, #104	; 0x68
 8002d84:	d148      	bne.n	8002e18 <MPU6050_Init+0xbe>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002d86:	210e      	movs	r1, #14
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002d8e:	23fa      	movs	r3, #250	; 0xfa
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	9302      	str	r3, [sp, #8]
 8002d96:	2301      	movs	r3, #1
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	000c      	movs	r4, r1
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2301      	movs	r3, #1
 8002da2:	226b      	movs	r2, #107	; 0x6b
 8002da4:	21d0      	movs	r1, #208	; 0xd0
 8002da6:	f001 f939 	bl	800401c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002daa:	0021      	movs	r1, r4
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2207      	movs	r2, #7
 8002db0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002db2:	23fa      	movs	r3, #250	; 0xfa
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	9302      	str	r3, [sp, #8]
 8002dba:	2301      	movs	r3, #1
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	000c      	movs	r4, r1
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2219      	movs	r2, #25
 8002dc8:	21d0      	movs	r1, #208	; 0xd0
 8002dca:	f001 f927 	bl	800401c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002dce:	0021      	movs	r1, r4
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002dd6:	23fa      	movs	r3, #250	; 0xfa
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	2301      	movs	r3, #1
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	000c      	movs	r4, r1
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2301      	movs	r3, #1
 8002dea:	221c      	movs	r2, #28
 8002dec:	21d0      	movs	r1, #208	; 0xd0
 8002dee:	f001 f915 	bl	800401c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002df2:	0021      	movs	r1, r4
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002dfa:	23fa      	movs	r3, #250	; 0xfa
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	9302      	str	r3, [sp, #8]
 8002e02:	2301      	movs	r3, #1
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	221b      	movs	r2, #27
 8002e0e:	21d0      	movs	r1, #208	; 0xd0
 8002e10:	f001 f904 	bl	800401c <HAL_I2C_Mem_Write>
        return 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <MPU6050_Init+0xc0>
    }
    return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b005      	add	sp, #20
 8002e20:	bd90      	pop	{r4, r7, pc}
	...

08002e24 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	b099      	sub	sp, #100	; 0x64
 8002e28:	af04      	add	r7, sp, #16
 8002e2a:	6178      	str	r0, [r7, #20]
 8002e2c:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002e2e:	23fa      	movs	r3, #250	; 0xfa
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	230e      	movs	r3, #14
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2408      	movs	r4, #8
 8002e3c:	2510      	movs	r5, #16
 8002e3e:	1963      	adds	r3, r4, r5
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2301      	movs	r3, #1
 8002e46:	223b      	movs	r2, #59	; 0x3b
 8002e48:	21d0      	movs	r1, #208	; 0xd0
 8002e4a:	f001 fa15 	bl	8004278 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002e4e:	0020      	movs	r0, r4
 8002e50:	0029      	movs	r1, r5
 8002e52:	1843      	adds	r3, r0, r1
 8002e54:	19db      	adds	r3, r3, r7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	1843      	adds	r3, r0, r1
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	4313      	orrs	r3, r2
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002e6c:	1843      	adds	r3, r0, r1
 8002e6e:	19db      	adds	r3, r3, r7
 8002e70:	789b      	ldrb	r3, [r3, #2]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	1843      	adds	r3, r0, r1
 8002e78:	19db      	adds	r3, r3, r7
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002e86:	1843      	adds	r3, r0, r1
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	791b      	ldrb	r3, [r3, #4]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	1843      	adds	r3, r0, r1
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	795b      	ldrb	r3, [r3, #5]
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b21a      	sxth	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002ea0:	000d      	movs	r5, r1
 8002ea2:	1843      	adds	r3, r0, r1
 8002ea4:	19db      	adds	r3, r3, r7
 8002ea6:	799b      	ldrb	r3, [r3, #6]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	b219      	sxth	r1, r3
 8002eac:	1943      	adds	r3, r0, r5
 8002eae:	19db      	adds	r3, r3, r7
 8002eb0:	79db      	ldrb	r3, [r3, #7]
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	2436      	movs	r4, #54	; 0x36
 8002eb6:	1963      	adds	r3, r4, r5
 8002eb8:	19db      	adds	r3, r3, r7
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002ebe:	0001      	movs	r1, r0
 8002ec0:	194b      	adds	r3, r1, r5
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	7a1b      	ldrb	r3, [r3, #8]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	194b      	adds	r3, r1, r5
 8002ecc:	19db      	adds	r3, r3, r7
 8002ece:	7a5b      	ldrb	r3, [r3, #9]
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002eda:	194b      	adds	r3, r1, r5
 8002edc:	19db      	adds	r3, r3, r7
 8002ede:	7a9b      	ldrb	r3, [r3, #10]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	b21a      	sxth	r2, r3
 8002ee4:	194b      	adds	r3, r1, r5
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	7adb      	ldrb	r3, [r3, #11]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002ef4:	194b      	adds	r3, r1, r5
 8002ef6:	19db      	adds	r3, r3, r7
 8002ef8:	7b1b      	ldrb	r3, [r3, #12]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	194b      	adds	r3, r1, r5
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	7b5b      	ldrb	r3, [r3, #13]
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2200      	movs	r2, #0
 8002f12:	5e9b      	ldrsh	r3, [r3, r2]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff fa7b 	bl	8002410 <__aeabi_i2d>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4bac      	ldr	r3, [pc, #688]	; (80031d0 <MPU6050_Read_All+0x3ac>)
 8002f1e:	f7fe f823 	bl	8000f68 <__aeabi_ddiv>
 8002f22:	0002      	movs	r2, r0
 8002f24:	000b      	movs	r3, r1
 8002f26:	6939      	ldr	r1, [r7, #16]
 8002f28:	608a      	str	r2, [r1, #8]
 8002f2a:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	5e9b      	ldrsh	r3, [r3, r2]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff fa6c 	bl	8002410 <__aeabi_i2d>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4ba5      	ldr	r3, [pc, #660]	; (80031d0 <MPU6050_Read_All+0x3ac>)
 8002f3c:	f7fe f814 	bl	8000f68 <__aeabi_ddiv>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	6939      	ldr	r1, [r7, #16]
 8002f46:	610a      	str	r2, [r1, #16]
 8002f48:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff fa5d 	bl	8002410 <__aeabi_i2d>
 8002f56:	2200      	movs	r2, #0
 8002f58:	4b9e      	ldr	r3, [pc, #632]	; (80031d4 <MPU6050_Read_All+0x3b0>)
 8002f5a:	f7fe f805 	bl	8000f68 <__aeabi_ddiv>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	000b      	movs	r3, r1
 8002f62:	6939      	ldr	r1, [r7, #16]
 8002f64:	618a      	str	r2, [r1, #24]
 8002f66:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002f68:	1963      	adds	r3, r4, r5
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7fd fc6f 	bl	8000854 <__aeabi_i2f>
 8002f76:	1c03      	adds	r3, r0, #0
 8002f78:	4997      	ldr	r1, [pc, #604]	; (80031d8 <MPU6050_Read_All+0x3b4>)
 8002f7a:	1c18      	adds	r0, r3, #0
 8002f7c:	f7fd fb52 	bl	8000624 <__aeabi_fdiv>
 8002f80:	1c03      	adds	r3, r0, #0
 8002f82:	4996      	ldr	r1, [pc, #600]	; (80031dc <MPU6050_Read_All+0x3b8>)
 8002f84:	1c18      	adds	r0, r3, #0
 8002f86:	f7fd f9af 	bl	80002e8 <__aeabi_fadd>
 8002f8a:	1c03      	adds	r3, r0, #0
 8002f8c:	1c1a      	adds	r2, r3, #0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2220      	movs	r2, #32
 8002f96:	5e9b      	ldrsh	r3, [r3, r2]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff fa39 	bl	8002410 <__aeabi_i2d>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <MPU6050_Read_All+0x3bc>)
 8002fa2:	f7fd ffe1 	bl	8000f68 <__aeabi_ddiv>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	000b      	movs	r3, r1
 8002faa:	6939      	ldr	r1, [r7, #16]
 8002fac:	628a      	str	r2, [r1, #40]	; 0x28
 8002fae:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2222      	movs	r2, #34	; 0x22
 8002fb4:	5e9b      	ldrsh	r3, [r3, r2]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7ff fa2a 	bl	8002410 <__aeabi_i2d>
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <MPU6050_Read_All+0x3bc>)
 8002fc0:	f7fd ffd2 	bl	8000f68 <__aeabi_ddiv>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	630a      	str	r2, [r1, #48]	; 0x30
 8002fcc:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	5e9b      	ldrsh	r3, [r3, r2]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fa1b 	bl	8002410 <__aeabi_i2d>
 8002fda:	2200      	movs	r2, #0
 8002fdc:	4b80      	ldr	r3, [pc, #512]	; (80031e0 <MPU6050_Read_All+0x3bc>)
 8002fde:	f7fd ffc3 	bl	8000f68 <__aeabi_ddiv>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	6939      	ldr	r1, [r7, #16]
 8002fe8:	638a      	str	r2, [r1, #56]	; 0x38
 8002fea:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002fec:	f000 fc60 	bl	80038b0 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	; (80031e4 <MPU6050_Read_All+0x3c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff fa39 	bl	8002470 <__aeabi_ui2d>
 8002ffe:	2200      	movs	r2, #0
 8003000:	4b79      	ldr	r3, [pc, #484]	; (80031e8 <MPU6050_Read_All+0x3c4>)
 8003002:	f7fd ffb1 	bl	8000f68 <__aeabi_ddiv>
 8003006:	0002      	movs	r2, r0
 8003008:	000b      	movs	r3, r1
 800300a:	63ba      	str	r2, [r7, #56]	; 0x38
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 800300e:	f000 fc4f 	bl	80038b0 <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <MPU6050_Read_All+0x3c0>)
 8003016:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2200      	movs	r2, #0
 800301c:	5e9b      	ldrsh	r3, [r3, r2]
 800301e:	001a      	movs	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2100      	movs	r1, #0
 8003024:	5e5b      	ldrsh	r3, [r3, r1]
 8003026:	435a      	muls	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2104      	movs	r1, #4
 800302c:	5e5b      	ldrsh	r3, [r3, r1]
 800302e:	0019      	movs	r1, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2004      	movs	r0, #4
 8003034:	5e1b      	ldrsh	r3, [r3, r0]
 8003036:	434b      	muls	r3, r1
 8003038:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 800303a:	0018      	movs	r0, r3
 800303c:	f7ff f9e8 	bl	8002410 <__aeabi_i2d>
 8003040:	0002      	movs	r2, r0
 8003042:	000b      	movs	r3, r1
 8003044:	0010      	movs	r0, r2
 8003046:	0019      	movs	r1, r3
 8003048:	f004 facd 	bl	80075e6 <sqrt>
 800304c:	0002      	movs	r2, r0
 800304e:	000b      	movs	r3, r1
 8003050:	633a      	str	r2, [r7, #48]	; 0x30
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 8003054:	2200      	movs	r2, #0
 8003056:	2300      	movs	r3, #0
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800305c:	f7fd f8f8 	bl	8000250 <__aeabi_dcmpeq>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d118      	bne.n	8003096 <MPU6050_Read_All+0x272>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2202      	movs	r2, #2
 8003068:	5e9b      	ldrsh	r3, [r3, r2]
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff f9d0 	bl	8002410 <__aeabi_i2d>
 8003070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	f7fd ff78 	bl	8000f68 <__aeabi_ddiv>
 8003078:	0002      	movs	r2, r0
 800307a:	000b      	movs	r3, r1
 800307c:	0010      	movs	r0, r2
 800307e:	0019      	movs	r1, r3
 8003080:	f004 f92a 	bl	80072d8 <atan>
 8003084:	4a59      	ldr	r2, [pc, #356]	; (80031ec <MPU6050_Read_All+0x3c8>)
 8003086:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <MPU6050_Read_All+0x3cc>)
 8003088:	f7fe fb70 	bl	800176c <__aeabi_dmul>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	64ba      	str	r2, [r7, #72]	; 0x48
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003094:	e003      	b.n	800309e <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 8003096:	2200      	movs	r2, #0
 8003098:	2300      	movs	r3, #0
 800309a:	64ba      	str	r2, [r7, #72]	; 0x48
 800309c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2200      	movs	r2, #0
 80030a2:	5e9b      	ldrsh	r3, [r3, r2]
 80030a4:	425b      	negs	r3, r3
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff f9b2 	bl	8002410 <__aeabi_i2d>
 80030ac:	0004      	movs	r4, r0
 80030ae:	000d      	movs	r5, r1
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2204      	movs	r2, #4
 80030b4:	5e9b      	ldrsh	r3, [r3, r2]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff f9aa 	bl	8002410 <__aeabi_i2d>
 80030bc:	0002      	movs	r2, r0
 80030be:	000b      	movs	r3, r1
 80030c0:	0020      	movs	r0, r4
 80030c2:	0029      	movs	r1, r5
 80030c4:	f004 fa8b 	bl	80075de <atan2>
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <MPU6050_Read_All+0x3c8>)
 80030ca:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <MPU6050_Read_All+0x3cc>)
 80030cc:	f7fe fb4e 	bl	800176c <__aeabi_dmul>
 80030d0:	0002      	movs	r2, r0
 80030d2:	000b      	movs	r3, r1
 80030d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80030d8:	2200      	movs	r2, #0
 80030da:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <MPU6050_Read_All+0x3d0>)
 80030dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e0:	f7fd f8bc 	bl	800025c <__aeabi_dcmplt>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d008      	beq.n	80030fa <MPU6050_Read_All+0x2d6>
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030ee:	2200      	movs	r2, #0
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <MPU6050_Read_All+0x3d4>)
 80030f2:	f7fd f8c7 	bl	8000284 <__aeabi_dcmpgt>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d110      	bne.n	800311c <MPU6050_Read_All+0x2f8>
 80030fa:	2200      	movs	r2, #0
 80030fc:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <MPU6050_Read_All+0x3d4>)
 80030fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003102:	f7fd f8bf 	bl	8000284 <__aeabi_dcmpgt>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d013      	beq.n	8003132 <MPU6050_Read_All+0x30e>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800310e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003110:	2200      	movs	r2, #0
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <MPU6050_Read_All+0x3d0>)
 8003114:	f7fd f8a2 	bl	800025c <__aeabi_dcmplt>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d00a      	beq.n	8003132 <MPU6050_Read_All+0x30e>
    {
        KalmanY.angle = pitch;
 800311c:	4937      	ldr	r1, [pc, #220]	; (80031fc <MPU6050_Read_All+0x3d8>)
 800311e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	618a      	str	r2, [r1, #24]
 8003124:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 8003126:	6939      	ldr	r1, [r7, #16]
 8003128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	650a      	str	r2, [r1, #80]	; 0x50
 800312e:	654b      	str	r3, [r1, #84]	; 0x54
 8003130:	e015      	b.n	800315e <MPU6050_Read_All+0x33a>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800313a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800313c:	4e2f      	ldr	r6, [pc, #188]	; (80031fc <MPU6050_Read_All+0x3d8>)
 800313e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003142:	9002      	str	r0, [sp, #8]
 8003144:	9103      	str	r1, [sp, #12]
 8003146:	9200      	str	r2, [sp, #0]
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	0022      	movs	r2, r4
 800314c:	002b      	movs	r3, r5
 800314e:	0030      	movs	r0, r6
 8003150:	f000 f858 	bl	8003204 <Kalman_getAngle>
 8003154:	0002      	movs	r2, r0
 8003156:	000b      	movs	r3, r1
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	650a      	str	r2, [r1, #80]	; 0x50
 800315c:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	0011      	movs	r1, r2
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <MPU6050_Read_All+0x3d4>)
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	f7fd f885 	bl	8000284 <__aeabi_dcmpgt>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d00d      	beq.n	800319a <MPU6050_Read_All+0x376>
        DataStruct->Gx = -DataStruct->Gx;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	0011      	movs	r1, r2
 8003186:	6039      	str	r1, [r7, #0]
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0609      	lsls	r1, r1, #24
 800318c:	4059      	eors	r1, r3
 800318e:	6079      	str	r1, [r7, #4]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	6839      	ldr	r1, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6299      	str	r1, [r3, #40]	; 0x28
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80031a2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80031a4:	4e16      	ldr	r6, [pc, #88]	; (8003200 <MPU6050_Read_All+0x3dc>)
 80031a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031aa:	9002      	str	r0, [sp, #8]
 80031ac:	9103      	str	r1, [sp, #12]
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	0022      	movs	r2, r4
 80031b4:	002b      	movs	r3, r5
 80031b6:	0030      	movs	r0, r6
 80031b8:	f000 f824 	bl	8003204 <Kalman_getAngle>
 80031bc:	0002      	movs	r2, r0
 80031be:	000b      	movs	r3, r1
 80031c0:	6939      	ldr	r1, [r7, #16]
 80031c2:	648a      	str	r2, [r1, #72]	; 0x48
 80031c4:	64cb      	str	r3, [r1, #76]	; 0x4c


}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b015      	add	sp, #84	; 0x54
 80031cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40d00000 	.word	0x40d00000
 80031d4:	40cc2900 	.word	0x40cc2900
 80031d8:	43aa0000 	.word	0x43aa0000
 80031dc:	42121eb8 	.word	0x42121eb8
 80031e0:	40606000 	.word	0x40606000
 80031e4:	200002e0 	.word	0x200002e0
 80031e8:	408f4000 	.word	0x408f4000
 80031ec:	1a63c1f8 	.word	0x1a63c1f8
 80031f0:	404ca5dc 	.word	0x404ca5dc
 80031f4:	c0568000 	.word	0xc0568000
 80031f8:	40568000 	.word	0x40568000
 80031fc:	20000048 	.word	0x20000048
 8003200:	20000000 	.word	0x20000000

08003204 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b093      	sub	sp, #76	; 0x4c
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	603a      	str	r2, [r7, #0]
 800320e:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003218:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800321a:	f7fe fd13 	bl	8001c44 <__aeabi_dsub>
 800321e:	0002      	movs	r2, r0
 8003220:	000b      	movs	r3, r1
 8003222:	643a      	str	r2, [r7, #64]	; 0x40
 8003224:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699c      	ldr	r4, [r3, #24]
 800322a:	69dd      	ldr	r5, [r3, #28]
 800322c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800322e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003230:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003232:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003234:	f7fe fa9a 	bl	800176c <__aeabi_dmul>
 8003238:	0002      	movs	r2, r0
 800323a:	000b      	movs	r3, r1
 800323c:	0020      	movs	r0, r4
 800323e:	0029      	movs	r1, r5
 8003240:	f7fd fb56 	bl	80008f0 <__aeabi_dadd>
 8003244:	0002      	movs	r2, r0
 8003246:	000b      	movs	r3, r1
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	618a      	str	r2, [r1, #24]
 800324c:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003252:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003258:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800325a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	f7fe fa85 	bl	800176c <__aeabi_dmul>
 8003262:	0002      	movs	r2, r0
 8003264:	000b      	movs	r3, r1
 8003266:	0010      	movs	r0, r2
 8003268:	0019      	movs	r1, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	f7fe fce8 	bl	8001c44 <__aeabi_dsub>
 8003274:	0002      	movs	r2, r0
 8003276:	000b      	movs	r3, r1
 8003278:	0010      	movs	r0, r2
 800327a:	0019      	movs	r1, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	f7fe fcdf 	bl	8001c44 <__aeabi_dsub>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	0010      	movs	r0, r2
 800328c:	0019      	movs	r1, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f7fd fb2c 	bl	80008f0 <__aeabi_dadd>
 8003298:	0002      	movs	r2, r0
 800329a:	000b      	movs	r3, r1
 800329c:	0010      	movs	r0, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	f7fe fa62 	bl	800176c <__aeabi_dmul>
 80032a8:	0002      	movs	r2, r0
 80032aa:	000b      	movs	r3, r1
 80032ac:	0020      	movs	r0, r4
 80032ae:	0029      	movs	r1, r5
 80032b0:	f7fd fb1e 	bl	80008f0 <__aeabi_dadd>
 80032b4:	0002      	movs	r2, r0
 80032b6:	000b      	movs	r3, r1
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	628a      	str	r2, [r1, #40]	; 0x28
 80032bc:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80032c2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ce:	f7fe fa4d 	bl	800176c <__aeabi_dmul>
 80032d2:	0002      	movs	r2, r0
 80032d4:	000b      	movs	r3, r1
 80032d6:	0020      	movs	r0, r4
 80032d8:	0029      	movs	r1, r5
 80032da:	f7fe fcb3 	bl	8001c44 <__aeabi_dsub>
 80032de:	0002      	movs	r2, r0
 80032e0:	000b      	movs	r3, r1
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	630a      	str	r2, [r1, #48]	; 0x30
 80032e6:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80032ec:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f8:	f7fe fa38 	bl	800176c <__aeabi_dmul>
 80032fc:	0002      	movs	r2, r0
 80032fe:	000b      	movs	r3, r1
 8003300:	0020      	movs	r0, r4
 8003302:	0029      	movs	r1, r5
 8003304:	f7fe fc9e 	bl	8001c44 <__aeabi_dsub>
 8003308:	0002      	movs	r2, r0
 800330a:	000b      	movs	r3, r1
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	638a      	str	r2, [r1, #56]	; 0x38
 8003310:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003316:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6898      	ldr	r0, [r3, #8]
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003322:	f7fe fa23 	bl	800176c <__aeabi_dmul>
 8003326:	0002      	movs	r2, r0
 8003328:	000b      	movs	r3, r1
 800332a:	0020      	movs	r0, r4
 800332c:	0029      	movs	r1, r5
 800332e:	f7fd fadf 	bl	80008f0 <__aeabi_dadd>
 8003332:	0002      	movs	r2, r0
 8003334:	000b      	movs	r3, r1
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	640a      	str	r2, [r1, #64]	; 0x40
 800333a:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f7fd fad2 	bl	80008f0 <__aeabi_dadd>
 800334c:	0002      	movs	r2, r0
 800334e:	000b      	movs	r3, r1
 8003350:	63ba      	str	r2, [r7, #56]	; 0x38
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335e:	f7fd fe03 	bl	8000f68 <__aeabi_ddiv>
 8003362:	0002      	movs	r2, r0
 8003364:	000b      	movs	r3, r1
 8003366:	2610      	movs	r6, #16
 8003368:	19b9      	adds	r1, r7, r6
 800336a:	600a      	str	r2, [r1, #0]
 800336c:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003372:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	f7fd fdf6 	bl	8000f68 <__aeabi_ddiv>
 800337c:	0002      	movs	r2, r0
 800337e:	000b      	movs	r3, r1
 8003380:	19b9      	adds	r1, r7, r6
 8003382:	608a      	str	r2, [r1, #8]
 8003384:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f7fe fc58 	bl	8001c44 <__aeabi_dsub>
 8003394:	0002      	movs	r2, r0
 8003396:	000b      	movs	r3, r1
 8003398:	633a      	str	r2, [r7, #48]	; 0x30
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699c      	ldr	r4, [r3, #24]
 80033a0:	69dd      	ldr	r5, [r3, #28]
 80033a2:	19bb      	adds	r3, r7, r6
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	f7fe f9de 	bl	800176c <__aeabi_dmul>
 80033b0:	0002      	movs	r2, r0
 80033b2:	000b      	movs	r3, r1
 80033b4:	0020      	movs	r0, r4
 80033b6:	0029      	movs	r1, r5
 80033b8:	f7fd fa9a 	bl	80008f0 <__aeabi_dadd>
 80033bc:	0002      	movs	r2, r0
 80033be:	000b      	movs	r3, r1
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	618a      	str	r2, [r1, #24]
 80033c4:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1c      	ldr	r4, [r3, #32]
 80033ca:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80033cc:	19bb      	adds	r3, r7, r6
 80033ce:	6898      	ldr	r0, [r3, #8]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	f7fe f9c9 	bl	800176c <__aeabi_dmul>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	0020      	movs	r0, r4
 80033e0:	0029      	movs	r1, r5
 80033e2:	f7fd fa85 	bl	80008f0 <__aeabi_dadd>
 80033e6:	0002      	movs	r2, r0
 80033e8:	000b      	movs	r3, r1
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	620a      	str	r2, [r1, #32]
 80033ee:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	623a      	str	r2, [r7, #32]
 8003402:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003408:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800340a:	19bb      	adds	r3, r7, r6
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	f7fe f9aa 	bl	800176c <__aeabi_dmul>
 8003418:	0002      	movs	r2, r0
 800341a:	000b      	movs	r3, r1
 800341c:	0020      	movs	r0, r4
 800341e:	0029      	movs	r1, r5
 8003420:	f7fe fc10 	bl	8001c44 <__aeabi_dsub>
 8003424:	0002      	movs	r2, r0
 8003426:	000b      	movs	r3, r1
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	628a      	str	r2, [r1, #40]	; 0x28
 800342c:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003432:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003434:	19bb      	adds	r3, r7, r6
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	6a3a      	ldr	r2, [r7, #32]
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	f7fe f995 	bl	800176c <__aeabi_dmul>
 8003442:	0002      	movs	r2, r0
 8003444:	000b      	movs	r3, r1
 8003446:	0020      	movs	r0, r4
 8003448:	0029      	movs	r1, r5
 800344a:	f7fe fbfb 	bl	8001c44 <__aeabi_dsub>
 800344e:	0002      	movs	r2, r0
 8003450:	000b      	movs	r3, r1
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	630a      	str	r2, [r1, #48]	; 0x30
 8003456:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800345c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800345e:	19bb      	adds	r3, r7, r6
 8003460:	6898      	ldr	r0, [r3, #8]
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	f7fe f980 	bl	800176c <__aeabi_dmul>
 800346c:	0002      	movs	r2, r0
 800346e:	000b      	movs	r3, r1
 8003470:	0020      	movs	r0, r4
 8003472:	0029      	movs	r1, r5
 8003474:	f7fe fbe6 	bl	8001c44 <__aeabi_dsub>
 8003478:	0002      	movs	r2, r0
 800347a:	000b      	movs	r3, r1
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	638a      	str	r2, [r1, #56]	; 0x38
 8003480:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003486:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003488:	19bb      	adds	r3, r7, r6
 800348a:	6898      	ldr	r0, [r3, #8]
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	f7fe f96b 	bl	800176c <__aeabi_dmul>
 8003496:	0002      	movs	r2, r0
 8003498:	000b      	movs	r3, r1
 800349a:	0020      	movs	r0, r4
 800349c:	0029      	movs	r1, r5
 800349e:	f7fe fbd1 	bl	8001c44 <__aeabi_dsub>
 80034a2:	0002      	movs	r2, r0
 80034a4:	000b      	movs	r3, r1
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	640a      	str	r2, [r1, #64]	; 0x40
 80034aa:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	69db      	ldr	r3, [r3, #28]
};
 80034b2:	0010      	movs	r0, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b013      	add	sp, #76	; 0x4c
 80034ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_MspInit+0x44>)
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <HAL_MspInit+0x44>)
 80034c8:	2101      	movs	r1, #1
 80034ca:	430a      	orrs	r2, r1
 80034cc:	619a      	str	r2, [r3, #24]
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_MspInit+0x44>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_MspInit+0x44>)
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_MspInit+0x44>)
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	0549      	lsls	r1, r1, #21
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_MspInit+0x44>)
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	055b      	lsls	r3, r3, #21
 80034f0:	4013      	ands	r3, r2
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b002      	add	sp, #8
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b08b      	sub	sp, #44	; 0x2c
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	2414      	movs	r4, #20
 800350e:	193b      	adds	r3, r7, r4
 8003510:	0018      	movs	r0, r3
 8003512:	2314      	movs	r3, #20
 8003514:	001a      	movs	r2, r3
 8003516:	2100      	movs	r1, #0
 8003518:	f003 fa6c 	bl	80069f4 <memset>
  if(hi2c->Instance==I2C1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_I2C_MspInit+0x90>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d132      	bne.n	800358c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_I2C_MspInit+0x94>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_I2C_MspInit+0x94>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	02c9      	lsls	r1, r1, #11
 8003530:	430a      	orrs	r2, r1
 8003532:	615a      	str	r2, [r3, #20]
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_I2C_MspInit+0x94>)
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	02db      	lsls	r3, r3, #11
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003542:	193b      	adds	r3, r7, r4
 8003544:	22c0      	movs	r2, #192	; 0xc0
 8003546:	0092      	lsls	r2, r2, #2
 8003548:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800354a:	0021      	movs	r1, r4
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2212      	movs	r2, #18
 8003550:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	187b      	adds	r3, r7, r1
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003558:	187b      	adds	r3, r7, r1
 800355a:	2203      	movs	r2, #3
 800355c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2201      	movs	r2, #1
 8003562:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003564:	187b      	adds	r3, r7, r1
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <HAL_I2C_MspInit+0x98>)
 8003568:	0019      	movs	r1, r3
 800356a:	0010      	movs	r0, r2
 800356c:	f000 fb2a 	bl	8003bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_I2C_MspInit+0x94>)
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_I2C_MspInit+0x94>)
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	0389      	lsls	r1, r1, #14
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_I2C_MspInit+0x94>)
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	039b      	lsls	r3, r3, #14
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b00b      	add	sp, #44	; 0x2c
 8003592:	bd90      	pop	{r4, r7, pc}
 8003594:	40005400 	.word	0x40005400
 8003598:	40021000 	.word	0x40021000
 800359c:	48000400 	.word	0x48000400

080035a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b08d      	sub	sp, #52	; 0x34
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	241c      	movs	r4, #28
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	0018      	movs	r0, r3
 80035ae:	2314      	movs	r3, #20
 80035b0:	001a      	movs	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f003 fa1e 	bl	80069f4 <memset>
  if(huart->Instance==USART1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a41      	ldr	r2, [pc, #260]	; (80036c4 <HAL_UART_MspInit+0x124>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d13c      	bne.n	800363c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	01c9      	lsls	r1, r1, #7
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
 80035d0:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0289      	lsls	r1, r1, #10
 80035e8:	430a      	orrs	r2, r1
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	4013      	ands	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	22c0      	movs	r2, #192	; 0xc0
 80035fe:	00d2      	lsls	r2, r2, #3
 8003600:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	0021      	movs	r1, r4
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2202      	movs	r2, #2
 8003608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2203      	movs	r2, #3
 8003614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2201      	movs	r2, #1
 800361a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	187a      	adds	r2, r7, r1
 800361e:	2390      	movs	r3, #144	; 0x90
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f000 facd 	bl	8003bc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	201b      	movs	r0, #27
 8003630:	f000 fa18 	bl	8003a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003634:	201b      	movs	r0, #27
 8003636:	f000 fa2a 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800363a:	e03f      	b.n	80036bc <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_UART_MspInit+0x12c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d13a      	bne.n	80036bc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_UART_MspInit+0x128>)
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_UART_MspInit+0x128>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0289      	lsls	r1, r1, #10
 8003650:	430a      	orrs	r2, r1
 8003652:	61da      	str	r2, [r3, #28]
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_UART_MspInit+0x128>)
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_UART_MspInit+0x128>)
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_UART_MspInit+0x128>)
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	0289      	lsls	r1, r1, #10
 800366c:	430a      	orrs	r2, r1
 800366e:	615a      	str	r2, [r3, #20]
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_UART_MspInit+0x128>)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	029b      	lsls	r3, r3, #10
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800367e:	211c      	movs	r1, #28
 8003680:	187b      	adds	r3, r7, r1
 8003682:	220c      	movs	r2, #12
 8003684:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2202      	movs	r2, #2
 800368a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	187b      	adds	r3, r7, r1
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2201      	movs	r2, #1
 800369c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369e:	187a      	adds	r2, r7, r1
 80036a0:	2390      	movs	r3, #144	; 0x90
 80036a2:	05db      	lsls	r3, r3, #23
 80036a4:	0011      	movs	r1, r2
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fa8c 	bl	8003bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	201c      	movs	r0, #28
 80036b2:	f000 f9d7 	bl	8003a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036b6:	201c      	movs	r0, #28
 80036b8:	f000 f9e9 	bl	8003a8e <HAL_NVIC_EnableIRQ>
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b00d      	add	sp, #52	; 0x34
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40004400 	.word	0x40004400

080036d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036d4:	e7fe      	b.n	80036d4 <NMI_Handler+0x4>

080036d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036da:	e7fe      	b.n	80036da <HardFault_Handler+0x4>

080036dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036f4:	f000 f8ca 	bl	800388c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <USART1_IRQHandler+0x14>)
 8003706:	0018      	movs	r0, r3
 8003708:	f002 f952 	bl	80059b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	20000168 	.word	0x20000168

08003718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <USART2_IRQHandler+0x14>)
 800371e:	0018      	movs	r0, r3
 8003720:	f002 f946 	bl	80059b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	200001ec 	.word	0x200001ec

08003730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <_sbrk+0x5c>)
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <_sbrk+0x60>)
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <_sbrk+0x64>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <_sbrk+0x64>)
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <_sbrk+0x68>)
 8003750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <_sbrk+0x64>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	429a      	cmp	r2, r3
 800375e:	d207      	bcs.n	8003770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003760:	f003 f91e 	bl	80069a0 <__errno>
 8003764:	0003      	movs	r3, r0
 8003766:	220c      	movs	r2, #12
 8003768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800376a:	2301      	movs	r3, #1
 800376c:	425b      	negs	r3, r3
 800376e:	e009      	b.n	8003784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <_sbrk+0x64>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <_sbrk+0x64>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	18d2      	adds	r2, r2, r3
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <_sbrk+0x64>)
 8003780:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b006      	add	sp, #24
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20008000 	.word	0x20008000
 8003790:	00000400 	.word	0x00000400
 8003794:	200002e4 	.word	0x200002e4
 8003798:	20000300 	.word	0x20000300

0800379c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037a8:	480d      	ldr	r0, [pc, #52]	; (80037e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037ac:	480d      	ldr	r0, [pc, #52]	; (80037e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80037ae:	490e      	ldr	r1, [pc, #56]	; (80037e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037b0:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <LoopForever+0xe>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b4:	e002      	b.n	80037bc <LoopCopyDataInit>

080037b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ba:	3304      	adds	r3, #4

080037bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c0:	d3f9      	bcc.n	80037b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037c4:	4c0b      	ldr	r4, [pc, #44]	; (80037f4 <LoopForever+0x16>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c8:	e001      	b.n	80037ce <LoopFillZerobss>

080037ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037cc:	3204      	adds	r2, #4

080037ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d0:	d3fb      	bcc.n	80037ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037d2:	f7ff ffe3 	bl	800379c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80037d6:	f003 f8e9 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037da:	f7ff f8bd 	bl	8002958 <main>

080037de <LoopForever>:

LoopForever:
    b LoopForever
 80037de:	e7fe      	b.n	80037de <LoopForever>
  ldr   r0, =_estack
 80037e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80037ec:	08007b20 	.word	0x08007b20
  ldr r2, =_sbss
 80037f0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80037f4:	200002fc 	.word	0x200002fc

080037f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037f8:	e7fe      	b.n	80037f8 <ADC1_COMP_IRQHandler>
	...

080037fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <HAL_Init+0x24>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_Init+0x24>)
 8003806:	2110      	movs	r1, #16
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800380c:	2000      	movs	r0, #0
 800380e:	f000 f809 	bl	8003824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003812:	f7ff fe53 	bl	80034bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	40022000 	.word	0x40022000

08003824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_InitTick+0x5c>)
 800382e:	681c      	ldr	r4, [r3, #0]
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_InitTick+0x60>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	0019      	movs	r1, r3
 8003836:	23fa      	movs	r3, #250	; 0xfa
 8003838:	0098      	lsls	r0, r3, #2
 800383a:	f7fc fc6d 	bl	8000118 <__udivsi3>
 800383e:	0003      	movs	r3, r0
 8003840:	0019      	movs	r1, r3
 8003842:	0020      	movs	r0, r4
 8003844:	f7fc fc68 	bl	8000118 <__udivsi3>
 8003848:	0003      	movs	r3, r0
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f92f 	bl	8003aae <HAL_SYSTICK_Config>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e00f      	b.n	8003878 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d80b      	bhi.n	8003876 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	2301      	movs	r3, #1
 8003862:	425b      	negs	r3, r3
 8003864:	2200      	movs	r2, #0
 8003866:	0018      	movs	r0, r3
 8003868:	f000 f8fc 	bl	8003a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_InitTick+0x64>)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b003      	add	sp, #12
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	20000090 	.word	0x20000090
 8003884:	20000098 	.word	0x20000098
 8003888:	20000094 	.word	0x20000094

0800388c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_IncTick+0x1c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	001a      	movs	r2, r3
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_IncTick+0x20>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	18d2      	adds	r2, r2, r3
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_IncTick+0x20>)
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000098 	.word	0x20000098
 80038ac:	200002e8 	.word	0x200002e8

080038b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <HAL_GetTick+0x10>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	200002e8 	.word	0x200002e8

080038c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Delay+0x44>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	001a      	movs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	f7ff ffe0 	bl	80038b0 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d8f7      	bhi.n	80038ec <HAL_Delay+0x28>
  {
  }
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20000098 	.word	0x20000098

0800390c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	0002      	movs	r2, r0
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003918:	1dfb      	adds	r3, r7, #7
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b7f      	cmp	r3, #127	; 0x7f
 800391e:	d809      	bhi.n	8003934 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	001a      	movs	r2, r3
 8003926:	231f      	movs	r3, #31
 8003928:	401a      	ands	r2, r3
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <__NVIC_EnableIRQ+0x30>)
 800392c:	2101      	movs	r1, #1
 800392e:	4091      	lsls	r1, r2
 8003930:	000a      	movs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
  }
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	0002      	movs	r2, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	1dfb      	adds	r3, r7, #7
 800394c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b7f      	cmp	r3, #127	; 0x7f
 8003954:	d828      	bhi.n	80039a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <__NVIC_SetPriority+0xd4>)
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b25b      	sxtb	r3, r3
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	33c0      	adds	r3, #192	; 0xc0
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	589b      	ldr	r3, [r3, r2]
 8003966:	1dfa      	adds	r2, r7, #7
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	0011      	movs	r1, r2
 800396c:	2203      	movs	r2, #3
 800396e:	400a      	ands	r2, r1
 8003970:	00d2      	lsls	r2, r2, #3
 8003972:	21ff      	movs	r1, #255	; 0xff
 8003974:	4091      	lsls	r1, r2
 8003976:	000a      	movs	r2, r1
 8003978:	43d2      	mvns	r2, r2
 800397a:	401a      	ands	r2, r3
 800397c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	019b      	lsls	r3, r3, #6
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	401a      	ands	r2, r3
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	0018      	movs	r0, r3
 800398c:	2303      	movs	r3, #3
 800398e:	4003      	ands	r3, r0
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003994:	481f      	ldr	r0, [pc, #124]	; (8003a14 <__NVIC_SetPriority+0xd4>)
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	b25b      	sxtb	r3, r3
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	430a      	orrs	r2, r1
 80039a0:	33c0      	adds	r3, #192	; 0xc0
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039a6:	e031      	b.n	8003a0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a8:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <__NVIC_SetPriority+0xd8>)
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	0019      	movs	r1, r3
 80039b0:	230f      	movs	r3, #15
 80039b2:	400b      	ands	r3, r1
 80039b4:	3b08      	subs	r3, #8
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3306      	adds	r3, #6
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	3304      	adds	r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	1dfa      	adds	r2, r7, #7
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	0011      	movs	r1, r2
 80039c8:	2203      	movs	r2, #3
 80039ca:	400a      	ands	r2, r1
 80039cc:	00d2      	lsls	r2, r2, #3
 80039ce:	21ff      	movs	r1, #255	; 0xff
 80039d0:	4091      	lsls	r1, r2
 80039d2:	000a      	movs	r2, r1
 80039d4:	43d2      	mvns	r2, r2
 80039d6:	401a      	ands	r2, r3
 80039d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	401a      	ands	r2, r3
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	0018      	movs	r0, r3
 80039e8:	2303      	movs	r3, #3
 80039ea:	4003      	ands	r3, r0
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <__NVIC_SetPriority+0xd8>)
 80039f2:	1dfb      	adds	r3, r7, #7
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	001c      	movs	r4, r3
 80039f8:	230f      	movs	r3, #15
 80039fa:	4023      	ands	r3, r4
 80039fc:	3b08      	subs	r3, #8
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	430a      	orrs	r2, r1
 8003a02:	3306      	adds	r3, #6
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	18c3      	adds	r3, r0, r3
 8003a08:	3304      	adds	r3, #4
 8003a0a:	601a      	str	r2, [r3, #0]
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b003      	add	sp, #12
 8003a12:	bd90      	pop	{r4, r7, pc}
 8003a14:	e000e100 	.word	0xe000e100
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1e5a      	subs	r2, r3, #1
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	045b      	lsls	r3, r3, #17
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d301      	bcc.n	8003a34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a30:	2301      	movs	r3, #1
 8003a32:	e010      	b.n	8003a56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <SysTick_Config+0x44>)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	425b      	negs	r3, r3
 8003a40:	2103      	movs	r1, #3
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7ff ff7c 	bl	8003940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <SysTick_Config+0x44>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <SysTick_Config+0x44>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	e000e010 	.word	0xe000e010

08003a64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	210f      	movs	r1, #15
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	1c02      	adds	r2, r0, #0
 8003a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff ff5d 	bl	8003940 <__NVIC_SetPriority>
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	0002      	movs	r2, r0
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7ff ff33 	bl	800390c <__NVIC_EnableIRQ>
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff ffaf 	bl	8003a1c <SysTick_Config>
 8003abe:	0003      	movs	r3, r0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	5c9b      	ldrb	r3, [r3, r2]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d008      	beq.n	8003aee <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e020      	b.n	8003b30 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	210e      	movs	r1, #14
 8003afa:	438a      	bics	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2101      	movs	r1, #1
 8003b18:	4091      	lsls	r1, r2
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2221      	movs	r2, #33	; 0x21
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	210f      	movs	r1, #15
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2221      	movs	r2, #33	; 0x21
 8003b4c:	5c9b      	ldrb	r3, [r3, r2]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d006      	beq.n	8003b62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2204      	movs	r2, #4
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e028      	b.n	8003bb4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	210e      	movs	r1, #14
 8003b6e:	438a      	bics	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	438a      	bics	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4091      	lsls	r1, r2
 8003b8e:	000a      	movs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2221      	movs	r2, #33	; 0x21
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	4798      	blx	r3
    } 
  }
  return status;
 8003bb4:	230f      	movs	r3, #15
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd2:	e155      	b.n	8003e80 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4091      	lsls	r1, r2
 8003bde:	000a      	movs	r2, r1
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d100      	bne.n	8003bec <HAL_GPIO_Init+0x28>
 8003bea:	e146      	b.n	8003e7a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d005      	beq.n	8003c04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d130      	bne.n	8003c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	409a      	lsls	r2, r3
 8003c12:	0013      	movs	r3, r2
 8003c14:	43da      	mvns	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	409a      	lsls	r2, r3
 8003c26:	0013      	movs	r3, r2
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	43da      	mvns	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	2201      	movs	r2, #1
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
 8003c58:	0013      	movs	r3, r2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d017      	beq.n	8003ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	0013      	movs	r3, r2
 8003c82:	43da      	mvns	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	0013      	movs	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d123      	bne.n	8003cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	08da      	lsrs	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3208      	adds	r2, #8
 8003cb6:	0092      	lsls	r2, r2, #2
 8003cb8:	58d3      	ldr	r3, [r2, r3]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2107      	movs	r1, #7
 8003cda:	400b      	ands	r3, r1
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	08da      	lsrs	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3208      	adds	r2, #8
 8003cf0:	0092      	lsls	r2, r2, #2
 8003cf2:	6939      	ldr	r1, [r7, #16]
 8003cf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	409a      	lsls	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	43da      	mvns	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2203      	movs	r2, #3
 8003d14:	401a      	ands	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	23c0      	movs	r3, #192	; 0xc0
 8003d30:	029b      	lsls	r3, r3, #10
 8003d32:	4013      	ands	r3, r2
 8003d34:	d100      	bne.n	8003d38 <HAL_GPIO_Init+0x174>
 8003d36:	e0a0      	b.n	8003e7a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d38:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_GPIO_Init+0x2d4>)
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_GPIO_Init+0x2d4>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
 8003d44:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <HAL_GPIO_Init+0x2d4>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_GPIO_Init+0x2d8>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2203      	movs	r2, #3
 8003d62:	4013      	ands	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	220f      	movs	r2, #15
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	2390      	movs	r3, #144	; 0x90
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d019      	beq.n	8003db2 <HAL_GPIO_Init+0x1ee>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a47      	ldr	r2, [pc, #284]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_GPIO_Init+0x1ea>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a46      	ldr	r2, [pc, #280]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00d      	beq.n	8003daa <HAL_GPIO_Init+0x1e6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a45      	ldr	r2, [pc, #276]	; (8003ea8 <HAL_GPIO_Init+0x2e4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <HAL_GPIO_Init+0x1e2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a44      	ldr	r2, [pc, #272]	; (8003eac <HAL_GPIO_Init+0x2e8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_GPIO_Init+0x1de>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e008      	b.n	8003db4 <HAL_GPIO_Init+0x1f0>
 8003da2:	2305      	movs	r3, #5
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x1f0>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e004      	b.n	8003db4 <HAL_GPIO_Init+0x1f0>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_Init+0x1f0>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x1f0>
 8003db2:	2300      	movs	r3, #0
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	2103      	movs	r1, #3
 8003db8:	400a      	ands	r2, r1
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dc4:	4935      	ldr	r1, [pc, #212]	; (8003e9c <HAL_GPIO_Init+0x2d8>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd2:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	025b      	lsls	r3, r3, #9
 8003dea:	4013      	ands	r3, r2
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003dfc:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	4013      	ands	r3, r2
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	035b      	lsls	r3, r3, #13
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e50:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	039b      	lsls	r3, r3, #14
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_GPIO_Init+0x2ec>)
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	40da      	lsrs	r2, r3
 8003e88:	1e13      	subs	r3, r2, #0
 8003e8a:	d000      	beq.n	8003e8e <HAL_GPIO_Init+0x2ca>
 8003e8c:	e6a2      	b.n	8003bd4 <HAL_GPIO_Init+0x10>
  } 
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b006      	add	sp, #24
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	48000400 	.word	0x48000400
 8003ea4:	48000800 	.word	0x48000800
 8003ea8:	48000c00 	.word	0x48000c00
 8003eac:	48001000 	.word	0x48001000
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	0008      	movs	r0, r1
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	1cbb      	adds	r3, r7, #2
 8003ec2:	1c02      	adds	r2, r0, #0
 8003ec4:	801a      	strh	r2, [r3, #0]
 8003ec6:	1c7b      	adds	r3, r7, #1
 8003ec8:	1c0a      	adds	r2, r1, #0
 8003eca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ecc:	1c7b      	adds	r3, r7, #1
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed4:	1cbb      	adds	r3, r7, #2
 8003ed6:	881a      	ldrh	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003edc:	e003      	b.n	8003ee6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ede:	1cbb      	adds	r3, r7, #2
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e082      	b.n	8004008 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2241      	movs	r2, #65	; 0x41
 8003f06:	5c9b      	ldrb	r3, [r3, r2]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2240      	movs	r2, #64	; 0x40
 8003f12:	2100      	movs	r1, #0
 8003f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff faf3 	bl	8003504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2241      	movs	r2, #65	; 0x41
 8003f22:	2124      	movs	r1, #36	; 0x24
 8003f24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	438a      	bics	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4934      	ldr	r1, [pc, #208]	; (8004010 <HAL_I2C_Init+0x120>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4931      	ldr	r1, [pc, #196]	; (8004014 <HAL_I2C_Init+0x124>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d108      	bne.n	8003f6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	0209      	lsls	r1, r1, #8
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e007      	b.n	8003f7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2184      	movs	r1, #132	; 0x84
 8003f78:	0209      	lsls	r1, r1, #8
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d104      	bne.n	8003f90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	491f      	ldr	r1, [pc, #124]	; (8004018 <HAL_I2C_Init+0x128>)
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	491a      	ldr	r1, [pc, #104]	; (8004014 <HAL_I2C_Init+0x124>)
 8003fac:	400a      	ands	r2, r1
 8003fae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69d9      	ldr	r1, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2241      	movs	r2, #65	; 0x41
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2242      	movs	r2, #66	; 0x42
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}
 8004010:	f0ffffff 	.word	0xf0ffffff
 8004014:	ffff7fff 	.word	0xffff7fff
 8004018:	02008000 	.word	0x02008000

0800401c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b089      	sub	sp, #36	; 0x24
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	000c      	movs	r4, r1
 8004026:	0010      	movs	r0, r2
 8004028:	0019      	movs	r1, r3
 800402a:	230a      	movs	r3, #10
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	1c22      	adds	r2, r4, #0
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	2308      	movs	r3, #8
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	1c02      	adds	r2, r0, #0
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	1dbb      	adds	r3, r7, #6
 800403c:	1c0a      	adds	r2, r1, #0
 800403e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2241      	movs	r2, #65	; 0x41
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b20      	cmp	r3, #32
 800404a:	d000      	beq.n	800404e <HAL_I2C_Mem_Write+0x32>
 800404c:	e10c      	b.n	8004268 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_I2C_Mem_Write+0x42>
 8004054:	232c      	movs	r3, #44	; 0x2c
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e0ff      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2240      	movs	r2, #64	; 0x40
 800406e:	5c9b      	ldrb	r3, [r3, r2]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Mem_Write+0x5c>
 8004074:	2302      	movs	r3, #2
 8004076:	e0f8      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	2101      	movs	r1, #1
 800407e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004080:	f7ff fc16 	bl	80038b0 <HAL_GetTick>
 8004084:	0003      	movs	r3, r0
 8004086:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	0219      	lsls	r1, r3, #8
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2319      	movs	r3, #25
 8004094:	2201      	movs	r2, #1
 8004096:	f000 fb0b 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e3      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2241      	movs	r2, #65	; 0x41
 80040a6:	2121      	movs	r1, #33	; 0x21
 80040a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2242      	movs	r2, #66	; 0x42
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	222c      	movs	r2, #44	; 0x2c
 80040c2:	18ba      	adds	r2, r7, r2
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ce:	1dbb      	adds	r3, r7, #6
 80040d0:	881c      	ldrh	r4, [r3, #0]
 80040d2:	2308      	movs	r3, #8
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	230a      	movs	r3, #10
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	8819      	ldrh	r1, [r3, #0]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	0023      	movs	r3, r4
 80040ea:	f000 f9f9 	bl	80044e0 <I2C_RequestMemoryWrite>
 80040ee:	1e03      	subs	r3, r0, #0
 80040f0:	d005      	beq.n	80040fe <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	2100      	movs	r1, #0
 80040f8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0b5      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	2bff      	cmp	r3, #255	; 0xff
 8004106:	d911      	bls.n	800412c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	22ff      	movs	r2, #255	; 0xff
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	b2da      	uxtb	r2, r3
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	045c      	lsls	r4, r3, #17
 8004118:	230a      	movs	r3, #10
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	8819      	ldrh	r1, [r3, #0]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	2300      	movs	r3, #0
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	0023      	movs	r3, r4
 8004126:	f000 fbf7 	bl	8004918 <I2C_TransferConfig>
 800412a:	e012      	b.n	8004152 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	b2da      	uxtb	r2, r3
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	049c      	lsls	r4, r3, #18
 8004140:	230a      	movs	r3, #10
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	8819      	ldrh	r1, [r3, #0]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	2300      	movs	r3, #0
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	0023      	movs	r3, r4
 800414e:	f000 fbe3 	bl	8004918 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 fae8 	bl	800472e <I2C_WaitOnTXISFlagUntilTimeout>
 800415e:	1e03      	subs	r3, r0, #0
 8004160:	d001      	beq.n	8004166 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e081      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03a      	beq.n	8004216 <HAL_I2C_Mem_Write+0x1fa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d136      	bne.n	8004216 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	0013      	movs	r3, r2
 80041b2:	2200      	movs	r2, #0
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	f000 fa7b 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e053      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2bff      	cmp	r3, #255	; 0xff
 80041ca:	d911      	bls.n	80041f0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	22ff      	movs	r2, #255	; 0xff
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	045c      	lsls	r4, r3, #17
 80041dc:	230a      	movs	r3, #10
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	8819      	ldrh	r1, [r3, #0]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	2300      	movs	r3, #0
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	0023      	movs	r3, r4
 80041ea:	f000 fb95 	bl	8004918 <I2C_TransferConfig>
 80041ee:	e012      	b.n	8004216 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	049c      	lsls	r4, r3, #18
 8004204:	230a      	movs	r3, #10
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	8819      	ldrh	r1, [r3, #0]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	2300      	movs	r3, #0
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	0023      	movs	r3, r4
 8004212:	f000 fb81 	bl	8004918 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d198      	bne.n	8004152 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fac0 	bl	80047ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e01a      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2220      	movs	r2, #32
 800423a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	490b      	ldr	r1, [pc, #44]	; (8004274 <HAL_I2C_Mem_Write+0x258>)
 8004248:	400a      	ands	r2, r1
 800424a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2241      	movs	r2, #65	; 0x41
 8004250:	2120      	movs	r1, #32
 8004252:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2242      	movs	r2, #66	; 0x42
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2240      	movs	r2, #64	; 0x40
 8004260:	2100      	movs	r1, #0
 8004262:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b007      	add	sp, #28
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	fe00e800 	.word	0xfe00e800

08004278 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	000c      	movs	r4, r1
 8004282:	0010      	movs	r0, r2
 8004284:	0019      	movs	r1, r3
 8004286:	230a      	movs	r3, #10
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	1c22      	adds	r2, r4, #0
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	2308      	movs	r3, #8
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	1c02      	adds	r2, r0, #0
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	1dbb      	adds	r3, r7, #6
 8004298:	1c0a      	adds	r2, r1, #0
 800429a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2241      	movs	r2, #65	; 0x41
 80042a0:	5c9b      	ldrb	r3, [r3, r2]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d000      	beq.n	80042aa <HAL_I2C_Mem_Read+0x32>
 80042a8:	e110      	b.n	80044cc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_I2C_Mem_Read+0x42>
 80042b0:	232c      	movs	r3, #44	; 0x2c
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	0092      	lsls	r2, r2, #2
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e103      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2240      	movs	r2, #64	; 0x40
 80042ca:	5c9b      	ldrb	r3, [r3, r2]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2C_Mem_Read+0x5c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0fc      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2240      	movs	r2, #64	; 0x40
 80042d8:	2101      	movs	r1, #1
 80042da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042dc:	f7ff fae8 	bl	80038b0 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	0219      	lsls	r1, r3, #8
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	2319      	movs	r3, #25
 80042f0:	2201      	movs	r2, #1
 80042f2:	f000 f9dd 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80042f6:	1e03      	subs	r3, r0, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e0e7      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2241      	movs	r2, #65	; 0x41
 8004302:	2122      	movs	r1, #34	; 0x22
 8004304:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2242      	movs	r2, #66	; 0x42
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	222c      	movs	r2, #44	; 0x2c
 800431e:	18ba      	adds	r2, r7, r2
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432a:	1dbb      	adds	r3, r7, #6
 800432c:	881c      	ldrh	r4, [r3, #0]
 800432e:	2308      	movs	r3, #8
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	881a      	ldrh	r2, [r3, #0]
 8004334:	230a      	movs	r3, #10
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	8819      	ldrh	r1, [r3, #0]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	0023      	movs	r3, r4
 8004346:	f000 f92f 	bl	80045a8 <I2C_RequestMemoryRead>
 800434a:	1e03      	subs	r3, r0, #0
 800434c:	d005      	beq.n	800435a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2240      	movs	r2, #64	; 0x40
 8004352:	2100      	movs	r1, #0
 8004354:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0b9      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2bff      	cmp	r3, #255	; 0xff
 8004362:	d911      	bls.n	8004388 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	b2da      	uxtb	r2, r3
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	045c      	lsls	r4, r3, #17
 8004374:	230a      	movs	r3, #10
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	8819      	ldrh	r1, [r3, #0]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <HAL_I2C_Mem_Read+0x260>)
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	0023      	movs	r3, r4
 8004382:	f000 fac9 	bl	8004918 <I2C_TransferConfig>
 8004386:	e012      	b.n	80043ae <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	049c      	lsls	r4, r3, #18
 800439c:	230a      	movs	r3, #10
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	8819      	ldrh	r1, [r3, #0]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_I2C_Mem_Read+0x260>)
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	0023      	movs	r3, r4
 80043aa:	f000 fab5 	bl	8004918 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	0013      	movs	r3, r2
 80043b8:	2200      	movs	r2, #0
 80043ba:	2104      	movs	r1, #4
 80043bc:	f000 f978 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e082      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d03a      	beq.n	800447a <HAL_I2C_Mem_Read+0x202>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	2b00      	cmp	r3, #0
 800440a:	d136      	bne.n	800447a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	0013      	movs	r3, r2
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	f000 f949 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e053      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2bff      	cmp	r3, #255	; 0xff
 800442e:	d911      	bls.n	8004454 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	b2da      	uxtb	r2, r3
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	045c      	lsls	r4, r3, #17
 8004440:	230a      	movs	r3, #10
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	8819      	ldrh	r1, [r3, #0]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	2300      	movs	r3, #0
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	0023      	movs	r3, r4
 800444e:	f000 fa63 	bl	8004918 <I2C_TransferConfig>
 8004452:	e012      	b.n	800447a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	b2da      	uxtb	r2, r3
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	049c      	lsls	r4, r3, #18
 8004468:	230a      	movs	r3, #10
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	8819      	ldrh	r1, [r3, #0]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	2300      	movs	r3, #0
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	0023      	movs	r3, r4
 8004476:	f000 fa4f 	bl	8004918 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d194      	bne.n	80043ae <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	0018      	movs	r0, r3
 800448c:	f000 f98e 	bl	80047ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e01a      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2220      	movs	r2, #32
 800449e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	490c      	ldr	r1, [pc, #48]	; (80044dc <HAL_I2C_Mem_Read+0x264>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2241      	movs	r2, #65	; 0x41
 80044b4:	2120      	movs	r1, #32
 80044b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2242      	movs	r2, #66	; 0x42
 80044bc:	2100      	movs	r1, #0
 80044be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b007      	add	sp, #28
 80044d4:	bd90      	pop	{r4, r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	80002400 	.word	0x80002400
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	000c      	movs	r4, r1
 80044ea:	0010      	movs	r0, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	250a      	movs	r5, #10
 80044f0:	197b      	adds	r3, r7, r5
 80044f2:	1c22      	adds	r2, r4, #0
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	2308      	movs	r3, #8
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	1c02      	adds	r2, r0, #0
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	1dbb      	adds	r3, r7, #6
 8004500:	1c0a      	adds	r2, r1, #0
 8004502:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004504:	1dbb      	adds	r3, r7, #6
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	045c      	lsls	r4, r3, #17
 800450e:	197b      	adds	r3, r7, r5
 8004510:	8819      	ldrh	r1, [r3, #0]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <I2C_RequestMemoryWrite+0xc4>)
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	0023      	movs	r3, r4
 800451a:	f000 f9fd 	bl	8004918 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f902 	bl	800472e <I2C_WaitOnTXISFlagUntilTimeout>
 800452a:	1e03      	subs	r3, r0, #0
 800452c:	d001      	beq.n	8004532 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e033      	b.n	800459a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004532:	1dbb      	adds	r3, r7, #6
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800453a:	2308      	movs	r3, #8
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
 8004548:	e019      	b.n	800457e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800454a:	2308      	movs	r3, #8
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	b29b      	uxth	r3, r3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	6a39      	ldr	r1, [r7, #32]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f8e3 	bl	800472e <I2C_WaitOnTXISFlagUntilTimeout>
 8004568:	1e03      	subs	r3, r0, #0
 800456a:	d001      	beq.n	8004570 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e014      	b.n	800459a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004570:	2308      	movs	r3, #8
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	0013      	movs	r3, r2
 8004588:	2200      	movs	r2, #0
 800458a:	2180      	movs	r1, #128	; 0x80
 800458c:	f000 f890 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8004590:	1e03      	subs	r3, r0, #0
 8004592:	d001      	beq.n	8004598 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b004      	add	sp, #16
 80045a0:	bdb0      	pop	{r4, r5, r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	80002000 	.word	0x80002000

080045a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	000c      	movs	r4, r1
 80045b2:	0010      	movs	r0, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	250a      	movs	r5, #10
 80045b8:	197b      	adds	r3, r7, r5
 80045ba:	1c22      	adds	r2, r4, #0
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	2308      	movs	r3, #8
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	1c02      	adds	r2, r0, #0
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	1c0a      	adds	r2, r1, #0
 80045ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045cc:	1dbb      	adds	r3, r7, #6
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	197b      	adds	r3, r7, r5
 80045d4:	8819      	ldrh	r1, [r3, #0]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <I2C_RequestMemoryRead+0xc0>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2300      	movs	r3, #0
 80045de:	f000 f99b 	bl	8004918 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	6a39      	ldr	r1, [r7, #32]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f8a0 	bl	800472e <I2C_WaitOnTXISFlagUntilTimeout>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d001      	beq.n	80045f6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e033      	b.n	800465e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f6:	1dbb      	adds	r3, r7, #6
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045fe:	2308      	movs	r3, #8
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
 800460c:	e019      	b.n	8004642 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800460e:	2308      	movs	r3, #8
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	b29b      	uxth	r3, r3
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	6a39      	ldr	r1, [r7, #32]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f881 	bl	800472e <I2C_WaitOnTXISFlagUntilTimeout>
 800462c:	1e03      	subs	r3, r0, #0
 800462e:	d001      	beq.n	8004634 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e014      	b.n	800465e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004634:	2308      	movs	r3, #8
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	0013      	movs	r3, r2
 800464c:	2200      	movs	r2, #0
 800464e:	2140      	movs	r1, #64	; 0x40
 8004650:	f000 f82e 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8004654:	1e03      	subs	r3, r0, #0
 8004656:	d001      	beq.n	800465c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bdb0      	pop	{r4, r5, r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	80002000 	.word	0x80002000

0800466c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2202      	movs	r2, #2
 800467c:	4013      	ands	r3, r2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d103      	bne.n	800468a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	2b01      	cmp	r3, #1
 8004696:	d007      	beq.n	80046a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2101      	movs	r1, #1
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
  }
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	1dfb      	adds	r3, r7, #7
 80046be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c0:	e021      	b.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d01e      	beq.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7ff f8f2 	bl	80038b0 <HAL_GetTick>
 80046cc:	0002      	movs	r2, r0
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	2220      	movs	r2, #32
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2241      	movs	r2, #65	; 0x41
 80046ee:	2120      	movs	r1, #32
 80046f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2242      	movs	r2, #66	; 0x42
 80046f6:	2100      	movs	r1, #0
 80046f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2240      	movs	r2, #64	; 0x40
 80046fe:	2100      	movs	r1, #0
 8004700:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e00f      	b.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	425a      	negs	r2, r3
 8004716:	4153      	adcs	r3, r2
 8004718:	b2db      	uxtb	r3, r3
 800471a:	001a      	movs	r2, r3
 800471c:	1dfb      	adds	r3, r7, #7
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d0ce      	beq.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}

0800472e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800473a:	e02b      	b.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f86e 	bl	8004824 <I2C_IsAcknowledgeFailed>
 8004748:	1e03      	subs	r3, r0, #0
 800474a:	d001      	beq.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e029      	b.n	80047a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3301      	adds	r3, #1
 8004754:	d01e      	beq.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7ff f8ab 	bl	80038b0 <HAL_GetTick>
 800475a:	0002      	movs	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d113      	bne.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	2220      	movs	r2, #32
 8004772:	431a      	orrs	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2241      	movs	r2, #65	; 0x41
 800477c:	2120      	movs	r1, #32
 800477e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2242      	movs	r2, #66	; 0x42
 8004784:	2100      	movs	r1, #0
 8004786:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2240      	movs	r2, #64	; 0x40
 800478c:	2100      	movs	r1, #0
 800478e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e007      	b.n	80047a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2202      	movs	r2, #2
 800479c:	4013      	ands	r3, r2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d1cc      	bne.n	800473c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b004      	add	sp, #16
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b8:	e028      	b.n	800480c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f000 f82f 	bl	8004824 <I2C_IsAcknowledgeFailed>
 80047c6:	1e03      	subs	r3, r0, #0
 80047c8:	d001      	beq.n	80047ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e026      	b.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7ff f86f 	bl	80038b0 <HAL_GetTick>
 80047d2:	0002      	movs	r2, r0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d113      	bne.n	800480c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	2220      	movs	r2, #32
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2241      	movs	r2, #65	; 0x41
 80047f4:	2120      	movs	r1, #32
 80047f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2242      	movs	r2, #66	; 0x42
 80047fc:	2100      	movs	r1, #0
 80047fe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	2100      	movs	r1, #0
 8004806:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e007      	b.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2220      	movs	r2, #32
 8004814:	4013      	ands	r3, r2
 8004816:	2b20      	cmp	r3, #32
 8004818:	d1cf      	bne.n	80047ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bd80      	pop	{r7, pc}

08004824 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2210      	movs	r2, #16
 8004838:	4013      	ands	r3, r2
 800483a:	2b10      	cmp	r3, #16
 800483c:	d164      	bne.n	8004908 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	049b      	lsls	r3, r3, #18
 8004848:	401a      	ands	r2, r3
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	049b      	lsls	r3, r3, #18
 800484e:	429a      	cmp	r2, r3
 8004850:	d02b      	beq.n	80048aa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	01c9      	lsls	r1, r1, #7
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004864:	e021      	b.n	80048aa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	d01e      	beq.n	80048aa <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486c:	f7ff f820 	bl	80038b0 <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <I2C_IsAcknowledgeFailed+0x5e>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d113      	bne.n	80048aa <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	2220      	movs	r2, #32
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2241      	movs	r2, #65	; 0x41
 8004892:	2120      	movs	r1, #32
 8004894:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2242      	movs	r2, #66	; 0x42
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2240      	movs	r2, #64	; 0x40
 80048a2:	2100      	movs	r1, #0
 80048a4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e02f      	b.n	800490a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2220      	movs	r2, #32
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d1d6      	bne.n	8004866 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2220      	movs	r2, #32
 80048c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff fece 	bl	800466c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	490e      	ldr	r1, [pc, #56]	; (8004914 <I2C_IsAcknowledgeFailed+0xf0>)
 80048dc:	400a      	ands	r2, r1
 80048de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	2204      	movs	r2, #4
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2241      	movs	r2, #65	; 0x41
 80048f0:	2120      	movs	r1, #32
 80048f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2242      	movs	r2, #66	; 0x42
 80048f8:	2100      	movs	r1, #0
 80048fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2240      	movs	r2, #64	; 0x40
 8004900:	2100      	movs	r1, #0
 8004902:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b004      	add	sp, #16
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	fe00e800 	.word	0xfe00e800

08004918 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	0008      	movs	r0, r1
 8004922:	0011      	movs	r1, r2
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	240a      	movs	r4, #10
 8004928:	193b      	adds	r3, r7, r4
 800492a:	1c02      	adds	r2, r0, #0
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	2009      	movs	r0, #9
 8004930:	183b      	adds	r3, r7, r0
 8004932:	1c0a      	adds	r2, r1, #0
 8004934:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	0d51      	lsrs	r1, r2, #21
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	00d2      	lsls	r2, r2, #3
 8004944:	400a      	ands	r2, r1
 8004946:	490e      	ldr	r1, [pc, #56]	; (8004980 <I2C_TransferConfig+0x68>)
 8004948:	430a      	orrs	r2, r1
 800494a:	43d2      	mvns	r2, r2
 800494c:	401a      	ands	r2, r3
 800494e:	0011      	movs	r1, r2
 8004950:	193b      	adds	r3, r7, r4
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	059b      	lsls	r3, r3, #22
 8004956:	0d9a      	lsrs	r2, r3, #22
 8004958:	183b      	adds	r3, r7, r0
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	0418      	lsls	r0, r3, #16
 800495e:	23ff      	movs	r3, #255	; 0xff
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	4003      	ands	r3, r0
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	431a      	orrs	r2, r3
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b005      	add	sp, #20
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	03ff63ff 	.word	0x03ff63ff

08004984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2241      	movs	r2, #65	; 0x41
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d138      	bne.n	8004a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2240      	movs	r2, #64	; 0x40
 800499e:	5c9b      	ldrb	r3, [r3, r2]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e032      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	2101      	movs	r1, #1
 80049ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2241      	movs	r2, #65	; 0x41
 80049b4:	2124      	movs	r1, #36	; 0x24
 80049b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2101      	movs	r1, #1
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2241      	movs	r2, #65	; 0x41
 80049fc:	2120      	movs	r1, #32
 80049fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b002      	add	sp, #8
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	ffffefff 	.word	0xffffefff

08004a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2241      	movs	r2, #65	; 0x41
 8004a2a:	5c9b      	ldrb	r3, [r3, r2]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d139      	bne.n	8004aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e033      	b.n	8004aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2240      	movs	r2, #64	; 0x40
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2241      	movs	r2, #65	; 0x41
 8004a4c:	2124      	movs	r1, #36	; 0x24
 8004a4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	438a      	bics	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a11      	ldr	r2, [pc, #68]	; (8004ab0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2241      	movs	r2, #65	; 0x41
 8004a96:	2120      	movs	r1, #32
 8004a98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2240      	movs	r2, #64	; 0x40
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b004      	add	sp, #16
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	fffff0ff 	.word	0xfffff0ff

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f000 fb76 	bl	80051b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x20>
 8004ad2:	e08e      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ad4:	4bc5      	ldr	r3, [pc, #788]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	220c      	movs	r2, #12
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d00e      	beq.n	8004afe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ae0:	4bc2      	ldr	r3, [pc, #776]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	220c      	movs	r2, #12
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d117      	bne.n	8004b1c <HAL_RCC_OscConfig+0x68>
 8004aec:	4bbf      	ldr	r3, [pc, #764]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	401a      	ands	r2, r3
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d10e      	bne.n	8004b1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afe:	4bbb      	ldr	r3, [pc, #748]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	029b      	lsls	r3, r3, #10
 8004b06:	4013      	ands	r3, r2
 8004b08:	d100      	bne.n	8004b0c <HAL_RCC_OscConfig+0x58>
 8004b0a:	e071      	b.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d000      	beq.n	8004b16 <HAL_RCC_OscConfig+0x62>
 8004b14:	e06c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f000 fb4c 	bl	80051b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x80>
 8004b24:	4bb1      	ldr	r3, [pc, #708]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4bb0      	ldr	r3, [pc, #704]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	0249      	lsls	r1, r1, #9
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e02f      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0xa2>
 8004b3c:	4bab      	ldr	r3, [pc, #684]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4baa      	ldr	r3, [pc, #680]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b42:	49ab      	ldr	r1, [pc, #684]	; (8004df0 <HAL_RCC_OscConfig+0x33c>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	4ba8      	ldr	r3, [pc, #672]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4ba7      	ldr	r3, [pc, #668]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b4e:	49a9      	ldr	r1, [pc, #676]	; (8004df4 <HAL_RCC_OscConfig+0x340>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e01e      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d10e      	bne.n	8004b7c <HAL_RCC_OscConfig+0xc8>
 8004b5e:	4ba3      	ldr	r3, [pc, #652]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4ba2      	ldr	r3, [pc, #648]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	02c9      	lsls	r1, r1, #11
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	4b9f      	ldr	r3, [pc, #636]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b9e      	ldr	r3, [pc, #632]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0249      	lsls	r1, r1, #9
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b7c:	4b9b      	ldr	r3, [pc, #620]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b9a      	ldr	r3, [pc, #616]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b82:	499b      	ldr	r1, [pc, #620]	; (8004df0 <HAL_RCC_OscConfig+0x33c>)
 8004b84:	400a      	ands	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	4b98      	ldr	r3, [pc, #608]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b97      	ldr	r3, [pc, #604]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b8e:	4999      	ldr	r1, [pc, #612]	; (8004df4 <HAL_RCC_OscConfig+0x340>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d014      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe fe88 	bl	80038b0 <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba6:	f7fe fe83 	bl	80038b0 <HAL_GetTick>
 8004baa:	0002      	movs	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	; 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e2fd      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb8:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	029b      	lsls	r3, r3, #10
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0xf2>
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fe73 	bl	80038b0 <HAL_GetTick>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fe fe6e 	bl	80038b0 <HAL_GetTick>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e2e8      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	4013      	ands	r3, r2
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x11c>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <HAL_RCC_OscConfig+0x14a>
 8004bfc:	e06c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bfe:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	220c      	movs	r2, #12
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c08:	4b78      	ldr	r3, [pc, #480]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	220c      	movs	r2, #12
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d11f      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1a0>
 8004c14:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	025b      	lsls	r3, r3, #9
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	4b71      	ldr	r3, [pc, #452]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_OscConfig+0x188>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e2bb      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	22f8      	movs	r2, #248	; 0xf8
 8004c42:	4393      	bics	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00da      	lsls	r2, r3, #3
 8004c4c:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e041      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d024      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fe fe22 	bl	80038b0 <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fe fe1d 	bl	80038b0 <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e297      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d0f1      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	4b57      	ldr	r3, [pc, #348]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22f8      	movs	r2, #248	; 0xf8
 8004c94:	4393      	bics	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cac:	2101      	movs	r1, #1
 8004cae:	438a      	bics	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fe fdfd 	bl	80038b0 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbc:	f7fe fdf8 	bl	80038b0 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e272      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d1f1      	bne.n	8004cbc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fe fddb 	bl	80038b0 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fe fdd6 	bl	80038b0 <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e250      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d0f1      	beq.n	8004d00 <HAL_RCC_OscConfig+0x24c>
 8004d1c:	e018      	b.n	8004d50 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d24:	2101      	movs	r1, #1
 8004d26:	438a      	bics	r2, r1
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fdc1 	bl	80038b0 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fe fdbc 	bl	80038b0 <HAL_GetTick>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e236      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d1f1      	bne.n	8004d34 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2204      	movs	r2, #4
 8004d56:	4013      	ands	r3, r2
 8004d58:	d100      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2a8>
 8004d5a:	e0b5      	b.n	8004ec8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5c:	201f      	movs	r0, #31
 8004d5e:	183b      	adds	r3, r7, r0
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	055b      	lsls	r3, r3, #21
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d110      	bne.n	8004d92 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	0549      	lsls	r1, r1, #21
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	055b      	lsls	r3, r3, #21
 8004d86:	4013      	ands	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d8c:	183b      	adds	r3, r7, r0
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9e:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0049      	lsls	r1, r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dac:	f7fe fd80 	bl	80038b0 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fe fd7b 	bl	80038b0 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b64      	cmp	r3, #100	; 0x64
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1f5      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10f      	bne.n	8004dfc <HAL_RCC_OscConfig+0x348>
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004de2:	2101      	movs	r1, #1
 8004de4:	430a      	orrs	r2, r1
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e036      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40021000 	.word	0x40021000
 8004df0:	fffeffff 	.word	0xfffeffff
 8004df4:	fffbffff 	.word	0xfffbffff
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x36a>
 8004e04:	4bca      	ldr	r3, [pc, #808]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	4bc9      	ldr	r3, [pc, #804]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	621a      	str	r2, [r3, #32]
 8004e10:	4bc7      	ldr	r3, [pc, #796]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	4bc6      	ldr	r3, [pc, #792]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e16:	2104      	movs	r1, #4
 8004e18:	438a      	bics	r2, r1
 8004e1a:	621a      	str	r2, [r3, #32]
 8004e1c:	e01c      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x38c>
 8004e26:	4bc2      	ldr	r3, [pc, #776]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	4bc1      	ldr	r3, [pc, #772]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	621a      	str	r2, [r3, #32]
 8004e32:	4bbf      	ldr	r3, [pc, #764]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	4bbe      	ldr	r3, [pc, #760]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	621a      	str	r2, [r3, #32]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004e40:	4bbb      	ldr	r3, [pc, #748]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	4bba      	ldr	r3, [pc, #744]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e46:	2101      	movs	r1, #1
 8004e48:	438a      	bics	r2, r1
 8004e4a:	621a      	str	r2, [r3, #32]
 8004e4c:	4bb8      	ldr	r3, [pc, #736]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e4e:	6a1a      	ldr	r2, [r3, #32]
 8004e50:	4bb7      	ldr	r3, [pc, #732]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e52:	2104      	movs	r1, #4
 8004e54:	438a      	bics	r2, r1
 8004e56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d014      	beq.n	8004e8a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e60:	f7fe fd26 	bl	80038b0 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e009      	b.n	8004e7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fe fd21 	bl	80038b0 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	4aaf      	ldr	r2, [pc, #700]	; (8005134 <HAL_RCC_OscConfig+0x680>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e19a      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	4bac      	ldr	r3, [pc, #688]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x3b6>
 8004e88:	e013      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fe fd11 	bl	80038b0 <HAL_GetTick>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e92:	e009      	b.n	8004ea8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fe fd0c 	bl	80038b0 <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	4aa5      	ldr	r2, [pc, #660]	; (8005134 <HAL_RCC_OscConfig+0x680>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e185      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea8:	4ba1      	ldr	r3, [pc, #644]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	2202      	movs	r2, #2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eb2:	231f      	movs	r3, #31
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebc:	4b9c      	ldr	r3, [pc, #624]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	4b9b      	ldr	r3, [pc, #620]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ec2:	499d      	ldr	r1, [pc, #628]	; (8005138 <HAL_RCC_OscConfig+0x684>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d063      	beq.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d12a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004eda:	4b95      	ldr	r3, [pc, #596]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	4b94      	ldr	r3, [pc, #592]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ee0:	2104      	movs	r1, #4
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004ee6:	4b92      	ldr	r3, [pc, #584]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	4b91      	ldr	r3, [pc, #580]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef2:	f7fe fcdd 	bl	80038b0 <HAL_GetTick>
 8004ef6:	0003      	movs	r3, r0
 8004ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004efc:	f7fe fcd8 	bl	80038b0 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e152      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f0e:	4b88      	ldr	r3, [pc, #544]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	2202      	movs	r2, #2
 8004f14:	4013      	ands	r3, r2
 8004f16:	d0f1      	beq.n	8004efc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f18:	4b85      	ldr	r3, [pc, #532]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	22f8      	movs	r2, #248	; 0xf8
 8004f1e:	4393      	bics	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	4b81      	ldr	r3, [pc, #516]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2e:	e034      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	3305      	adds	r3, #5
 8004f36:	d111      	bne.n	8004f5c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004f38:	4b7d      	ldr	r3, [pc, #500]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	2104      	movs	r1, #4
 8004f40:	438a      	bics	r2, r1
 8004f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f44:	4b7a      	ldr	r3, [pc, #488]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	22f8      	movs	r2, #248	; 0xf8
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	4b76      	ldr	r3, [pc, #472]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5a:	e01e      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f5c:	4b74      	ldr	r3, [pc, #464]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f60:	4b73      	ldr	r3, [pc, #460]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f62:	2104      	movs	r1, #4
 8004f64:	430a      	orrs	r2, r1
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f68:	4b71      	ldr	r3, [pc, #452]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	4b70      	ldr	r3, [pc, #448]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f74:	f7fe fc9c 	bl	80038b0 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f7e:	f7fe fc97 	bl	80038b0 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e111      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f90:	4b67      	ldr	r3, [pc, #412]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	2202      	movs	r2, #2
 8004f96:	4013      	ands	r3, r2
 8004f98:	d1f1      	bne.n	8004f7e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d05c      	beq.n	800505e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fa4:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	220c      	movs	r2, #12
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d00e      	beq.n	8004fce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fb0:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	220c      	movs	r2, #12
 8004fb6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d114      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fbc:	4b5c      	ldr	r3, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	23c0      	movs	r3, #192	; 0xc0
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	23c0      	movs	r3, #192	; 0xc0
 8004fc8:	025b      	lsls	r3, r3, #9
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fce:	4b58      	ldr	r3, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	025b      	lsls	r3, r3, #9
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d040      	beq.n	800505c <HAL_RCC_OscConfig+0x5a8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d03c      	beq.n	800505c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0e6      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01b      	beq.n	8005026 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004fee:	4b50      	ldr	r3, [pc, #320]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ff4:	2180      	movs	r1, #128	; 0x80
 8004ff6:	0249      	lsls	r1, r1, #9
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fc58 	bl	80038b0 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005006:	f7fe fc53 	bl	80038b0 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0cd      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005018:	4b45      	ldr	r3, [pc, #276]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800501a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	025b      	lsls	r3, r3, #9
 8005020:	4013      	ands	r3, r2
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x552>
 8005024:	e01b      	b.n	800505e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005026:	4b42      	ldr	r3, [pc, #264]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800502c:	4943      	ldr	r1, [pc, #268]	; (800513c <HAL_RCC_OscConfig+0x688>)
 800502e:	400a      	ands	r2, r1
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fe fc3d 	bl	80038b0 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800503c:	f7fe fc38 	bl	80038b0 <HAL_GetTick>
 8005040:	0002      	movs	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0b2      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800504e:	4b38      	ldr	r3, [pc, #224]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	4013      	ands	r3, r2
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x588>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800505c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d100      	bne.n	8005068 <HAL_RCC_OscConfig+0x5b4>
 8005066:	e0a4      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	220c      	movs	r2, #12
 800506e:	4013      	ands	r3, r2
 8005070:	2b08      	cmp	r3, #8
 8005072:	d100      	bne.n	8005076 <HAL_RCC_OscConfig+0x5c2>
 8005074:	e078      	b.n	8005168 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b02      	cmp	r3, #2
 800507c:	d14c      	bne.n	8005118 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005084:	492e      	ldr	r1, [pc, #184]	; (8005140 <HAL_RCC_OscConfig+0x68c>)
 8005086:	400a      	ands	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fe fc11 	bl	80038b0 <HAL_GetTick>
 800508e:	0003      	movs	r3, r0
 8005090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005094:	f7fe fc0c 	bl	80038b0 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e086      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	4b22      	ldr	r3, [pc, #136]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	049b      	lsls	r3, r3, #18
 80050ae:	4013      	ands	r3, r2
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b2:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	220f      	movs	r2, #15
 80050b8:	4393      	bics	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_RCC_OscConfig+0x690>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	431a      	orrs	r2, r3
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	0449      	lsls	r1, r1, #17
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe fbdf 	bl	80038b0 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fe fbda 	bl	80038b0 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e054      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	049b      	lsls	r3, r3, #18
 8005112:	4013      	ands	r3, r2
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x644>
 8005116:	e04c      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800511e:	4908      	ldr	r1, [pc, #32]	; (8005140 <HAL_RCC_OscConfig+0x68c>)
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fe fbc4 	bl	80038b0 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x6a6>
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	40021000 	.word	0x40021000
 8005134:	00001388 	.word	0x00001388
 8005138:	efffffff 	.word	0xefffffff
 800513c:	fffeffff 	.word	0xfffeffff
 8005140:	feffffff 	.word	0xfeffffff
 8005144:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005148:	f7fe fbb2 	bl	80038b0 <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e02c      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800515a:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	049b      	lsls	r3, r3, #18
 8005162:	4013      	ands	r3, r2
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x694>
 8005166:	e024      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e01f      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	23c0      	movs	r3, #192	; 0xc0
 8005184:	025b      	lsls	r3, r3, #9
 8005186:	401a      	ands	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	429a      	cmp	r2, r3
 800518e:	d10e      	bne.n	80051ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	220f      	movs	r2, #15
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d107      	bne.n	80051ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	23f0      	movs	r3, #240	; 0xf0
 80051a2:	039b      	lsls	r3, r3, #14
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b008      	add	sp, #32
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0bf      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2201      	movs	r2, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d911      	bls.n	8005206 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b5e      	ldr	r3, [pc, #376]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4393      	bics	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	4b5b      	ldr	r3, [pc, #364]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2201      	movs	r2, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0a6      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2202      	movs	r2, #2
 800520c:	4013      	ands	r3, r2
 800520e:	d015      	beq.n	800523c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2204      	movs	r2, #4
 8005216:	4013      	ands	r3, r2
 8005218:	d006      	beq.n	8005228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800521a:	4b51      	ldr	r3, [pc, #324]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005220:	21e0      	movs	r1, #224	; 0xe0
 8005222:	00c9      	lsls	r1, r1, #3
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	22f0      	movs	r2, #240	; 0xf0
 800522e:	4393      	bics	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	d04c      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	4b44      	ldr	r3, [pc, #272]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	4013      	ands	r3, r2
 8005258:	d120      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07a      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	049b      	lsls	r3, r3, #18
 800526e:	4013      	ands	r3, r2
 8005270:	d114      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e06e      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	025b      	lsls	r3, r3, #9
 8005286:	4013      	ands	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e062      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b34      	ldr	r3, [pc, #208]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e05b      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fe fafe 	bl	80038b0 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b8:	e009      	b.n	80052ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ba:	f7fe faf9 	bl	80038b0 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_RCC_ClockConfig+0x1a4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e042      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	220c      	movs	r2, #12
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1ec      	bne.n	80052ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d211      	bcs.n	8005312 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4393      	bics	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	4b18      	ldr	r3, [pc, #96]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005300:	4b16      	ldr	r3, [pc, #88]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	4013      	ands	r3, r2
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e020      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2204      	movs	r2, #4
 8005318:	4013      	ands	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <HAL_RCC_ClockConfig+0x1a8>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005330:	f000 f820 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8005334:	0001      	movs	r1, r0
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	220f      	movs	r2, #15
 800533e:	4013      	ands	r3, r2
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <HAL_RCC_ClockConfig+0x1ac>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	000a      	movs	r2, r1
 8005346:	40da      	lsrs	r2, r3
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_ClockConfig+0x1b0>)
 800534a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800534c:	2000      	movs	r0, #0
 800534e:	f7fe fa69 	bl	8003824 <HAL_InitTick>
  
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	0018      	movs	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	b004      	add	sp, #16
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	00001388 	.word	0x00001388
 8005368:	fffff8ff 	.word	0xfffff8ff
 800536c:	08007a58 	.word	0x08007a58
 8005370:	20000090 	.word	0x20000090

08005374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b08f      	sub	sp, #60	; 0x3c
 8005378:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800537a:	2314      	movs	r3, #20
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	4a38      	ldr	r2, [pc, #224]	; (8005460 <HAL_RCC_GetSysClockFreq+0xec>)
 8005380:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005382:	c313      	stmia	r3!, {r0, r1, r4}
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	4a36      	ldr	r2, [pc, #216]	; (8005464 <HAL_RCC_GetSysClockFreq+0xf0>)
 800538c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800538e:	c313      	stmia	r3!, {r0, r1, r4}
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005398:	2300      	movs	r3, #0
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
 800539c:	2300      	movs	r3, #0
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80053a8:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	220c      	movs	r2, #12
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d047      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0xd4>
 80053b8:	d849      	bhi.n	800544e <HAL_RCC_GetSysClockFreq+0xda>
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d002      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x50>
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d003      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0x56>
 80053c2:	e044      	b.n	800544e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053c4:	4b29      	ldr	r3, [pc, #164]	; (800546c <HAL_RCC_GetSysClockFreq+0xf8>)
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053c8:	e044      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	0c9b      	lsrs	r3, r3, #18
 80053ce:	220f      	movs	r2, #15
 80053d0:	4013      	ands	r3, r2
 80053d2:	2214      	movs	r2, #20
 80053d4:	18ba      	adds	r2, r7, r2
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80053da:	4b23      	ldr	r3, [pc, #140]	; (8005468 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	220f      	movs	r2, #15
 80053e0:	4013      	ands	r3, r2
 80053e2:	1d3a      	adds	r2, r7, #4
 80053e4:	5cd3      	ldrb	r3, [r2, r3]
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	23c0      	movs	r3, #192	; 0xc0
 80053ec:	025b      	lsls	r3, r3, #9
 80053ee:	401a      	ands	r2, r3
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	025b      	lsls	r3, r3, #9
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d109      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fa:	481c      	ldr	r0, [pc, #112]	; (800546c <HAL_RCC_GetSysClockFreq+0xf8>)
 80053fc:	f7fa fe8c 	bl	8000118 <__udivsi3>
 8005400:	0003      	movs	r3, r0
 8005402:	001a      	movs	r2, r3
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	4353      	muls	r3, r2
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
 800540a:	e01a      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800540c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540e:	23c0      	movs	r3, #192	; 0xc0
 8005410:	025b      	lsls	r3, r3, #9
 8005412:	401a      	ands	r2, r3
 8005414:	23c0      	movs	r3, #192	; 0xc0
 8005416:	025b      	lsls	r3, r3, #9
 8005418:	429a      	cmp	r2, r3
 800541a:	d109      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800541c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541e:	4814      	ldr	r0, [pc, #80]	; (8005470 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005420:	f7fa fe7a 	bl	8000118 <__udivsi3>
 8005424:	0003      	movs	r3, r0
 8005426:	001a      	movs	r2, r3
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	4353      	muls	r3, r2
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
 800542e:	e008      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005432:	480e      	ldr	r0, [pc, #56]	; (800546c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005434:	f7fa fe70 	bl	8000118 <__udivsi3>
 8005438:	0003      	movs	r3, r0
 800543a:	001a      	movs	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	4353      	muls	r3, r2
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005446:	e005      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <HAL_RCC_GetSysClockFreq+0xfc>)
 800544a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800544c:	e002      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005450:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005452:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b00f      	add	sp, #60	; 0x3c
 800545c:	bd90      	pop	{r4, r7, pc}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	0800791c 	.word	0x0800791c
 8005464:	0800792c 	.word	0x0800792c
 8005468:	40021000 	.word	0x40021000
 800546c:	007a1200 	.word	0x007a1200
 8005470:	02dc6c00 	.word	0x02dc6c00

08005474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <HAL_RCC_GetHCLKFreq+0x10>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	20000090 	.word	0x20000090

08005488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800548c:	f7ff fff2 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005490:	0001      	movs	r1, r0
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	2207      	movs	r2, #7
 800549a:	4013      	ands	r3, r2
 800549c:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	40d9      	lsrs	r1, r3
 80054a2:	000b      	movs	r3, r1
}    
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	40021000 	.word	0x40021000
 80054b0:	08007a68 	.word	0x08007a68

080054b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	4013      	ands	r3, r2
 80054ce:	d100      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80054d0:	e08e      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80054d2:	2017      	movs	r0, #23
 80054d4:	183b      	adds	r3, r7, r0
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b6e      	ldr	r3, [pc, #440]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	055b      	lsls	r3, r3, #21
 80054e2:	4013      	ands	r3, r2
 80054e4:	d110      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	4b6b      	ldr	r3, [pc, #428]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	4b6a      	ldr	r3, [pc, #424]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	0549      	lsls	r1, r1, #21
 80054f0:	430a      	orrs	r2, r1
 80054f2:	61da      	str	r2, [r3, #28]
 80054f4:	4b67      	ldr	r3, [pc, #412]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	055b      	lsls	r3, r3, #21
 80054fc:	4013      	ands	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	183b      	adds	r3, r7, r0
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	4b63      	ldr	r3, [pc, #396]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4013      	ands	r3, r2
 8005512:	d11a      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005514:	4b60      	ldr	r3, [pc, #384]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800551a:	2180      	movs	r1, #128	; 0x80
 800551c:	0049      	lsls	r1, r1, #1
 800551e:	430a      	orrs	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005522:	f7fe f9c5 	bl	80038b0 <HAL_GetTick>
 8005526:	0003      	movs	r3, r0
 8005528:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552a:	e008      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552c:	f7fe f9c0 	bl	80038b0 <HAL_GetTick>
 8005530:	0002      	movs	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0a6      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4013      	ands	r3, r2
 8005548:	d0f0      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800554a:	4b52      	ldr	r3, [pc, #328]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	23c0      	movs	r3, #192	; 0xc0
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4013      	ands	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d034      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	23c0      	movs	r3, #192	; 0xc0
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4013      	ands	r3, r2
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	429a      	cmp	r2, r3
 800556a:	d02c      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800556c:	4b49      	ldr	r3, [pc, #292]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	4a4a      	ldr	r2, [pc, #296]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005576:	4b47      	ldr	r3, [pc, #284]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	4b46      	ldr	r3, [pc, #280]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	0249      	lsls	r1, r1, #9
 8005580:	430a      	orrs	r2, r1
 8005582:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005584:	4b43      	ldr	r3, [pc, #268]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	4b42      	ldr	r3, [pc, #264]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800558a:	4945      	ldr	r1, [pc, #276]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800558c:	400a      	ands	r2, r1
 800558e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005590:	4b40      	ldr	r3, [pc, #256]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	4013      	ands	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559e:	f7fe f987 	bl	80038b0 <HAL_GetTick>
 80055a2:	0003      	movs	r3, r0
 80055a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	e009      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fe f982 	bl	80038b0 <HAL_GetTick>
 80055ac:	0002      	movs	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d901      	bls.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e067      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	4b35      	ldr	r3, [pc, #212]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c6:	4b33      	ldr	r3, [pc, #204]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	4a34      	ldr	r2, [pc, #208]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055da:	2317      	movs	r3, #23
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055ea:	492f      	ldr	r1, [pc, #188]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80055ec:	400a      	ands	r2, r1
 80055ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	2203      	movs	r2, #3
 8005600:	4393      	bics	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	4b22      	ldr	r3, [pc, #136]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800560a:	430a      	orrs	r2, r1
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2202      	movs	r2, #2
 8005614:	4013      	ands	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	4a23      	ldr	r2, [pc, #140]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800561e:	4013      	ands	r3, r2
 8005620:	0019      	movs	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005628:	430a      	orrs	r2, r1
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	02db      	lsls	r3, r3, #11
 8005634:	4013      	ands	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005638:	4b16      	ldr	r3, [pc, #88]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800563e:	4013      	ands	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005648:	430a      	orrs	r2, r1
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2220      	movs	r2, #32
 8005652:	4013      	ands	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	2210      	movs	r2, #16
 800565c:	4393      	bics	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005666:	430a      	orrs	r2, r1
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4013      	ands	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	4393      	bics	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	4b03      	ldr	r3, [pc, #12]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005686:	430a      	orrs	r2, r1
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b006      	add	sp, #24
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	40007000 	.word	0x40007000
 800569c:	fffffcff 	.word	0xfffffcff
 80056a0:	fffeffff 	.word	0xfffeffff
 80056a4:	00001388 	.word	0x00001388
 80056a8:	efffffff 	.word	0xefffffff
 80056ac:	fffcffff 	.word	0xfffcffff
 80056b0:	fff3ffff 	.word	0xfff3ffff

080056b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e044      	b.n	8005750 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d107      	bne.n	80056de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2274      	movs	r2, #116	; 0x74
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f7fd ff61 	bl	80035a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2224      	movs	r2, #36	; 0x24
 80056e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2101      	movs	r1, #1
 80056f0:	438a      	bics	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 fc46 	bl	8005f88 <UART_SetConfig>
 80056fc:	0003      	movs	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e024      	b.n	8005750 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	0018      	movs	r0, r3
 8005712:	f000 fe21 	bl	8006358 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	490d      	ldr	r1, [pc, #52]	; (8005758 <HAL_UART_Init+0xa4>)
 8005722:	400a      	ands	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	212a      	movs	r1, #42	; 0x2a
 8005732:	438a      	bics	r2, r1
 8005734:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2101      	movs	r1, #1
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 feb9 	bl	80064c0 <UART_CheckIdleState>
 800574e:	0003      	movs	r3, r0
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}
 8005758:	ffffb7ff 	.word	0xffffb7ff

0800575c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	1dbb      	adds	r3, r7, #6
 800576a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005770:	2b20      	cmp	r3, #32
 8005772:	d000      	beq.n	8005776 <HAL_UART_Transmit+0x1a>
 8005774:	e096      	b.n	80058a4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_UART_Transmit+0x28>
 800577c:	1dbb      	adds	r3, r7, #6
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e08e      	b.n	80058a6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	015b      	lsls	r3, r3, #5
 8005790:	429a      	cmp	r2, r3
 8005792:	d109      	bne.n	80057a8 <HAL_UART_Transmit+0x4c>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2201      	movs	r2, #1
 80057a0:	4013      	ands	r3, r2
 80057a2:	d001      	beq.n	80057a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e07e      	b.n	80058a6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2274      	movs	r2, #116	; 0x74
 80057ac:	5c9b      	ldrb	r3, [r3, r2]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Transmit+0x5a>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e077      	b.n	80058a6 <HAL_UART_Transmit+0x14a>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2274      	movs	r2, #116	; 0x74
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	2100      	movs	r1, #0
 80057c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2221      	movs	r2, #33	; 0x21
 80057ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057cc:	f7fe f870 	bl	80038b0 <HAL_GetTick>
 80057d0:	0003      	movs	r3, r0
 80057d2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1dba      	adds	r2, r7, #6
 80057d8:	2150      	movs	r1, #80	; 0x50
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1dba      	adds	r2, r7, #6
 80057e2:	2152      	movs	r1, #82	; 0x52
 80057e4:	8812      	ldrh	r2, [r2, #0]
 80057e6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	015b      	lsls	r3, r3, #5
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d108      	bne.n	8005806 <HAL_UART_Transmit+0xaa>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e003      	b.n	800580e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2274      	movs	r2, #116	; 0x74
 8005812:	2100      	movs	r1, #0
 8005814:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005816:	e02d      	b.n	8005874 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	0013      	movs	r3, r2
 8005822:	2200      	movs	r2, #0
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	f000 fe93 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 800582a:	1e03      	subs	r3, r0, #0
 800582c:	d001      	beq.n	8005832 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e039      	b.n	80058a6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	05d2      	lsls	r2, r2, #23
 8005842:	0dd2      	lsrs	r2, r2, #23
 8005844:	b292      	uxth	r2, r2
 8005846:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	3302      	adds	r3, #2
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	e008      	b.n	8005862 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	b292      	uxth	r2, r2
 800585a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2252      	movs	r2, #82	; 0x52
 8005866:	5a9b      	ldrh	r3, [r3, r2]
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b299      	uxth	r1, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2252      	movs	r2, #82	; 0x52
 8005872:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2252      	movs	r2, #82	; 0x52
 8005878:	5a9b      	ldrh	r3, [r3, r2]
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1cb      	bne.n	8005818 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	0013      	movs	r3, r2
 800588a:	2200      	movs	r2, #0
 800588c:	2140      	movs	r1, #64	; 0x40
 800588e:	f000 fe5f 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8005892:	1e03      	subs	r3, r0, #0
 8005894:	d001      	beq.n	800589a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e005      	b.n	80058a6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b008      	add	sp, #32
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	1dbb      	adds	r3, r7, #6
 80058bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d000      	beq.n	80058c8 <HAL_UART_Transmit_IT+0x18>
 80058c6:	e06a      	b.n	800599e <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_UART_Transmit_IT+0x26>
 80058ce:	1dbb      	adds	r3, r7, #6
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e062      	b.n	80059a0 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	015b      	lsls	r3, r3, #5
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d109      	bne.n	80058fa <HAL_UART_Transmit_IT+0x4a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2201      	movs	r2, #1
 80058f2:	4013      	ands	r3, r2
 80058f4:	d001      	beq.n	80058fa <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e052      	b.n	80059a0 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2274      	movs	r2, #116	; 0x74
 80058fe:	5c9b      	ldrb	r3, [r3, r2]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_UART_Transmit_IT+0x58>
 8005904:	2302      	movs	r3, #2
 8005906:	e04b      	b.n	80059a0 <HAL_UART_Transmit_IT+0xf0>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2274      	movs	r2, #116	; 0x74
 800590c:	2101      	movs	r1, #1
 800590e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1dba      	adds	r2, r7, #6
 800591a:	2150      	movs	r1, #80	; 0x50
 800591c:	8812      	ldrh	r2, [r2, #0]
 800591e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1dba      	adds	r2, r7, #6
 8005924:	2152      	movs	r1, #82	; 0x52
 8005926:	8812      	ldrh	r2, [r2, #0]
 8005928:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	2100      	movs	r1, #0
 8005936:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2221      	movs	r2, #33	; 0x21
 800593c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	015b      	lsls	r3, r3, #5
 8005946:	429a      	cmp	r2, r3
 8005948:	d107      	bne.n	800595a <HAL_UART_Transmit_IT+0xaa>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <HAL_UART_Transmit_IT+0xf8>)
 8005956:	669a      	str	r2, [r3, #104]	; 0x68
 8005958:	e002      	b.n	8005960 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a13      	ldr	r2, [pc, #76]	; (80059ac <HAL_UART_Transmit_IT+0xfc>)
 800595e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2274      	movs	r2, #116	; 0x74
 8005964:	2100      	movs	r1, #0
 8005966:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005968:	f3ef 8310 	mrs	r3, PRIMASK
 800596c:	613b      	str	r3, [r7, #16]
  return(result);
 800596e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	2301      	movs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f383 8810 	msr	PRIMASK, r3
}
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	430a      	orrs	r2, r1
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f383 8810 	msr	PRIMASK, r3
}
 8005998:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b008      	add	sp, #32
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	0800687f 	.word	0x0800687f
 80059ac:	080067cb 	.word	0x080067cb

080059b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b0ab      	sub	sp, #172	; 0xac
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	22a4      	movs	r2, #164	; 0xa4
 80059c0:	18b9      	adds	r1, r7, r2
 80059c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	20a0      	movs	r0, #160	; 0xa0
 80059cc:	1839      	adds	r1, r7, r0
 80059ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	219c      	movs	r1, #156	; 0x9c
 80059d8:	1879      	adds	r1, r7, r1
 80059da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059dc:	0011      	movs	r1, r2
 80059de:	18bb      	adds	r3, r7, r2
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a99      	ldr	r2, [pc, #612]	; (8005c48 <HAL_UART_IRQHandler+0x298>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	2298      	movs	r2, #152	; 0x98
 80059e8:	18bc      	adds	r4, r7, r2
 80059ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80059ec:	18bb      	adds	r3, r7, r2
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d114      	bne.n	8005a1e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059f4:	187b      	adds	r3, r7, r1
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2220      	movs	r2, #32
 80059fa:	4013      	ands	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059fe:	183b      	adds	r3, r7, r0
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2220      	movs	r2, #32
 8005a04:	4013      	ands	r3, r2
 8005a06:	d00a      	beq.n	8005a1e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d100      	bne.n	8005a12 <HAL_UART_IRQHandler+0x62>
 8005a10:	e296      	b.n	8005f40 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	0010      	movs	r0, r2
 8005a1a:	4798      	blx	r3
      }
      return;
 8005a1c:	e290      	b.n	8005f40 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a1e:	2398      	movs	r3, #152	; 0x98
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d100      	bne.n	8005a2a <HAL_UART_IRQHandler+0x7a>
 8005a28:	e114      	b.n	8005c54 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a2a:	239c      	movs	r3, #156	; 0x9c
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	4013      	ands	r3, r2
 8005a34:	d106      	bne.n	8005a44 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a36:	23a0      	movs	r3, #160	; 0xa0
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a83      	ldr	r2, [pc, #524]	; (8005c4c <HAL_UART_IRQHandler+0x29c>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d100      	bne.n	8005a44 <HAL_UART_IRQHandler+0x94>
 8005a42:	e107      	b.n	8005c54 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a44:	23a4      	movs	r3, #164	; 0xa4
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d012      	beq.n	8005a76 <HAL_UART_IRQHandler+0xc6>
 8005a50:	23a0      	movs	r3, #160	; 0xa0
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	589b      	ldr	r3, [r3, r2]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2180      	movs	r1, #128	; 0x80
 8005a74:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a76:	23a4      	movs	r3, #164	; 0xa4
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d011      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xf6>
 8005a82:	239c      	movs	r3, #156	; 0x9c
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2202      	movs	r2, #2
 8005a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	589b      	ldr	r3, [r3, r2]
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa6:	23a4      	movs	r3, #164	; 0xa4
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2204      	movs	r2, #4
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d011      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x126>
 8005ab2:	239c      	movs	r3, #156	; 0x9c
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	589b      	ldr	r3, [r3, r2]
 8005acc:	2202      	movs	r2, #2
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ad6:	23a4      	movs	r3, #164	; 0xa4
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2208      	movs	r2, #8
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d017      	beq.n	8005b12 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ae2:	23a0      	movs	r3, #160	; 0xa0
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	4013      	ands	r3, r2
 8005aec:	d105      	bne.n	8005afa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005aee:	239c      	movs	r3, #156	; 0x9c
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2201      	movs	r2, #1
 8005af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005af8:	d00b      	beq.n	8005b12 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2208      	movs	r2, #8
 8005b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2280      	movs	r2, #128	; 0x80
 8005b06:	589b      	ldr	r3, [r3, r2]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b12:	23a4      	movs	r3, #164	; 0xa4
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_UART_IRQHandler+0x198>
 8005b20:	23a0      	movs	r3, #160	; 0xa0
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	04db      	lsls	r3, r3, #19
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d00c      	beq.n	8005b48 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	0112      	lsls	r2, r2, #4
 8005b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	589b      	ldr	r3, [r3, r2]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	589b      	ldr	r3, [r3, r2]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d100      	bne.n	8005b54 <HAL_UART_IRQHandler+0x1a4>
 8005b52:	e1f7      	b.n	8005f44 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b54:	23a4      	movs	r3, #164	; 0xa4
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b60:	23a0      	movs	r3, #160	; 0xa0
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2220      	movs	r2, #32
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d008      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	0010      	movs	r0, r2
 8005b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2280      	movs	r2, #128	; 0x80
 8005b82:	589b      	ldr	r3, [r3, r2]
 8005b84:	2194      	movs	r1, #148	; 0x94
 8005b86:	187a      	adds	r2, r7, r1
 8005b88:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2240      	movs	r2, #64	; 0x40
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d004      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2228      	movs	r2, #40	; 0x28
 8005b9e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba0:	d047      	beq.n	8005c32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 fd97 	bl	80066d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2240      	movs	r2, #64	; 0x40
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d137      	bne.n	8005c28 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc0:	2090      	movs	r0, #144	; 0x90
 8005bc2:	183a      	adds	r2, r7, r0
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bcc:	f383 8810 	msr	PRIMASK, r3
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	438a      	bics	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]
 8005be2:	183b      	adds	r3, r7, r0
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bea:	f383 8810 	msr	PRIMASK, r3
}
 8005bee:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <HAL_UART_IRQHandler+0x2a0>)
 8005bfe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7fd ff97 	bl	8003b38 <HAL_DMA_Abort_IT>
 8005c0a:	1e03      	subs	r3, r0, #0
 8005c0c:	d01a      	beq.n	8005c44 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	0018      	movs	r0, r3
 8005c1a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e012      	b.n	8005c44 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f99d 	bl	8005f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c26:	e00d      	b.n	8005c44 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 f998 	bl	8005f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e008      	b.n	8005c44 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 f993 	bl	8005f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	2100      	movs	r1, #0
 8005c40:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005c42:	e17f      	b.n	8005f44 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	46c0      	nop			; (mov r8, r8)
    return;
 8005c46:	e17d      	b.n	8005f44 <HAL_UART_IRQHandler+0x594>
 8005c48:	0000080f 	.word	0x0000080f
 8005c4c:	04000120 	.word	0x04000120
 8005c50:	0800679d 	.word	0x0800679d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d000      	beq.n	8005c5e <HAL_UART_IRQHandler+0x2ae>
 8005c5c:	e131      	b.n	8005ec2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c5e:	23a4      	movs	r3, #164	; 0xa4
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2210      	movs	r2, #16
 8005c66:	4013      	ands	r3, r2
 8005c68:	d100      	bne.n	8005c6c <HAL_UART_IRQHandler+0x2bc>
 8005c6a:	e12a      	b.n	8005ec2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c6c:	23a0      	movs	r3, #160	; 0xa0
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2210      	movs	r2, #16
 8005c74:	4013      	ands	r3, r2
 8005c76:	d100      	bne.n	8005c7a <HAL_UART_IRQHandler+0x2ca>
 8005c78:	e123      	b.n	8005ec2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2210      	movs	r2, #16
 8005c80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2240      	movs	r2, #64	; 0x40
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d000      	beq.n	8005c92 <HAL_UART_IRQHandler+0x2e2>
 8005c90:	e09b      	b.n	8005dca <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	217e      	movs	r1, #126	; 0x7e
 8005c9c:	187b      	adds	r3, r7, r1
 8005c9e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005ca0:	187b      	adds	r3, r7, r1
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d100      	bne.n	8005caa <HAL_UART_IRQHandler+0x2fa>
 8005ca8:	e14e      	b.n	8005f48 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2258      	movs	r2, #88	; 0x58
 8005cae:	5a9b      	ldrh	r3, [r3, r2]
 8005cb0:	187a      	adds	r2, r7, r1
 8005cb2:	8812      	ldrh	r2, [r2, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d300      	bcc.n	8005cba <HAL_UART_IRQHandler+0x30a>
 8005cb8:	e146      	b.n	8005f48 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	187a      	adds	r2, r7, r1
 8005cbe:	215a      	movs	r1, #90	; 0x5a
 8005cc0:	8812      	ldrh	r2, [r2, #0]
 8005cc2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d06e      	beq.n	8005dac <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cd8:	2301      	movs	r3, #1
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	499a      	ldr	r1, [pc, #616]	; (8005f58 <HAL_UART_IRQHandler+0x5a8>)
 8005cf0:	400a      	ands	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d00:	f3ef 8310 	mrs	r3, PRIMASK
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d08:	677b      	str	r3, [r7, #116]	; 0x74
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d10:	f383 8810 	msr	PRIMASK, r3
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2101      	movs	r1, #1
 8005d22:	438a      	bics	r2, r1
 8005d24:	609a      	str	r2, [r3, #8]
 8005d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2c:	f383 8810 	msr	PRIMASK, r3
}
 8005d30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2140      	movs	r1, #64	; 0x40
 8005d54:	438a      	bics	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d5a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d70:	f3ef 8310 	mrs	r3, PRIMASK
 8005d74:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d80:	f383 8810 	msr	PRIMASK, r3
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2110      	movs	r1, #16
 8005d92:	438a      	bics	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	0018      	movs	r0, r3
 8005da8:	f7fd fe8e 	bl	8003ac8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2258      	movs	r2, #88	; 0x58
 8005db0:	5a9a      	ldrh	r2, [r3, r2]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	215a      	movs	r1, #90	; 0x5a
 8005db6:	5a5b      	ldrh	r3, [r3, r1]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0011      	movs	r1, r2
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 f8d4 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc8:	e0be      	b.n	8005f48 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2258      	movs	r2, #88	; 0x58
 8005dce:	5a99      	ldrh	r1, [r3, r2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	225a      	movs	r2, #90	; 0x5a
 8005dd4:	5a9b      	ldrh	r3, [r3, r2]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	208e      	movs	r0, #142	; 0x8e
 8005dda:	183b      	adds	r3, r7, r0
 8005ddc:	1a8a      	subs	r2, r1, r2
 8005dde:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	225a      	movs	r2, #90	; 0x5a
 8005de4:	5a9b      	ldrh	r3, [r3, r2]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d100      	bne.n	8005dee <HAL_UART_IRQHandler+0x43e>
 8005dec:	e0ae      	b.n	8005f4c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005dee:	183b      	adds	r3, r7, r0
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d100      	bne.n	8005df8 <HAL_UART_IRQHandler+0x448>
 8005df6:	e0a9      	b.n	8005f4c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	2488      	movs	r4, #136	; 0x88
 8005e02:	193a      	adds	r2, r7, r4
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	2301      	movs	r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	494f      	ldr	r1, [pc, #316]	; (8005f5c <HAL_UART_IRQHandler+0x5ac>)
 8005e1e:	400a      	ands	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	193b      	adds	r3, r7, r4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e30:	f3ef 8310 	mrs	r3, PRIMASK
 8005e34:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e36:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	2484      	movs	r4, #132	; 0x84
 8005e3a:	193a      	adds	r2, r7, r4
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	f383 8810 	msr	PRIMASK, r3
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2101      	movs	r1, #1
 8005e56:	438a      	bics	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]
 8005e5a:	193b      	adds	r3, r7, r4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f383 8810 	msr	PRIMASK, r3
}
 8005e66:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e82:	2480      	movs	r4, #128	; 0x80
 8005e84:	193a      	adds	r2, r7, r4
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	f383 8810 	msr	PRIMASK, r3
}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	438a      	bics	r2, r1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	193b      	adds	r3, r7, r4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	f383 8810 	msr	PRIMASK, r3
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eb2:	183b      	adds	r3, r7, r0
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0011      	movs	r1, r2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f858 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec0:	e044      	b.n	8005f4c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ec2:	23a4      	movs	r3, #164	; 0xa4
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	035b      	lsls	r3, r3, #13
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d010      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x542>
 8005ed0:	239c      	movs	r3, #156	; 0x9c
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	03db      	lsls	r3, r3, #15
 8005eda:	4013      	ands	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	0352      	lsls	r2, r2, #13
 8005ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 fd50 	bl	8006990 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef0:	e02f      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ef2:	23a4      	movs	r3, #164	; 0xa4
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	4013      	ands	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005efe:	23a0      	movs	r3, #160	; 0xa0
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	4013      	ands	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01e      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	0010      	movs	r0, r2
 8005f1a:	4798      	blx	r3
    }
    return;
 8005f1c:	e018      	b.n	8005f50 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f1e:	23a4      	movs	r3, #164	; 0xa4
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2240      	movs	r2, #64	; 0x40
 8005f26:	4013      	ands	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
 8005f2a:	23a0      	movs	r3, #160	; 0xa0
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2240      	movs	r2, #64	; 0x40
 8005f32:	4013      	ands	r3, r2
 8005f34:	d00d      	beq.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 fcfe 	bl	800693a <UART_EndTransmit_IT>
    return;
 8005f3e:	e008      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f40:	46c0      	nop			; (mov r8, r8)
 8005f42:	e006      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	e004      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f48:	46c0      	nop			; (mov r8, r8)
 8005f4a:	e002      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	e000      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005f50:	46c0      	nop			; (mov r8, r8)
  }

}
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b02b      	add	sp, #172	; 0xac
 8005f56:	bd90      	pop	{r4, r7, pc}
 8005f58:	fffffeff 	.word	0xfffffeff
 8005f5c:	fffffedf 	.word	0xfffffedf

08005f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	000a      	movs	r2, r1
 8005f7a:	1cbb      	adds	r3, r7, #2
 8005f7c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b002      	add	sp, #8
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f90:	231e      	movs	r3, #30
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4abe      	ldr	r2, [pc, #760]	; (80062b0 <UART_SetConfig+0x328>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	0019      	movs	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4ab9      	ldr	r2, [pc, #740]	; (80062b4 <UART_SetConfig+0x32c>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	0019      	movs	r1, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4ab0      	ldr	r2, [pc, #704]	; (80062b8 <UART_SetConfig+0x330>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4aac      	ldr	r2, [pc, #688]	; (80062bc <UART_SetConfig+0x334>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d127      	bne.n	800605e <UART_SetConfig+0xd6>
 800600e:	4bac      	ldr	r3, [pc, #688]	; (80062c0 <UART_SetConfig+0x338>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	2203      	movs	r2, #3
 8006014:	4013      	ands	r3, r2
 8006016:	2b03      	cmp	r3, #3
 8006018:	d00d      	beq.n	8006036 <UART_SetConfig+0xae>
 800601a:	d81b      	bhi.n	8006054 <UART_SetConfig+0xcc>
 800601c:	2b02      	cmp	r3, #2
 800601e:	d014      	beq.n	800604a <UART_SetConfig+0xc2>
 8006020:	d818      	bhi.n	8006054 <UART_SetConfig+0xcc>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <UART_SetConfig+0xa4>
 8006026:	2b01      	cmp	r3, #1
 8006028:	d00a      	beq.n	8006040 <UART_SetConfig+0xb8>
 800602a:	e013      	b.n	8006054 <UART_SetConfig+0xcc>
 800602c:	231f      	movs	r3, #31
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	2200      	movs	r2, #0
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e0bd      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006036:	231f      	movs	r3, #31
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	2202      	movs	r2, #2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e0b8      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006040:	231f      	movs	r3, #31
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	2204      	movs	r2, #4
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e0b3      	b.n	80061b2 <UART_SetConfig+0x22a>
 800604a:	231f      	movs	r3, #31
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	2208      	movs	r2, #8
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	e0ae      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006054:	231f      	movs	r3, #31
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	2210      	movs	r2, #16
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e0a9      	b.n	80061b2 <UART_SetConfig+0x22a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a98      	ldr	r2, [pc, #608]	; (80062c4 <UART_SetConfig+0x33c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d134      	bne.n	80060d2 <UART_SetConfig+0x14a>
 8006068:	4b95      	ldr	r3, [pc, #596]	; (80062c0 <UART_SetConfig+0x338>)
 800606a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606c:	23c0      	movs	r3, #192	; 0xc0
 800606e:	029b      	lsls	r3, r3, #10
 8006070:	4013      	ands	r3, r2
 8006072:	22c0      	movs	r2, #192	; 0xc0
 8006074:	0292      	lsls	r2, r2, #10
 8006076:	4293      	cmp	r3, r2
 8006078:	d017      	beq.n	80060aa <UART_SetConfig+0x122>
 800607a:	22c0      	movs	r2, #192	; 0xc0
 800607c:	0292      	lsls	r2, r2, #10
 800607e:	4293      	cmp	r3, r2
 8006080:	d822      	bhi.n	80060c8 <UART_SetConfig+0x140>
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	0292      	lsls	r2, r2, #10
 8006086:	4293      	cmp	r3, r2
 8006088:	d019      	beq.n	80060be <UART_SetConfig+0x136>
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	0292      	lsls	r2, r2, #10
 800608e:	4293      	cmp	r3, r2
 8006090:	d81a      	bhi.n	80060c8 <UART_SetConfig+0x140>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <UART_SetConfig+0x118>
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	0252      	lsls	r2, r2, #9
 800609a:	4293      	cmp	r3, r2
 800609c:	d00a      	beq.n	80060b4 <UART_SetConfig+0x12c>
 800609e:	e013      	b.n	80060c8 <UART_SetConfig+0x140>
 80060a0:	231f      	movs	r3, #31
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e083      	b.n	80061b2 <UART_SetConfig+0x22a>
 80060aa:	231f      	movs	r3, #31
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e07e      	b.n	80061b2 <UART_SetConfig+0x22a>
 80060b4:	231f      	movs	r3, #31
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2204      	movs	r2, #4
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e079      	b.n	80061b2 <UART_SetConfig+0x22a>
 80060be:	231f      	movs	r3, #31
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	2208      	movs	r2, #8
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e074      	b.n	80061b2 <UART_SetConfig+0x22a>
 80060c8:	231f      	movs	r3, #31
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2210      	movs	r2, #16
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e06f      	b.n	80061b2 <UART_SetConfig+0x22a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a7c      	ldr	r2, [pc, #496]	; (80062c8 <UART_SetConfig+0x340>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d134      	bne.n	8006146 <UART_SetConfig+0x1be>
 80060dc:	4b78      	ldr	r3, [pc, #480]	; (80062c0 <UART_SetConfig+0x338>)
 80060de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e0:	23c0      	movs	r3, #192	; 0xc0
 80060e2:	031b      	lsls	r3, r3, #12
 80060e4:	4013      	ands	r3, r2
 80060e6:	22c0      	movs	r2, #192	; 0xc0
 80060e8:	0312      	lsls	r2, r2, #12
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d017      	beq.n	800611e <UART_SetConfig+0x196>
 80060ee:	22c0      	movs	r2, #192	; 0xc0
 80060f0:	0312      	lsls	r2, r2, #12
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d822      	bhi.n	800613c <UART_SetConfig+0x1b4>
 80060f6:	2280      	movs	r2, #128	; 0x80
 80060f8:	0312      	lsls	r2, r2, #12
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d019      	beq.n	8006132 <UART_SetConfig+0x1aa>
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	0312      	lsls	r2, r2, #12
 8006102:	4293      	cmp	r3, r2
 8006104:	d81a      	bhi.n	800613c <UART_SetConfig+0x1b4>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d004      	beq.n	8006114 <UART_SetConfig+0x18c>
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	02d2      	lsls	r2, r2, #11
 800610e:	4293      	cmp	r3, r2
 8006110:	d00a      	beq.n	8006128 <UART_SetConfig+0x1a0>
 8006112:	e013      	b.n	800613c <UART_SetConfig+0x1b4>
 8006114:	231f      	movs	r3, #31
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e049      	b.n	80061b2 <UART_SetConfig+0x22a>
 800611e:	231f      	movs	r3, #31
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	2202      	movs	r2, #2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e044      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006128:	231f      	movs	r3, #31
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2204      	movs	r2, #4
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e03f      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006132:	231f      	movs	r3, #31
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2208      	movs	r2, #8
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e03a      	b.n	80061b2 <UART_SetConfig+0x22a>
 800613c:	231f      	movs	r3, #31
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	2210      	movs	r2, #16
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e035      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a60      	ldr	r2, [pc, #384]	; (80062cc <UART_SetConfig+0x344>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d104      	bne.n	800615a <UART_SetConfig+0x1d2>
 8006150:	231f      	movs	r3, #31
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e02b      	b.n	80061b2 <UART_SetConfig+0x22a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a5c      	ldr	r2, [pc, #368]	; (80062d0 <UART_SetConfig+0x348>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d104      	bne.n	800616e <UART_SetConfig+0x1e6>
 8006164:	231f      	movs	r3, #31
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e021      	b.n	80061b2 <UART_SetConfig+0x22a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a58      	ldr	r2, [pc, #352]	; (80062d4 <UART_SetConfig+0x34c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d104      	bne.n	8006182 <UART_SetConfig+0x1fa>
 8006178:	231f      	movs	r3, #31
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e017      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a54      	ldr	r2, [pc, #336]	; (80062d8 <UART_SetConfig+0x350>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d104      	bne.n	8006196 <UART_SetConfig+0x20e>
 800618c:	231f      	movs	r3, #31
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e00d      	b.n	80061b2 <UART_SetConfig+0x22a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a50      	ldr	r2, [pc, #320]	; (80062dc <UART_SetConfig+0x354>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d104      	bne.n	80061aa <UART_SetConfig+0x222>
 80061a0:	231f      	movs	r3, #31
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e003      	b.n	80061b2 <UART_SetConfig+0x22a>
 80061aa:	231f      	movs	r3, #31
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	2210      	movs	r2, #16
 80061b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69da      	ldr	r2, [r3, #28]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d15d      	bne.n	800627a <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80061be:	231f      	movs	r3, #31
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d015      	beq.n	80061f4 <UART_SetConfig+0x26c>
 80061c8:	dc18      	bgt.n	80061fc <UART_SetConfig+0x274>
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d00d      	beq.n	80061ea <UART_SetConfig+0x262>
 80061ce:	dc15      	bgt.n	80061fc <UART_SetConfig+0x274>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <UART_SetConfig+0x252>
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d005      	beq.n	80061e4 <UART_SetConfig+0x25c>
 80061d8:	e010      	b.n	80061fc <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061da:	f7ff f955 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80061de:	0003      	movs	r3, r0
 80061e0:	61bb      	str	r3, [r7, #24]
        break;
 80061e2:	e012      	b.n	800620a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e4:	4b3e      	ldr	r3, [pc, #248]	; (80062e0 <UART_SetConfig+0x358>)
 80061e6:	61bb      	str	r3, [r7, #24]
        break;
 80061e8:	e00f      	b.n	800620a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ea:	f7ff f8c3 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 80061ee:	0003      	movs	r3, r0
 80061f0:	61bb      	str	r3, [r7, #24]
        break;
 80061f2:	e00a      	b.n	800620a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	61bb      	str	r3, [r7, #24]
        break;
 80061fa:	e006      	b.n	800620a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006200:	231e      	movs	r3, #30
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
        break;
 8006208:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d100      	bne.n	8006212 <UART_SetConfig+0x28a>
 8006210:	e095      	b.n	800633e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	005a      	lsls	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	18d2      	adds	r2, r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	0019      	movs	r1, r3
 8006224:	0010      	movs	r0, r2
 8006226:	f7f9 ff77 	bl	8000118 <__udivsi3>
 800622a:	0003      	movs	r3, r0
 800622c:	b29b      	uxth	r3, r3
 800622e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b0f      	cmp	r3, #15
 8006234:	d91c      	bls.n	8006270 <UART_SetConfig+0x2e8>
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	025b      	lsls	r3, r3, #9
 800623c:	429a      	cmp	r2, r3
 800623e:	d217      	bcs.n	8006270 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	b29a      	uxth	r2, r3
 8006244:	200e      	movs	r0, #14
 8006246:	183b      	adds	r3, r7, r0
 8006248:	210f      	movs	r1, #15
 800624a:	438a      	bics	r2, r1
 800624c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	b29b      	uxth	r3, r3
 8006254:	2207      	movs	r2, #7
 8006256:	4013      	ands	r3, r2
 8006258:	b299      	uxth	r1, r3
 800625a:	183b      	adds	r3, r7, r0
 800625c:	183a      	adds	r2, r7, r0
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	183a      	adds	r2, r7, r0
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e066      	b.n	800633e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006270:	231e      	movs	r3, #30
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e061      	b.n	800633e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800627a:	231f      	movs	r3, #31
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d02f      	beq.n	80062e4 <UART_SetConfig+0x35c>
 8006284:	dc32      	bgt.n	80062ec <UART_SetConfig+0x364>
 8006286:	2b04      	cmp	r3, #4
 8006288:	d00d      	beq.n	80062a6 <UART_SetConfig+0x31e>
 800628a:	dc2f      	bgt.n	80062ec <UART_SetConfig+0x364>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <UART_SetConfig+0x30e>
 8006290:	2b02      	cmp	r3, #2
 8006292:	d005      	beq.n	80062a0 <UART_SetConfig+0x318>
 8006294:	e02a      	b.n	80062ec <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006296:	f7ff f8f7 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 800629a:	0003      	movs	r3, r0
 800629c:	61bb      	str	r3, [r7, #24]
        break;
 800629e:	e02c      	b.n	80062fa <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <UART_SetConfig+0x358>)
 80062a2:	61bb      	str	r3, [r7, #24]
        break;
 80062a4:	e029      	b.n	80062fa <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a6:	f7ff f865 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 80062aa:	0003      	movs	r3, r0
 80062ac:	61bb      	str	r3, [r7, #24]
        break;
 80062ae:	e024      	b.n	80062fa <UART_SetConfig+0x372>
 80062b0:	efff69f3 	.word	0xefff69f3
 80062b4:	ffffcfff 	.word	0xffffcfff
 80062b8:	fffff4ff 	.word	0xfffff4ff
 80062bc:	40013800 	.word	0x40013800
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40004400 	.word	0x40004400
 80062c8:	40004800 	.word	0x40004800
 80062cc:	40004c00 	.word	0x40004c00
 80062d0:	40005000 	.word	0x40005000
 80062d4:	40011400 	.word	0x40011400
 80062d8:	40011800 	.word	0x40011800
 80062dc:	40011c00 	.word	0x40011c00
 80062e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	61bb      	str	r3, [r7, #24]
        break;
 80062ea:	e006      	b.n	80062fa <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f0:	231e      	movs	r3, #30
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	2201      	movs	r2, #1
 80062f6:	701a      	strb	r2, [r3, #0]
        break;
 80062f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01e      	beq.n	800633e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	085a      	lsrs	r2, r3, #1
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	18d2      	adds	r2, r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	0019      	movs	r1, r3
 8006310:	0010      	movs	r0, r2
 8006312:	f7f9 ff01 	bl	8000118 <__udivsi3>
 8006316:	0003      	movs	r3, r0
 8006318:	b29b      	uxth	r3, r3
 800631a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d909      	bls.n	8006336 <UART_SetConfig+0x3ae>
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	025b      	lsls	r3, r3, #9
 8006328:	429a      	cmp	r2, r3
 800632a:	d204      	bcs.n	8006336 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	60da      	str	r2, [r3, #12]
 8006334:	e003      	b.n	800633e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006336:	231e      	movs	r3, #30
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	2201      	movs	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800634a:	231e      	movs	r3, #30
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	781b      	ldrb	r3, [r3, #0]
}
 8006350:	0018      	movs	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	b008      	add	sp, #32
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2201      	movs	r2, #1
 8006366:	4013      	ands	r3, r2
 8006368:	d00b      	beq.n	8006382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a4a      	ldr	r2, [pc, #296]	; (800649c <UART_AdvFeatureConfig+0x144>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	2202      	movs	r2, #2
 8006388:	4013      	ands	r3, r2
 800638a:	d00b      	beq.n	80063a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4a43      	ldr	r2, [pc, #268]	; (80064a0 <UART_AdvFeatureConfig+0x148>)
 8006394:	4013      	ands	r3, r2
 8006396:	0019      	movs	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2204      	movs	r2, #4
 80063aa:	4013      	ands	r3, r2
 80063ac:	d00b      	beq.n	80063c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4a3b      	ldr	r2, [pc, #236]	; (80064a4 <UART_AdvFeatureConfig+0x14c>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	0019      	movs	r1, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2208      	movs	r2, #8
 80063cc:	4013      	ands	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4a34      	ldr	r2, [pc, #208]	; (80064a8 <UART_AdvFeatureConfig+0x150>)
 80063d8:	4013      	ands	r3, r2
 80063da:	0019      	movs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	2210      	movs	r2, #16
 80063ee:	4013      	ands	r3, r2
 80063f0:	d00b      	beq.n	800640a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <UART_AdvFeatureConfig+0x154>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	0019      	movs	r1, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2220      	movs	r2, #32
 8006410:	4013      	ands	r3, r2
 8006412:	d00b      	beq.n	800642c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <UART_AdvFeatureConfig+0x158>)
 800641c:	4013      	ands	r3, r2
 800641e:	0019      	movs	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2240      	movs	r2, #64	; 0x40
 8006432:	4013      	ands	r3, r2
 8006434:	d01d      	beq.n	8006472 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <UART_AdvFeatureConfig+0x15c>)
 800643e:	4013      	ands	r3, r2
 8006440:	0019      	movs	r1, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	035b      	lsls	r3, r3, #13
 8006456:	429a      	cmp	r2, r3
 8006458:	d10b      	bne.n	8006472 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <UART_AdvFeatureConfig+0x160>)
 8006462:	4013      	ands	r3, r2
 8006464:	0019      	movs	r1, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	4013      	ands	r3, r2
 800647a:	d00b      	beq.n	8006494 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4a0e      	ldr	r2, [pc, #56]	; (80064bc <UART_AdvFeatureConfig+0x164>)
 8006484:	4013      	ands	r3, r2
 8006486:	0019      	movs	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }
}
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	46bd      	mov	sp, r7
 8006498:	b002      	add	sp, #8
 800649a:	bd80      	pop	{r7, pc}
 800649c:	fffdffff 	.word	0xfffdffff
 80064a0:	fffeffff 	.word	0xfffeffff
 80064a4:	fffbffff 	.word	0xfffbffff
 80064a8:	ffff7fff 	.word	0xffff7fff
 80064ac:	ffffefff 	.word	0xffffefff
 80064b0:	ffffdfff 	.word	0xffffdfff
 80064b4:	ffefffff 	.word	0xffefffff
 80064b8:	ff9fffff 	.word	0xff9fffff
 80064bc:	fff7ffff 	.word	0xfff7ffff

080064c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2280      	movs	r2, #128	; 0x80
 80064cc:	2100      	movs	r1, #0
 80064ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d0:	f7fd f9ee 	bl	80038b0 <HAL_GetTick>
 80064d4:	0003      	movs	r3, r0
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2208      	movs	r2, #8
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d10c      	bne.n	8006500 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2280      	movs	r2, #128	; 0x80
 80064ea:	0391      	lsls	r1, r2, #14
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4a17      	ldr	r2, [pc, #92]	; (800654c <UART_CheckIdleState+0x8c>)
 80064f0:	9200      	str	r2, [sp, #0]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f000 f82c 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 80064f8:	1e03      	subs	r3, r0, #0
 80064fa:	d001      	beq.n	8006500 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e021      	b.n	8006544 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2204      	movs	r2, #4
 8006508:	4013      	ands	r3, r2
 800650a:	2b04      	cmp	r3, #4
 800650c:	d10c      	bne.n	8006528 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2280      	movs	r2, #128	; 0x80
 8006512:	03d1      	lsls	r1, r2, #15
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4a0d      	ldr	r2, [pc, #52]	; (800654c <UART_CheckIdleState+0x8c>)
 8006518:	9200      	str	r2, [sp, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	f000 f818 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8006520:	1e03      	subs	r3, r0, #0
 8006522:	d001      	beq.n	8006528 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e00d      	b.n	8006544 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2274      	movs	r2, #116	; 0x74
 800653e:	2100      	movs	r1, #0
 8006540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	0018      	movs	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	b004      	add	sp, #16
 800654a:	bd80      	pop	{r7, pc}
 800654c:	01ffffff 	.word	0x01ffffff

08006550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b094      	sub	sp, #80	; 0x50
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	1dfb      	adds	r3, r7, #7
 800655e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006560:	e0a3      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006564:	3301      	adds	r3, #1
 8006566:	d100      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006568:	e09f      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656a:	f7fd f9a1 	bl	80038b0 <HAL_GetTick>
 800656e:	0002      	movs	r2, r0
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006576:	429a      	cmp	r2, r3
 8006578:	d302      	bcc.n	8006580 <UART_WaitOnFlagUntilTimeout+0x30>
 800657a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800657c:	2b00      	cmp	r3, #0
 800657e:	d13d      	bne.n	80065fc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006580:	f3ef 8310 	mrs	r3, PRIMASK
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	2301      	movs	r3, #1
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	f383 8810 	msr	PRIMASK, r3
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	494c      	ldr	r1, [pc, #304]	; (80066d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b2:	f3ef 8310 	mrs	r3, PRIMASK
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
 80065bc:	2301      	movs	r3, #1
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	f383 8810 	msr	PRIMASK, r3
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2101      	movs	r1, #1
 80065d4:	438a      	bics	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]
 80065d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065de:	f383 8810 	msr	PRIMASK, r3
}
 80065e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2274      	movs	r2, #116	; 0x74
 80065f4:	2100      	movs	r1, #0
 80065f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e067      	b.n	80066cc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2204      	movs	r2, #4
 8006604:	4013      	ands	r3, r2
 8006606:	d050      	beq.n	80066aa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69da      	ldr	r2, [r3, #28]
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	401a      	ands	r2, r3
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	429a      	cmp	r2, r3
 800661a:	d146      	bne.n	80066aa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	0112      	lsls	r2, r2, #4
 8006624:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006626:	f3ef 8310 	mrs	r3, PRIMASK
 800662a:	613b      	str	r3, [r7, #16]
  return(result);
 800662c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f383 8810 	msr	PRIMASK, r3
}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4923      	ldr	r1, [pc, #140]	; (80066d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006648:	400a      	ands	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006658:	f3ef 8310 	mrs	r3, PRIMASK
 800665c:	61fb      	str	r3, [r7, #28]
  return(result);
 800665e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	64bb      	str	r3, [r7, #72]	; 0x48
 8006662:	2301      	movs	r3, #1
 8006664:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f383 8810 	msr	PRIMASK, r3
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2101      	movs	r1, #1
 800667a:	438a      	bics	r2, r1
 800667c:	609a      	str	r2, [r3, #8]
 800667e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	f383 8810 	msr	PRIMASK, r3
}
 8006688:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2280      	movs	r2, #128	; 0x80
 800669a:	2120      	movs	r1, #32
 800669c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2274      	movs	r2, #116	; 0x74
 80066a2:	2100      	movs	r1, #0
 80066a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e010      	b.n	80066cc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	425a      	negs	r2, r3
 80066ba:	4153      	adcs	r3, r2
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	001a      	movs	r2, r3
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d100      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0x17a>
 80066c8:	e74b      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	0018      	movs	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b014      	add	sp, #80	; 0x50
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	fffffe5f 	.word	0xfffffe5f

080066d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	; 0x38
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	617b      	str	r3, [r7, #20]
  return(result);
 80066e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ea:	2301      	movs	r3, #1
 80066ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	f383 8810 	msr	PRIMASK, r3
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4925      	ldr	r1, [pc, #148]	; (8006798 <UART_EndRxTransfer+0xc0>)
 8006702:	400a      	ands	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	623b      	str	r3, [r7, #32]
  return(result);
 8006718:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	633b      	str	r3, [r7, #48]	; 0x30
 800671c:	2301      	movs	r3, #1
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	f383 8810 	msr	PRIMASK, r3
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2101      	movs	r1, #1
 8006734:	438a      	bics	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	f383 8810 	msr	PRIMASK, r3
}
 8006742:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006748:	2b01      	cmp	r3, #1
 800674a:	d118      	bne.n	800677e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	60bb      	str	r3, [r7, #8]
  return(result);
 8006752:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006756:	2301      	movs	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2110      	movs	r1, #16
 800676e:	438a      	bics	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006790:	46c0      	nop			; (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b00e      	add	sp, #56	; 0x38
 8006796:	bd80      	pop	{r7, pc}
 8006798:	fffffedf 	.word	0xfffffedf

0800679c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	225a      	movs	r2, #90	; 0x5a
 80067ae:	2100      	movs	r1, #0
 80067b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2252      	movs	r2, #82	; 0x52
 80067b6:	2100      	movs	r1, #0
 80067b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff fbcf 	bl	8005f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b004      	add	sp, #16
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b08a      	sub	sp, #40	; 0x28
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d6:	2b21      	cmp	r3, #33	; 0x21
 80067d8:	d14d      	bne.n	8006876 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2252      	movs	r2, #82	; 0x52
 80067de:	5a9b      	ldrh	r3, [r3, r2]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d132      	bne.n	800684c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e6:	f3ef 8310 	mrs	r3, PRIMASK
 80067ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80067ec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
 80067f0:	2301      	movs	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f383 8810 	msr	PRIMASK, r3
}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	438a      	bics	r2, r1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f383 8810 	msr	PRIMASK, r3
}
 8006816:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
 800681c:	617b      	str	r3, [r7, #20]
  return(result);
 800681e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	2301      	movs	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f383 8810 	msr	PRIMASK, r3
}
 800682c:	46c0      	nop			; (mov r8, r8)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2140      	movs	r1, #64	; 0x40
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f383 8810 	msr	PRIMASK, r3
}
 8006848:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800684a:	e014      	b.n	8006876 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	b292      	uxth	r2, r2
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2252      	movs	r2, #82	; 0x52
 8006868:	5a9b      	ldrh	r3, [r3, r2]
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b299      	uxth	r1, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2252      	movs	r2, #82	; 0x52
 8006874:	5299      	strh	r1, [r3, r2]
}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	46bd      	mov	sp, r7
 800687a:	b00a      	add	sp, #40	; 0x28
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b08c      	sub	sp, #48	; 0x30
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800688a:	2b21      	cmp	r3, #33	; 0x21
 800688c:	d151      	bne.n	8006932 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2252      	movs	r2, #82	; 0x52
 8006892:	5a9b      	ldrh	r3, [r3, r2]
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d132      	bne.n	8006900 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689a:	f3ef 8310 	mrs	r3, PRIMASK
 800689e:	60fb      	str	r3, [r7, #12]
  return(result);
 80068a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a4:	2301      	movs	r3, #1
 80068a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f383 8810 	msr	PRIMASK, r3
}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2180      	movs	r1, #128	; 0x80
 80068bc:	438a      	bics	r2, r1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f383 8810 	msr	PRIMASK, r3
}
 80068ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068cc:	f3ef 8310 	mrs	r3, PRIMASK
 80068d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80068d2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
 80068d6:	2301      	movs	r3, #1
 80068d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f383 8810 	msr	PRIMASK, r3
}
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2140      	movs	r1, #64	; 0x40
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	f383 8810 	msr	PRIMASK, r3
}
 80068fc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80068fe:	e018      	b.n	8006932 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	05d2      	lsls	r2, r2, #23
 8006910:	0dd2      	lsrs	r2, r2, #23
 8006912:	b292      	uxth	r2, r2
 8006914:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	1c9a      	adds	r2, r3, #2
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2252      	movs	r2, #82	; 0x52
 8006924:	5a9b      	ldrh	r3, [r3, r2]
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b299      	uxth	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2252      	movs	r2, #82	; 0x52
 8006930:	5299      	strh	r1, [r3, r2]
}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	46bd      	mov	sp, r7
 8006936:	b00c      	add	sp, #48	; 0x30
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006942:	f3ef 8310 	mrs	r3, PRIMASK
 8006946:	60bb      	str	r3, [r7, #8]
  return(result);
 8006948:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	2301      	movs	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f383 8810 	msr	PRIMASK, r3
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2140      	movs	r1, #64	; 0x40
 8006964:	438a      	bics	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f383 8810 	msr	PRIMASK, r3
}
 8006972:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0018      	movs	r0, r3
 8006984:	f7fb ffd0 	bl	8002928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006988:	46c0      	nop			; (mov r8, r8)
 800698a:	46bd      	mov	sp, r7
 800698c:	b006      	add	sp, #24
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}

080069a0 <__errno>:
 80069a0:	4b01      	ldr	r3, [pc, #4]	; (80069a8 <__errno+0x8>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4770      	bx	lr
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	2000009c 	.word	0x2000009c

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	2600      	movs	r6, #0
 80069b0:	4d0c      	ldr	r5, [pc, #48]	; (80069e4 <__libc_init_array+0x38>)
 80069b2:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b4:	1b64      	subs	r4, r4, r5
 80069b6:	10a4      	asrs	r4, r4, #2
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	2600      	movs	r6, #0
 80069be:	f000 ff9b 	bl	80078f8 <_init>
 80069c2:	4d0a      	ldr	r5, [pc, #40]	; (80069ec <__libc_init_array+0x40>)
 80069c4:	4c0a      	ldr	r4, [pc, #40]	; (80069f0 <__libc_init_array+0x44>)
 80069c6:	1b64      	subs	r4, r4, r5
 80069c8:	10a4      	asrs	r4, r4, #2
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	00b3      	lsls	r3, r6, #2
 80069d2:	58eb      	ldr	r3, [r5, r3]
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	00b3      	lsls	r3, r6, #2
 80069dc:	58eb      	ldr	r3, [r5, r3]
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	08007b18 	.word	0x08007b18
 80069e8:	08007b18 	.word	0x08007b18
 80069ec:	08007b18 	.word	0x08007b18
 80069f0:	08007b1c 	.word	0x08007b1c

080069f4 <memset>:
 80069f4:	0003      	movs	r3, r0
 80069f6:	1882      	adds	r2, r0, r2
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	7019      	strb	r1, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <siprintf>:
 8006a04:	b40e      	push	{r1, r2, r3}
 8006a06:	b500      	push	{lr}
 8006a08:	490b      	ldr	r1, [pc, #44]	; (8006a38 <siprintf+0x34>)
 8006a0a:	b09c      	sub	sp, #112	; 0x70
 8006a0c:	ab1d      	add	r3, sp, #116	; 0x74
 8006a0e:	9002      	str	r0, [sp, #8]
 8006a10:	9006      	str	r0, [sp, #24]
 8006a12:	9107      	str	r1, [sp, #28]
 8006a14:	9104      	str	r1, [sp, #16]
 8006a16:	4809      	ldr	r0, [pc, #36]	; (8006a3c <siprintf+0x38>)
 8006a18:	4909      	ldr	r1, [pc, #36]	; (8006a40 <siprintf+0x3c>)
 8006a1a:	cb04      	ldmia	r3!, {r2}
 8006a1c:	9105      	str	r1, [sp, #20]
 8006a1e:	6800      	ldr	r0, [r0, #0]
 8006a20:	a902      	add	r1, sp, #8
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	f000 f870 	bl	8006b08 <_svfiprintf_r>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9a02      	ldr	r2, [sp, #8]
 8006a2c:	7013      	strb	r3, [r2, #0]
 8006a2e:	b01c      	add	sp, #112	; 0x70
 8006a30:	bc08      	pop	{r3}
 8006a32:	b003      	add	sp, #12
 8006a34:	4718      	bx	r3
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	7fffffff 	.word	0x7fffffff
 8006a3c:	2000009c 	.word	0x2000009c
 8006a40:	ffff0208 	.word	0xffff0208

08006a44 <__ssputs_r>:
 8006a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a46:	688e      	ldr	r6, [r1, #8]
 8006a48:	b085      	sub	sp, #20
 8006a4a:	0007      	movs	r7, r0
 8006a4c:	000c      	movs	r4, r1
 8006a4e:	9203      	str	r2, [sp, #12]
 8006a50:	9301      	str	r3, [sp, #4]
 8006a52:	429e      	cmp	r6, r3
 8006a54:	d83c      	bhi.n	8006ad0 <__ssputs_r+0x8c>
 8006a56:	2390      	movs	r3, #144	; 0x90
 8006a58:	898a      	ldrh	r2, [r1, #12]
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	421a      	tst	r2, r3
 8006a5e:	d034      	beq.n	8006aca <__ssputs_r+0x86>
 8006a60:	6909      	ldr	r1, [r1, #16]
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	6960      	ldr	r0, [r4, #20]
 8006a66:	1a5b      	subs	r3, r3, r1
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	4343      	muls	r3, r0
 8006a6e:	0fdd      	lsrs	r5, r3, #31
 8006a70:	18ed      	adds	r5, r5, r3
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	9802      	ldr	r0, [sp, #8]
 8006a76:	3301      	adds	r3, #1
 8006a78:	181b      	adds	r3, r3, r0
 8006a7a:	106d      	asrs	r5, r5, #1
 8006a7c:	42ab      	cmp	r3, r5
 8006a7e:	d900      	bls.n	8006a82 <__ssputs_r+0x3e>
 8006a80:	001d      	movs	r5, r3
 8006a82:	0553      	lsls	r3, r2, #21
 8006a84:	d532      	bpl.n	8006aec <__ssputs_r+0xa8>
 8006a86:	0029      	movs	r1, r5
 8006a88:	0038      	movs	r0, r7
 8006a8a:	f000 fb53 	bl	8007134 <_malloc_r>
 8006a8e:	1e06      	subs	r6, r0, #0
 8006a90:	d109      	bne.n	8006aa6 <__ssputs_r+0x62>
 8006a92:	230c      	movs	r3, #12
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	2001      	movs	r0, #1
 8006a9a:	89a2      	ldrh	r2, [r4, #12]
 8006a9c:	4240      	negs	r0, r0
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	b005      	add	sp, #20
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa6:	9a02      	ldr	r2, [sp, #8]
 8006aa8:	6921      	ldr	r1, [r4, #16]
 8006aaa:	f000 faba 	bl	8007022 <memcpy>
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <__ssputs_r+0xc0>)
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	9b02      	ldr	r3, [sp, #8]
 8006abc:	6126      	str	r6, [r4, #16]
 8006abe:	18f6      	adds	r6, r6, r3
 8006ac0:	6026      	str	r6, [r4, #0]
 8006ac2:	6165      	str	r5, [r4, #20]
 8006ac4:	9e01      	ldr	r6, [sp, #4]
 8006ac6:	1aed      	subs	r5, r5, r3
 8006ac8:	60a5      	str	r5, [r4, #8]
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	429e      	cmp	r6, r3
 8006ace:	d900      	bls.n	8006ad2 <__ssputs_r+0x8e>
 8006ad0:	9e01      	ldr	r6, [sp, #4]
 8006ad2:	0032      	movs	r2, r6
 8006ad4:	9903      	ldr	r1, [sp, #12]
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	f000 faac 	bl	8007034 <memmove>
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	2000      	movs	r0, #0
 8006ae0:	1b9b      	subs	r3, r3, r6
 8006ae2:	60a3      	str	r3, [r4, #8]
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	199e      	adds	r6, r3, r6
 8006ae8:	6026      	str	r6, [r4, #0]
 8006aea:	e7da      	b.n	8006aa2 <__ssputs_r+0x5e>
 8006aec:	002a      	movs	r2, r5
 8006aee:	0038      	movs	r0, r7
 8006af0:	f000 fb96 	bl	8007220 <_realloc_r>
 8006af4:	1e06      	subs	r6, r0, #0
 8006af6:	d1e0      	bne.n	8006aba <__ssputs_r+0x76>
 8006af8:	0038      	movs	r0, r7
 8006afa:	6921      	ldr	r1, [r4, #16]
 8006afc:	f000 faae 	bl	800705c <_free_r>
 8006b00:	e7c7      	b.n	8006a92 <__ssputs_r+0x4e>
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	fffffb7f 	.word	0xfffffb7f

08006b08 <_svfiprintf_r>:
 8006b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0a:	b0a1      	sub	sp, #132	; 0x84
 8006b0c:	9003      	str	r0, [sp, #12]
 8006b0e:	001d      	movs	r5, r3
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	000f      	movs	r7, r1
 8006b14:	0016      	movs	r6, r2
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	d511      	bpl.n	8006b3e <_svfiprintf_r+0x36>
 8006b1a:	690b      	ldr	r3, [r1, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10e      	bne.n	8006b3e <_svfiprintf_r+0x36>
 8006b20:	2140      	movs	r1, #64	; 0x40
 8006b22:	f000 fb07 	bl	8007134 <_malloc_r>
 8006b26:	6038      	str	r0, [r7, #0]
 8006b28:	6138      	str	r0, [r7, #16]
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d105      	bne.n	8006b3a <_svfiprintf_r+0x32>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	9a03      	ldr	r2, [sp, #12]
 8006b32:	3801      	subs	r0, #1
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	b021      	add	sp, #132	; 0x84
 8006b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	ac08      	add	r4, sp, #32
 8006b42:	6163      	str	r3, [r4, #20]
 8006b44:	3320      	adds	r3, #32
 8006b46:	7663      	strb	r3, [r4, #25]
 8006b48:	3310      	adds	r3, #16
 8006b4a:	76a3      	strb	r3, [r4, #26]
 8006b4c:	9507      	str	r5, [sp, #28]
 8006b4e:	0035      	movs	r5, r6
 8006b50:	782b      	ldrb	r3, [r5, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_svfiprintf_r+0x52>
 8006b56:	2b25      	cmp	r3, #37	; 0x25
 8006b58:	d147      	bne.n	8006bea <_svfiprintf_r+0xe2>
 8006b5a:	1bab      	subs	r3, r5, r6
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	42b5      	cmp	r5, r6
 8006b60:	d00c      	beq.n	8006b7c <_svfiprintf_r+0x74>
 8006b62:	0032      	movs	r2, r6
 8006b64:	0039      	movs	r1, r7
 8006b66:	9803      	ldr	r0, [sp, #12]
 8006b68:	f7ff ff6c 	bl	8006a44 <__ssputs_r>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d100      	bne.n	8006b72 <_svfiprintf_r+0x6a>
 8006b70:	e0ae      	b.n	8006cd0 <_svfiprintf_r+0x1c8>
 8006b72:	6962      	ldr	r2, [r4, #20]
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	4694      	mov	ip, r2
 8006b78:	4463      	add	r3, ip
 8006b7a:	6163      	str	r3, [r4, #20]
 8006b7c:	782b      	ldrb	r3, [r5, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d100      	bne.n	8006b84 <_svfiprintf_r+0x7c>
 8006b82:	e0a5      	b.n	8006cd0 <_svfiprintf_r+0x1c8>
 8006b84:	2201      	movs	r2, #1
 8006b86:	2300      	movs	r3, #0
 8006b88:	4252      	negs	r2, r2
 8006b8a:	6062      	str	r2, [r4, #4]
 8006b8c:	a904      	add	r1, sp, #16
 8006b8e:	3254      	adds	r2, #84	; 0x54
 8006b90:	1852      	adds	r2, r2, r1
 8006b92:	1c6e      	adds	r6, r5, #1
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	60e3      	str	r3, [r4, #12]
 8006b98:	60a3      	str	r3, [r4, #8]
 8006b9a:	7013      	strb	r3, [r2, #0]
 8006b9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b9e:	2205      	movs	r2, #5
 8006ba0:	7831      	ldrb	r1, [r6, #0]
 8006ba2:	4854      	ldr	r0, [pc, #336]	; (8006cf4 <_svfiprintf_r+0x1ec>)
 8006ba4:	f000 fa32 	bl	800700c <memchr>
 8006ba8:	1c75      	adds	r5, r6, #1
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d11f      	bne.n	8006bee <_svfiprintf_r+0xe6>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	06d3      	lsls	r3, r2, #27
 8006bb2:	d504      	bpl.n	8006bbe <_svfiprintf_r+0xb6>
 8006bb4:	2353      	movs	r3, #83	; 0x53
 8006bb6:	a904      	add	r1, sp, #16
 8006bb8:	185b      	adds	r3, r3, r1
 8006bba:	2120      	movs	r1, #32
 8006bbc:	7019      	strb	r1, [r3, #0]
 8006bbe:	0713      	lsls	r3, r2, #28
 8006bc0:	d504      	bpl.n	8006bcc <_svfiprintf_r+0xc4>
 8006bc2:	2353      	movs	r3, #83	; 0x53
 8006bc4:	a904      	add	r1, sp, #16
 8006bc6:	185b      	adds	r3, r3, r1
 8006bc8:	212b      	movs	r1, #43	; 0x2b
 8006bca:	7019      	strb	r1, [r3, #0]
 8006bcc:	7833      	ldrb	r3, [r6, #0]
 8006bce:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd0:	d016      	beq.n	8006c00 <_svfiprintf_r+0xf8>
 8006bd2:	0035      	movs	r5, r6
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	200a      	movs	r0, #10
 8006bd8:	68e3      	ldr	r3, [r4, #12]
 8006bda:	782a      	ldrb	r2, [r5, #0]
 8006bdc:	1c6e      	adds	r6, r5, #1
 8006bde:	3a30      	subs	r2, #48	; 0x30
 8006be0:	2a09      	cmp	r2, #9
 8006be2:	d94e      	bls.n	8006c82 <_svfiprintf_r+0x17a>
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d111      	bne.n	8006c0c <_svfiprintf_r+0x104>
 8006be8:	e017      	b.n	8006c1a <_svfiprintf_r+0x112>
 8006bea:	3501      	adds	r5, #1
 8006bec:	e7b0      	b.n	8006b50 <_svfiprintf_r+0x48>
 8006bee:	4b41      	ldr	r3, [pc, #260]	; (8006cf4 <_svfiprintf_r+0x1ec>)
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	1ac0      	subs	r0, r0, r3
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4083      	lsls	r3, r0
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	002e      	movs	r6, r5
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	e7ce      	b.n	8006b9e <_svfiprintf_r+0x96>
 8006c00:	9b07      	ldr	r3, [sp, #28]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9107      	str	r1, [sp, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db01      	blt.n	8006c10 <_svfiprintf_r+0x108>
 8006c0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c0e:	e004      	b.n	8006c1a <_svfiprintf_r+0x112>
 8006c10:	425b      	negs	r3, r3
 8006c12:	60e3      	str	r3, [r4, #12]
 8006c14:	2302      	movs	r3, #2
 8006c16:	4313      	orrs	r3, r2
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	782b      	ldrb	r3, [r5, #0]
 8006c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1e:	d10a      	bne.n	8006c36 <_svfiprintf_r+0x12e>
 8006c20:	786b      	ldrb	r3, [r5, #1]
 8006c22:	2b2a      	cmp	r3, #42	; 0x2a
 8006c24:	d135      	bne.n	8006c92 <_svfiprintf_r+0x18a>
 8006c26:	9b07      	ldr	r3, [sp, #28]
 8006c28:	3502      	adds	r5, #2
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	9207      	str	r2, [sp, #28]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	db2b      	blt.n	8006c8c <_svfiprintf_r+0x184>
 8006c34:	9309      	str	r3, [sp, #36]	; 0x24
 8006c36:	4e30      	ldr	r6, [pc, #192]	; (8006cf8 <_svfiprintf_r+0x1f0>)
 8006c38:	2203      	movs	r2, #3
 8006c3a:	0030      	movs	r0, r6
 8006c3c:	7829      	ldrb	r1, [r5, #0]
 8006c3e:	f000 f9e5 	bl	800700c <memchr>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d006      	beq.n	8006c54 <_svfiprintf_r+0x14c>
 8006c46:	2340      	movs	r3, #64	; 0x40
 8006c48:	1b80      	subs	r0, r0, r6
 8006c4a:	4083      	lsls	r3, r0
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	3501      	adds	r5, #1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	6023      	str	r3, [r4, #0]
 8006c54:	7829      	ldrb	r1, [r5, #0]
 8006c56:	2206      	movs	r2, #6
 8006c58:	4828      	ldr	r0, [pc, #160]	; (8006cfc <_svfiprintf_r+0x1f4>)
 8006c5a:	1c6e      	adds	r6, r5, #1
 8006c5c:	7621      	strb	r1, [r4, #24]
 8006c5e:	f000 f9d5 	bl	800700c <memchr>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d03c      	beq.n	8006ce0 <_svfiprintf_r+0x1d8>
 8006c66:	4b26      	ldr	r3, [pc, #152]	; (8006d00 <_svfiprintf_r+0x1f8>)
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d125      	bne.n	8006cb8 <_svfiprintf_r+0x1b0>
 8006c6c:	2207      	movs	r2, #7
 8006c6e:	9b07      	ldr	r3, [sp, #28]
 8006c70:	3307      	adds	r3, #7
 8006c72:	4393      	bics	r3, r2
 8006c74:	3308      	adds	r3, #8
 8006c76:	9307      	str	r3, [sp, #28]
 8006c78:	6963      	ldr	r3, [r4, #20]
 8006c7a:	9a04      	ldr	r2, [sp, #16]
 8006c7c:	189b      	adds	r3, r3, r2
 8006c7e:	6163      	str	r3, [r4, #20]
 8006c80:	e765      	b.n	8006b4e <_svfiprintf_r+0x46>
 8006c82:	4343      	muls	r3, r0
 8006c84:	0035      	movs	r5, r6
 8006c86:	2101      	movs	r1, #1
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	e7a6      	b.n	8006bda <_svfiprintf_r+0xd2>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	425b      	negs	r3, r3
 8006c90:	e7d0      	b.n	8006c34 <_svfiprintf_r+0x12c>
 8006c92:	2300      	movs	r3, #0
 8006c94:	200a      	movs	r0, #10
 8006c96:	001a      	movs	r2, r3
 8006c98:	3501      	adds	r5, #1
 8006c9a:	6063      	str	r3, [r4, #4]
 8006c9c:	7829      	ldrb	r1, [r5, #0]
 8006c9e:	1c6e      	adds	r6, r5, #1
 8006ca0:	3930      	subs	r1, #48	; 0x30
 8006ca2:	2909      	cmp	r1, #9
 8006ca4:	d903      	bls.n	8006cae <_svfiprintf_r+0x1a6>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0c5      	beq.n	8006c36 <_svfiprintf_r+0x12e>
 8006caa:	9209      	str	r2, [sp, #36]	; 0x24
 8006cac:	e7c3      	b.n	8006c36 <_svfiprintf_r+0x12e>
 8006cae:	4342      	muls	r2, r0
 8006cb0:	0035      	movs	r5, r6
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	1852      	adds	r2, r2, r1
 8006cb6:	e7f1      	b.n	8006c9c <_svfiprintf_r+0x194>
 8006cb8:	ab07      	add	r3, sp, #28
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	003a      	movs	r2, r7
 8006cbe:	0021      	movs	r1, r4
 8006cc0:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <_svfiprintf_r+0x1fc>)
 8006cc2:	9803      	ldr	r0, [sp, #12]
 8006cc4:	e000      	b.n	8006cc8 <_svfiprintf_r+0x1c0>
 8006cc6:	bf00      	nop
 8006cc8:	9004      	str	r0, [sp, #16]
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	d1d3      	bne.n	8006c78 <_svfiprintf_r+0x170>
 8006cd0:	89bb      	ldrh	r3, [r7, #12]
 8006cd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006cd4:	065b      	lsls	r3, r3, #25
 8006cd6:	d400      	bmi.n	8006cda <_svfiprintf_r+0x1d2>
 8006cd8:	e72d      	b.n	8006b36 <_svfiprintf_r+0x2e>
 8006cda:	2001      	movs	r0, #1
 8006cdc:	4240      	negs	r0, r0
 8006cde:	e72a      	b.n	8006b36 <_svfiprintf_r+0x2e>
 8006ce0:	ab07      	add	r3, sp, #28
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	003a      	movs	r2, r7
 8006ce6:	0021      	movs	r1, r4
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <_svfiprintf_r+0x1fc>)
 8006cea:	9803      	ldr	r0, [sp, #12]
 8006cec:	f000 f87c 	bl	8006de8 <_printf_i>
 8006cf0:	e7ea      	b.n	8006cc8 <_svfiprintf_r+0x1c0>
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	08007a70 	.word	0x08007a70
 8006cf8:	08007a76 	.word	0x08007a76
 8006cfc:	08007a7a 	.word	0x08007a7a
 8006d00:	00000000 	.word	0x00000000
 8006d04:	08006a45 	.word	0x08006a45

08006d08 <_printf_common>:
 8006d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d0a:	0015      	movs	r5, r2
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	688a      	ldr	r2, [r1, #8]
 8006d10:	690b      	ldr	r3, [r1, #16]
 8006d12:	000c      	movs	r4, r1
 8006d14:	9000      	str	r0, [sp, #0]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	da00      	bge.n	8006d1c <_printf_common+0x14>
 8006d1a:	0013      	movs	r3, r2
 8006d1c:	0022      	movs	r2, r4
 8006d1e:	602b      	str	r3, [r5, #0]
 8006d20:	3243      	adds	r2, #67	; 0x43
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d001      	beq.n	8006d2c <_printf_common+0x24>
 8006d28:	3301      	adds	r3, #1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	069b      	lsls	r3, r3, #26
 8006d30:	d502      	bpl.n	8006d38 <_printf_common+0x30>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	3302      	adds	r3, #2
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	2306      	movs	r3, #6
 8006d3c:	0017      	movs	r7, r2
 8006d3e:	401f      	ands	r7, r3
 8006d40:	421a      	tst	r2, r3
 8006d42:	d027      	beq.n	8006d94 <_printf_common+0x8c>
 8006d44:	0023      	movs	r3, r4
 8006d46:	3343      	adds	r3, #67	; 0x43
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	1e5a      	subs	r2, r3, #1
 8006d4c:	4193      	sbcs	r3, r2
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	0692      	lsls	r2, r2, #26
 8006d52:	d430      	bmi.n	8006db6 <_printf_common+0xae>
 8006d54:	0022      	movs	r2, r4
 8006d56:	9901      	ldr	r1, [sp, #4]
 8006d58:	9800      	ldr	r0, [sp, #0]
 8006d5a:	9e08      	ldr	r6, [sp, #32]
 8006d5c:	3243      	adds	r2, #67	; 0x43
 8006d5e:	47b0      	blx	r6
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d025      	beq.n	8006db0 <_printf_common+0xa8>
 8006d64:	2306      	movs	r3, #6
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	682a      	ldr	r2, [r5, #0]
 8006d6a:	68e1      	ldr	r1, [r4, #12]
 8006d6c:	2500      	movs	r5, #0
 8006d6e:	4003      	ands	r3, r0
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0x74>
 8006d74:	1a8d      	subs	r5, r1, r2
 8006d76:	43eb      	mvns	r3, r5
 8006d78:	17db      	asrs	r3, r3, #31
 8006d7a:	401d      	ands	r5, r3
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	6922      	ldr	r2, [r4, #16]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	dd01      	ble.n	8006d88 <_printf_common+0x80>
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	18ed      	adds	r5, r5, r3
 8006d88:	2700      	movs	r7, #0
 8006d8a:	42bd      	cmp	r5, r7
 8006d8c:	d120      	bne.n	8006dd0 <_printf_common+0xc8>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e010      	b.n	8006db4 <_printf_common+0xac>
 8006d92:	3701      	adds	r7, #1
 8006d94:	68e3      	ldr	r3, [r4, #12]
 8006d96:	682a      	ldr	r2, [r5, #0]
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	42bb      	cmp	r3, r7
 8006d9c:	ddd2      	ble.n	8006d44 <_printf_common+0x3c>
 8006d9e:	0022      	movs	r2, r4
 8006da0:	2301      	movs	r3, #1
 8006da2:	9901      	ldr	r1, [sp, #4]
 8006da4:	9800      	ldr	r0, [sp, #0]
 8006da6:	9e08      	ldr	r6, [sp, #32]
 8006da8:	3219      	adds	r2, #25
 8006daa:	47b0      	blx	r6
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d1f0      	bne.n	8006d92 <_printf_common+0x8a>
 8006db0:	2001      	movs	r0, #1
 8006db2:	4240      	negs	r0, r0
 8006db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006db6:	2030      	movs	r0, #48	; 0x30
 8006db8:	18e1      	adds	r1, r4, r3
 8006dba:	3143      	adds	r1, #67	; 0x43
 8006dbc:	7008      	strb	r0, [r1, #0]
 8006dbe:	0021      	movs	r1, r4
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	3145      	adds	r1, #69	; 0x45
 8006dc4:	7809      	ldrb	r1, [r1, #0]
 8006dc6:	18a2      	adds	r2, r4, r2
 8006dc8:	3243      	adds	r2, #67	; 0x43
 8006dca:	3302      	adds	r3, #2
 8006dcc:	7011      	strb	r1, [r2, #0]
 8006dce:	e7c1      	b.n	8006d54 <_printf_common+0x4c>
 8006dd0:	0022      	movs	r2, r4
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	9901      	ldr	r1, [sp, #4]
 8006dd6:	9800      	ldr	r0, [sp, #0]
 8006dd8:	9e08      	ldr	r6, [sp, #32]
 8006dda:	321a      	adds	r2, #26
 8006ddc:	47b0      	blx	r6
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d0e6      	beq.n	8006db0 <_printf_common+0xa8>
 8006de2:	3701      	adds	r7, #1
 8006de4:	e7d1      	b.n	8006d8a <_printf_common+0x82>
	...

08006de8 <_printf_i>:
 8006de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dea:	b08b      	sub	sp, #44	; 0x2c
 8006dec:	9206      	str	r2, [sp, #24]
 8006dee:	000a      	movs	r2, r1
 8006df0:	3243      	adds	r2, #67	; 0x43
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	9005      	str	r0, [sp, #20]
 8006df6:	9204      	str	r2, [sp, #16]
 8006df8:	7e0a      	ldrb	r2, [r1, #24]
 8006dfa:	000c      	movs	r4, r1
 8006dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dfe:	2a78      	cmp	r2, #120	; 0x78
 8006e00:	d807      	bhi.n	8006e12 <_printf_i+0x2a>
 8006e02:	2a62      	cmp	r2, #98	; 0x62
 8006e04:	d809      	bhi.n	8006e1a <_printf_i+0x32>
 8006e06:	2a00      	cmp	r2, #0
 8006e08:	d100      	bne.n	8006e0c <_printf_i+0x24>
 8006e0a:	e0c1      	b.n	8006f90 <_printf_i+0x1a8>
 8006e0c:	2a58      	cmp	r2, #88	; 0x58
 8006e0e:	d100      	bne.n	8006e12 <_printf_i+0x2a>
 8006e10:	e08c      	b.n	8006f2c <_printf_i+0x144>
 8006e12:	0026      	movs	r6, r4
 8006e14:	3642      	adds	r6, #66	; 0x42
 8006e16:	7032      	strb	r2, [r6, #0]
 8006e18:	e022      	b.n	8006e60 <_printf_i+0x78>
 8006e1a:	0010      	movs	r0, r2
 8006e1c:	3863      	subs	r0, #99	; 0x63
 8006e1e:	2815      	cmp	r0, #21
 8006e20:	d8f7      	bhi.n	8006e12 <_printf_i+0x2a>
 8006e22:	f7f9 f96f 	bl	8000104 <__gnu_thumb1_case_shi>
 8006e26:	0016      	.short	0x0016
 8006e28:	fff6001f 	.word	0xfff6001f
 8006e2c:	fff6fff6 	.word	0xfff6fff6
 8006e30:	001ffff6 	.word	0x001ffff6
 8006e34:	fff6fff6 	.word	0xfff6fff6
 8006e38:	fff6fff6 	.word	0xfff6fff6
 8006e3c:	003600a8 	.word	0x003600a8
 8006e40:	fff6009a 	.word	0xfff6009a
 8006e44:	00b9fff6 	.word	0x00b9fff6
 8006e48:	0036fff6 	.word	0x0036fff6
 8006e4c:	fff6fff6 	.word	0xfff6fff6
 8006e50:	009e      	.short	0x009e
 8006e52:	0026      	movs	r6, r4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	3642      	adds	r6, #66	; 0x42
 8006e58:	1d11      	adds	r1, r2, #4
 8006e5a:	6019      	str	r1, [r3, #0]
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	7033      	strb	r3, [r6, #0]
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0a7      	b.n	8006fb4 <_printf_i+0x1cc>
 8006e64:	6808      	ldr	r0, [r1, #0]
 8006e66:	6819      	ldr	r1, [r3, #0]
 8006e68:	1d0a      	adds	r2, r1, #4
 8006e6a:	0605      	lsls	r5, r0, #24
 8006e6c:	d50b      	bpl.n	8006e86 <_printf_i+0x9e>
 8006e6e:	680d      	ldr	r5, [r1, #0]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	da03      	bge.n	8006e7e <_printf_i+0x96>
 8006e76:	232d      	movs	r3, #45	; 0x2d
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	426d      	negs	r5, r5
 8006e7c:	7013      	strb	r3, [r2, #0]
 8006e7e:	4b61      	ldr	r3, [pc, #388]	; (8007004 <_printf_i+0x21c>)
 8006e80:	270a      	movs	r7, #10
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	e01b      	b.n	8006ebe <_printf_i+0xd6>
 8006e86:	680d      	ldr	r5, [r1, #0]
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	0641      	lsls	r1, r0, #25
 8006e8c:	d5f1      	bpl.n	8006e72 <_printf_i+0x8a>
 8006e8e:	b22d      	sxth	r5, r5
 8006e90:	e7ef      	b.n	8006e72 <_printf_i+0x8a>
 8006e92:	680d      	ldr	r5, [r1, #0]
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	1d08      	adds	r0, r1, #4
 8006e98:	6018      	str	r0, [r3, #0]
 8006e9a:	062e      	lsls	r6, r5, #24
 8006e9c:	d501      	bpl.n	8006ea2 <_printf_i+0xba>
 8006e9e:	680d      	ldr	r5, [r1, #0]
 8006ea0:	e003      	b.n	8006eaa <_printf_i+0xc2>
 8006ea2:	066d      	lsls	r5, r5, #25
 8006ea4:	d5fb      	bpl.n	8006e9e <_printf_i+0xb6>
 8006ea6:	680d      	ldr	r5, [r1, #0]
 8006ea8:	b2ad      	uxth	r5, r5
 8006eaa:	4b56      	ldr	r3, [pc, #344]	; (8007004 <_printf_i+0x21c>)
 8006eac:	2708      	movs	r7, #8
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	2a6f      	cmp	r2, #111	; 0x6f
 8006eb2:	d000      	beq.n	8006eb6 <_printf_i+0xce>
 8006eb4:	3702      	adds	r7, #2
 8006eb6:	0023      	movs	r3, r4
 8006eb8:	2200      	movs	r2, #0
 8006eba:	3343      	adds	r3, #67	; 0x43
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	60a3      	str	r3, [r4, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	db03      	blt.n	8006ece <_printf_i+0xe6>
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	6821      	ldr	r1, [r4, #0]
 8006eca:	4391      	bics	r1, r2
 8006ecc:	6021      	str	r1, [r4, #0]
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	d102      	bne.n	8006ed8 <_printf_i+0xf0>
 8006ed2:	9e04      	ldr	r6, [sp, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <_printf_i+0x10a>
 8006ed8:	9e04      	ldr	r6, [sp, #16]
 8006eda:	0028      	movs	r0, r5
 8006edc:	0039      	movs	r1, r7
 8006ede:	f7f9 f9a1 	bl	8000224 <__aeabi_uidivmod>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	3e01      	subs	r6, #1
 8006ee6:	5c5b      	ldrb	r3, [r3, r1]
 8006ee8:	7033      	strb	r3, [r6, #0]
 8006eea:	002b      	movs	r3, r5
 8006eec:	0005      	movs	r5, r0
 8006eee:	429f      	cmp	r7, r3
 8006ef0:	d9f3      	bls.n	8006eda <_printf_i+0xf2>
 8006ef2:	2f08      	cmp	r7, #8
 8006ef4:	d109      	bne.n	8006f0a <_printf_i+0x122>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d506      	bpl.n	8006f0a <_printf_i+0x122>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	6922      	ldr	r2, [r4, #16]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	dc02      	bgt.n	8006f0a <_printf_i+0x122>
 8006f04:	2330      	movs	r3, #48	; 0x30
 8006f06:	3e01      	subs	r6, #1
 8006f08:	7033      	strb	r3, [r6, #0]
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	1b9b      	subs	r3, r3, r6
 8006f0e:	6123      	str	r3, [r4, #16]
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	0021      	movs	r1, r4
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	9805      	ldr	r0, [sp, #20]
 8006f18:	9b06      	ldr	r3, [sp, #24]
 8006f1a:	aa09      	add	r2, sp, #36	; 0x24
 8006f1c:	f7ff fef4 	bl	8006d08 <_printf_common>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d14c      	bne.n	8006fbe <_printf_i+0x1d6>
 8006f24:	2001      	movs	r0, #1
 8006f26:	4240      	negs	r0, r0
 8006f28:	b00b      	add	sp, #44	; 0x2c
 8006f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f2c:	3145      	adds	r1, #69	; 0x45
 8006f2e:	700a      	strb	r2, [r1, #0]
 8006f30:	4a34      	ldr	r2, [pc, #208]	; (8007004 <_printf_i+0x21c>)
 8006f32:	9203      	str	r2, [sp, #12]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	6821      	ldr	r1, [r4, #0]
 8006f38:	ca20      	ldmia	r2!, {r5}
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	0608      	lsls	r0, r1, #24
 8006f3e:	d516      	bpl.n	8006f6e <_printf_i+0x186>
 8006f40:	07cb      	lsls	r3, r1, #31
 8006f42:	d502      	bpl.n	8006f4a <_printf_i+0x162>
 8006f44:	2320      	movs	r3, #32
 8006f46:	4319      	orrs	r1, r3
 8006f48:	6021      	str	r1, [r4, #0]
 8006f4a:	2710      	movs	r7, #16
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	d1b2      	bne.n	8006eb6 <_printf_i+0xce>
 8006f50:	2320      	movs	r3, #32
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	439a      	bics	r2, r3
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	e7ad      	b.n	8006eb6 <_printf_i+0xce>
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	6809      	ldr	r1, [r1, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	0022      	movs	r2, r4
 8006f64:	2178      	movs	r1, #120	; 0x78
 8006f66:	3245      	adds	r2, #69	; 0x45
 8006f68:	7011      	strb	r1, [r2, #0]
 8006f6a:	4a27      	ldr	r2, [pc, #156]	; (8007008 <_printf_i+0x220>)
 8006f6c:	e7e1      	b.n	8006f32 <_printf_i+0x14a>
 8006f6e:	0648      	lsls	r0, r1, #25
 8006f70:	d5e6      	bpl.n	8006f40 <_printf_i+0x158>
 8006f72:	b2ad      	uxth	r5, r5
 8006f74:	e7e4      	b.n	8006f40 <_printf_i+0x158>
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	680d      	ldr	r5, [r1, #0]
 8006f7a:	1d10      	adds	r0, r2, #4
 8006f7c:	6949      	ldr	r1, [r1, #20]
 8006f7e:	6018      	str	r0, [r3, #0]
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	062e      	lsls	r6, r5, #24
 8006f84:	d501      	bpl.n	8006f8a <_printf_i+0x1a2>
 8006f86:	6019      	str	r1, [r3, #0]
 8006f88:	e002      	b.n	8006f90 <_printf_i+0x1a8>
 8006f8a:	066d      	lsls	r5, r5, #25
 8006f8c:	d5fb      	bpl.n	8006f86 <_printf_i+0x19e>
 8006f8e:	8019      	strh	r1, [r3, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	9e04      	ldr	r6, [sp, #16]
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	e7bb      	b.n	8006f10 <_printf_i+0x128>
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	1d11      	adds	r1, r2, #4
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	6816      	ldr	r6, [r2, #0]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	0030      	movs	r0, r6
 8006fa4:	6862      	ldr	r2, [r4, #4]
 8006fa6:	f000 f831 	bl	800700c <memchr>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d001      	beq.n	8006fb2 <_printf_i+0x1ca>
 8006fae:	1b80      	subs	r0, r0, r6
 8006fb0:	6060      	str	r0, [r4, #4]
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	7013      	strb	r3, [r2, #0]
 8006fbc:	e7a8      	b.n	8006f10 <_printf_i+0x128>
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	0032      	movs	r2, r6
 8006fc2:	9906      	ldr	r1, [sp, #24]
 8006fc4:	9805      	ldr	r0, [sp, #20]
 8006fc6:	9d07      	ldr	r5, [sp, #28]
 8006fc8:	47a8      	blx	r5
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d0aa      	beq.n	8006f24 <_printf_i+0x13c>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	079b      	lsls	r3, r3, #30
 8006fd2:	d415      	bmi.n	8007000 <_printf_i+0x218>
 8006fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd6:	68e0      	ldr	r0, [r4, #12]
 8006fd8:	4298      	cmp	r0, r3
 8006fda:	daa5      	bge.n	8006f28 <_printf_i+0x140>
 8006fdc:	0018      	movs	r0, r3
 8006fde:	e7a3      	b.n	8006f28 <_printf_i+0x140>
 8006fe0:	0022      	movs	r2, r4
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	9805      	ldr	r0, [sp, #20]
 8006fe8:	9e07      	ldr	r6, [sp, #28]
 8006fea:	3219      	adds	r2, #25
 8006fec:	47b0      	blx	r6
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d098      	beq.n	8006f24 <_printf_i+0x13c>
 8006ff2:	3501      	adds	r5, #1
 8006ff4:	68e3      	ldr	r3, [r4, #12]
 8006ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	42ab      	cmp	r3, r5
 8006ffc:	dcf0      	bgt.n	8006fe0 <_printf_i+0x1f8>
 8006ffe:	e7e9      	b.n	8006fd4 <_printf_i+0x1ec>
 8007000:	2500      	movs	r5, #0
 8007002:	e7f7      	b.n	8006ff4 <_printf_i+0x20c>
 8007004:	08007a81 	.word	0x08007a81
 8007008:	08007a92 	.word	0x08007a92

0800700c <memchr>:
 800700c:	b2c9      	uxtb	r1, r1
 800700e:	1882      	adds	r2, r0, r2
 8007010:	4290      	cmp	r0, r2
 8007012:	d101      	bne.n	8007018 <memchr+0xc>
 8007014:	2000      	movs	r0, #0
 8007016:	4770      	bx	lr
 8007018:	7803      	ldrb	r3, [r0, #0]
 800701a:	428b      	cmp	r3, r1
 800701c:	d0fb      	beq.n	8007016 <memchr+0xa>
 800701e:	3001      	adds	r0, #1
 8007020:	e7f6      	b.n	8007010 <memchr+0x4>

08007022 <memcpy>:
 8007022:	2300      	movs	r3, #0
 8007024:	b510      	push	{r4, lr}
 8007026:	429a      	cmp	r2, r3
 8007028:	d100      	bne.n	800702c <memcpy+0xa>
 800702a:	bd10      	pop	{r4, pc}
 800702c:	5ccc      	ldrb	r4, [r1, r3]
 800702e:	54c4      	strb	r4, [r0, r3]
 8007030:	3301      	adds	r3, #1
 8007032:	e7f8      	b.n	8007026 <memcpy+0x4>

08007034 <memmove>:
 8007034:	b510      	push	{r4, lr}
 8007036:	4288      	cmp	r0, r1
 8007038:	d902      	bls.n	8007040 <memmove+0xc>
 800703a:	188b      	adds	r3, r1, r2
 800703c:	4298      	cmp	r0, r3
 800703e:	d303      	bcc.n	8007048 <memmove+0x14>
 8007040:	2300      	movs	r3, #0
 8007042:	e007      	b.n	8007054 <memmove+0x20>
 8007044:	5c8b      	ldrb	r3, [r1, r2]
 8007046:	5483      	strb	r3, [r0, r2]
 8007048:	3a01      	subs	r2, #1
 800704a:	d2fb      	bcs.n	8007044 <memmove+0x10>
 800704c:	bd10      	pop	{r4, pc}
 800704e:	5ccc      	ldrb	r4, [r1, r3]
 8007050:	54c4      	strb	r4, [r0, r3]
 8007052:	3301      	adds	r3, #1
 8007054:	429a      	cmp	r2, r3
 8007056:	d1fa      	bne.n	800704e <memmove+0x1a>
 8007058:	e7f8      	b.n	800704c <memmove+0x18>
	...

0800705c <_free_r>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	0005      	movs	r5, r0
 8007060:	2900      	cmp	r1, #0
 8007062:	d010      	beq.n	8007086 <_free_r+0x2a>
 8007064:	1f0c      	subs	r4, r1, #4
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	da00      	bge.n	800706e <_free_r+0x12>
 800706c:	18e4      	adds	r4, r4, r3
 800706e:	0028      	movs	r0, r5
 8007070:	f000 f918 	bl	80072a4 <__malloc_lock>
 8007074:	4a1d      	ldr	r2, [pc, #116]	; (80070ec <_free_r+0x90>)
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d105      	bne.n	8007088 <_free_r+0x2c>
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	6014      	str	r4, [r2, #0]
 8007080:	0028      	movs	r0, r5
 8007082:	f000 f917 	bl	80072b4 <__malloc_unlock>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	42a3      	cmp	r3, r4
 800708a:	d908      	bls.n	800709e <_free_r+0x42>
 800708c:	6821      	ldr	r1, [r4, #0]
 800708e:	1860      	adds	r0, r4, r1
 8007090:	4283      	cmp	r3, r0
 8007092:	d1f3      	bne.n	800707c <_free_r+0x20>
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	1841      	adds	r1, r0, r1
 800709a:	6021      	str	r1, [r4, #0]
 800709c:	e7ee      	b.n	800707c <_free_r+0x20>
 800709e:	001a      	movs	r2, r3
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <_free_r+0x4e>
 80070a6:	42a3      	cmp	r3, r4
 80070a8:	d9f9      	bls.n	800709e <_free_r+0x42>
 80070aa:	6811      	ldr	r1, [r2, #0]
 80070ac:	1850      	adds	r0, r2, r1
 80070ae:	42a0      	cmp	r0, r4
 80070b0:	d10b      	bne.n	80070ca <_free_r+0x6e>
 80070b2:	6820      	ldr	r0, [r4, #0]
 80070b4:	1809      	adds	r1, r1, r0
 80070b6:	1850      	adds	r0, r2, r1
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	4283      	cmp	r3, r0
 80070bc:	d1e0      	bne.n	8007080 <_free_r+0x24>
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	1841      	adds	r1, r0, r1
 80070c4:	6011      	str	r1, [r2, #0]
 80070c6:	6053      	str	r3, [r2, #4]
 80070c8:	e7da      	b.n	8007080 <_free_r+0x24>
 80070ca:	42a0      	cmp	r0, r4
 80070cc:	d902      	bls.n	80070d4 <_free_r+0x78>
 80070ce:	230c      	movs	r3, #12
 80070d0:	602b      	str	r3, [r5, #0]
 80070d2:	e7d5      	b.n	8007080 <_free_r+0x24>
 80070d4:	6821      	ldr	r1, [r4, #0]
 80070d6:	1860      	adds	r0, r4, r1
 80070d8:	4283      	cmp	r3, r0
 80070da:	d103      	bne.n	80070e4 <_free_r+0x88>
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	1841      	adds	r1, r0, r1
 80070e2:	6021      	str	r1, [r4, #0]
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	6054      	str	r4, [r2, #4]
 80070e8:	e7ca      	b.n	8007080 <_free_r+0x24>
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	200002ec 	.word	0x200002ec

080070f0 <sbrk_aligned>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4e0f      	ldr	r6, [pc, #60]	; (8007130 <sbrk_aligned+0x40>)
 80070f4:	000d      	movs	r5, r1
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	0004      	movs	r4, r0
 80070fa:	2900      	cmp	r1, #0
 80070fc:	d102      	bne.n	8007104 <sbrk_aligned+0x14>
 80070fe:	f000 f8bf 	bl	8007280 <_sbrk_r>
 8007102:	6030      	str	r0, [r6, #0]
 8007104:	0029      	movs	r1, r5
 8007106:	0020      	movs	r0, r4
 8007108:	f000 f8ba 	bl	8007280 <_sbrk_r>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d00a      	beq.n	8007126 <sbrk_aligned+0x36>
 8007110:	2303      	movs	r3, #3
 8007112:	1cc5      	adds	r5, r0, #3
 8007114:	439d      	bics	r5, r3
 8007116:	42a8      	cmp	r0, r5
 8007118:	d007      	beq.n	800712a <sbrk_aligned+0x3a>
 800711a:	1a29      	subs	r1, r5, r0
 800711c:	0020      	movs	r0, r4
 800711e:	f000 f8af 	bl	8007280 <_sbrk_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d101      	bne.n	800712a <sbrk_aligned+0x3a>
 8007126:	2501      	movs	r5, #1
 8007128:	426d      	negs	r5, r5
 800712a:	0028      	movs	r0, r5
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	200002f0 	.word	0x200002f0

08007134 <_malloc_r>:
 8007134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007136:	2203      	movs	r2, #3
 8007138:	1ccb      	adds	r3, r1, #3
 800713a:	4393      	bics	r3, r2
 800713c:	3308      	adds	r3, #8
 800713e:	0006      	movs	r6, r0
 8007140:	001f      	movs	r7, r3
 8007142:	2b0c      	cmp	r3, #12
 8007144:	d232      	bcs.n	80071ac <_malloc_r+0x78>
 8007146:	270c      	movs	r7, #12
 8007148:	42b9      	cmp	r1, r7
 800714a:	d831      	bhi.n	80071b0 <_malloc_r+0x7c>
 800714c:	0030      	movs	r0, r6
 800714e:	f000 f8a9 	bl	80072a4 <__malloc_lock>
 8007152:	4d32      	ldr	r5, [pc, #200]	; (800721c <_malloc_r+0xe8>)
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	001c      	movs	r4, r3
 8007158:	2c00      	cmp	r4, #0
 800715a:	d12e      	bne.n	80071ba <_malloc_r+0x86>
 800715c:	0039      	movs	r1, r7
 800715e:	0030      	movs	r0, r6
 8007160:	f7ff ffc6 	bl	80070f0 <sbrk_aligned>
 8007164:	0004      	movs	r4, r0
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	d11e      	bne.n	80071a8 <_malloc_r+0x74>
 800716a:	682c      	ldr	r4, [r5, #0]
 800716c:	0025      	movs	r5, r4
 800716e:	2d00      	cmp	r5, #0
 8007170:	d14a      	bne.n	8007208 <_malloc_r+0xd4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	0029      	movs	r1, r5
 8007176:	18e3      	adds	r3, r4, r3
 8007178:	0030      	movs	r0, r6
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	f000 f880 	bl	8007280 <_sbrk_r>
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	4283      	cmp	r3, r0
 8007184:	d143      	bne.n	800720e <_malloc_r+0xda>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	3703      	adds	r7, #3
 800718a:	1aff      	subs	r7, r7, r3
 800718c:	2303      	movs	r3, #3
 800718e:	439f      	bics	r7, r3
 8007190:	3708      	adds	r7, #8
 8007192:	2f0c      	cmp	r7, #12
 8007194:	d200      	bcs.n	8007198 <_malloc_r+0x64>
 8007196:	270c      	movs	r7, #12
 8007198:	0039      	movs	r1, r7
 800719a:	0030      	movs	r0, r6
 800719c:	f7ff ffa8 	bl	80070f0 <sbrk_aligned>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d034      	beq.n	800720e <_malloc_r+0xda>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	19df      	adds	r7, r3, r7
 80071a8:	6027      	str	r7, [r4, #0]
 80071aa:	e013      	b.n	80071d4 <_malloc_r+0xa0>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dacb      	bge.n	8007148 <_malloc_r+0x14>
 80071b0:	230c      	movs	r3, #12
 80071b2:	2500      	movs	r5, #0
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	0028      	movs	r0, r5
 80071b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	1bd1      	subs	r1, r2, r7
 80071be:	d420      	bmi.n	8007202 <_malloc_r+0xce>
 80071c0:	290b      	cmp	r1, #11
 80071c2:	d917      	bls.n	80071f4 <_malloc_r+0xc0>
 80071c4:	19e2      	adds	r2, r4, r7
 80071c6:	6027      	str	r7, [r4, #0]
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d111      	bne.n	80071f0 <_malloc_r+0xbc>
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	6863      	ldr	r3, [r4, #4]
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	6053      	str	r3, [r2, #4]
 80071d4:	0030      	movs	r0, r6
 80071d6:	0025      	movs	r5, r4
 80071d8:	f000 f86c 	bl	80072b4 <__malloc_unlock>
 80071dc:	2207      	movs	r2, #7
 80071de:	350b      	adds	r5, #11
 80071e0:	1d23      	adds	r3, r4, #4
 80071e2:	4395      	bics	r5, r2
 80071e4:	1aea      	subs	r2, r5, r3
 80071e6:	429d      	cmp	r5, r3
 80071e8:	d0e5      	beq.n	80071b6 <_malloc_r+0x82>
 80071ea:	1b5b      	subs	r3, r3, r5
 80071ec:	50a3      	str	r3, [r4, r2]
 80071ee:	e7e2      	b.n	80071b6 <_malloc_r+0x82>
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	e7ec      	b.n	80071ce <_malloc_r+0x9a>
 80071f4:	6862      	ldr	r2, [r4, #4]
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	d101      	bne.n	80071fe <_malloc_r+0xca>
 80071fa:	602a      	str	r2, [r5, #0]
 80071fc:	e7ea      	b.n	80071d4 <_malloc_r+0xa0>
 80071fe:	605a      	str	r2, [r3, #4]
 8007200:	e7e8      	b.n	80071d4 <_malloc_r+0xa0>
 8007202:	0023      	movs	r3, r4
 8007204:	6864      	ldr	r4, [r4, #4]
 8007206:	e7a7      	b.n	8007158 <_malloc_r+0x24>
 8007208:	002c      	movs	r4, r5
 800720a:	686d      	ldr	r5, [r5, #4]
 800720c:	e7af      	b.n	800716e <_malloc_r+0x3a>
 800720e:	230c      	movs	r3, #12
 8007210:	0030      	movs	r0, r6
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f000 f84e 	bl	80072b4 <__malloc_unlock>
 8007218:	e7cd      	b.n	80071b6 <_malloc_r+0x82>
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	200002ec 	.word	0x200002ec

08007220 <_realloc_r>:
 8007220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007222:	0007      	movs	r7, r0
 8007224:	000e      	movs	r6, r1
 8007226:	0014      	movs	r4, r2
 8007228:	2900      	cmp	r1, #0
 800722a:	d105      	bne.n	8007238 <_realloc_r+0x18>
 800722c:	0011      	movs	r1, r2
 800722e:	f7ff ff81 	bl	8007134 <_malloc_r>
 8007232:	0005      	movs	r5, r0
 8007234:	0028      	movs	r0, r5
 8007236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007238:	2a00      	cmp	r2, #0
 800723a:	d103      	bne.n	8007244 <_realloc_r+0x24>
 800723c:	f7ff ff0e 	bl	800705c <_free_r>
 8007240:	0025      	movs	r5, r4
 8007242:	e7f7      	b.n	8007234 <_realloc_r+0x14>
 8007244:	f000 f83e 	bl	80072c4 <_malloc_usable_size_r>
 8007248:	9001      	str	r0, [sp, #4]
 800724a:	4284      	cmp	r4, r0
 800724c:	d803      	bhi.n	8007256 <_realloc_r+0x36>
 800724e:	0035      	movs	r5, r6
 8007250:	0843      	lsrs	r3, r0, #1
 8007252:	42a3      	cmp	r3, r4
 8007254:	d3ee      	bcc.n	8007234 <_realloc_r+0x14>
 8007256:	0021      	movs	r1, r4
 8007258:	0038      	movs	r0, r7
 800725a:	f7ff ff6b 	bl	8007134 <_malloc_r>
 800725e:	1e05      	subs	r5, r0, #0
 8007260:	d0e8      	beq.n	8007234 <_realloc_r+0x14>
 8007262:	9b01      	ldr	r3, [sp, #4]
 8007264:	0022      	movs	r2, r4
 8007266:	429c      	cmp	r4, r3
 8007268:	d900      	bls.n	800726c <_realloc_r+0x4c>
 800726a:	001a      	movs	r2, r3
 800726c:	0031      	movs	r1, r6
 800726e:	0028      	movs	r0, r5
 8007270:	f7ff fed7 	bl	8007022 <memcpy>
 8007274:	0031      	movs	r1, r6
 8007276:	0038      	movs	r0, r7
 8007278:	f7ff fef0 	bl	800705c <_free_r>
 800727c:	e7da      	b.n	8007234 <_realloc_r+0x14>
	...

08007280 <_sbrk_r>:
 8007280:	2300      	movs	r3, #0
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	4d06      	ldr	r5, [pc, #24]	; (80072a0 <_sbrk_r+0x20>)
 8007286:	0004      	movs	r4, r0
 8007288:	0008      	movs	r0, r1
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	f7fc fa50 	bl	8003730 <_sbrk>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d103      	bne.n	800729c <_sbrk_r+0x1c>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d000      	beq.n	800729c <_sbrk_r+0x1c>
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	bd70      	pop	{r4, r5, r6, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	200002f4 	.word	0x200002f4

080072a4 <__malloc_lock>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	4802      	ldr	r0, [pc, #8]	; (80072b0 <__malloc_lock+0xc>)
 80072a8:	f000 f814 	bl	80072d4 <__retarget_lock_acquire_recursive>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	200002f8 	.word	0x200002f8

080072b4 <__malloc_unlock>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4802      	ldr	r0, [pc, #8]	; (80072c0 <__malloc_unlock+0xc>)
 80072b8:	f000 f80d 	bl	80072d6 <__retarget_lock_release_recursive>
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	200002f8 	.word	0x200002f8

080072c4 <_malloc_usable_size_r>:
 80072c4:	1f0b      	subs	r3, r1, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	1f18      	subs	r0, r3, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da01      	bge.n	80072d2 <_malloc_usable_size_r+0xe>
 80072ce:	580b      	ldr	r3, [r1, r0]
 80072d0:	18c0      	adds	r0, r0, r3
 80072d2:	4770      	bx	lr

080072d4 <__retarget_lock_acquire_recursive>:
 80072d4:	4770      	bx	lr

080072d6 <__retarget_lock_release_recursive>:
 80072d6:	4770      	bx	lr

080072d8 <atan>:
 80072d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072da:	4b98      	ldr	r3, [pc, #608]	; (800753c <atan+0x264>)
 80072dc:	b085      	sub	sp, #20
 80072de:	004e      	lsls	r6, r1, #1
 80072e0:	0004      	movs	r4, r0
 80072e2:	000d      	movs	r5, r1
 80072e4:	9103      	str	r1, [sp, #12]
 80072e6:	0876      	lsrs	r6, r6, #1
 80072e8:	429e      	cmp	r6, r3
 80072ea:	dd18      	ble.n	800731e <atan+0x46>
 80072ec:	4b94      	ldr	r3, [pc, #592]	; (8007540 <atan+0x268>)
 80072ee:	429e      	cmp	r6, r3
 80072f0:	dc02      	bgt.n	80072f8 <atan+0x20>
 80072f2:	d10a      	bne.n	800730a <atan+0x32>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d008      	beq.n	800730a <atan+0x32>
 80072f8:	0022      	movs	r2, r4
 80072fa:	002b      	movs	r3, r5
 80072fc:	0020      	movs	r0, r4
 80072fe:	0029      	movs	r1, r5
 8007300:	f7f9 faf6 	bl	80008f0 <__aeabi_dadd>
 8007304:	0004      	movs	r4, r0
 8007306:	000d      	movs	r5, r1
 8007308:	e005      	b.n	8007316 <atan+0x3e>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	4c8d      	ldr	r4, [pc, #564]	; (8007544 <atan+0x26c>)
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd00      	ble.n	8007314 <atan+0x3c>
 8007312:	e110      	b.n	8007536 <atan+0x25e>
 8007314:	4d8c      	ldr	r5, [pc, #560]	; (8007548 <atan+0x270>)
 8007316:	0020      	movs	r0, r4
 8007318:	0029      	movs	r1, r5
 800731a:	b005      	add	sp, #20
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731e:	4b8b      	ldr	r3, [pc, #556]	; (800754c <atan+0x274>)
 8007320:	429e      	cmp	r6, r3
 8007322:	dc0f      	bgt.n	8007344 <atan+0x6c>
 8007324:	4b8a      	ldr	r3, [pc, #552]	; (8007550 <atan+0x278>)
 8007326:	429e      	cmp	r6, r3
 8007328:	dc09      	bgt.n	800733e <atan+0x66>
 800732a:	4a8a      	ldr	r2, [pc, #552]	; (8007554 <atan+0x27c>)
 800732c:	4b8a      	ldr	r3, [pc, #552]	; (8007558 <atan+0x280>)
 800732e:	f7f9 fadf 	bl	80008f0 <__aeabi_dadd>
 8007332:	2200      	movs	r2, #0
 8007334:	4b89      	ldr	r3, [pc, #548]	; (800755c <atan+0x284>)
 8007336:	f7f8 ffa5 	bl	8000284 <__aeabi_dcmpgt>
 800733a:	2800      	cmp	r0, #0
 800733c:	d1eb      	bne.n	8007316 <atan+0x3e>
 800733e:	2301      	movs	r3, #1
 8007340:	425b      	negs	r3, r3
 8007342:	e025      	b.n	8007390 <atan+0xb8>
 8007344:	f000 f948 	bl	80075d8 <fabs>
 8007348:	4b85      	ldr	r3, [pc, #532]	; (8007560 <atan+0x288>)
 800734a:	0004      	movs	r4, r0
 800734c:	000d      	movs	r5, r1
 800734e:	429e      	cmp	r6, r3
 8007350:	dd00      	ble.n	8007354 <atan+0x7c>
 8007352:	e0aa      	b.n	80074aa <atan+0x1d2>
 8007354:	4b83      	ldr	r3, [pc, #524]	; (8007564 <atan+0x28c>)
 8007356:	429e      	cmp	r6, r3
 8007358:	dd00      	ble.n	800735c <atan+0x84>
 800735a:	e090      	b.n	800747e <atan+0x1a6>
 800735c:	0002      	movs	r2, r0
 800735e:	000b      	movs	r3, r1
 8007360:	f7f9 fac6 	bl	80008f0 <__aeabi_dadd>
 8007364:	2200      	movs	r2, #0
 8007366:	4b7d      	ldr	r3, [pc, #500]	; (800755c <atan+0x284>)
 8007368:	f7fa fc6c 	bl	8001c44 <__aeabi_dsub>
 800736c:	2380      	movs	r3, #128	; 0x80
 800736e:	0006      	movs	r6, r0
 8007370:	000f      	movs	r7, r1
 8007372:	2200      	movs	r2, #0
 8007374:	0020      	movs	r0, r4
 8007376:	0029      	movs	r1, r5
 8007378:	05db      	lsls	r3, r3, #23
 800737a:	f7f9 fab9 	bl	80008f0 <__aeabi_dadd>
 800737e:	000b      	movs	r3, r1
 8007380:	0002      	movs	r2, r0
 8007382:	0039      	movs	r1, r7
 8007384:	0030      	movs	r0, r6
 8007386:	f7f9 fdef 	bl	8000f68 <__aeabi_ddiv>
 800738a:	2300      	movs	r3, #0
 800738c:	0004      	movs	r4, r0
 800738e:	000d      	movs	r5, r1
 8007390:	0022      	movs	r2, r4
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	0020      	movs	r0, r4
 8007396:	002b      	movs	r3, r5
 8007398:	0029      	movs	r1, r5
 800739a:	f7fa f9e7 	bl	800176c <__aeabi_dmul>
 800739e:	0002      	movs	r2, r0
 80073a0:	000b      	movs	r3, r1
 80073a2:	9000      	str	r0, [sp, #0]
 80073a4:	9101      	str	r1, [sp, #4]
 80073a6:	f7fa f9e1 	bl	800176c <__aeabi_dmul>
 80073aa:	0006      	movs	r6, r0
 80073ac:	000f      	movs	r7, r1
 80073ae:	4a6e      	ldr	r2, [pc, #440]	; (8007568 <atan+0x290>)
 80073b0:	4b6e      	ldr	r3, [pc, #440]	; (800756c <atan+0x294>)
 80073b2:	f7fa f9db 	bl	800176c <__aeabi_dmul>
 80073b6:	4a6e      	ldr	r2, [pc, #440]	; (8007570 <atan+0x298>)
 80073b8:	4b6e      	ldr	r3, [pc, #440]	; (8007574 <atan+0x29c>)
 80073ba:	f7f9 fa99 	bl	80008f0 <__aeabi_dadd>
 80073be:	0032      	movs	r2, r6
 80073c0:	003b      	movs	r3, r7
 80073c2:	f7fa f9d3 	bl	800176c <__aeabi_dmul>
 80073c6:	4a6c      	ldr	r2, [pc, #432]	; (8007578 <atan+0x2a0>)
 80073c8:	4b6c      	ldr	r3, [pc, #432]	; (800757c <atan+0x2a4>)
 80073ca:	f7f9 fa91 	bl	80008f0 <__aeabi_dadd>
 80073ce:	0032      	movs	r2, r6
 80073d0:	003b      	movs	r3, r7
 80073d2:	f7fa f9cb 	bl	800176c <__aeabi_dmul>
 80073d6:	4a6a      	ldr	r2, [pc, #424]	; (8007580 <atan+0x2a8>)
 80073d8:	4b6a      	ldr	r3, [pc, #424]	; (8007584 <atan+0x2ac>)
 80073da:	f7f9 fa89 	bl	80008f0 <__aeabi_dadd>
 80073de:	0032      	movs	r2, r6
 80073e0:	003b      	movs	r3, r7
 80073e2:	f7fa f9c3 	bl	800176c <__aeabi_dmul>
 80073e6:	4a68      	ldr	r2, [pc, #416]	; (8007588 <atan+0x2b0>)
 80073e8:	4b68      	ldr	r3, [pc, #416]	; (800758c <atan+0x2b4>)
 80073ea:	f7f9 fa81 	bl	80008f0 <__aeabi_dadd>
 80073ee:	0032      	movs	r2, r6
 80073f0:	003b      	movs	r3, r7
 80073f2:	f7fa f9bb 	bl	800176c <__aeabi_dmul>
 80073f6:	4a66      	ldr	r2, [pc, #408]	; (8007590 <atan+0x2b8>)
 80073f8:	4b66      	ldr	r3, [pc, #408]	; (8007594 <atan+0x2bc>)
 80073fa:	f7f9 fa79 	bl	80008f0 <__aeabi_dadd>
 80073fe:	9a00      	ldr	r2, [sp, #0]
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	f7fa f9b3 	bl	800176c <__aeabi_dmul>
 8007406:	4a64      	ldr	r2, [pc, #400]	; (8007598 <atan+0x2c0>)
 8007408:	9000      	str	r0, [sp, #0]
 800740a:	9101      	str	r1, [sp, #4]
 800740c:	4b63      	ldr	r3, [pc, #396]	; (800759c <atan+0x2c4>)
 800740e:	0030      	movs	r0, r6
 8007410:	0039      	movs	r1, r7
 8007412:	f7fa f9ab 	bl	800176c <__aeabi_dmul>
 8007416:	4a62      	ldr	r2, [pc, #392]	; (80075a0 <atan+0x2c8>)
 8007418:	4b62      	ldr	r3, [pc, #392]	; (80075a4 <atan+0x2cc>)
 800741a:	f7fa fc13 	bl	8001c44 <__aeabi_dsub>
 800741e:	0032      	movs	r2, r6
 8007420:	003b      	movs	r3, r7
 8007422:	f7fa f9a3 	bl	800176c <__aeabi_dmul>
 8007426:	4a60      	ldr	r2, [pc, #384]	; (80075a8 <atan+0x2d0>)
 8007428:	4b60      	ldr	r3, [pc, #384]	; (80075ac <atan+0x2d4>)
 800742a:	f7fa fc0b 	bl	8001c44 <__aeabi_dsub>
 800742e:	0032      	movs	r2, r6
 8007430:	003b      	movs	r3, r7
 8007432:	f7fa f99b 	bl	800176c <__aeabi_dmul>
 8007436:	4a5e      	ldr	r2, [pc, #376]	; (80075b0 <atan+0x2d8>)
 8007438:	4b5e      	ldr	r3, [pc, #376]	; (80075b4 <atan+0x2dc>)
 800743a:	f7fa fc03 	bl	8001c44 <__aeabi_dsub>
 800743e:	0032      	movs	r2, r6
 8007440:	003b      	movs	r3, r7
 8007442:	f7fa f993 	bl	800176c <__aeabi_dmul>
 8007446:	4a5c      	ldr	r2, [pc, #368]	; (80075b8 <atan+0x2e0>)
 8007448:	4b5c      	ldr	r3, [pc, #368]	; (80075bc <atan+0x2e4>)
 800744a:	f7fa fbfb 	bl	8001c44 <__aeabi_dsub>
 800744e:	0032      	movs	r2, r6
 8007450:	003b      	movs	r3, r7
 8007452:	f7fa f98b 	bl	800176c <__aeabi_dmul>
 8007456:	0002      	movs	r2, r0
 8007458:	000b      	movs	r3, r1
 800745a:	9800      	ldr	r0, [sp, #0]
 800745c:	9901      	ldr	r1, [sp, #4]
 800745e:	f7f9 fa47 	bl	80008f0 <__aeabi_dadd>
 8007462:	002b      	movs	r3, r5
 8007464:	0022      	movs	r2, r4
 8007466:	f7fa f981 	bl	800176c <__aeabi_dmul>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	3301      	adds	r3, #1
 800746e:	d143      	bne.n	80074f8 <atan+0x220>
 8007470:	0002      	movs	r2, r0
 8007472:	000b      	movs	r3, r1
 8007474:	0020      	movs	r0, r4
 8007476:	0029      	movs	r1, r5
 8007478:	f7fa fbe4 	bl	8001c44 <__aeabi_dsub>
 800747c:	e742      	b.n	8007304 <atan+0x2c>
 800747e:	2200      	movs	r2, #0
 8007480:	4b36      	ldr	r3, [pc, #216]	; (800755c <atan+0x284>)
 8007482:	f7fa fbdf 	bl	8001c44 <__aeabi_dsub>
 8007486:	2200      	movs	r2, #0
 8007488:	0006      	movs	r6, r0
 800748a:	000f      	movs	r7, r1
 800748c:	0020      	movs	r0, r4
 800748e:	0029      	movs	r1, r5
 8007490:	4b32      	ldr	r3, [pc, #200]	; (800755c <atan+0x284>)
 8007492:	f7f9 fa2d 	bl	80008f0 <__aeabi_dadd>
 8007496:	000b      	movs	r3, r1
 8007498:	0002      	movs	r2, r0
 800749a:	0039      	movs	r1, r7
 800749c:	0030      	movs	r0, r6
 800749e:	f7f9 fd63 	bl	8000f68 <__aeabi_ddiv>
 80074a2:	2301      	movs	r3, #1
 80074a4:	0004      	movs	r4, r0
 80074a6:	000d      	movs	r5, r1
 80074a8:	e772      	b.n	8007390 <atan+0xb8>
 80074aa:	4b45      	ldr	r3, [pc, #276]	; (80075c0 <atan+0x2e8>)
 80074ac:	429e      	cmp	r6, r3
 80074ae:	dc19      	bgt.n	80074e4 <atan+0x20c>
 80074b0:	2200      	movs	r2, #0
 80074b2:	4b44      	ldr	r3, [pc, #272]	; (80075c4 <atan+0x2ec>)
 80074b4:	f7fa fbc6 	bl	8001c44 <__aeabi_dsub>
 80074b8:	2200      	movs	r2, #0
 80074ba:	0006      	movs	r6, r0
 80074bc:	000f      	movs	r7, r1
 80074be:	0020      	movs	r0, r4
 80074c0:	0029      	movs	r1, r5
 80074c2:	4b40      	ldr	r3, [pc, #256]	; (80075c4 <atan+0x2ec>)
 80074c4:	f7fa f952 	bl	800176c <__aeabi_dmul>
 80074c8:	2200      	movs	r2, #0
 80074ca:	4b24      	ldr	r3, [pc, #144]	; (800755c <atan+0x284>)
 80074cc:	f7f9 fa10 	bl	80008f0 <__aeabi_dadd>
 80074d0:	000b      	movs	r3, r1
 80074d2:	0002      	movs	r2, r0
 80074d4:	0039      	movs	r1, r7
 80074d6:	0030      	movs	r0, r6
 80074d8:	f7f9 fd46 	bl	8000f68 <__aeabi_ddiv>
 80074dc:	2302      	movs	r3, #2
 80074de:	0004      	movs	r4, r0
 80074e0:	000d      	movs	r5, r1
 80074e2:	e755      	b.n	8007390 <atan+0xb8>
 80074e4:	000b      	movs	r3, r1
 80074e6:	0002      	movs	r2, r0
 80074e8:	4937      	ldr	r1, [pc, #220]	; (80075c8 <atan+0x2f0>)
 80074ea:	2000      	movs	r0, #0
 80074ec:	f7f9 fd3c 	bl	8000f68 <__aeabi_ddiv>
 80074f0:	2303      	movs	r3, #3
 80074f2:	0004      	movs	r4, r0
 80074f4:	000d      	movs	r5, r1
 80074f6:	e74b      	b.n	8007390 <atan+0xb8>
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	4f34      	ldr	r7, [pc, #208]	; (80075cc <atan+0x2f4>)
 80074fc:	00de      	lsls	r6, r3, #3
 80074fe:	4b34      	ldr	r3, [pc, #208]	; (80075d0 <atan+0x2f8>)
 8007500:	19bf      	adds	r7, r7, r6
 8007502:	199e      	adds	r6, r3, r6
 8007504:	6832      	ldr	r2, [r6, #0]
 8007506:	6873      	ldr	r3, [r6, #4]
 8007508:	f7fa fb9c 	bl	8001c44 <__aeabi_dsub>
 800750c:	0022      	movs	r2, r4
 800750e:	002b      	movs	r3, r5
 8007510:	f7fa fb98 	bl	8001c44 <__aeabi_dsub>
 8007514:	000b      	movs	r3, r1
 8007516:	0002      	movs	r2, r0
 8007518:	6838      	ldr	r0, [r7, #0]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	f7fa fb92 	bl	8001c44 <__aeabi_dsub>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	0004      	movs	r4, r0
 8007524:	000d      	movs	r5, r1
 8007526:	2b00      	cmp	r3, #0
 8007528:	db00      	blt.n	800752c <atan+0x254>
 800752a:	e6f4      	b.n	8007316 <atan+0x3e>
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	0609      	lsls	r1, r1, #24
 8007530:	186b      	adds	r3, r5, r1
 8007532:	001d      	movs	r5, r3
 8007534:	e6ef      	b.n	8007316 <atan+0x3e>
 8007536:	4d27      	ldr	r5, [pc, #156]	; (80075d4 <atan+0x2fc>)
 8007538:	e6ed      	b.n	8007316 <atan+0x3e>
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	440fffff 	.word	0x440fffff
 8007540:	7ff00000 	.word	0x7ff00000
 8007544:	54442d18 	.word	0x54442d18
 8007548:	bff921fb 	.word	0xbff921fb
 800754c:	3fdbffff 	.word	0x3fdbffff
 8007550:	3e1fffff 	.word	0x3e1fffff
 8007554:	8800759c 	.word	0x8800759c
 8007558:	7e37e43c 	.word	0x7e37e43c
 800755c:	3ff00000 	.word	0x3ff00000
 8007560:	3ff2ffff 	.word	0x3ff2ffff
 8007564:	3fe5ffff 	.word	0x3fe5ffff
 8007568:	e322da11 	.word	0xe322da11
 800756c:	3f90ad3a 	.word	0x3f90ad3a
 8007570:	24760deb 	.word	0x24760deb
 8007574:	3fa97b4b 	.word	0x3fa97b4b
 8007578:	a0d03d51 	.word	0xa0d03d51
 800757c:	3fb10d66 	.word	0x3fb10d66
 8007580:	c54c206e 	.word	0xc54c206e
 8007584:	3fb745cd 	.word	0x3fb745cd
 8007588:	920083ff 	.word	0x920083ff
 800758c:	3fc24924 	.word	0x3fc24924
 8007590:	5555550d 	.word	0x5555550d
 8007594:	3fd55555 	.word	0x3fd55555
 8007598:	2c6a6c2f 	.word	0x2c6a6c2f
 800759c:	bfa2b444 	.word	0xbfa2b444
 80075a0:	52defd9a 	.word	0x52defd9a
 80075a4:	3fadde2d 	.word	0x3fadde2d
 80075a8:	af749a6d 	.word	0xaf749a6d
 80075ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80075b0:	fe231671 	.word	0xfe231671
 80075b4:	3fbc71c6 	.word	0x3fbc71c6
 80075b8:	9998ebc4 	.word	0x9998ebc4
 80075bc:	3fc99999 	.word	0x3fc99999
 80075c0:	40037fff 	.word	0x40037fff
 80075c4:	3ff80000 	.word	0x3ff80000
 80075c8:	bff00000 	.word	0xbff00000
 80075cc:	08007aa8 	.word	0x08007aa8
 80075d0:	08007ac8 	.word	0x08007ac8
 80075d4:	3ff921fb 	.word	0x3ff921fb

080075d8 <fabs>:
 80075d8:	004b      	lsls	r3, r1, #1
 80075da:	0859      	lsrs	r1, r3, #1
 80075dc:	4770      	bx	lr

080075de <atan2>:
 80075de:	b510      	push	{r4, lr}
 80075e0:	f000 f828 	bl	8007634 <__ieee754_atan2>
 80075e4:	bd10      	pop	{r4, pc}

080075e6 <sqrt>:
 80075e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e8:	0004      	movs	r4, r0
 80075ea:	000d      	movs	r5, r1
 80075ec:	f000 f8ce 	bl	800778c <__ieee754_sqrt>
 80075f0:	0022      	movs	r2, r4
 80075f2:	0006      	movs	r6, r0
 80075f4:	000f      	movs	r7, r1
 80075f6:	002b      	movs	r3, r5
 80075f8:	0020      	movs	r0, r4
 80075fa:	0029      	movs	r1, r5
 80075fc:	f7fa feb4 	bl	8002368 <__aeabi_dcmpun>
 8007600:	2800      	cmp	r0, #0
 8007602:	d113      	bne.n	800762c <sqrt+0x46>
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	0020      	movs	r0, r4
 800760a:	0029      	movs	r1, r5
 800760c:	f7f8 fe26 	bl	800025c <__aeabi_dcmplt>
 8007610:	2800      	cmp	r0, #0
 8007612:	d00b      	beq.n	800762c <sqrt+0x46>
 8007614:	f7ff f9c4 	bl	80069a0 <__errno>
 8007618:	2321      	movs	r3, #33	; 0x21
 800761a:	2200      	movs	r2, #0
 800761c:	6003      	str	r3, [r0, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	0010      	movs	r0, r2
 8007622:	0019      	movs	r1, r3
 8007624:	f7f9 fca0 	bl	8000f68 <__aeabi_ddiv>
 8007628:	0006      	movs	r6, r0
 800762a:	000f      	movs	r7, r1
 800762c:	0030      	movs	r0, r6
 800762e:	0039      	movs	r1, r7
 8007630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007634 <__ieee754_atan2>:
 8007634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007636:	0016      	movs	r6, r2
 8007638:	001d      	movs	r5, r3
 800763a:	005a      	lsls	r2, r3, #1
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4273      	negs	r3, r6
 8007640:	4333      	orrs	r3, r6
 8007642:	4f46      	ldr	r7, [pc, #280]	; (800775c <__ieee754_atan2+0x128>)
 8007644:	0852      	lsrs	r2, r2, #1
 8007646:	0fdb      	lsrs	r3, r3, #31
 8007648:	4313      	orrs	r3, r2
 800764a:	42bb      	cmp	r3, r7
 800764c:	d809      	bhi.n	8007662 <__ieee754_atan2+0x2e>
 800764e:	4244      	negs	r4, r0
 8007650:	004b      	lsls	r3, r1, #1
 8007652:	4304      	orrs	r4, r0
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	0fe4      	lsrs	r4, r4, #31
 8007658:	9100      	str	r1, [sp, #0]
 800765a:	9001      	str	r0, [sp, #4]
 800765c:	431c      	orrs	r4, r3
 800765e:	42bc      	cmp	r4, r7
 8007660:	d905      	bls.n	800766e <__ieee754_atan2+0x3a>
 8007662:	0032      	movs	r2, r6
 8007664:	002b      	movs	r3, r5
 8007666:	f7f9 f943 	bl	80008f0 <__aeabi_dadd>
 800766a:	b003      	add	sp, #12
 800766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766e:	4c3c      	ldr	r4, [pc, #240]	; (8007760 <__ieee754_atan2+0x12c>)
 8007670:	192c      	adds	r4, r5, r4
 8007672:	4334      	orrs	r4, r6
 8007674:	d102      	bne.n	800767c <__ieee754_atan2+0x48>
 8007676:	f7ff fe2f 	bl	80072d8 <atan>
 800767a:	e7f6      	b.n	800766a <__ieee754_atan2+0x36>
 800767c:	17ac      	asrs	r4, r5, #30
 800767e:	46a4      	mov	ip, r4
 8007680:	2402      	movs	r4, #2
 8007682:	4667      	mov	r7, ip
 8007684:	403c      	ands	r4, r7
 8007686:	9f00      	ldr	r7, [sp, #0]
 8007688:	0fff      	lsrs	r7, r7, #31
 800768a:	433c      	orrs	r4, r7
 800768c:	9f01      	ldr	r7, [sp, #4]
 800768e:	431f      	orrs	r7, r3
 8007690:	d106      	bne.n	80076a0 <__ieee754_atan2+0x6c>
 8007692:	2c02      	cmp	r4, #2
 8007694:	d056      	beq.n	8007744 <__ieee754_atan2+0x110>
 8007696:	2c03      	cmp	r4, #3
 8007698:	d1e7      	bne.n	800766a <__ieee754_atan2+0x36>
 800769a:	4832      	ldr	r0, [pc, #200]	; (8007764 <__ieee754_atan2+0x130>)
 800769c:	4932      	ldr	r1, [pc, #200]	; (8007768 <__ieee754_atan2+0x134>)
 800769e:	e7e4      	b.n	800766a <__ieee754_atan2+0x36>
 80076a0:	0017      	movs	r7, r2
 80076a2:	4337      	orrs	r7, r6
 80076a4:	d105      	bne.n	80076b2 <__ieee754_atan2+0x7e>
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	482e      	ldr	r0, [pc, #184]	; (8007764 <__ieee754_atan2+0x130>)
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da53      	bge.n	8007756 <__ieee754_atan2+0x122>
 80076ae:	492f      	ldr	r1, [pc, #188]	; (800776c <__ieee754_atan2+0x138>)
 80076b0:	e7db      	b.n	800766a <__ieee754_atan2+0x36>
 80076b2:	4f2a      	ldr	r7, [pc, #168]	; (800775c <__ieee754_atan2+0x128>)
 80076b4:	42ba      	cmp	r2, r7
 80076b6:	d10f      	bne.n	80076d8 <__ieee754_atan2+0xa4>
 80076b8:	3c01      	subs	r4, #1
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d107      	bne.n	80076ce <__ieee754_atan2+0x9a>
 80076be:	2c02      	cmp	r4, #2
 80076c0:	d843      	bhi.n	800774a <__ieee754_atan2+0x116>
 80076c2:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <__ieee754_atan2+0x13c>)
 80076c4:	00e4      	lsls	r4, r4, #3
 80076c6:	191c      	adds	r4, r3, r4
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	6861      	ldr	r1, [r4, #4]
 80076cc:	e7cd      	b.n	800766a <__ieee754_atan2+0x36>
 80076ce:	2c02      	cmp	r4, #2
 80076d0:	d83e      	bhi.n	8007750 <__ieee754_atan2+0x11c>
 80076d2:	4b28      	ldr	r3, [pc, #160]	; (8007774 <__ieee754_atan2+0x140>)
 80076d4:	00e4      	lsls	r4, r4, #3
 80076d6:	e7f6      	b.n	80076c6 <__ieee754_atan2+0x92>
 80076d8:	4f20      	ldr	r7, [pc, #128]	; (800775c <__ieee754_atan2+0x128>)
 80076da:	42bb      	cmp	r3, r7
 80076dc:	d0e3      	beq.n	80076a6 <__ieee754_atan2+0x72>
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	151b      	asrs	r3, r3, #20
 80076e2:	2b3c      	cmp	r3, #60	; 0x3c
 80076e4:	dc18      	bgt.n	8007718 <__ieee754_atan2+0xe4>
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	da01      	bge.n	80076ee <__ieee754_atan2+0xba>
 80076ea:	333c      	adds	r3, #60	; 0x3c
 80076ec:	db17      	blt.n	800771e <__ieee754_atan2+0xea>
 80076ee:	0032      	movs	r2, r6
 80076f0:	002b      	movs	r3, r5
 80076f2:	f7f9 fc39 	bl	8000f68 <__aeabi_ddiv>
 80076f6:	f7ff ff6f 	bl	80075d8 <fabs>
 80076fa:	f7ff fded 	bl	80072d8 <atan>
 80076fe:	2c01      	cmp	r4, #1
 8007700:	d010      	beq.n	8007724 <__ieee754_atan2+0xf0>
 8007702:	2c02      	cmp	r4, #2
 8007704:	d013      	beq.n	800772e <__ieee754_atan2+0xfa>
 8007706:	2c00      	cmp	r4, #0
 8007708:	d0af      	beq.n	800766a <__ieee754_atan2+0x36>
 800770a:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <__ieee754_atan2+0x144>)
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <__ieee754_atan2+0x148>)
 800770e:	f7fa fa99 	bl	8001c44 <__aeabi_dsub>
 8007712:	4a14      	ldr	r2, [pc, #80]	; (8007764 <__ieee754_atan2+0x130>)
 8007714:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <__ieee754_atan2+0x14c>)
 8007716:	e012      	b.n	800773e <__ieee754_atan2+0x10a>
 8007718:	4812      	ldr	r0, [pc, #72]	; (8007764 <__ieee754_atan2+0x130>)
 800771a:	491a      	ldr	r1, [pc, #104]	; (8007784 <__ieee754_atan2+0x150>)
 800771c:	e7ef      	b.n	80076fe <__ieee754_atan2+0xca>
 800771e:	2000      	movs	r0, #0
 8007720:	2100      	movs	r1, #0
 8007722:	e7ec      	b.n	80076fe <__ieee754_atan2+0xca>
 8007724:	2480      	movs	r4, #128	; 0x80
 8007726:	0624      	lsls	r4, r4, #24
 8007728:	190b      	adds	r3, r1, r4
 800772a:	0019      	movs	r1, r3
 800772c:	e79d      	b.n	800766a <__ieee754_atan2+0x36>
 800772e:	4a12      	ldr	r2, [pc, #72]	; (8007778 <__ieee754_atan2+0x144>)
 8007730:	4b12      	ldr	r3, [pc, #72]	; (800777c <__ieee754_atan2+0x148>)
 8007732:	f7fa fa87 	bl	8001c44 <__aeabi_dsub>
 8007736:	0002      	movs	r2, r0
 8007738:	000b      	movs	r3, r1
 800773a:	480a      	ldr	r0, [pc, #40]	; (8007764 <__ieee754_atan2+0x130>)
 800773c:	4910      	ldr	r1, [pc, #64]	; (8007780 <__ieee754_atan2+0x14c>)
 800773e:	f7fa fa81 	bl	8001c44 <__aeabi_dsub>
 8007742:	e792      	b.n	800766a <__ieee754_atan2+0x36>
 8007744:	4807      	ldr	r0, [pc, #28]	; (8007764 <__ieee754_atan2+0x130>)
 8007746:	490e      	ldr	r1, [pc, #56]	; (8007780 <__ieee754_atan2+0x14c>)
 8007748:	e78f      	b.n	800766a <__ieee754_atan2+0x36>
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <__ieee754_atan2+0x130>)
 800774c:	490e      	ldr	r1, [pc, #56]	; (8007788 <__ieee754_atan2+0x154>)
 800774e:	e78c      	b.n	800766a <__ieee754_atan2+0x36>
 8007750:	2000      	movs	r0, #0
 8007752:	2100      	movs	r1, #0
 8007754:	e789      	b.n	800766a <__ieee754_atan2+0x36>
 8007756:	490b      	ldr	r1, [pc, #44]	; (8007784 <__ieee754_atan2+0x150>)
 8007758:	e787      	b.n	800766a <__ieee754_atan2+0x36>
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	7ff00000 	.word	0x7ff00000
 8007760:	c0100000 	.word	0xc0100000
 8007764:	54442d18 	.word	0x54442d18
 8007768:	c00921fb 	.word	0xc00921fb
 800776c:	bff921fb 	.word	0xbff921fb
 8007770:	08007ae8 	.word	0x08007ae8
 8007774:	08007b00 	.word	0x08007b00
 8007778:	33145c07 	.word	0x33145c07
 800777c:	3ca1a626 	.word	0x3ca1a626
 8007780:	400921fb 	.word	0x400921fb
 8007784:	3ff921fb 	.word	0x3ff921fb
 8007788:	3fe921fb 	.word	0x3fe921fb

0800778c <__ieee754_sqrt>:
 800778c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800778e:	000b      	movs	r3, r1
 8007790:	000c      	movs	r4, r1
 8007792:	4956      	ldr	r1, [pc, #344]	; (80078ec <__ieee754_sqrt+0x160>)
 8007794:	0005      	movs	r5, r0
 8007796:	0002      	movs	r2, r0
 8007798:	0008      	movs	r0, r1
 800779a:	b085      	sub	sp, #20
 800779c:	4020      	ands	r0, r4
 800779e:	4288      	cmp	r0, r1
 80077a0:	d10f      	bne.n	80077c2 <__ieee754_sqrt+0x36>
 80077a2:	0028      	movs	r0, r5
 80077a4:	0021      	movs	r1, r4
 80077a6:	f7f9 ffe1 	bl	800176c <__aeabi_dmul>
 80077aa:	0002      	movs	r2, r0
 80077ac:	000b      	movs	r3, r1
 80077ae:	0028      	movs	r0, r5
 80077b0:	0021      	movs	r1, r4
 80077b2:	f7f9 f89d 	bl	80008f0 <__aeabi_dadd>
 80077b6:	0005      	movs	r5, r0
 80077b8:	000c      	movs	r4, r1
 80077ba:	0028      	movs	r0, r5
 80077bc:	0021      	movs	r1, r4
 80077be:	b005      	add	sp, #20
 80077c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	dc10      	bgt.n	80077e8 <__ieee754_sqrt+0x5c>
 80077c6:	0061      	lsls	r1, r4, #1
 80077c8:	0849      	lsrs	r1, r1, #1
 80077ca:	4329      	orrs	r1, r5
 80077cc:	d0f5      	beq.n	80077ba <__ieee754_sqrt+0x2e>
 80077ce:	2100      	movs	r1, #0
 80077d0:	428c      	cmp	r4, r1
 80077d2:	d100      	bne.n	80077d6 <__ieee754_sqrt+0x4a>
 80077d4:	e080      	b.n	80078d8 <__ieee754_sqrt+0x14c>
 80077d6:	0028      	movs	r0, r5
 80077d8:	0021      	movs	r1, r4
 80077da:	f7fa fa33 	bl	8001c44 <__aeabi_dsub>
 80077de:	0002      	movs	r2, r0
 80077e0:	000b      	movs	r3, r1
 80077e2:	f7f9 fbc1 	bl	8000f68 <__aeabi_ddiv>
 80077e6:	e7e6      	b.n	80077b6 <__ieee754_sqrt+0x2a>
 80077e8:	1521      	asrs	r1, r4, #20
 80077ea:	d075      	beq.n	80078d8 <__ieee754_sqrt+0x14c>
 80077ec:	4840      	ldr	r0, [pc, #256]	; (80078f0 <__ieee754_sqrt+0x164>)
 80077ee:	031b      	lsls	r3, r3, #12
 80077f0:	180c      	adds	r4, r1, r0
 80077f2:	2080      	movs	r0, #128	; 0x80
 80077f4:	0b1b      	lsrs	r3, r3, #12
 80077f6:	0340      	lsls	r0, r0, #13
 80077f8:	4303      	orrs	r3, r0
 80077fa:	07c9      	lsls	r1, r1, #31
 80077fc:	d403      	bmi.n	8007806 <__ieee754_sqrt+0x7a>
 80077fe:	0fd1      	lsrs	r1, r2, #31
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	185b      	adds	r3, r3, r1
 8007804:	0052      	lsls	r2, r2, #1
 8007806:	1061      	asrs	r1, r4, #1
 8007808:	2400      	movs	r4, #0
 800780a:	9103      	str	r1, [sp, #12]
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	0fd1      	lsrs	r1, r2, #31
 8007810:	185b      	adds	r3, r3, r1
 8007812:	2180      	movs	r1, #128	; 0x80
 8007814:	2516      	movs	r5, #22
 8007816:	0020      	movs	r0, r4
 8007818:	0052      	lsls	r2, r2, #1
 800781a:	0389      	lsls	r1, r1, #14
 800781c:	1846      	adds	r6, r0, r1
 800781e:	429e      	cmp	r6, r3
 8007820:	dc02      	bgt.n	8007828 <__ieee754_sqrt+0x9c>
 8007822:	1870      	adds	r0, r6, r1
 8007824:	1b9b      	subs	r3, r3, r6
 8007826:	1864      	adds	r4, r4, r1
 8007828:	0fd6      	lsrs	r6, r2, #31
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	3d01      	subs	r5, #1
 800782e:	18f3      	adds	r3, r6, r3
 8007830:	0052      	lsls	r2, r2, #1
 8007832:	0849      	lsrs	r1, r1, #1
 8007834:	2d00      	cmp	r5, #0
 8007836:	d1f1      	bne.n	800781c <__ieee754_sqrt+0x90>
 8007838:	2620      	movs	r6, #32
 800783a:	2780      	movs	r7, #128	; 0x80
 800783c:	0029      	movs	r1, r5
 800783e:	9601      	str	r6, [sp, #4]
 8007840:	063f      	lsls	r7, r7, #24
 8007842:	197e      	adds	r6, r7, r5
 8007844:	46b4      	mov	ip, r6
 8007846:	4283      	cmp	r3, r0
 8007848:	dc02      	bgt.n	8007850 <__ieee754_sqrt+0xc4>
 800784a:	d114      	bne.n	8007876 <__ieee754_sqrt+0xea>
 800784c:	4296      	cmp	r6, r2
 800784e:	d812      	bhi.n	8007876 <__ieee754_sqrt+0xea>
 8007850:	4665      	mov	r5, ip
 8007852:	4666      	mov	r6, ip
 8007854:	19ed      	adds	r5, r5, r7
 8007856:	9002      	str	r0, [sp, #8]
 8007858:	2e00      	cmp	r6, #0
 800785a:	da03      	bge.n	8007864 <__ieee754_sqrt+0xd8>
 800785c:	43ee      	mvns	r6, r5
 800785e:	0ff6      	lsrs	r6, r6, #31
 8007860:	1986      	adds	r6, r0, r6
 8007862:	9602      	str	r6, [sp, #8]
 8007864:	1a1b      	subs	r3, r3, r0
 8007866:	4562      	cmp	r2, ip
 8007868:	4180      	sbcs	r0, r0
 800786a:	4240      	negs	r0, r0
 800786c:	1a1b      	subs	r3, r3, r0
 800786e:	4660      	mov	r0, ip
 8007870:	1a12      	subs	r2, r2, r0
 8007872:	9802      	ldr	r0, [sp, #8]
 8007874:	19c9      	adds	r1, r1, r7
 8007876:	0fd6      	lsrs	r6, r2, #31
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	199b      	adds	r3, r3, r6
 800787c:	9e01      	ldr	r6, [sp, #4]
 800787e:	0052      	lsls	r2, r2, #1
 8007880:	3e01      	subs	r6, #1
 8007882:	087f      	lsrs	r7, r7, #1
 8007884:	9601      	str	r6, [sp, #4]
 8007886:	2e00      	cmp	r6, #0
 8007888:	d1db      	bne.n	8007842 <__ieee754_sqrt+0xb6>
 800788a:	4313      	orrs	r3, r2
 800788c:	d003      	beq.n	8007896 <__ieee754_sqrt+0x10a>
 800788e:	1c4b      	adds	r3, r1, #1
 8007890:	d127      	bne.n	80078e2 <__ieee754_sqrt+0x156>
 8007892:	0031      	movs	r1, r6
 8007894:	3401      	adds	r4, #1
 8007896:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <__ieee754_sqrt+0x168>)
 8007898:	1060      	asrs	r0, r4, #1
 800789a:	18c0      	adds	r0, r0, r3
 800789c:	0849      	lsrs	r1, r1, #1
 800789e:	07e3      	lsls	r3, r4, #31
 80078a0:	d502      	bpl.n	80078a8 <__ieee754_sqrt+0x11c>
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	061b      	lsls	r3, r3, #24
 80078a6:	4319      	orrs	r1, r3
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	000d      	movs	r5, r1
 80078ac:	051c      	lsls	r4, r3, #20
 80078ae:	1823      	adds	r3, r4, r0
 80078b0:	001c      	movs	r4, r3
 80078b2:	e782      	b.n	80077ba <__ieee754_sqrt+0x2e>
 80078b4:	0ad3      	lsrs	r3, r2, #11
 80078b6:	3815      	subs	r0, #21
 80078b8:	0552      	lsls	r2, r2, #21
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0fa      	beq.n	80078b4 <__ieee754_sqrt+0x128>
 80078be:	2480      	movs	r4, #128	; 0x80
 80078c0:	0364      	lsls	r4, r4, #13
 80078c2:	4223      	tst	r3, r4
 80078c4:	d00a      	beq.n	80078dc <__ieee754_sqrt+0x150>
 80078c6:	2420      	movs	r4, #32
 80078c8:	0016      	movs	r6, r2
 80078ca:	1a64      	subs	r4, r4, r1
 80078cc:	40e6      	lsrs	r6, r4
 80078ce:	1e4d      	subs	r5, r1, #1
 80078d0:	408a      	lsls	r2, r1
 80078d2:	4333      	orrs	r3, r6
 80078d4:	1b41      	subs	r1, r0, r5
 80078d6:	e789      	b.n	80077ec <__ieee754_sqrt+0x60>
 80078d8:	2000      	movs	r0, #0
 80078da:	e7ee      	b.n	80078ba <__ieee754_sqrt+0x12e>
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	3101      	adds	r1, #1
 80078e0:	e7ef      	b.n	80078c2 <__ieee754_sqrt+0x136>
 80078e2:	2301      	movs	r3, #1
 80078e4:	3101      	adds	r1, #1
 80078e6:	4399      	bics	r1, r3
 80078e8:	e7d5      	b.n	8007896 <__ieee754_sqrt+0x10a>
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	7ff00000 	.word	0x7ff00000
 80078f0:	fffffc01 	.word	0xfffffc01
 80078f4:	3fe00000 	.word	0x3fe00000

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
