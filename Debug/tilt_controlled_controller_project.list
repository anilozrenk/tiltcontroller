
tilt_controlled_controller_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005ea8  08005ea8  00015ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08006050  08006050  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006050  08006050  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08006058  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000100  08006158  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08006158  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7fc  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194d  00000000  00000000  0002b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa03  00000000  00000000  0002e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c84a  00000000  00000000  00048e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d3e  00000000  00000000  000556ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f63eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002478  00000000  00000000  000f643c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e8c 	.word	0x08005e8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	08005e8c 	.word	0x08005e8c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cdrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0010      	movs	r0, r2
 8000220:	4662      	mov	r2, ip
 8000222:	468c      	mov	ip, r1
 8000224:	0019      	movs	r1, r3
 8000226:	4663      	mov	r3, ip
 8000228:	e000      	b.n	800022c <__aeabi_cdcmpeq>
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdcmpeq>:
 800022c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022e:	f001 fa11 	bl	8001654 <__ledf2>
 8000232:	2800      	cmp	r0, #0
 8000234:	d401      	bmi.n	800023a <__aeabi_cdcmpeq+0xe>
 8000236:	2100      	movs	r1, #0
 8000238:	42c8      	cmn	r0, r1
 800023a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800023c <__aeabi_dcmpeq>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f001 f961 	bl	8001504 <__eqdf2>
 8000242:	4240      	negs	r0, r0
 8000244:	3001      	adds	r0, #1
 8000246:	bd10      	pop	{r4, pc}

08000248 <__aeabi_dcmplt>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f001 fa03 	bl	8001654 <__ledf2>
 800024e:	2800      	cmp	r0, #0
 8000250:	db01      	blt.n	8000256 <__aeabi_dcmplt+0xe>
 8000252:	2000      	movs	r0, #0
 8000254:	bd10      	pop	{r4, pc}
 8000256:	2001      	movs	r0, #1
 8000258:	bd10      	pop	{r4, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_dcmple>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 f9f9 	bl	8001654 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	dd01      	ble.n	800026a <__aeabi_dcmple+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmpgt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 f989 	bl	8001588 <__gedf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dc01      	bgt.n	800027e <__aeabi_dcmpgt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpge>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f97f 	bl	8001588 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	da01      	bge.n	8000292 <__aeabi_dcmpge+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_fadd>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46c6      	mov	lr, r8
 800029c:	0243      	lsls	r3, r0, #9
 800029e:	0a5b      	lsrs	r3, r3, #9
 80002a0:	024e      	lsls	r6, r1, #9
 80002a2:	0045      	lsls	r5, r0, #1
 80002a4:	004f      	lsls	r7, r1, #1
 80002a6:	00da      	lsls	r2, r3, #3
 80002a8:	0fc4      	lsrs	r4, r0, #31
 80002aa:	469c      	mov	ip, r3
 80002ac:	0a70      	lsrs	r0, r6, #9
 80002ae:	4690      	mov	r8, r2
 80002b0:	b500      	push	{lr}
 80002b2:	0e2d      	lsrs	r5, r5, #24
 80002b4:	0e3f      	lsrs	r7, r7, #24
 80002b6:	0fc9      	lsrs	r1, r1, #31
 80002b8:	09b6      	lsrs	r6, r6, #6
 80002ba:	428c      	cmp	r4, r1
 80002bc:	d04b      	beq.n	8000356 <__aeabi_fadd+0xbe>
 80002be:	1bea      	subs	r2, r5, r7
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	dd36      	ble.n	8000332 <__aeabi_fadd+0x9a>
 80002c4:	2f00      	cmp	r7, #0
 80002c6:	d061      	beq.n	800038c <__aeabi_fadd+0xf4>
 80002c8:	2dff      	cmp	r5, #255	; 0xff
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0x36>
 80002cc:	e0ad      	b.n	800042a <__aeabi_fadd+0x192>
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	04db      	lsls	r3, r3, #19
 80002d2:	431e      	orrs	r6, r3
 80002d4:	2a1b      	cmp	r2, #27
 80002d6:	dc00      	bgt.n	80002da <__aeabi_fadd+0x42>
 80002d8:	e0d3      	b.n	8000482 <__aeabi_fadd+0x1ea>
 80002da:	2001      	movs	r0, #1
 80002dc:	4643      	mov	r3, r8
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	0143      	lsls	r3, r0, #5
 80002e2:	d400      	bmi.n	80002e6 <__aeabi_fadd+0x4e>
 80002e4:	e08c      	b.n	8000400 <__aeabi_fadd+0x168>
 80002e6:	0180      	lsls	r0, r0, #6
 80002e8:	0987      	lsrs	r7, r0, #6
 80002ea:	0038      	movs	r0, r7
 80002ec:	f002 f8be 	bl	800246c <__clzsi2>
 80002f0:	3805      	subs	r0, #5
 80002f2:	4087      	lsls	r7, r0
 80002f4:	4285      	cmp	r5, r0
 80002f6:	dc00      	bgt.n	80002fa <__aeabi_fadd+0x62>
 80002f8:	e0b6      	b.n	8000468 <__aeabi_fadd+0x1d0>
 80002fa:	1a2d      	subs	r5, r5, r0
 80002fc:	48b3      	ldr	r0, [pc, #716]	; (80005cc <__aeabi_fadd+0x334>)
 80002fe:	4038      	ands	r0, r7
 8000300:	0743      	lsls	r3, r0, #29
 8000302:	d004      	beq.n	800030e <__aeabi_fadd+0x76>
 8000304:	230f      	movs	r3, #15
 8000306:	4003      	ands	r3, r0
 8000308:	2b04      	cmp	r3, #4
 800030a:	d000      	beq.n	800030e <__aeabi_fadd+0x76>
 800030c:	3004      	adds	r0, #4
 800030e:	0143      	lsls	r3, r0, #5
 8000310:	d400      	bmi.n	8000314 <__aeabi_fadd+0x7c>
 8000312:	e078      	b.n	8000406 <__aeabi_fadd+0x16e>
 8000314:	1c6a      	adds	r2, r5, #1
 8000316:	2dfe      	cmp	r5, #254	; 0xfe
 8000318:	d065      	beq.n	80003e6 <__aeabi_fadd+0x14e>
 800031a:	0180      	lsls	r0, r0, #6
 800031c:	0a43      	lsrs	r3, r0, #9
 800031e:	469c      	mov	ip, r3
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	4663      	mov	r3, ip
 8000324:	05d0      	lsls	r0, r2, #23
 8000326:	4318      	orrs	r0, r3
 8000328:	07e4      	lsls	r4, r4, #31
 800032a:	4320      	orrs	r0, r4
 800032c:	bc80      	pop	{r7}
 800032e:	46b8      	mov	r8, r7
 8000330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000332:	2a00      	cmp	r2, #0
 8000334:	d035      	beq.n	80003a2 <__aeabi_fadd+0x10a>
 8000336:	1b7a      	subs	r2, r7, r5
 8000338:	2d00      	cmp	r5, #0
 800033a:	d000      	beq.n	800033e <__aeabi_fadd+0xa6>
 800033c:	e0af      	b.n	800049e <__aeabi_fadd+0x206>
 800033e:	4643      	mov	r3, r8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0xae>
 8000344:	e0a7      	b.n	8000496 <__aeabi_fadd+0x1fe>
 8000346:	1e53      	subs	r3, r2, #1
 8000348:	2a01      	cmp	r2, #1
 800034a:	d100      	bne.n	800034e <__aeabi_fadd+0xb6>
 800034c:	e12f      	b.n	80005ae <__aeabi_fadd+0x316>
 800034e:	2aff      	cmp	r2, #255	; 0xff
 8000350:	d069      	beq.n	8000426 <__aeabi_fadd+0x18e>
 8000352:	001a      	movs	r2, r3
 8000354:	e0aa      	b.n	80004ac <__aeabi_fadd+0x214>
 8000356:	1be9      	subs	r1, r5, r7
 8000358:	2900      	cmp	r1, #0
 800035a:	dd70      	ble.n	800043e <__aeabi_fadd+0x1a6>
 800035c:	2f00      	cmp	r7, #0
 800035e:	d037      	beq.n	80003d0 <__aeabi_fadd+0x138>
 8000360:	2dff      	cmp	r5, #255	; 0xff
 8000362:	d062      	beq.n	800042a <__aeabi_fadd+0x192>
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	04db      	lsls	r3, r3, #19
 8000368:	431e      	orrs	r6, r3
 800036a:	291b      	cmp	r1, #27
 800036c:	dc00      	bgt.n	8000370 <__aeabi_fadd+0xd8>
 800036e:	e0b0      	b.n	80004d2 <__aeabi_fadd+0x23a>
 8000370:	2001      	movs	r0, #1
 8000372:	4440      	add	r0, r8
 8000374:	0143      	lsls	r3, r0, #5
 8000376:	d543      	bpl.n	8000400 <__aeabi_fadd+0x168>
 8000378:	3501      	adds	r5, #1
 800037a:	2dff      	cmp	r5, #255	; 0xff
 800037c:	d033      	beq.n	80003e6 <__aeabi_fadd+0x14e>
 800037e:	2301      	movs	r3, #1
 8000380:	4a93      	ldr	r2, [pc, #588]	; (80005d0 <__aeabi_fadd+0x338>)
 8000382:	4003      	ands	r3, r0
 8000384:	0840      	lsrs	r0, r0, #1
 8000386:	4010      	ands	r0, r2
 8000388:	4318      	orrs	r0, r3
 800038a:	e7b9      	b.n	8000300 <__aeabi_fadd+0x68>
 800038c:	2e00      	cmp	r6, #0
 800038e:	d100      	bne.n	8000392 <__aeabi_fadd+0xfa>
 8000390:	e083      	b.n	800049a <__aeabi_fadd+0x202>
 8000392:	1e51      	subs	r1, r2, #1
 8000394:	2a01      	cmp	r2, #1
 8000396:	d100      	bne.n	800039a <__aeabi_fadd+0x102>
 8000398:	e0d8      	b.n	800054c <__aeabi_fadd+0x2b4>
 800039a:	2aff      	cmp	r2, #255	; 0xff
 800039c:	d045      	beq.n	800042a <__aeabi_fadd+0x192>
 800039e:	000a      	movs	r2, r1
 80003a0:	e798      	b.n	80002d4 <__aeabi_fadd+0x3c>
 80003a2:	27fe      	movs	r7, #254	; 0xfe
 80003a4:	1c6a      	adds	r2, r5, #1
 80003a6:	4217      	tst	r7, r2
 80003a8:	d000      	beq.n	80003ac <__aeabi_fadd+0x114>
 80003aa:	e086      	b.n	80004ba <__aeabi_fadd+0x222>
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x11a>
 80003b0:	e0b7      	b.n	8000522 <__aeabi_fadd+0x28a>
 80003b2:	4643      	mov	r3, r8
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d100      	bne.n	80003ba <__aeabi_fadd+0x122>
 80003b8:	e0f3      	b.n	80005a2 <__aeabi_fadd+0x30a>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d0b0      	beq.n	8000322 <__aeabi_fadd+0x8a>
 80003c0:	1b98      	subs	r0, r3, r6
 80003c2:	0143      	lsls	r3, r0, #5
 80003c4:	d400      	bmi.n	80003c8 <__aeabi_fadd+0x130>
 80003c6:	e0fa      	b.n	80005be <__aeabi_fadd+0x326>
 80003c8:	4643      	mov	r3, r8
 80003ca:	000c      	movs	r4, r1
 80003cc:	1af0      	subs	r0, r6, r3
 80003ce:	e797      	b.n	8000300 <__aeabi_fadd+0x68>
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d100      	bne.n	80003d6 <__aeabi_fadd+0x13e>
 80003d4:	e0c8      	b.n	8000568 <__aeabi_fadd+0x2d0>
 80003d6:	1e4a      	subs	r2, r1, #1
 80003d8:	2901      	cmp	r1, #1
 80003da:	d100      	bne.n	80003de <__aeabi_fadd+0x146>
 80003dc:	e0ae      	b.n	800053c <__aeabi_fadd+0x2a4>
 80003de:	29ff      	cmp	r1, #255	; 0xff
 80003e0:	d023      	beq.n	800042a <__aeabi_fadd+0x192>
 80003e2:	0011      	movs	r1, r2
 80003e4:	e7c1      	b.n	800036a <__aeabi_fadd+0xd2>
 80003e6:	2300      	movs	r3, #0
 80003e8:	22ff      	movs	r2, #255	; 0xff
 80003ea:	469c      	mov	ip, r3
 80003ec:	e799      	b.n	8000322 <__aeabi_fadd+0x8a>
 80003ee:	21fe      	movs	r1, #254	; 0xfe
 80003f0:	1c6a      	adds	r2, r5, #1
 80003f2:	4211      	tst	r1, r2
 80003f4:	d077      	beq.n	80004e6 <__aeabi_fadd+0x24e>
 80003f6:	2aff      	cmp	r2, #255	; 0xff
 80003f8:	d0f5      	beq.n	80003e6 <__aeabi_fadd+0x14e>
 80003fa:	0015      	movs	r5, r2
 80003fc:	4446      	add	r6, r8
 80003fe:	0870      	lsrs	r0, r6, #1
 8000400:	0743      	lsls	r3, r0, #29
 8000402:	d000      	beq.n	8000406 <__aeabi_fadd+0x16e>
 8000404:	e77e      	b.n	8000304 <__aeabi_fadd+0x6c>
 8000406:	08c3      	lsrs	r3, r0, #3
 8000408:	2dff      	cmp	r5, #255	; 0xff
 800040a:	d00e      	beq.n	800042a <__aeabi_fadd+0x192>
 800040c:	025b      	lsls	r3, r3, #9
 800040e:	0a5b      	lsrs	r3, r3, #9
 8000410:	469c      	mov	ip, r3
 8000412:	b2ea      	uxtb	r2, r5
 8000414:	e785      	b.n	8000322 <__aeabi_fadd+0x8a>
 8000416:	2e00      	cmp	r6, #0
 8000418:	d007      	beq.n	800042a <__aeabi_fadd+0x192>
 800041a:	2280      	movs	r2, #128	; 0x80
 800041c:	03d2      	lsls	r2, r2, #15
 800041e:	4213      	tst	r3, r2
 8000420:	d003      	beq.n	800042a <__aeabi_fadd+0x192>
 8000422:	4210      	tst	r0, r2
 8000424:	d101      	bne.n	800042a <__aeabi_fadd+0x192>
 8000426:	000c      	movs	r4, r1
 8000428:	0003      	movs	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0db      	beq.n	80003e6 <__aeabi_fadd+0x14e>
 800042e:	2080      	movs	r0, #128	; 0x80
 8000430:	03c0      	lsls	r0, r0, #15
 8000432:	4318      	orrs	r0, r3
 8000434:	0240      	lsls	r0, r0, #9
 8000436:	0a43      	lsrs	r3, r0, #9
 8000438:	469c      	mov	ip, r3
 800043a:	22ff      	movs	r2, #255	; 0xff
 800043c:	e771      	b.n	8000322 <__aeabi_fadd+0x8a>
 800043e:	2900      	cmp	r1, #0
 8000440:	d0d5      	beq.n	80003ee <__aeabi_fadd+0x156>
 8000442:	1b7a      	subs	r2, r7, r5
 8000444:	2d00      	cmp	r5, #0
 8000446:	d160      	bne.n	800050a <__aeabi_fadd+0x272>
 8000448:	4643      	mov	r3, r8
 800044a:	2b00      	cmp	r3, #0
 800044c:	d024      	beq.n	8000498 <__aeabi_fadd+0x200>
 800044e:	1e53      	subs	r3, r2, #1
 8000450:	2a01      	cmp	r2, #1
 8000452:	d073      	beq.n	800053c <__aeabi_fadd+0x2a4>
 8000454:	2aff      	cmp	r2, #255	; 0xff
 8000456:	d0e7      	beq.n	8000428 <__aeabi_fadd+0x190>
 8000458:	001a      	movs	r2, r3
 800045a:	2a1b      	cmp	r2, #27
 800045c:	dc00      	bgt.n	8000460 <__aeabi_fadd+0x1c8>
 800045e:	e085      	b.n	800056c <__aeabi_fadd+0x2d4>
 8000460:	2001      	movs	r0, #1
 8000462:	003d      	movs	r5, r7
 8000464:	1980      	adds	r0, r0, r6
 8000466:	e785      	b.n	8000374 <__aeabi_fadd+0xdc>
 8000468:	2320      	movs	r3, #32
 800046a:	003a      	movs	r2, r7
 800046c:	1b45      	subs	r5, r0, r5
 800046e:	0038      	movs	r0, r7
 8000470:	3501      	adds	r5, #1
 8000472:	40ea      	lsrs	r2, r5
 8000474:	1b5d      	subs	r5, r3, r5
 8000476:	40a8      	lsls	r0, r5
 8000478:	1e43      	subs	r3, r0, #1
 800047a:	4198      	sbcs	r0, r3
 800047c:	2500      	movs	r5, #0
 800047e:	4310      	orrs	r0, r2
 8000480:	e73e      	b.n	8000300 <__aeabi_fadd+0x68>
 8000482:	2320      	movs	r3, #32
 8000484:	0030      	movs	r0, r6
 8000486:	1a9b      	subs	r3, r3, r2
 8000488:	0031      	movs	r1, r6
 800048a:	4098      	lsls	r0, r3
 800048c:	40d1      	lsrs	r1, r2
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4308      	orrs	r0, r1
 8000494:	e722      	b.n	80002dc <__aeabi_fadd+0x44>
 8000496:	000c      	movs	r4, r1
 8000498:	0003      	movs	r3, r0
 800049a:	0015      	movs	r5, r2
 800049c:	e7b4      	b.n	8000408 <__aeabi_fadd+0x170>
 800049e:	2fff      	cmp	r7, #255	; 0xff
 80004a0:	d0c1      	beq.n	8000426 <__aeabi_fadd+0x18e>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	4640      	mov	r0, r8
 80004a6:	04db      	lsls	r3, r3, #19
 80004a8:	4318      	orrs	r0, r3
 80004aa:	4680      	mov	r8, r0
 80004ac:	2a1b      	cmp	r2, #27
 80004ae:	dd51      	ble.n	8000554 <__aeabi_fadd+0x2bc>
 80004b0:	2001      	movs	r0, #1
 80004b2:	000c      	movs	r4, r1
 80004b4:	003d      	movs	r5, r7
 80004b6:	1a30      	subs	r0, r6, r0
 80004b8:	e712      	b.n	80002e0 <__aeabi_fadd+0x48>
 80004ba:	4643      	mov	r3, r8
 80004bc:	1b9f      	subs	r7, r3, r6
 80004be:	017b      	lsls	r3, r7, #5
 80004c0:	d42b      	bmi.n	800051a <__aeabi_fadd+0x282>
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	d000      	beq.n	80004c8 <__aeabi_fadd+0x230>
 80004c6:	e710      	b.n	80002ea <__aeabi_fadd+0x52>
 80004c8:	2300      	movs	r3, #0
 80004ca:	2400      	movs	r4, #0
 80004cc:	2200      	movs	r2, #0
 80004ce:	469c      	mov	ip, r3
 80004d0:	e727      	b.n	8000322 <__aeabi_fadd+0x8a>
 80004d2:	2320      	movs	r3, #32
 80004d4:	0032      	movs	r2, r6
 80004d6:	0030      	movs	r0, r6
 80004d8:	40ca      	lsrs	r2, r1
 80004da:	1a59      	subs	r1, r3, r1
 80004dc:	4088      	lsls	r0, r1
 80004de:	1e43      	subs	r3, r0, #1
 80004e0:	4198      	sbcs	r0, r3
 80004e2:	4310      	orrs	r0, r2
 80004e4:	e745      	b.n	8000372 <__aeabi_fadd+0xda>
 80004e6:	2d00      	cmp	r5, #0
 80004e8:	d14a      	bne.n	8000580 <__aeabi_fadd+0x2e8>
 80004ea:	4643      	mov	r3, r8
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d063      	beq.n	80005b8 <__aeabi_fadd+0x320>
 80004f0:	2200      	movs	r2, #0
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fadd+0x260>
 80004f6:	e714      	b.n	8000322 <__aeabi_fadd+0x8a>
 80004f8:	0030      	movs	r0, r6
 80004fa:	4440      	add	r0, r8
 80004fc:	0143      	lsls	r3, r0, #5
 80004fe:	d400      	bmi.n	8000502 <__aeabi_fadd+0x26a>
 8000500:	e77e      	b.n	8000400 <__aeabi_fadd+0x168>
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <__aeabi_fadd+0x334>)
 8000504:	3501      	adds	r5, #1
 8000506:	4018      	ands	r0, r3
 8000508:	e77a      	b.n	8000400 <__aeabi_fadd+0x168>
 800050a:	2fff      	cmp	r7, #255	; 0xff
 800050c:	d08c      	beq.n	8000428 <__aeabi_fadd+0x190>
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	4641      	mov	r1, r8
 8000512:	04db      	lsls	r3, r3, #19
 8000514:	4319      	orrs	r1, r3
 8000516:	4688      	mov	r8, r1
 8000518:	e79f      	b.n	800045a <__aeabi_fadd+0x1c2>
 800051a:	4643      	mov	r3, r8
 800051c:	000c      	movs	r4, r1
 800051e:	1af7      	subs	r7, r6, r3
 8000520:	e6e3      	b.n	80002ea <__aeabi_fadd+0x52>
 8000522:	4642      	mov	r2, r8
 8000524:	2a00      	cmp	r2, #0
 8000526:	d000      	beq.n	800052a <__aeabi_fadd+0x292>
 8000528:	e775      	b.n	8000416 <__aeabi_fadd+0x17e>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d000      	beq.n	8000530 <__aeabi_fadd+0x298>
 800052e:	e77a      	b.n	8000426 <__aeabi_fadd+0x18e>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	03db      	lsls	r3, r3, #15
 8000534:	2400      	movs	r4, #0
 8000536:	469c      	mov	ip, r3
 8000538:	22ff      	movs	r2, #255	; 0xff
 800053a:	e6f2      	b.n	8000322 <__aeabi_fadd+0x8a>
 800053c:	0030      	movs	r0, r6
 800053e:	4440      	add	r0, r8
 8000540:	2501      	movs	r5, #1
 8000542:	0143      	lsls	r3, r0, #5
 8000544:	d400      	bmi.n	8000548 <__aeabi_fadd+0x2b0>
 8000546:	e75b      	b.n	8000400 <__aeabi_fadd+0x168>
 8000548:	2502      	movs	r5, #2
 800054a:	e718      	b.n	800037e <__aeabi_fadd+0xe6>
 800054c:	4643      	mov	r3, r8
 800054e:	2501      	movs	r5, #1
 8000550:	1b98      	subs	r0, r3, r6
 8000552:	e6c5      	b.n	80002e0 <__aeabi_fadd+0x48>
 8000554:	2320      	movs	r3, #32
 8000556:	4644      	mov	r4, r8
 8000558:	4640      	mov	r0, r8
 800055a:	40d4      	lsrs	r4, r2
 800055c:	1a9a      	subs	r2, r3, r2
 800055e:	4090      	lsls	r0, r2
 8000560:	1e43      	subs	r3, r0, #1
 8000562:	4198      	sbcs	r0, r3
 8000564:	4320      	orrs	r0, r4
 8000566:	e7a4      	b.n	80004b2 <__aeabi_fadd+0x21a>
 8000568:	000d      	movs	r5, r1
 800056a:	e74d      	b.n	8000408 <__aeabi_fadd+0x170>
 800056c:	2320      	movs	r3, #32
 800056e:	4641      	mov	r1, r8
 8000570:	4640      	mov	r0, r8
 8000572:	40d1      	lsrs	r1, r2
 8000574:	1a9a      	subs	r2, r3, r2
 8000576:	4090      	lsls	r0, r2
 8000578:	1e43      	subs	r3, r0, #1
 800057a:	4198      	sbcs	r0, r3
 800057c:	4308      	orrs	r0, r1
 800057e:	e770      	b.n	8000462 <__aeabi_fadd+0x1ca>
 8000580:	4642      	mov	r2, r8
 8000582:	2a00      	cmp	r2, #0
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x2f0>
 8000586:	e74f      	b.n	8000428 <__aeabi_fadd+0x190>
 8000588:	2e00      	cmp	r6, #0
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0x2f6>
 800058c:	e74d      	b.n	800042a <__aeabi_fadd+0x192>
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	03d2      	lsls	r2, r2, #15
 8000592:	4213      	tst	r3, r2
 8000594:	d100      	bne.n	8000598 <__aeabi_fadd+0x300>
 8000596:	e748      	b.n	800042a <__aeabi_fadd+0x192>
 8000598:	4210      	tst	r0, r2
 800059a:	d000      	beq.n	800059e <__aeabi_fadd+0x306>
 800059c:	e745      	b.n	800042a <__aeabi_fadd+0x192>
 800059e:	0003      	movs	r3, r0
 80005a0:	e743      	b.n	800042a <__aeabi_fadd+0x192>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d090      	beq.n	80004c8 <__aeabi_fadd+0x230>
 80005a6:	000c      	movs	r4, r1
 80005a8:	4684      	mov	ip, r0
 80005aa:	2200      	movs	r2, #0
 80005ac:	e6b9      	b.n	8000322 <__aeabi_fadd+0x8a>
 80005ae:	4643      	mov	r3, r8
 80005b0:	000c      	movs	r4, r1
 80005b2:	1af0      	subs	r0, r6, r3
 80005b4:	3501      	adds	r5, #1
 80005b6:	e693      	b.n	80002e0 <__aeabi_fadd+0x48>
 80005b8:	4684      	mov	ip, r0
 80005ba:	2200      	movs	r2, #0
 80005bc:	e6b1      	b.n	8000322 <__aeabi_fadd+0x8a>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fadd+0x32c>
 80005c2:	e71d      	b.n	8000400 <__aeabi_fadd+0x168>
 80005c4:	2300      	movs	r3, #0
 80005c6:	2400      	movs	r4, #0
 80005c8:	469c      	mov	ip, r3
 80005ca:	e6aa      	b.n	8000322 <__aeabi_fadd+0x8a>
 80005cc:	fbffffff 	.word	0xfbffffff
 80005d0:	7dffffff 	.word	0x7dffffff

080005d4 <__aeabi_fdiv>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	464f      	mov	r7, r9
 80005d8:	4646      	mov	r6, r8
 80005da:	46d6      	mov	lr, sl
 80005dc:	0245      	lsls	r5, r0, #9
 80005de:	b5c0      	push	{r6, r7, lr}
 80005e0:	0047      	lsls	r7, r0, #1
 80005e2:	1c0c      	adds	r4, r1, #0
 80005e4:	0a6d      	lsrs	r5, r5, #9
 80005e6:	0e3f      	lsrs	r7, r7, #24
 80005e8:	0fc6      	lsrs	r6, r0, #31
 80005ea:	2f00      	cmp	r7, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fdiv+0x1c>
 80005ee:	e070      	b.n	80006d2 <__aeabi_fdiv+0xfe>
 80005f0:	2fff      	cmp	r7, #255	; 0xff
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fdiv+0x22>
 80005f4:	e075      	b.n	80006e2 <__aeabi_fdiv+0x10e>
 80005f6:	00eb      	lsls	r3, r5, #3
 80005f8:	2580      	movs	r5, #128	; 0x80
 80005fa:	04ed      	lsls	r5, r5, #19
 80005fc:	431d      	orrs	r5, r3
 80005fe:	2300      	movs	r3, #0
 8000600:	4699      	mov	r9, r3
 8000602:	469a      	mov	sl, r3
 8000604:	3f7f      	subs	r7, #127	; 0x7f
 8000606:	0260      	lsls	r0, r4, #9
 8000608:	0a43      	lsrs	r3, r0, #9
 800060a:	4698      	mov	r8, r3
 800060c:	0063      	lsls	r3, r4, #1
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	0fe4      	lsrs	r4, r4, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d04e      	beq.n	80006b4 <__aeabi_fdiv+0xe0>
 8000616:	2bff      	cmp	r3, #255	; 0xff
 8000618:	d046      	beq.n	80006a8 <__aeabi_fdiv+0xd4>
 800061a:	4642      	mov	r2, r8
 800061c:	00d0      	lsls	r0, r2, #3
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	04d2      	lsls	r2, r2, #19
 8000622:	4302      	orrs	r2, r0
 8000624:	4690      	mov	r8, r2
 8000626:	2200      	movs	r2, #0
 8000628:	3b7f      	subs	r3, #127	; 0x7f
 800062a:	0031      	movs	r1, r6
 800062c:	1aff      	subs	r7, r7, r3
 800062e:	464b      	mov	r3, r9
 8000630:	4061      	eors	r1, r4
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	4313      	orrs	r3, r2
 8000636:	2b0f      	cmp	r3, #15
 8000638:	d900      	bls.n	800063c <__aeabi_fdiv+0x68>
 800063a:	e0b5      	b.n	80007a8 <__aeabi_fdiv+0x1d4>
 800063c:	486e      	ldr	r0, [pc, #440]	; (80007f8 <__aeabi_fdiv+0x224>)
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	58c3      	ldr	r3, [r0, r3]
 8000642:	469f      	mov	pc, r3
 8000644:	2300      	movs	r3, #0
 8000646:	4698      	mov	r8, r3
 8000648:	0026      	movs	r6, r4
 800064a:	4645      	mov	r5, r8
 800064c:	4692      	mov	sl, r2
 800064e:	4653      	mov	r3, sl
 8000650:	2b02      	cmp	r3, #2
 8000652:	d100      	bne.n	8000656 <__aeabi_fdiv+0x82>
 8000654:	e089      	b.n	800076a <__aeabi_fdiv+0x196>
 8000656:	2b03      	cmp	r3, #3
 8000658:	d100      	bne.n	800065c <__aeabi_fdiv+0x88>
 800065a:	e09e      	b.n	800079a <__aeabi_fdiv+0x1c6>
 800065c:	2b01      	cmp	r3, #1
 800065e:	d018      	beq.n	8000692 <__aeabi_fdiv+0xbe>
 8000660:	003b      	movs	r3, r7
 8000662:	337f      	adds	r3, #127	; 0x7f
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd69      	ble.n	800073c <__aeabi_fdiv+0x168>
 8000668:	076a      	lsls	r2, r5, #29
 800066a:	d004      	beq.n	8000676 <__aeabi_fdiv+0xa2>
 800066c:	220f      	movs	r2, #15
 800066e:	402a      	ands	r2, r5
 8000670:	2a04      	cmp	r2, #4
 8000672:	d000      	beq.n	8000676 <__aeabi_fdiv+0xa2>
 8000674:	3504      	adds	r5, #4
 8000676:	012a      	lsls	r2, r5, #4
 8000678:	d503      	bpl.n	8000682 <__aeabi_fdiv+0xae>
 800067a:	4b60      	ldr	r3, [pc, #384]	; (80007fc <__aeabi_fdiv+0x228>)
 800067c:	401d      	ands	r5, r3
 800067e:	003b      	movs	r3, r7
 8000680:	3380      	adds	r3, #128	; 0x80
 8000682:	2bfe      	cmp	r3, #254	; 0xfe
 8000684:	dd00      	ble.n	8000688 <__aeabi_fdiv+0xb4>
 8000686:	e070      	b.n	800076a <__aeabi_fdiv+0x196>
 8000688:	01ad      	lsls	r5, r5, #6
 800068a:	0a6d      	lsrs	r5, r5, #9
 800068c:	b2d8      	uxtb	r0, r3
 800068e:	e002      	b.n	8000696 <__aeabi_fdiv+0xc2>
 8000690:	000e      	movs	r6, r1
 8000692:	2000      	movs	r0, #0
 8000694:	2500      	movs	r5, #0
 8000696:	05c0      	lsls	r0, r0, #23
 8000698:	4328      	orrs	r0, r5
 800069a:	07f6      	lsls	r6, r6, #31
 800069c:	4330      	orrs	r0, r6
 800069e:	bce0      	pop	{r5, r6, r7}
 80006a0:	46ba      	mov	sl, r7
 80006a2:	46b1      	mov	r9, r6
 80006a4:	46a8      	mov	r8, r5
 80006a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a8:	4643      	mov	r3, r8
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d13f      	bne.n	800072e <__aeabi_fdiv+0x15a>
 80006ae:	2202      	movs	r2, #2
 80006b0:	3fff      	subs	r7, #255	; 0xff
 80006b2:	e003      	b.n	80006bc <__aeabi_fdiv+0xe8>
 80006b4:	4643      	mov	r3, r8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d12d      	bne.n	8000716 <__aeabi_fdiv+0x142>
 80006ba:	2201      	movs	r2, #1
 80006bc:	0031      	movs	r1, r6
 80006be:	464b      	mov	r3, r9
 80006c0:	4061      	eors	r1, r4
 80006c2:	b2c9      	uxtb	r1, r1
 80006c4:	4313      	orrs	r3, r2
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d834      	bhi.n	8000734 <__aeabi_fdiv+0x160>
 80006ca:	484d      	ldr	r0, [pc, #308]	; (8000800 <__aeabi_fdiv+0x22c>)
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	58c3      	ldr	r3, [r0, r3]
 80006d0:	469f      	mov	pc, r3
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d113      	bne.n	80006fe <__aeabi_fdiv+0x12a>
 80006d6:	2304      	movs	r3, #4
 80006d8:	4699      	mov	r9, r3
 80006da:	3b03      	subs	r3, #3
 80006dc:	2700      	movs	r7, #0
 80006de:	469a      	mov	sl, r3
 80006e0:	e791      	b.n	8000606 <__aeabi_fdiv+0x32>
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d105      	bne.n	80006f2 <__aeabi_fdiv+0x11e>
 80006e6:	2308      	movs	r3, #8
 80006e8:	4699      	mov	r9, r3
 80006ea:	3b06      	subs	r3, #6
 80006ec:	27ff      	movs	r7, #255	; 0xff
 80006ee:	469a      	mov	sl, r3
 80006f0:	e789      	b.n	8000606 <__aeabi_fdiv+0x32>
 80006f2:	230c      	movs	r3, #12
 80006f4:	4699      	mov	r9, r3
 80006f6:	3b09      	subs	r3, #9
 80006f8:	27ff      	movs	r7, #255	; 0xff
 80006fa:	469a      	mov	sl, r3
 80006fc:	e783      	b.n	8000606 <__aeabi_fdiv+0x32>
 80006fe:	0028      	movs	r0, r5
 8000700:	f001 feb4 	bl	800246c <__clzsi2>
 8000704:	2776      	movs	r7, #118	; 0x76
 8000706:	1f43      	subs	r3, r0, #5
 8000708:	409d      	lsls	r5, r3
 800070a:	2300      	movs	r3, #0
 800070c:	427f      	negs	r7, r7
 800070e:	4699      	mov	r9, r3
 8000710:	469a      	mov	sl, r3
 8000712:	1a3f      	subs	r7, r7, r0
 8000714:	e777      	b.n	8000606 <__aeabi_fdiv+0x32>
 8000716:	4640      	mov	r0, r8
 8000718:	f001 fea8 	bl	800246c <__clzsi2>
 800071c:	4642      	mov	r2, r8
 800071e:	1f43      	subs	r3, r0, #5
 8000720:	409a      	lsls	r2, r3
 8000722:	2376      	movs	r3, #118	; 0x76
 8000724:	425b      	negs	r3, r3
 8000726:	4690      	mov	r8, r2
 8000728:	1a1b      	subs	r3, r3, r0
 800072a:	2200      	movs	r2, #0
 800072c:	e77d      	b.n	800062a <__aeabi_fdiv+0x56>
 800072e:	23ff      	movs	r3, #255	; 0xff
 8000730:	2203      	movs	r2, #3
 8000732:	e77a      	b.n	800062a <__aeabi_fdiv+0x56>
 8000734:	000e      	movs	r6, r1
 8000736:	20ff      	movs	r0, #255	; 0xff
 8000738:	2500      	movs	r5, #0
 800073a:	e7ac      	b.n	8000696 <__aeabi_fdiv+0xc2>
 800073c:	2001      	movs	r0, #1
 800073e:	1ac0      	subs	r0, r0, r3
 8000740:	281b      	cmp	r0, #27
 8000742:	dca6      	bgt.n	8000692 <__aeabi_fdiv+0xbe>
 8000744:	379e      	adds	r7, #158	; 0x9e
 8000746:	002a      	movs	r2, r5
 8000748:	40bd      	lsls	r5, r7
 800074a:	40c2      	lsrs	r2, r0
 800074c:	1e6b      	subs	r3, r5, #1
 800074e:	419d      	sbcs	r5, r3
 8000750:	4315      	orrs	r5, r2
 8000752:	076b      	lsls	r3, r5, #29
 8000754:	d004      	beq.n	8000760 <__aeabi_fdiv+0x18c>
 8000756:	230f      	movs	r3, #15
 8000758:	402b      	ands	r3, r5
 800075a:	2b04      	cmp	r3, #4
 800075c:	d000      	beq.n	8000760 <__aeabi_fdiv+0x18c>
 800075e:	3504      	adds	r5, #4
 8000760:	016b      	lsls	r3, r5, #5
 8000762:	d544      	bpl.n	80007ee <__aeabi_fdiv+0x21a>
 8000764:	2001      	movs	r0, #1
 8000766:	2500      	movs	r5, #0
 8000768:	e795      	b.n	8000696 <__aeabi_fdiv+0xc2>
 800076a:	20ff      	movs	r0, #255	; 0xff
 800076c:	2500      	movs	r5, #0
 800076e:	e792      	b.n	8000696 <__aeabi_fdiv+0xc2>
 8000770:	2580      	movs	r5, #128	; 0x80
 8000772:	2600      	movs	r6, #0
 8000774:	20ff      	movs	r0, #255	; 0xff
 8000776:	03ed      	lsls	r5, r5, #15
 8000778:	e78d      	b.n	8000696 <__aeabi_fdiv+0xc2>
 800077a:	2300      	movs	r3, #0
 800077c:	4698      	mov	r8, r3
 800077e:	2080      	movs	r0, #128	; 0x80
 8000780:	03c0      	lsls	r0, r0, #15
 8000782:	4205      	tst	r5, r0
 8000784:	d009      	beq.n	800079a <__aeabi_fdiv+0x1c6>
 8000786:	4643      	mov	r3, r8
 8000788:	4203      	tst	r3, r0
 800078a:	d106      	bne.n	800079a <__aeabi_fdiv+0x1c6>
 800078c:	4645      	mov	r5, r8
 800078e:	4305      	orrs	r5, r0
 8000790:	026d      	lsls	r5, r5, #9
 8000792:	0026      	movs	r6, r4
 8000794:	20ff      	movs	r0, #255	; 0xff
 8000796:	0a6d      	lsrs	r5, r5, #9
 8000798:	e77d      	b.n	8000696 <__aeabi_fdiv+0xc2>
 800079a:	2080      	movs	r0, #128	; 0x80
 800079c:	03c0      	lsls	r0, r0, #15
 800079e:	4305      	orrs	r5, r0
 80007a0:	026d      	lsls	r5, r5, #9
 80007a2:	20ff      	movs	r0, #255	; 0xff
 80007a4:	0a6d      	lsrs	r5, r5, #9
 80007a6:	e776      	b.n	8000696 <__aeabi_fdiv+0xc2>
 80007a8:	4642      	mov	r2, r8
 80007aa:	016b      	lsls	r3, r5, #5
 80007ac:	0150      	lsls	r0, r2, #5
 80007ae:	4283      	cmp	r3, r0
 80007b0:	d219      	bcs.n	80007e6 <__aeabi_fdiv+0x212>
 80007b2:	221b      	movs	r2, #27
 80007b4:	2500      	movs	r5, #0
 80007b6:	3f01      	subs	r7, #1
 80007b8:	2601      	movs	r6, #1
 80007ba:	001c      	movs	r4, r3
 80007bc:	006d      	lsls	r5, r5, #1
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	db01      	blt.n	80007c8 <__aeabi_fdiv+0x1f4>
 80007c4:	4298      	cmp	r0, r3
 80007c6:	d801      	bhi.n	80007cc <__aeabi_fdiv+0x1f8>
 80007c8:	1a1b      	subs	r3, r3, r0
 80007ca:	4335      	orrs	r5, r6
 80007cc:	3a01      	subs	r2, #1
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d1f3      	bne.n	80007ba <__aeabi_fdiv+0x1e6>
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	4193      	sbcs	r3, r2
 80007d6:	431d      	orrs	r5, r3
 80007d8:	003b      	movs	r3, r7
 80007da:	337f      	adds	r3, #127	; 0x7f
 80007dc:	000e      	movs	r6, r1
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd00      	ble.n	80007e4 <__aeabi_fdiv+0x210>
 80007e2:	e741      	b.n	8000668 <__aeabi_fdiv+0x94>
 80007e4:	e7aa      	b.n	800073c <__aeabi_fdiv+0x168>
 80007e6:	221a      	movs	r2, #26
 80007e8:	2501      	movs	r5, #1
 80007ea:	1a1b      	subs	r3, r3, r0
 80007ec:	e7e4      	b.n	80007b8 <__aeabi_fdiv+0x1e4>
 80007ee:	01ad      	lsls	r5, r5, #6
 80007f0:	2000      	movs	r0, #0
 80007f2:	0a6d      	lsrs	r5, r5, #9
 80007f4:	e74f      	b.n	8000696 <__aeabi_fdiv+0xc2>
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	08005ec8 	.word	0x08005ec8
 80007fc:	f7ffffff 	.word	0xf7ffffff
 8000800:	08005f08 	.word	0x08005f08

08000804 <__aeabi_i2f>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	2800      	cmp	r0, #0
 8000808:	d013      	beq.n	8000832 <__aeabi_i2f+0x2e>
 800080a:	17c3      	asrs	r3, r0, #31
 800080c:	18c6      	adds	r6, r0, r3
 800080e:	405e      	eors	r6, r3
 8000810:	0fc4      	lsrs	r4, r0, #31
 8000812:	0030      	movs	r0, r6
 8000814:	f001 fe2a 	bl	800246c <__clzsi2>
 8000818:	239e      	movs	r3, #158	; 0x9e
 800081a:	0005      	movs	r5, r0
 800081c:	1a1b      	subs	r3, r3, r0
 800081e:	2b96      	cmp	r3, #150	; 0x96
 8000820:	dc0f      	bgt.n	8000842 <__aeabi_i2f+0x3e>
 8000822:	2808      	cmp	r0, #8
 8000824:	dd01      	ble.n	800082a <__aeabi_i2f+0x26>
 8000826:	3d08      	subs	r5, #8
 8000828:	40ae      	lsls	r6, r5
 800082a:	0276      	lsls	r6, r6, #9
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	b2d8      	uxtb	r0, r3
 8000830:	e002      	b.n	8000838 <__aeabi_i2f+0x34>
 8000832:	2400      	movs	r4, #0
 8000834:	2000      	movs	r0, #0
 8000836:	2600      	movs	r6, #0
 8000838:	05c0      	lsls	r0, r0, #23
 800083a:	4330      	orrs	r0, r6
 800083c:	07e4      	lsls	r4, r4, #31
 800083e:	4320      	orrs	r0, r4
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	2b99      	cmp	r3, #153	; 0x99
 8000844:	dd0c      	ble.n	8000860 <__aeabi_i2f+0x5c>
 8000846:	2205      	movs	r2, #5
 8000848:	0031      	movs	r1, r6
 800084a:	1a12      	subs	r2, r2, r0
 800084c:	40d1      	lsrs	r1, r2
 800084e:	000a      	movs	r2, r1
 8000850:	0001      	movs	r1, r0
 8000852:	0030      	movs	r0, r6
 8000854:	311b      	adds	r1, #27
 8000856:	4088      	lsls	r0, r1
 8000858:	1e41      	subs	r1, r0, #1
 800085a:	4188      	sbcs	r0, r1
 800085c:	4302      	orrs	r2, r0
 800085e:	0016      	movs	r6, r2
 8000860:	2d05      	cmp	r5, #5
 8000862:	dc12      	bgt.n	800088a <__aeabi_i2f+0x86>
 8000864:	0031      	movs	r1, r6
 8000866:	4f0d      	ldr	r7, [pc, #52]	; (800089c <__aeabi_i2f+0x98>)
 8000868:	4039      	ands	r1, r7
 800086a:	0772      	lsls	r2, r6, #29
 800086c:	d009      	beq.n	8000882 <__aeabi_i2f+0x7e>
 800086e:	200f      	movs	r0, #15
 8000870:	4030      	ands	r0, r6
 8000872:	2804      	cmp	r0, #4
 8000874:	d005      	beq.n	8000882 <__aeabi_i2f+0x7e>
 8000876:	3104      	adds	r1, #4
 8000878:	014a      	lsls	r2, r1, #5
 800087a:	d502      	bpl.n	8000882 <__aeabi_i2f+0x7e>
 800087c:	239f      	movs	r3, #159	; 0x9f
 800087e:	4039      	ands	r1, r7
 8000880:	1b5b      	subs	r3, r3, r5
 8000882:	0189      	lsls	r1, r1, #6
 8000884:	0a4e      	lsrs	r6, r1, #9
 8000886:	b2d8      	uxtb	r0, r3
 8000888:	e7d6      	b.n	8000838 <__aeabi_i2f+0x34>
 800088a:	1f6a      	subs	r2, r5, #5
 800088c:	4096      	lsls	r6, r2
 800088e:	0031      	movs	r1, r6
 8000890:	4f02      	ldr	r7, [pc, #8]	; (800089c <__aeabi_i2f+0x98>)
 8000892:	4039      	ands	r1, r7
 8000894:	0772      	lsls	r2, r6, #29
 8000896:	d0f4      	beq.n	8000882 <__aeabi_i2f+0x7e>
 8000898:	e7e9      	b.n	800086e <__aeabi_i2f+0x6a>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	fbffffff 	.word	0xfbffffff

080008a0 <__aeabi_dadd>:
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	464f      	mov	r7, r9
 80008a4:	4646      	mov	r6, r8
 80008a6:	46d6      	mov	lr, sl
 80008a8:	000d      	movs	r5, r1
 80008aa:	0004      	movs	r4, r0
 80008ac:	b5c0      	push	{r6, r7, lr}
 80008ae:	001f      	movs	r7, r3
 80008b0:	0011      	movs	r1, r2
 80008b2:	0328      	lsls	r0, r5, #12
 80008b4:	0f62      	lsrs	r2, r4, #29
 80008b6:	0a40      	lsrs	r0, r0, #9
 80008b8:	4310      	orrs	r0, r2
 80008ba:	007a      	lsls	r2, r7, #1
 80008bc:	0d52      	lsrs	r2, r2, #21
 80008be:	00e3      	lsls	r3, r4, #3
 80008c0:	033c      	lsls	r4, r7, #12
 80008c2:	4691      	mov	r9, r2
 80008c4:	0a64      	lsrs	r4, r4, #9
 80008c6:	0ffa      	lsrs	r2, r7, #31
 80008c8:	0f4f      	lsrs	r7, r1, #29
 80008ca:	006e      	lsls	r6, r5, #1
 80008cc:	4327      	orrs	r7, r4
 80008ce:	4692      	mov	sl, r2
 80008d0:	46b8      	mov	r8, r7
 80008d2:	0d76      	lsrs	r6, r6, #21
 80008d4:	0fed      	lsrs	r5, r5, #31
 80008d6:	00c9      	lsls	r1, r1, #3
 80008d8:	4295      	cmp	r5, r2
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x3e>
 80008dc:	e099      	b.n	8000a12 <__aeabi_dadd+0x172>
 80008de:	464c      	mov	r4, r9
 80008e0:	1b34      	subs	r4, r6, r4
 80008e2:	46a4      	mov	ip, r4
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	dc00      	bgt.n	80008ea <__aeabi_dadd+0x4a>
 80008e8:	e07c      	b.n	80009e4 <__aeabi_dadd+0x144>
 80008ea:	464a      	mov	r2, r9
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x52>
 80008f0:	e0b8      	b.n	8000a64 <__aeabi_dadd+0x1c4>
 80008f2:	4ac5      	ldr	r2, [pc, #788]	; (8000c08 <__aeabi_dadd+0x368>)
 80008f4:	4296      	cmp	r6, r2
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x5a>
 80008f8:	e11c      	b.n	8000b34 <__aeabi_dadd+0x294>
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	003c      	movs	r4, r7
 80008fe:	0412      	lsls	r2, r2, #16
 8000900:	4314      	orrs	r4, r2
 8000902:	46a0      	mov	r8, r4
 8000904:	4662      	mov	r2, ip
 8000906:	2a38      	cmp	r2, #56	; 0x38
 8000908:	dd00      	ble.n	800090c <__aeabi_dadd+0x6c>
 800090a:	e161      	b.n	8000bd0 <__aeabi_dadd+0x330>
 800090c:	2a1f      	cmp	r2, #31
 800090e:	dd00      	ble.n	8000912 <__aeabi_dadd+0x72>
 8000910:	e1cc      	b.n	8000cac <__aeabi_dadd+0x40c>
 8000912:	4664      	mov	r4, ip
 8000914:	2220      	movs	r2, #32
 8000916:	1b12      	subs	r2, r2, r4
 8000918:	4644      	mov	r4, r8
 800091a:	4094      	lsls	r4, r2
 800091c:	000f      	movs	r7, r1
 800091e:	46a1      	mov	r9, r4
 8000920:	4664      	mov	r4, ip
 8000922:	4091      	lsls	r1, r2
 8000924:	40e7      	lsrs	r7, r4
 8000926:	464c      	mov	r4, r9
 8000928:	1e4a      	subs	r2, r1, #1
 800092a:	4191      	sbcs	r1, r2
 800092c:	433c      	orrs	r4, r7
 800092e:	4642      	mov	r2, r8
 8000930:	4321      	orrs	r1, r4
 8000932:	4664      	mov	r4, ip
 8000934:	40e2      	lsrs	r2, r4
 8000936:	1a80      	subs	r0, r0, r2
 8000938:	1a5c      	subs	r4, r3, r1
 800093a:	42a3      	cmp	r3, r4
 800093c:	419b      	sbcs	r3, r3
 800093e:	425f      	negs	r7, r3
 8000940:	1bc7      	subs	r7, r0, r7
 8000942:	023b      	lsls	r3, r7, #8
 8000944:	d400      	bmi.n	8000948 <__aeabi_dadd+0xa8>
 8000946:	e0d0      	b.n	8000aea <__aeabi_dadd+0x24a>
 8000948:	027f      	lsls	r7, r7, #9
 800094a:	0a7f      	lsrs	r7, r7, #9
 800094c:	2f00      	cmp	r7, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0xb2>
 8000950:	e0ff      	b.n	8000b52 <__aeabi_dadd+0x2b2>
 8000952:	0038      	movs	r0, r7
 8000954:	f001 fd8a 	bl	800246c <__clzsi2>
 8000958:	0001      	movs	r1, r0
 800095a:	3908      	subs	r1, #8
 800095c:	2320      	movs	r3, #32
 800095e:	0022      	movs	r2, r4
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	408f      	lsls	r7, r1
 8000964:	40da      	lsrs	r2, r3
 8000966:	408c      	lsls	r4, r1
 8000968:	4317      	orrs	r7, r2
 800096a:	42b1      	cmp	r1, r6
 800096c:	da00      	bge.n	8000970 <__aeabi_dadd+0xd0>
 800096e:	e0ff      	b.n	8000b70 <__aeabi_dadd+0x2d0>
 8000970:	1b89      	subs	r1, r1, r6
 8000972:	1c4b      	adds	r3, r1, #1
 8000974:	2b1f      	cmp	r3, #31
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0xda>
 8000978:	e0a8      	b.n	8000acc <__aeabi_dadd+0x22c>
 800097a:	2220      	movs	r2, #32
 800097c:	0039      	movs	r1, r7
 800097e:	1ad2      	subs	r2, r2, r3
 8000980:	0020      	movs	r0, r4
 8000982:	4094      	lsls	r4, r2
 8000984:	4091      	lsls	r1, r2
 8000986:	40d8      	lsrs	r0, r3
 8000988:	1e62      	subs	r2, r4, #1
 800098a:	4194      	sbcs	r4, r2
 800098c:	40df      	lsrs	r7, r3
 800098e:	2600      	movs	r6, #0
 8000990:	4301      	orrs	r1, r0
 8000992:	430c      	orrs	r4, r1
 8000994:	0763      	lsls	r3, r4, #29
 8000996:	d009      	beq.n	80009ac <__aeabi_dadd+0x10c>
 8000998:	230f      	movs	r3, #15
 800099a:	4023      	ands	r3, r4
 800099c:	2b04      	cmp	r3, #4
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x10c>
 80009a0:	1d23      	adds	r3, r4, #4
 80009a2:	42a3      	cmp	r3, r4
 80009a4:	41a4      	sbcs	r4, r4
 80009a6:	4264      	negs	r4, r4
 80009a8:	193f      	adds	r7, r7, r4
 80009aa:	001c      	movs	r4, r3
 80009ac:	023b      	lsls	r3, r7, #8
 80009ae:	d400      	bmi.n	80009b2 <__aeabi_dadd+0x112>
 80009b0:	e09e      	b.n	8000af0 <__aeabi_dadd+0x250>
 80009b2:	4b95      	ldr	r3, [pc, #596]	; (8000c08 <__aeabi_dadd+0x368>)
 80009b4:	3601      	adds	r6, #1
 80009b6:	429e      	cmp	r6, r3
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x11c>
 80009ba:	e0b7      	b.n	8000b2c <__aeabi_dadd+0x28c>
 80009bc:	4a93      	ldr	r2, [pc, #588]	; (8000c0c <__aeabi_dadd+0x36c>)
 80009be:	08e4      	lsrs	r4, r4, #3
 80009c0:	4017      	ands	r7, r2
 80009c2:	077b      	lsls	r3, r7, #29
 80009c4:	0571      	lsls	r1, r6, #21
 80009c6:	027f      	lsls	r7, r7, #9
 80009c8:	4323      	orrs	r3, r4
 80009ca:	0b3f      	lsrs	r7, r7, #12
 80009cc:	0d4a      	lsrs	r2, r1, #21
 80009ce:	0512      	lsls	r2, r2, #20
 80009d0:	433a      	orrs	r2, r7
 80009d2:	07ed      	lsls	r5, r5, #31
 80009d4:	432a      	orrs	r2, r5
 80009d6:	0018      	movs	r0, r3
 80009d8:	0011      	movs	r1, r2
 80009da:	bce0      	pop	{r5, r6, r7}
 80009dc:	46ba      	mov	sl, r7
 80009de:	46b1      	mov	r9, r6
 80009e0:	46a8      	mov	r8, r5
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d04b      	beq.n	8000a80 <__aeabi_dadd+0x1e0>
 80009e8:	464c      	mov	r4, r9
 80009ea:	1ba4      	subs	r4, r4, r6
 80009ec:	46a4      	mov	ip, r4
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d000      	beq.n	80009f4 <__aeabi_dadd+0x154>
 80009f2:	e123      	b.n	8000c3c <__aeabi_dadd+0x39c>
 80009f4:	0004      	movs	r4, r0
 80009f6:	431c      	orrs	r4, r3
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x15c>
 80009fa:	e1af      	b.n	8000d5c <__aeabi_dadd+0x4bc>
 80009fc:	4662      	mov	r2, ip
 80009fe:	1e54      	subs	r4, r2, #1
 8000a00:	2a01      	cmp	r2, #1
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x166>
 8000a04:	e215      	b.n	8000e32 <__aeabi_dadd+0x592>
 8000a06:	4d80      	ldr	r5, [pc, #512]	; (8000c08 <__aeabi_dadd+0x368>)
 8000a08:	45ac      	cmp	ip, r5
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0x16e>
 8000a0c:	e1c8      	b.n	8000da0 <__aeabi_dadd+0x500>
 8000a0e:	46a4      	mov	ip, r4
 8000a10:	e11b      	b.n	8000c4a <__aeabi_dadd+0x3aa>
 8000a12:	464a      	mov	r2, r9
 8000a14:	1ab2      	subs	r2, r6, r2
 8000a16:	4694      	mov	ip, r2
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x17e>
 8000a1c:	e0ac      	b.n	8000b78 <__aeabi_dadd+0x2d8>
 8000a1e:	464a      	mov	r2, r9
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d043      	beq.n	8000aac <__aeabi_dadd+0x20c>
 8000a24:	4a78      	ldr	r2, [pc, #480]	; (8000c08 <__aeabi_dadd+0x368>)
 8000a26:	4296      	cmp	r6, r2
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dadd+0x18c>
 8000a2a:	e1af      	b.n	8000d8c <__aeabi_dadd+0x4ec>
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	003c      	movs	r4, r7
 8000a30:	0412      	lsls	r2, r2, #16
 8000a32:	4314      	orrs	r4, r2
 8000a34:	46a0      	mov	r8, r4
 8000a36:	4662      	mov	r2, ip
 8000a38:	2a38      	cmp	r2, #56	; 0x38
 8000a3a:	dc67      	bgt.n	8000b0c <__aeabi_dadd+0x26c>
 8000a3c:	2a1f      	cmp	r2, #31
 8000a3e:	dc00      	bgt.n	8000a42 <__aeabi_dadd+0x1a2>
 8000a40:	e15f      	b.n	8000d02 <__aeabi_dadd+0x462>
 8000a42:	4647      	mov	r7, r8
 8000a44:	3a20      	subs	r2, #32
 8000a46:	40d7      	lsrs	r7, r2
 8000a48:	4662      	mov	r2, ip
 8000a4a:	2a20      	cmp	r2, #32
 8000a4c:	d005      	beq.n	8000a5a <__aeabi_dadd+0x1ba>
 8000a4e:	4664      	mov	r4, ip
 8000a50:	2240      	movs	r2, #64	; 0x40
 8000a52:	1b12      	subs	r2, r2, r4
 8000a54:	4644      	mov	r4, r8
 8000a56:	4094      	lsls	r4, r2
 8000a58:	4321      	orrs	r1, r4
 8000a5a:	1e4a      	subs	r2, r1, #1
 8000a5c:	4191      	sbcs	r1, r2
 8000a5e:	000c      	movs	r4, r1
 8000a60:	433c      	orrs	r4, r7
 8000a62:	e057      	b.n	8000b14 <__aeabi_dadd+0x274>
 8000a64:	003a      	movs	r2, r7
 8000a66:	430a      	orrs	r2, r1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x1cc>
 8000a6a:	e105      	b.n	8000c78 <__aeabi_dadd+0x3d8>
 8000a6c:	0022      	movs	r2, r4
 8000a6e:	3a01      	subs	r2, #1
 8000a70:	2c01      	cmp	r4, #1
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x1d6>
 8000a74:	e182      	b.n	8000d7c <__aeabi_dadd+0x4dc>
 8000a76:	4c64      	ldr	r4, [pc, #400]	; (8000c08 <__aeabi_dadd+0x368>)
 8000a78:	45a4      	cmp	ip, r4
 8000a7a:	d05b      	beq.n	8000b34 <__aeabi_dadd+0x294>
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	e741      	b.n	8000904 <__aeabi_dadd+0x64>
 8000a80:	4c63      	ldr	r4, [pc, #396]	; (8000c10 <__aeabi_dadd+0x370>)
 8000a82:	1c77      	adds	r7, r6, #1
 8000a84:	4227      	tst	r7, r4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x1ea>
 8000a88:	e0c4      	b.n	8000c14 <__aeabi_dadd+0x374>
 8000a8a:	0004      	movs	r4, r0
 8000a8c:	431c      	orrs	r4, r3
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dadd+0x1f4>
 8000a92:	e169      	b.n	8000d68 <__aeabi_dadd+0x4c8>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x1fa>
 8000a98:	e1bf      	b.n	8000e1a <__aeabi_dadd+0x57a>
 8000a9a:	4644      	mov	r4, r8
 8000a9c:	430c      	orrs	r4, r1
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x202>
 8000aa0:	e1d0      	b.n	8000e44 <__aeabi_dadd+0x5a4>
 8000aa2:	0742      	lsls	r2, r0, #29
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	08c0      	lsrs	r0, r0, #3
 8000aaa:	e029      	b.n	8000b00 <__aeabi_dadd+0x260>
 8000aac:	003a      	movs	r2, r7
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x214>
 8000ab2:	e170      	b.n	8000d96 <__aeabi_dadd+0x4f6>
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	4664      	mov	r4, ip
 8000ab8:	3a01      	subs	r2, #1
 8000aba:	2c01      	cmp	r4, #1
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x220>
 8000abe:	e0e0      	b.n	8000c82 <__aeabi_dadd+0x3e2>
 8000ac0:	4c51      	ldr	r4, [pc, #324]	; (8000c08 <__aeabi_dadd+0x368>)
 8000ac2:	45a4      	cmp	ip, r4
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x228>
 8000ac6:	e161      	b.n	8000d8c <__aeabi_dadd+0x4ec>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	e7b4      	b.n	8000a36 <__aeabi_dadd+0x196>
 8000acc:	003a      	movs	r2, r7
 8000ace:	391f      	subs	r1, #31
 8000ad0:	40ca      	lsrs	r2, r1
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	2b20      	cmp	r3, #32
 8000ad6:	d003      	beq.n	8000ae0 <__aeabi_dadd+0x240>
 8000ad8:	2240      	movs	r2, #64	; 0x40
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	409f      	lsls	r7, r3
 8000ade:	433c      	orrs	r4, r7
 8000ae0:	1e63      	subs	r3, r4, #1
 8000ae2:	419c      	sbcs	r4, r3
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	430c      	orrs	r4, r1
 8000aea:	0763      	lsls	r3, r4, #29
 8000aec:	d000      	beq.n	8000af0 <__aeabi_dadd+0x250>
 8000aee:	e753      	b.n	8000998 <__aeabi_dadd+0xf8>
 8000af0:	46b4      	mov	ip, r6
 8000af2:	08e4      	lsrs	r4, r4, #3
 8000af4:	077b      	lsls	r3, r7, #29
 8000af6:	4323      	orrs	r3, r4
 8000af8:	08f8      	lsrs	r0, r7, #3
 8000afa:	4a43      	ldr	r2, [pc, #268]	; (8000c08 <__aeabi_dadd+0x368>)
 8000afc:	4594      	cmp	ip, r2
 8000afe:	d01d      	beq.n	8000b3c <__aeabi_dadd+0x29c>
 8000b00:	4662      	mov	r2, ip
 8000b02:	0307      	lsls	r7, r0, #12
 8000b04:	0552      	lsls	r2, r2, #21
 8000b06:	0b3f      	lsrs	r7, r7, #12
 8000b08:	0d52      	lsrs	r2, r2, #21
 8000b0a:	e760      	b.n	80009ce <__aeabi_dadd+0x12e>
 8000b0c:	4644      	mov	r4, r8
 8000b0e:	430c      	orrs	r4, r1
 8000b10:	1e62      	subs	r2, r4, #1
 8000b12:	4194      	sbcs	r4, r2
 8000b14:	18e4      	adds	r4, r4, r3
 8000b16:	429c      	cmp	r4, r3
 8000b18:	419b      	sbcs	r3, r3
 8000b1a:	425f      	negs	r7, r3
 8000b1c:	183f      	adds	r7, r7, r0
 8000b1e:	023b      	lsls	r3, r7, #8
 8000b20:	d5e3      	bpl.n	8000aea <__aeabi_dadd+0x24a>
 8000b22:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <__aeabi_dadd+0x368>)
 8000b24:	3601      	adds	r6, #1
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d000      	beq.n	8000b2c <__aeabi_dadd+0x28c>
 8000b2a:	e0b5      	b.n	8000c98 <__aeabi_dadd+0x3f8>
 8000b2c:	0032      	movs	r2, r6
 8000b2e:	2700      	movs	r7, #0
 8000b30:	2300      	movs	r3, #0
 8000b32:	e74c      	b.n	80009ce <__aeabi_dadd+0x12e>
 8000b34:	0742      	lsls	r2, r0, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c0      	lsrs	r0, r0, #3
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4302      	orrs	r2, r0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x2a4>
 8000b42:	e1e1      	b.n	8000f08 <__aeabi_dadd+0x668>
 8000b44:	2780      	movs	r7, #128	; 0x80
 8000b46:	033f      	lsls	r7, r7, #12
 8000b48:	4307      	orrs	r7, r0
 8000b4a:	033f      	lsls	r7, r7, #12
 8000b4c:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <__aeabi_dadd+0x368>)
 8000b4e:	0b3f      	lsrs	r7, r7, #12
 8000b50:	e73d      	b.n	80009ce <__aeabi_dadd+0x12e>
 8000b52:	0020      	movs	r0, r4
 8000b54:	f001 fc8a 	bl	800246c <__clzsi2>
 8000b58:	0001      	movs	r1, r0
 8000b5a:	3118      	adds	r1, #24
 8000b5c:	291f      	cmp	r1, #31
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_dadd+0x2c2>
 8000b60:	e6fc      	b.n	800095c <__aeabi_dadd+0xbc>
 8000b62:	3808      	subs	r0, #8
 8000b64:	4084      	lsls	r4, r0
 8000b66:	0027      	movs	r7, r4
 8000b68:	2400      	movs	r4, #0
 8000b6a:	42b1      	cmp	r1, r6
 8000b6c:	db00      	blt.n	8000b70 <__aeabi_dadd+0x2d0>
 8000b6e:	e6ff      	b.n	8000970 <__aeabi_dadd+0xd0>
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <__aeabi_dadd+0x36c>)
 8000b72:	1a76      	subs	r6, r6, r1
 8000b74:	4017      	ands	r7, r2
 8000b76:	e70d      	b.n	8000994 <__aeabi_dadd+0xf4>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	d02f      	beq.n	8000bdc <__aeabi_dadd+0x33c>
 8000b7c:	464a      	mov	r2, r9
 8000b7e:	1b92      	subs	r2, r2, r6
 8000b80:	4694      	mov	ip, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x2e8>
 8000b86:	e0ad      	b.n	8000ce4 <__aeabi_dadd+0x444>
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <__aeabi_dadd+0x368>)
 8000b8a:	4591      	cmp	r9, r2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x2f0>
 8000b8e:	e10f      	b.n	8000db0 <__aeabi_dadd+0x510>
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	0412      	lsls	r2, r2, #16
 8000b94:	4310      	orrs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	2a38      	cmp	r2, #56	; 0x38
 8000b9a:	dd00      	ble.n	8000b9e <__aeabi_dadd+0x2fe>
 8000b9c:	e10f      	b.n	8000dbe <__aeabi_dadd+0x51e>
 8000b9e:	2a1f      	cmp	r2, #31
 8000ba0:	dd00      	ble.n	8000ba4 <__aeabi_dadd+0x304>
 8000ba2:	e180      	b.n	8000ea6 <__aeabi_dadd+0x606>
 8000ba4:	4664      	mov	r4, ip
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	001e      	movs	r6, r3
 8000baa:	1b12      	subs	r2, r2, r4
 8000bac:	4667      	mov	r7, ip
 8000bae:	0004      	movs	r4, r0
 8000bb0:	4093      	lsls	r3, r2
 8000bb2:	4094      	lsls	r4, r2
 8000bb4:	40fe      	lsrs	r6, r7
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	4193      	sbcs	r3, r2
 8000bba:	40f8      	lsrs	r0, r7
 8000bbc:	4334      	orrs	r4, r6
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	4480      	add	r8, r0
 8000bc2:	1864      	adds	r4, r4, r1
 8000bc4:	428c      	cmp	r4, r1
 8000bc6:	41bf      	sbcs	r7, r7
 8000bc8:	427f      	negs	r7, r7
 8000bca:	464e      	mov	r6, r9
 8000bcc:	4447      	add	r7, r8
 8000bce:	e7a6      	b.n	8000b1e <__aeabi_dadd+0x27e>
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	1e4a      	subs	r2, r1, #1
 8000bd8:	4191      	sbcs	r1, r2
 8000bda:	e6ad      	b.n	8000938 <__aeabi_dadd+0x98>
 8000bdc:	4c0c      	ldr	r4, [pc, #48]	; (8000c10 <__aeabi_dadd+0x370>)
 8000bde:	1c72      	adds	r2, r6, #1
 8000be0:	4222      	tst	r2, r4
 8000be2:	d000      	beq.n	8000be6 <__aeabi_dadd+0x346>
 8000be4:	e0a1      	b.n	8000d2a <__aeabi_dadd+0x48a>
 8000be6:	0002      	movs	r2, r0
 8000be8:	431a      	orrs	r2, r3
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dadd+0x350>
 8000bee:	e0fa      	b.n	8000de6 <__aeabi_dadd+0x546>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x356>
 8000bf4:	e145      	b.n	8000e82 <__aeabi_dadd+0x5e2>
 8000bf6:	003a      	movs	r2, r7
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_dadd+0x35e>
 8000bfc:	e146      	b.n	8000e8c <__aeabi_dadd+0x5ec>
 8000bfe:	0742      	lsls	r2, r0, #29
 8000c00:	08db      	lsrs	r3, r3, #3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	08c0      	lsrs	r0, r0, #3
 8000c06:	e77b      	b.n	8000b00 <__aeabi_dadd+0x260>
 8000c08:	000007ff 	.word	0x000007ff
 8000c0c:	ff7fffff 	.word	0xff7fffff
 8000c10:	000007fe 	.word	0x000007fe
 8000c14:	4647      	mov	r7, r8
 8000c16:	1a5c      	subs	r4, r3, r1
 8000c18:	1bc2      	subs	r2, r0, r7
 8000c1a:	42a3      	cmp	r3, r4
 8000c1c:	41bf      	sbcs	r7, r7
 8000c1e:	427f      	negs	r7, r7
 8000c20:	46b9      	mov	r9, r7
 8000c22:	0017      	movs	r7, r2
 8000c24:	464a      	mov	r2, r9
 8000c26:	1abf      	subs	r7, r7, r2
 8000c28:	023a      	lsls	r2, r7, #8
 8000c2a:	d500      	bpl.n	8000c2e <__aeabi_dadd+0x38e>
 8000c2c:	e08d      	b.n	8000d4a <__aeabi_dadd+0x4aa>
 8000c2e:	0023      	movs	r3, r4
 8000c30:	433b      	orrs	r3, r7
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x396>
 8000c34:	e68a      	b.n	800094c <__aeabi_dadd+0xac>
 8000c36:	2000      	movs	r0, #0
 8000c38:	2500      	movs	r5, #0
 8000c3a:	e761      	b.n	8000b00 <__aeabi_dadd+0x260>
 8000c3c:	4cb4      	ldr	r4, [pc, #720]	; (8000f10 <__aeabi_dadd+0x670>)
 8000c3e:	45a1      	cmp	r9, r4
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x3a4>
 8000c42:	e0ad      	b.n	8000da0 <__aeabi_dadd+0x500>
 8000c44:	2480      	movs	r4, #128	; 0x80
 8000c46:	0424      	lsls	r4, r4, #16
 8000c48:	4320      	orrs	r0, r4
 8000c4a:	4664      	mov	r4, ip
 8000c4c:	2c38      	cmp	r4, #56	; 0x38
 8000c4e:	dc3d      	bgt.n	8000ccc <__aeabi_dadd+0x42c>
 8000c50:	4662      	mov	r2, ip
 8000c52:	2c1f      	cmp	r4, #31
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_dadd+0x3b8>
 8000c56:	e0b7      	b.n	8000dc8 <__aeabi_dadd+0x528>
 8000c58:	2520      	movs	r5, #32
 8000c5a:	001e      	movs	r6, r3
 8000c5c:	1b2d      	subs	r5, r5, r4
 8000c5e:	0004      	movs	r4, r0
 8000c60:	40ab      	lsls	r3, r5
 8000c62:	40ac      	lsls	r4, r5
 8000c64:	40d6      	lsrs	r6, r2
 8000c66:	40d0      	lsrs	r0, r2
 8000c68:	4642      	mov	r2, r8
 8000c6a:	1e5d      	subs	r5, r3, #1
 8000c6c:	41ab      	sbcs	r3, r5
 8000c6e:	4334      	orrs	r4, r6
 8000c70:	1a12      	subs	r2, r2, r0
 8000c72:	4690      	mov	r8, r2
 8000c74:	4323      	orrs	r3, r4
 8000c76:	e02c      	b.n	8000cd2 <__aeabi_dadd+0x432>
 8000c78:	0742      	lsls	r2, r0, #29
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	08c0      	lsrs	r0, r0, #3
 8000c80:	e73b      	b.n	8000afa <__aeabi_dadd+0x25a>
 8000c82:	185c      	adds	r4, r3, r1
 8000c84:	429c      	cmp	r4, r3
 8000c86:	419b      	sbcs	r3, r3
 8000c88:	4440      	add	r0, r8
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	18c7      	adds	r7, r0, r3
 8000c8e:	2601      	movs	r6, #1
 8000c90:	023b      	lsls	r3, r7, #8
 8000c92:	d400      	bmi.n	8000c96 <__aeabi_dadd+0x3f6>
 8000c94:	e729      	b.n	8000aea <__aeabi_dadd+0x24a>
 8000c96:	2602      	movs	r6, #2
 8000c98:	4a9e      	ldr	r2, [pc, #632]	; (8000f14 <__aeabi_dadd+0x674>)
 8000c9a:	0863      	lsrs	r3, r4, #1
 8000c9c:	4017      	ands	r7, r2
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4014      	ands	r4, r2
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	07fb      	lsls	r3, r7, #31
 8000ca6:	431c      	orrs	r4, r3
 8000ca8:	087f      	lsrs	r7, r7, #1
 8000caa:	e673      	b.n	8000994 <__aeabi_dadd+0xf4>
 8000cac:	4644      	mov	r4, r8
 8000cae:	3a20      	subs	r2, #32
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	4662      	mov	r2, ip
 8000cb4:	2a20      	cmp	r2, #32
 8000cb6:	d005      	beq.n	8000cc4 <__aeabi_dadd+0x424>
 8000cb8:	4667      	mov	r7, ip
 8000cba:	2240      	movs	r2, #64	; 0x40
 8000cbc:	1bd2      	subs	r2, r2, r7
 8000cbe:	4647      	mov	r7, r8
 8000cc0:	4097      	lsls	r7, r2
 8000cc2:	4339      	orrs	r1, r7
 8000cc4:	1e4a      	subs	r2, r1, #1
 8000cc6:	4191      	sbcs	r1, r2
 8000cc8:	4321      	orrs	r1, r4
 8000cca:	e635      	b.n	8000938 <__aeabi_dadd+0x98>
 8000ccc:	4303      	orrs	r3, r0
 8000cce:	1e58      	subs	r0, r3, #1
 8000cd0:	4183      	sbcs	r3, r0
 8000cd2:	1acc      	subs	r4, r1, r3
 8000cd4:	42a1      	cmp	r1, r4
 8000cd6:	41bf      	sbcs	r7, r7
 8000cd8:	4643      	mov	r3, r8
 8000cda:	427f      	negs	r7, r7
 8000cdc:	4655      	mov	r5, sl
 8000cde:	464e      	mov	r6, r9
 8000ce0:	1bdf      	subs	r7, r3, r7
 8000ce2:	e62e      	b.n	8000942 <__aeabi_dadd+0xa2>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x44c>
 8000cea:	e0bd      	b.n	8000e68 <__aeabi_dadd+0x5c8>
 8000cec:	4662      	mov	r2, ip
 8000cee:	4664      	mov	r4, ip
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	2c01      	cmp	r4, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x458>
 8000cf6:	e0e5      	b.n	8000ec4 <__aeabi_dadd+0x624>
 8000cf8:	4c85      	ldr	r4, [pc, #532]	; (8000f10 <__aeabi_dadd+0x670>)
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d058      	beq.n	8000db0 <__aeabi_dadd+0x510>
 8000cfe:	4694      	mov	ip, r2
 8000d00:	e749      	b.n	8000b96 <__aeabi_dadd+0x2f6>
 8000d02:	4664      	mov	r4, ip
 8000d04:	2220      	movs	r2, #32
 8000d06:	1b12      	subs	r2, r2, r4
 8000d08:	4644      	mov	r4, r8
 8000d0a:	4094      	lsls	r4, r2
 8000d0c:	000f      	movs	r7, r1
 8000d0e:	46a1      	mov	r9, r4
 8000d10:	4664      	mov	r4, ip
 8000d12:	4091      	lsls	r1, r2
 8000d14:	40e7      	lsrs	r7, r4
 8000d16:	464c      	mov	r4, r9
 8000d18:	1e4a      	subs	r2, r1, #1
 8000d1a:	4191      	sbcs	r1, r2
 8000d1c:	433c      	orrs	r4, r7
 8000d1e:	4642      	mov	r2, r8
 8000d20:	430c      	orrs	r4, r1
 8000d22:	4661      	mov	r1, ip
 8000d24:	40ca      	lsrs	r2, r1
 8000d26:	1880      	adds	r0, r0, r2
 8000d28:	e6f4      	b.n	8000b14 <__aeabi_dadd+0x274>
 8000d2a:	4c79      	ldr	r4, [pc, #484]	; (8000f10 <__aeabi_dadd+0x670>)
 8000d2c:	42a2      	cmp	r2, r4
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x492>
 8000d30:	e6fd      	b.n	8000b2e <__aeabi_dadd+0x28e>
 8000d32:	1859      	adds	r1, r3, r1
 8000d34:	4299      	cmp	r1, r3
 8000d36:	419b      	sbcs	r3, r3
 8000d38:	4440      	add	r0, r8
 8000d3a:	425f      	negs	r7, r3
 8000d3c:	19c7      	adds	r7, r0, r7
 8000d3e:	07fc      	lsls	r4, r7, #31
 8000d40:	0849      	lsrs	r1, r1, #1
 8000d42:	0016      	movs	r6, r2
 8000d44:	430c      	orrs	r4, r1
 8000d46:	087f      	lsrs	r7, r7, #1
 8000d48:	e6cf      	b.n	8000aea <__aeabi_dadd+0x24a>
 8000d4a:	1acc      	subs	r4, r1, r3
 8000d4c:	42a1      	cmp	r1, r4
 8000d4e:	41bf      	sbcs	r7, r7
 8000d50:	4643      	mov	r3, r8
 8000d52:	427f      	negs	r7, r7
 8000d54:	1a18      	subs	r0, r3, r0
 8000d56:	4655      	mov	r5, sl
 8000d58:	1bc7      	subs	r7, r0, r7
 8000d5a:	e5f7      	b.n	800094c <__aeabi_dadd+0xac>
 8000d5c:	08c9      	lsrs	r1, r1, #3
 8000d5e:	077b      	lsls	r3, r7, #29
 8000d60:	4655      	mov	r5, sl
 8000d62:	430b      	orrs	r3, r1
 8000d64:	08f8      	lsrs	r0, r7, #3
 8000d66:	e6c8      	b.n	8000afa <__aeabi_dadd+0x25a>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_dadd+0x4ce>
 8000d6c:	e081      	b.n	8000e72 <__aeabi_dadd+0x5d2>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	430b      	orrs	r3, r1
 8000d72:	d115      	bne.n	8000da0 <__aeabi_dadd+0x500>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	2500      	movs	r5, #0
 8000d78:	0300      	lsls	r0, r0, #12
 8000d7a:	e6e3      	b.n	8000b44 <__aeabi_dadd+0x2a4>
 8000d7c:	1a5c      	subs	r4, r3, r1
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	419b      	sbcs	r3, r3
 8000d82:	1bc7      	subs	r7, r0, r7
 8000d84:	425b      	negs	r3, r3
 8000d86:	2601      	movs	r6, #1
 8000d88:	1aff      	subs	r7, r7, r3
 8000d8a:	e5da      	b.n	8000942 <__aeabi_dadd+0xa2>
 8000d8c:	0742      	lsls	r2, r0, #29
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	08c0      	lsrs	r0, r0, #3
 8000d94:	e6d2      	b.n	8000b3c <__aeabi_dadd+0x29c>
 8000d96:	0742      	lsls	r2, r0, #29
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	08c0      	lsrs	r0, r0, #3
 8000d9e:	e6ac      	b.n	8000afa <__aeabi_dadd+0x25a>
 8000da0:	4643      	mov	r3, r8
 8000da2:	4642      	mov	r2, r8
 8000da4:	08c9      	lsrs	r1, r1, #3
 8000da6:	075b      	lsls	r3, r3, #29
 8000da8:	4655      	mov	r5, sl
 8000daa:	430b      	orrs	r3, r1
 8000dac:	08d0      	lsrs	r0, r2, #3
 8000dae:	e6c5      	b.n	8000b3c <__aeabi_dadd+0x29c>
 8000db0:	4643      	mov	r3, r8
 8000db2:	4642      	mov	r2, r8
 8000db4:	075b      	lsls	r3, r3, #29
 8000db6:	08c9      	lsrs	r1, r1, #3
 8000db8:	430b      	orrs	r3, r1
 8000dba:	08d0      	lsrs	r0, r2, #3
 8000dbc:	e6be      	b.n	8000b3c <__aeabi_dadd+0x29c>
 8000dbe:	4303      	orrs	r3, r0
 8000dc0:	001c      	movs	r4, r3
 8000dc2:	1e63      	subs	r3, r4, #1
 8000dc4:	419c      	sbcs	r4, r3
 8000dc6:	e6fc      	b.n	8000bc2 <__aeabi_dadd+0x322>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	3c20      	subs	r4, #32
 8000dcc:	40e2      	lsrs	r2, r4
 8000dce:	0014      	movs	r4, r2
 8000dd0:	4662      	mov	r2, ip
 8000dd2:	2a20      	cmp	r2, #32
 8000dd4:	d003      	beq.n	8000dde <__aeabi_dadd+0x53e>
 8000dd6:	2540      	movs	r5, #64	; 0x40
 8000dd8:	1aad      	subs	r5, r5, r2
 8000dda:	40a8      	lsls	r0, r5
 8000ddc:	4303      	orrs	r3, r0
 8000dde:	1e58      	subs	r0, r3, #1
 8000de0:	4183      	sbcs	r3, r0
 8000de2:	4323      	orrs	r3, r4
 8000de4:	e775      	b.n	8000cd2 <__aeabi_dadd+0x432>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d0e2      	beq.n	8000db0 <__aeabi_dadd+0x510>
 8000dea:	003a      	movs	r2, r7
 8000dec:	430a      	orrs	r2, r1
 8000dee:	d0cd      	beq.n	8000d8c <__aeabi_dadd+0x4ec>
 8000df0:	0742      	lsls	r2, r0, #29
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	08c0      	lsrs	r0, r0, #3
 8000dfa:	0312      	lsls	r2, r2, #12
 8000dfc:	4210      	tst	r0, r2
 8000dfe:	d006      	beq.n	8000e0e <__aeabi_dadd+0x56e>
 8000e00:	08fc      	lsrs	r4, r7, #3
 8000e02:	4214      	tst	r4, r2
 8000e04:	d103      	bne.n	8000e0e <__aeabi_dadd+0x56e>
 8000e06:	0020      	movs	r0, r4
 8000e08:	08cb      	lsrs	r3, r1, #3
 8000e0a:	077a      	lsls	r2, r7, #29
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	0f5a      	lsrs	r2, r3, #29
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	0752      	lsls	r2, r2, #29
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	e690      	b.n	8000b3c <__aeabi_dadd+0x29c>
 8000e1a:	4643      	mov	r3, r8
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x582>
 8000e20:	e709      	b.n	8000c36 <__aeabi_dadd+0x396>
 8000e22:	4643      	mov	r3, r8
 8000e24:	4642      	mov	r2, r8
 8000e26:	08c9      	lsrs	r1, r1, #3
 8000e28:	075b      	lsls	r3, r3, #29
 8000e2a:	4655      	mov	r5, sl
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	08d0      	lsrs	r0, r2, #3
 8000e30:	e666      	b.n	8000b00 <__aeabi_dadd+0x260>
 8000e32:	1acc      	subs	r4, r1, r3
 8000e34:	42a1      	cmp	r1, r4
 8000e36:	4189      	sbcs	r1, r1
 8000e38:	1a3f      	subs	r7, r7, r0
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	4655      	mov	r5, sl
 8000e3e:	2601      	movs	r6, #1
 8000e40:	1a7f      	subs	r7, r7, r1
 8000e42:	e57e      	b.n	8000942 <__aeabi_dadd+0xa2>
 8000e44:	4642      	mov	r2, r8
 8000e46:	1a5c      	subs	r4, r3, r1
 8000e48:	1a87      	subs	r7, r0, r2
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	4192      	sbcs	r2, r2
 8000e4e:	4252      	negs	r2, r2
 8000e50:	1abf      	subs	r7, r7, r2
 8000e52:	023a      	lsls	r2, r7, #8
 8000e54:	d53d      	bpl.n	8000ed2 <__aeabi_dadd+0x632>
 8000e56:	1acc      	subs	r4, r1, r3
 8000e58:	42a1      	cmp	r1, r4
 8000e5a:	4189      	sbcs	r1, r1
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	4249      	negs	r1, r1
 8000e60:	1a1f      	subs	r7, r3, r0
 8000e62:	4655      	mov	r5, sl
 8000e64:	1a7f      	subs	r7, r7, r1
 8000e66:	e595      	b.n	8000994 <__aeabi_dadd+0xf4>
 8000e68:	077b      	lsls	r3, r7, #29
 8000e6a:	08c9      	lsrs	r1, r1, #3
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	08f8      	lsrs	r0, r7, #3
 8000e70:	e643      	b.n	8000afa <__aeabi_dadd+0x25a>
 8000e72:	4644      	mov	r4, r8
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	430c      	orrs	r4, r1
 8000e78:	d130      	bne.n	8000edc <__aeabi_dadd+0x63c>
 8000e7a:	0742      	lsls	r2, r0, #29
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	e65c      	b.n	8000b3c <__aeabi_dadd+0x29c>
 8000e82:	077b      	lsls	r3, r7, #29
 8000e84:	08c9      	lsrs	r1, r1, #3
 8000e86:	430b      	orrs	r3, r1
 8000e88:	08f8      	lsrs	r0, r7, #3
 8000e8a:	e639      	b.n	8000b00 <__aeabi_dadd+0x260>
 8000e8c:	185c      	adds	r4, r3, r1
 8000e8e:	429c      	cmp	r4, r3
 8000e90:	419b      	sbcs	r3, r3
 8000e92:	4440      	add	r0, r8
 8000e94:	425b      	negs	r3, r3
 8000e96:	18c7      	adds	r7, r0, r3
 8000e98:	023b      	lsls	r3, r7, #8
 8000e9a:	d400      	bmi.n	8000e9e <__aeabi_dadd+0x5fe>
 8000e9c:	e625      	b.n	8000aea <__aeabi_dadd+0x24a>
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <__aeabi_dadd+0x674>)
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	401f      	ands	r7, r3
 8000ea4:	e621      	b.n	8000aea <__aeabi_dadd+0x24a>
 8000ea6:	0004      	movs	r4, r0
 8000ea8:	3a20      	subs	r2, #32
 8000eaa:	40d4      	lsrs	r4, r2
 8000eac:	4662      	mov	r2, ip
 8000eae:	2a20      	cmp	r2, #32
 8000eb0:	d004      	beq.n	8000ebc <__aeabi_dadd+0x61c>
 8000eb2:	2240      	movs	r2, #64	; 0x40
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	1b92      	subs	r2, r2, r6
 8000eb8:	4090      	lsls	r0, r2
 8000eba:	4303      	orrs	r3, r0
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	4193      	sbcs	r3, r2
 8000ec0:	431c      	orrs	r4, r3
 8000ec2:	e67e      	b.n	8000bc2 <__aeabi_dadd+0x322>
 8000ec4:	185c      	adds	r4, r3, r1
 8000ec6:	428c      	cmp	r4, r1
 8000ec8:	4189      	sbcs	r1, r1
 8000eca:	4440      	add	r0, r8
 8000ecc:	4249      	negs	r1, r1
 8000ece:	1847      	adds	r7, r0, r1
 8000ed0:	e6dd      	b.n	8000c8e <__aeabi_dadd+0x3ee>
 8000ed2:	0023      	movs	r3, r4
 8000ed4:	433b      	orrs	r3, r7
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0x63a>
 8000ed8:	e6ad      	b.n	8000c36 <__aeabi_dadd+0x396>
 8000eda:	e606      	b.n	8000aea <__aeabi_dadd+0x24a>
 8000edc:	0744      	lsls	r4, r0, #29
 8000ede:	4323      	orrs	r3, r4
 8000ee0:	2480      	movs	r4, #128	; 0x80
 8000ee2:	08c0      	lsrs	r0, r0, #3
 8000ee4:	0324      	lsls	r4, r4, #12
 8000ee6:	4220      	tst	r0, r4
 8000ee8:	d008      	beq.n	8000efc <__aeabi_dadd+0x65c>
 8000eea:	4642      	mov	r2, r8
 8000eec:	08d6      	lsrs	r6, r2, #3
 8000eee:	4226      	tst	r6, r4
 8000ef0:	d104      	bne.n	8000efc <__aeabi_dadd+0x65c>
 8000ef2:	4655      	mov	r5, sl
 8000ef4:	0030      	movs	r0, r6
 8000ef6:	08cb      	lsrs	r3, r1, #3
 8000ef8:	0751      	lsls	r1, r2, #29
 8000efa:	430b      	orrs	r3, r1
 8000efc:	0f5a      	lsrs	r2, r3, #29
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	0752      	lsls	r2, r2, #29
 8000f04:	4313      	orrs	r3, r2
 8000f06:	e619      	b.n	8000b3c <__aeabi_dadd+0x29c>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4a01      	ldr	r2, [pc, #4]	; (8000f10 <__aeabi_dadd+0x670>)
 8000f0c:	001f      	movs	r7, r3
 8000f0e:	e55e      	b.n	80009ce <__aeabi_dadd+0x12e>
 8000f10:	000007ff 	.word	0x000007ff
 8000f14:	ff7fffff 	.word	0xff7fffff

08000f18 <__aeabi_ddiv>:
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	4657      	mov	r7, sl
 8000f1c:	464e      	mov	r6, r9
 8000f1e:	4645      	mov	r5, r8
 8000f20:	46de      	mov	lr, fp
 8000f22:	b5e0      	push	{r5, r6, r7, lr}
 8000f24:	4681      	mov	r9, r0
 8000f26:	0005      	movs	r5, r0
 8000f28:	030c      	lsls	r4, r1, #12
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	4692      	mov	sl, r2
 8000f2e:	001f      	movs	r7, r3
 8000f30:	b085      	sub	sp, #20
 8000f32:	0b24      	lsrs	r4, r4, #12
 8000f34:	0d40      	lsrs	r0, r0, #21
 8000f36:	0fce      	lsrs	r6, r1, #31
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x26>
 8000f3c:	e156      	b.n	80011ec <__aeabi_ddiv+0x2d4>
 8000f3e:	4bd4      	ldr	r3, [pc, #848]	; (8001290 <__aeabi_ddiv+0x378>)
 8000f40:	4298      	cmp	r0, r3
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x2e>
 8000f44:	e172      	b.n	800122c <__aeabi_ddiv+0x314>
 8000f46:	0f6b      	lsrs	r3, r5, #29
 8000f48:	00e4      	lsls	r4, r4, #3
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	041b      	lsls	r3, r3, #16
 8000f50:	4323      	orrs	r3, r4
 8000f52:	4698      	mov	r8, r3
 8000f54:	4bcf      	ldr	r3, [pc, #828]	; (8001294 <__aeabi_ddiv+0x37c>)
 8000f56:	00ed      	lsls	r5, r5, #3
 8000f58:	469b      	mov	fp, r3
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	4483      	add	fp, r0
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	033c      	lsls	r4, r7, #12
 8000f64:	007b      	lsls	r3, r7, #1
 8000f66:	4650      	mov	r0, sl
 8000f68:	0b24      	lsrs	r4, r4, #12
 8000f6a:	0d5b      	lsrs	r3, r3, #21
 8000f6c:	0fff      	lsrs	r7, r7, #31
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x5c>
 8000f72:	e11f      	b.n	80011b4 <__aeabi_ddiv+0x29c>
 8000f74:	4ac6      	ldr	r2, [pc, #792]	; (8001290 <__aeabi_ddiv+0x378>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x64>
 8000f7a:	e162      	b.n	8001242 <__aeabi_ddiv+0x32a>
 8000f7c:	49c5      	ldr	r1, [pc, #788]	; (8001294 <__aeabi_ddiv+0x37c>)
 8000f7e:	0f42      	lsrs	r2, r0, #29
 8000f80:	468c      	mov	ip, r1
 8000f82:	00e4      	lsls	r4, r4, #3
 8000f84:	4659      	mov	r1, fp
 8000f86:	4314      	orrs	r4, r2
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	4463      	add	r3, ip
 8000f8c:	0412      	lsls	r2, r2, #16
 8000f8e:	1acb      	subs	r3, r1, r3
 8000f90:	4314      	orrs	r4, r2
 8000f92:	469b      	mov	fp, r3
 8000f94:	00c2      	lsls	r2, r0, #3
 8000f96:	2000      	movs	r0, #0
 8000f98:	0033      	movs	r3, r6
 8000f9a:	407b      	eors	r3, r7
 8000f9c:	469a      	mov	sl, r3
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d827      	bhi.n	8000ff4 <__aeabi_ddiv+0xdc>
 8000fa4:	49bc      	ldr	r1, [pc, #752]	; (8001298 <__aeabi_ddiv+0x380>)
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	58cb      	ldr	r3, [r1, r3]
 8000faa:	469f      	mov	pc, r3
 8000fac:	46b2      	mov	sl, r6
 8000fae:	9b00      	ldr	r3, [sp, #0]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d016      	beq.n	8000fe2 <__aeabi_ddiv+0xca>
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d100      	bne.n	8000fba <__aeabi_ddiv+0xa2>
 8000fb8:	e28e      	b.n	80014d8 <__aeabi_ddiv+0x5c0>
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0xa8>
 8000fbe:	e0d9      	b.n	8001174 <__aeabi_ddiv+0x25c>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	4652      	mov	r2, sl
 8000fc8:	051b      	lsls	r3, r3, #20
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	07d2      	lsls	r2, r2, #31
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	0028      	movs	r0, r5
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	b005      	add	sp, #20
 8000fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd8:	46bb      	mov	fp, r7
 8000fda:	46b2      	mov	sl, r6
 8000fdc:	46a9      	mov	r9, r5
 8000fde:	46a0      	mov	r8, r4
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	4baa      	ldr	r3, [pc, #680]	; (8001290 <__aeabi_ddiv+0x378>)
 8000fe8:	e7ed      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 8000fea:	46ba      	mov	sl, r7
 8000fec:	46a0      	mov	r8, r4
 8000fee:	0015      	movs	r5, r2
 8000ff0:	9000      	str	r0, [sp, #0]
 8000ff2:	e7dc      	b.n	8000fae <__aeabi_ddiv+0x96>
 8000ff4:	4544      	cmp	r4, r8
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0xe2>
 8000ff8:	e1c7      	b.n	800138a <__aeabi_ddiv+0x472>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0xe6>
 8000ffc:	e1c2      	b.n	8001384 <__aeabi_ddiv+0x46c>
 8000ffe:	2301      	movs	r3, #1
 8001000:	425b      	negs	r3, r3
 8001002:	469c      	mov	ip, r3
 8001004:	002e      	movs	r6, r5
 8001006:	4640      	mov	r0, r8
 8001008:	2500      	movs	r5, #0
 800100a:	44e3      	add	fp, ip
 800100c:	0223      	lsls	r3, r4, #8
 800100e:	0e14      	lsrs	r4, r2, #24
 8001010:	431c      	orrs	r4, r3
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	4699      	mov	r9, r3
 8001016:	0423      	lsls	r3, r4, #16
 8001018:	0c1f      	lsrs	r7, r3, #16
 800101a:	0212      	lsls	r2, r2, #8
 800101c:	4649      	mov	r1, r9
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	9701      	str	r7, [sp, #4]
 8001022:	f7ff f8f5 	bl	8000210 <__aeabi_uidivmod>
 8001026:	0002      	movs	r2, r0
 8001028:	437a      	muls	r2, r7
 800102a:	040b      	lsls	r3, r1, #16
 800102c:	0c31      	lsrs	r1, r6, #16
 800102e:	4680      	mov	r8, r0
 8001030:	4319      	orrs	r1, r3
 8001032:	428a      	cmp	r2, r1
 8001034:	d907      	bls.n	8001046 <__aeabi_ddiv+0x12e>
 8001036:	2301      	movs	r3, #1
 8001038:	425b      	negs	r3, r3
 800103a:	469c      	mov	ip, r3
 800103c:	1909      	adds	r1, r1, r4
 800103e:	44e0      	add	r8, ip
 8001040:	428c      	cmp	r4, r1
 8001042:	d800      	bhi.n	8001046 <__aeabi_ddiv+0x12e>
 8001044:	e207      	b.n	8001456 <__aeabi_ddiv+0x53e>
 8001046:	1a88      	subs	r0, r1, r2
 8001048:	4649      	mov	r1, r9
 800104a:	f7ff f8e1 	bl	8000210 <__aeabi_uidivmod>
 800104e:	0409      	lsls	r1, r1, #16
 8001050:	468c      	mov	ip, r1
 8001052:	0431      	lsls	r1, r6, #16
 8001054:	4666      	mov	r6, ip
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	0c09      	lsrs	r1, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0003      	movs	r3, r0
 800105e:	4331      	orrs	r1, r6
 8001060:	428a      	cmp	r2, r1
 8001062:	d904      	bls.n	800106e <__aeabi_ddiv+0x156>
 8001064:	1909      	adds	r1, r1, r4
 8001066:	3b01      	subs	r3, #1
 8001068:	428c      	cmp	r4, r1
 800106a:	d800      	bhi.n	800106e <__aeabi_ddiv+0x156>
 800106c:	e1ed      	b.n	800144a <__aeabi_ddiv+0x532>
 800106e:	1a88      	subs	r0, r1, r2
 8001070:	4642      	mov	r2, r8
 8001072:	0412      	lsls	r2, r2, #16
 8001074:	431a      	orrs	r2, r3
 8001076:	4690      	mov	r8, r2
 8001078:	4641      	mov	r1, r8
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	040e      	lsls	r6, r1, #16
 800107e:	0c1b      	lsrs	r3, r3, #16
 8001080:	001f      	movs	r7, r3
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	0c36      	lsrs	r6, r6, #16
 8001088:	041b      	lsls	r3, r3, #16
 800108a:	0c19      	lsrs	r1, r3, #16
 800108c:	000b      	movs	r3, r1
 800108e:	4373      	muls	r3, r6
 8001090:	0c12      	lsrs	r2, r2, #16
 8001092:	437e      	muls	r6, r7
 8001094:	9103      	str	r1, [sp, #12]
 8001096:	4351      	muls	r1, r2
 8001098:	437a      	muls	r2, r7
 800109a:	0c1f      	lsrs	r7, r3, #16
 800109c:	46bc      	mov	ip, r7
 800109e:	1876      	adds	r6, r6, r1
 80010a0:	4466      	add	r6, ip
 80010a2:	42b1      	cmp	r1, r6
 80010a4:	d903      	bls.n	80010ae <__aeabi_ddiv+0x196>
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	0249      	lsls	r1, r1, #9
 80010aa:	468c      	mov	ip, r1
 80010ac:	4462      	add	r2, ip
 80010ae:	0c31      	lsrs	r1, r6, #16
 80010b0:	188a      	adds	r2, r1, r2
 80010b2:	0431      	lsls	r1, r6, #16
 80010b4:	041e      	lsls	r6, r3, #16
 80010b6:	0c36      	lsrs	r6, r6, #16
 80010b8:	198e      	adds	r6, r1, r6
 80010ba:	4290      	cmp	r0, r2
 80010bc:	d302      	bcc.n	80010c4 <__aeabi_ddiv+0x1ac>
 80010be:	d112      	bne.n	80010e6 <__aeabi_ddiv+0x1ce>
 80010c0:	42b5      	cmp	r5, r6
 80010c2:	d210      	bcs.n	80010e6 <__aeabi_ddiv+0x1ce>
 80010c4:	4643      	mov	r3, r8
 80010c6:	1e59      	subs	r1, r3, #1
 80010c8:	9b00      	ldr	r3, [sp, #0]
 80010ca:	469c      	mov	ip, r3
 80010cc:	4465      	add	r5, ip
 80010ce:	001f      	movs	r7, r3
 80010d0:	429d      	cmp	r5, r3
 80010d2:	419b      	sbcs	r3, r3
 80010d4:	425b      	negs	r3, r3
 80010d6:	191b      	adds	r3, r3, r4
 80010d8:	18c0      	adds	r0, r0, r3
 80010da:	4284      	cmp	r4, r0
 80010dc:	d200      	bcs.n	80010e0 <__aeabi_ddiv+0x1c8>
 80010de:	e1a0      	b.n	8001422 <__aeabi_ddiv+0x50a>
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x1cc>
 80010e2:	e19b      	b.n	800141c <__aeabi_ddiv+0x504>
 80010e4:	4688      	mov	r8, r1
 80010e6:	1bae      	subs	r6, r5, r6
 80010e8:	42b5      	cmp	r5, r6
 80010ea:	41ad      	sbcs	r5, r5
 80010ec:	1a80      	subs	r0, r0, r2
 80010ee:	426d      	negs	r5, r5
 80010f0:	1b40      	subs	r0, r0, r5
 80010f2:	4284      	cmp	r4, r0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_ddiv+0x1e0>
 80010f6:	e1d5      	b.n	80014a4 <__aeabi_ddiv+0x58c>
 80010f8:	4649      	mov	r1, r9
 80010fa:	f7ff f889 	bl	8000210 <__aeabi_uidivmod>
 80010fe:	9a01      	ldr	r2, [sp, #4]
 8001100:	040b      	lsls	r3, r1, #16
 8001102:	4342      	muls	r2, r0
 8001104:	0c31      	lsrs	r1, r6, #16
 8001106:	0005      	movs	r5, r0
 8001108:	4319      	orrs	r1, r3
 800110a:	428a      	cmp	r2, r1
 800110c:	d900      	bls.n	8001110 <__aeabi_ddiv+0x1f8>
 800110e:	e16c      	b.n	80013ea <__aeabi_ddiv+0x4d2>
 8001110:	1a88      	subs	r0, r1, r2
 8001112:	4649      	mov	r1, r9
 8001114:	f7ff f87c 	bl	8000210 <__aeabi_uidivmod>
 8001118:	9a01      	ldr	r2, [sp, #4]
 800111a:	0436      	lsls	r6, r6, #16
 800111c:	4342      	muls	r2, r0
 800111e:	0409      	lsls	r1, r1, #16
 8001120:	0c36      	lsrs	r6, r6, #16
 8001122:	0003      	movs	r3, r0
 8001124:	430e      	orrs	r6, r1
 8001126:	42b2      	cmp	r2, r6
 8001128:	d900      	bls.n	800112c <__aeabi_ddiv+0x214>
 800112a:	e153      	b.n	80013d4 <__aeabi_ddiv+0x4bc>
 800112c:	9803      	ldr	r0, [sp, #12]
 800112e:	1ab6      	subs	r6, r6, r2
 8001130:	0002      	movs	r2, r0
 8001132:	042d      	lsls	r5, r5, #16
 8001134:	431d      	orrs	r5, r3
 8001136:	9f02      	ldr	r7, [sp, #8]
 8001138:	042b      	lsls	r3, r5, #16
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	435a      	muls	r2, r3
 800113e:	437b      	muls	r3, r7
 8001140:	469c      	mov	ip, r3
 8001142:	0c29      	lsrs	r1, r5, #16
 8001144:	4348      	muls	r0, r1
 8001146:	0c13      	lsrs	r3, r2, #16
 8001148:	4484      	add	ip, r0
 800114a:	4463      	add	r3, ip
 800114c:	4379      	muls	r1, r7
 800114e:	4298      	cmp	r0, r3
 8001150:	d903      	bls.n	800115a <__aeabi_ddiv+0x242>
 8001152:	2080      	movs	r0, #128	; 0x80
 8001154:	0240      	lsls	r0, r0, #9
 8001156:	4684      	mov	ip, r0
 8001158:	4461      	add	r1, ip
 800115a:	0c18      	lsrs	r0, r3, #16
 800115c:	0412      	lsls	r2, r2, #16
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	0c12      	lsrs	r2, r2, #16
 8001162:	1841      	adds	r1, r0, r1
 8001164:	189b      	adds	r3, r3, r2
 8001166:	428e      	cmp	r6, r1
 8001168:	d200      	bcs.n	800116c <__aeabi_ddiv+0x254>
 800116a:	e0ff      	b.n	800136c <__aeabi_ddiv+0x454>
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0x258>
 800116e:	e0fa      	b.n	8001366 <__aeabi_ddiv+0x44e>
 8001170:	2301      	movs	r3, #1
 8001172:	431d      	orrs	r5, r3
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <__aeabi_ddiv+0x384>)
 8001176:	445a      	add	r2, fp
 8001178:	2a00      	cmp	r2, #0
 800117a:	dc00      	bgt.n	800117e <__aeabi_ddiv+0x266>
 800117c:	e0aa      	b.n	80012d4 <__aeabi_ddiv+0x3bc>
 800117e:	076b      	lsls	r3, r5, #29
 8001180:	d000      	beq.n	8001184 <__aeabi_ddiv+0x26c>
 8001182:	e13d      	b.n	8001400 <__aeabi_ddiv+0x4e8>
 8001184:	08ed      	lsrs	r5, r5, #3
 8001186:	4643      	mov	r3, r8
 8001188:	01db      	lsls	r3, r3, #7
 800118a:	d506      	bpl.n	800119a <__aeabi_ddiv+0x282>
 800118c:	4642      	mov	r2, r8
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <__aeabi_ddiv+0x388>)
 8001190:	401a      	ands	r2, r3
 8001192:	4690      	mov	r8, r2
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	00d2      	lsls	r2, r2, #3
 8001198:	445a      	add	r2, fp
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <__aeabi_ddiv+0x38c>)
 800119c:	429a      	cmp	r2, r3
 800119e:	dd00      	ble.n	80011a2 <__aeabi_ddiv+0x28a>
 80011a0:	e71f      	b.n	8000fe2 <__aeabi_ddiv+0xca>
 80011a2:	4643      	mov	r3, r8
 80011a4:	075b      	lsls	r3, r3, #29
 80011a6:	431d      	orrs	r5, r3
 80011a8:	4643      	mov	r3, r8
 80011aa:	0552      	lsls	r2, r2, #21
 80011ac:	025c      	lsls	r4, r3, #9
 80011ae:	0b24      	lsrs	r4, r4, #12
 80011b0:	0d53      	lsrs	r3, r2, #21
 80011b2:	e708      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 80011b4:	4652      	mov	r2, sl
 80011b6:	4322      	orrs	r2, r4
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x2a4>
 80011ba:	e07b      	b.n	80012b4 <__aeabi_ddiv+0x39c>
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_ddiv+0x2aa>
 80011c0:	e0fa      	b.n	80013b8 <__aeabi_ddiv+0x4a0>
 80011c2:	0020      	movs	r0, r4
 80011c4:	f001 f952 	bl	800246c <__clzsi2>
 80011c8:	0002      	movs	r2, r0
 80011ca:	3a0b      	subs	r2, #11
 80011cc:	231d      	movs	r3, #29
 80011ce:	0001      	movs	r1, r0
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	4652      	mov	r2, sl
 80011d4:	3908      	subs	r1, #8
 80011d6:	40da      	lsrs	r2, r3
 80011d8:	408c      	lsls	r4, r1
 80011da:	4314      	orrs	r4, r2
 80011dc:	4652      	mov	r2, sl
 80011de:	408a      	lsls	r2, r1
 80011e0:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <__aeabi_ddiv+0x390>)
 80011e2:	4458      	add	r0, fp
 80011e4:	469b      	mov	fp, r3
 80011e6:	4483      	add	fp, r0
 80011e8:	2000      	movs	r0, #0
 80011ea:	e6d5      	b.n	8000f98 <__aeabi_ddiv+0x80>
 80011ec:	464b      	mov	r3, r9
 80011ee:	4323      	orrs	r3, r4
 80011f0:	4698      	mov	r8, r3
 80011f2:	d044      	beq.n	800127e <__aeabi_ddiv+0x366>
 80011f4:	2c00      	cmp	r4, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x2e2>
 80011f8:	e0ce      	b.n	8001398 <__aeabi_ddiv+0x480>
 80011fa:	0020      	movs	r0, r4
 80011fc:	f001 f936 	bl	800246c <__clzsi2>
 8001200:	0001      	movs	r1, r0
 8001202:	0002      	movs	r2, r0
 8001204:	390b      	subs	r1, #11
 8001206:	231d      	movs	r3, #29
 8001208:	1a5b      	subs	r3, r3, r1
 800120a:	4649      	mov	r1, r9
 800120c:	0010      	movs	r0, r2
 800120e:	40d9      	lsrs	r1, r3
 8001210:	3808      	subs	r0, #8
 8001212:	4084      	lsls	r4, r0
 8001214:	000b      	movs	r3, r1
 8001216:	464d      	mov	r5, r9
 8001218:	4323      	orrs	r3, r4
 800121a:	4698      	mov	r8, r3
 800121c:	4085      	lsls	r5, r0
 800121e:	4823      	ldr	r0, [pc, #140]	; (80012ac <__aeabi_ddiv+0x394>)
 8001220:	1a83      	subs	r3, r0, r2
 8001222:	469b      	mov	fp, r3
 8001224:	2300      	movs	r3, #0
 8001226:	4699      	mov	r9, r3
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	e69a      	b.n	8000f62 <__aeabi_ddiv+0x4a>
 800122c:	464b      	mov	r3, r9
 800122e:	4323      	orrs	r3, r4
 8001230:	4698      	mov	r8, r3
 8001232:	d11d      	bne.n	8001270 <__aeabi_ddiv+0x358>
 8001234:	2308      	movs	r3, #8
 8001236:	4699      	mov	r9, r3
 8001238:	3b06      	subs	r3, #6
 800123a:	2500      	movs	r5, #0
 800123c:	4683      	mov	fp, r0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	e68f      	b.n	8000f62 <__aeabi_ddiv+0x4a>
 8001242:	4652      	mov	r2, sl
 8001244:	4322      	orrs	r2, r4
 8001246:	d109      	bne.n	800125c <__aeabi_ddiv+0x344>
 8001248:	2302      	movs	r3, #2
 800124a:	4649      	mov	r1, r9
 800124c:	4319      	orrs	r1, r3
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <__aeabi_ddiv+0x398>)
 8001250:	4689      	mov	r9, r1
 8001252:	469c      	mov	ip, r3
 8001254:	2400      	movs	r4, #0
 8001256:	2002      	movs	r0, #2
 8001258:	44e3      	add	fp, ip
 800125a:	e69d      	b.n	8000f98 <__aeabi_ddiv+0x80>
 800125c:	2303      	movs	r3, #3
 800125e:	464a      	mov	r2, r9
 8001260:	431a      	orrs	r2, r3
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <__aeabi_ddiv+0x398>)
 8001264:	4691      	mov	r9, r2
 8001266:	469c      	mov	ip, r3
 8001268:	4652      	mov	r2, sl
 800126a:	2003      	movs	r0, #3
 800126c:	44e3      	add	fp, ip
 800126e:	e693      	b.n	8000f98 <__aeabi_ddiv+0x80>
 8001270:	230c      	movs	r3, #12
 8001272:	4699      	mov	r9, r3
 8001274:	3b09      	subs	r3, #9
 8001276:	46a0      	mov	r8, r4
 8001278:	4683      	mov	fp, r0
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	e671      	b.n	8000f62 <__aeabi_ddiv+0x4a>
 800127e:	2304      	movs	r3, #4
 8001280:	4699      	mov	r9, r3
 8001282:	2300      	movs	r3, #0
 8001284:	469b      	mov	fp, r3
 8001286:	3301      	adds	r3, #1
 8001288:	2500      	movs	r5, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	e669      	b.n	8000f62 <__aeabi_ddiv+0x4a>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	000007ff 	.word	0x000007ff
 8001294:	fffffc01 	.word	0xfffffc01
 8001298:	08005f48 	.word	0x08005f48
 800129c:	000003ff 	.word	0x000003ff
 80012a0:	feffffff 	.word	0xfeffffff
 80012a4:	000007fe 	.word	0x000007fe
 80012a8:	000003f3 	.word	0x000003f3
 80012ac:	fffffc0d 	.word	0xfffffc0d
 80012b0:	fffff801 	.word	0xfffff801
 80012b4:	4649      	mov	r1, r9
 80012b6:	2301      	movs	r3, #1
 80012b8:	4319      	orrs	r1, r3
 80012ba:	4689      	mov	r9, r1
 80012bc:	2400      	movs	r4, #0
 80012be:	2001      	movs	r0, #1
 80012c0:	e66a      	b.n	8000f98 <__aeabi_ddiv+0x80>
 80012c2:	2300      	movs	r3, #0
 80012c4:	2480      	movs	r4, #128	; 0x80
 80012c6:	469a      	mov	sl, r3
 80012c8:	2500      	movs	r5, #0
 80012ca:	4b8a      	ldr	r3, [pc, #552]	; (80014f4 <__aeabi_ddiv+0x5dc>)
 80012cc:	0324      	lsls	r4, r4, #12
 80012ce:	e67a      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 80012d0:	2501      	movs	r5, #1
 80012d2:	426d      	negs	r5, r5
 80012d4:	2301      	movs	r3, #1
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	2b38      	cmp	r3, #56	; 0x38
 80012da:	dd00      	ble.n	80012de <__aeabi_ddiv+0x3c6>
 80012dc:	e670      	b.n	8000fc0 <__aeabi_ddiv+0xa8>
 80012de:	2b1f      	cmp	r3, #31
 80012e0:	dc00      	bgt.n	80012e4 <__aeabi_ddiv+0x3cc>
 80012e2:	e0bf      	b.n	8001464 <__aeabi_ddiv+0x54c>
 80012e4:	211f      	movs	r1, #31
 80012e6:	4249      	negs	r1, r1
 80012e8:	1a8a      	subs	r2, r1, r2
 80012ea:	4641      	mov	r1, r8
 80012ec:	40d1      	lsrs	r1, r2
 80012ee:	000a      	movs	r2, r1
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d004      	beq.n	80012fe <__aeabi_ddiv+0x3e6>
 80012f4:	4641      	mov	r1, r8
 80012f6:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <__aeabi_ddiv+0x5e0>)
 80012f8:	445b      	add	r3, fp
 80012fa:	4099      	lsls	r1, r3
 80012fc:	430d      	orrs	r5, r1
 80012fe:	1e6b      	subs	r3, r5, #1
 8001300:	419d      	sbcs	r5, r3
 8001302:	2307      	movs	r3, #7
 8001304:	432a      	orrs	r2, r5
 8001306:	001d      	movs	r5, r3
 8001308:	2400      	movs	r4, #0
 800130a:	4015      	ands	r5, r2
 800130c:	4213      	tst	r3, r2
 800130e:	d100      	bne.n	8001312 <__aeabi_ddiv+0x3fa>
 8001310:	e0d4      	b.n	80014bc <__aeabi_ddiv+0x5a4>
 8001312:	210f      	movs	r1, #15
 8001314:	2300      	movs	r3, #0
 8001316:	4011      	ands	r1, r2
 8001318:	2904      	cmp	r1, #4
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0x406>
 800131c:	e0cb      	b.n	80014b6 <__aeabi_ddiv+0x59e>
 800131e:	1d11      	adds	r1, r2, #4
 8001320:	4291      	cmp	r1, r2
 8001322:	4192      	sbcs	r2, r2
 8001324:	4252      	negs	r2, r2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	000a      	movs	r2, r1
 800132a:	0219      	lsls	r1, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_ddiv+0x418>
 800132e:	e0c2      	b.n	80014b6 <__aeabi_ddiv+0x59e>
 8001330:	2301      	movs	r3, #1
 8001332:	2400      	movs	r4, #0
 8001334:	2500      	movs	r5, #0
 8001336:	e646      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	4641      	mov	r1, r8
 800133c:	031b      	lsls	r3, r3, #12
 800133e:	4219      	tst	r1, r3
 8001340:	d008      	beq.n	8001354 <__aeabi_ddiv+0x43c>
 8001342:	421c      	tst	r4, r3
 8001344:	d106      	bne.n	8001354 <__aeabi_ddiv+0x43c>
 8001346:	431c      	orrs	r4, r3
 8001348:	0324      	lsls	r4, r4, #12
 800134a:	46ba      	mov	sl, r7
 800134c:	0015      	movs	r5, r2
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <__aeabi_ddiv+0x5dc>)
 8001350:	0b24      	lsrs	r4, r4, #12
 8001352:	e638      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 8001354:	2480      	movs	r4, #128	; 0x80
 8001356:	4643      	mov	r3, r8
 8001358:	0324      	lsls	r4, r4, #12
 800135a:	431c      	orrs	r4, r3
 800135c:	0324      	lsls	r4, r4, #12
 800135e:	46b2      	mov	sl, r6
 8001360:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <__aeabi_ddiv+0x5dc>)
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	e62f      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x454>
 800136a:	e703      	b.n	8001174 <__aeabi_ddiv+0x25c>
 800136c:	19a6      	adds	r6, r4, r6
 800136e:	1e68      	subs	r0, r5, #1
 8001370:	42a6      	cmp	r6, r4
 8001372:	d200      	bcs.n	8001376 <__aeabi_ddiv+0x45e>
 8001374:	e08d      	b.n	8001492 <__aeabi_ddiv+0x57a>
 8001376:	428e      	cmp	r6, r1
 8001378:	d200      	bcs.n	800137c <__aeabi_ddiv+0x464>
 800137a:	e0a3      	b.n	80014c4 <__aeabi_ddiv+0x5ac>
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x468>
 800137e:	e0b3      	b.n	80014e8 <__aeabi_ddiv+0x5d0>
 8001380:	0005      	movs	r5, r0
 8001382:	e6f5      	b.n	8001170 <__aeabi_ddiv+0x258>
 8001384:	42aa      	cmp	r2, r5
 8001386:	d900      	bls.n	800138a <__aeabi_ddiv+0x472>
 8001388:	e639      	b.n	8000ffe <__aeabi_ddiv+0xe6>
 800138a:	4643      	mov	r3, r8
 800138c:	07de      	lsls	r6, r3, #31
 800138e:	0858      	lsrs	r0, r3, #1
 8001390:	086b      	lsrs	r3, r5, #1
 8001392:	431e      	orrs	r6, r3
 8001394:	07ed      	lsls	r5, r5, #31
 8001396:	e639      	b.n	800100c <__aeabi_ddiv+0xf4>
 8001398:	4648      	mov	r0, r9
 800139a:	f001 f867 	bl	800246c <__clzsi2>
 800139e:	0001      	movs	r1, r0
 80013a0:	0002      	movs	r2, r0
 80013a2:	3115      	adds	r1, #21
 80013a4:	3220      	adds	r2, #32
 80013a6:	291c      	cmp	r1, #28
 80013a8:	dc00      	bgt.n	80013ac <__aeabi_ddiv+0x494>
 80013aa:	e72c      	b.n	8001206 <__aeabi_ddiv+0x2ee>
 80013ac:	464b      	mov	r3, r9
 80013ae:	3808      	subs	r0, #8
 80013b0:	4083      	lsls	r3, r0
 80013b2:	2500      	movs	r5, #0
 80013b4:	4698      	mov	r8, r3
 80013b6:	e732      	b.n	800121e <__aeabi_ddiv+0x306>
 80013b8:	f001 f858 	bl	800246c <__clzsi2>
 80013bc:	0003      	movs	r3, r0
 80013be:	001a      	movs	r2, r3
 80013c0:	3215      	adds	r2, #21
 80013c2:	3020      	adds	r0, #32
 80013c4:	2a1c      	cmp	r2, #28
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_ddiv+0x4b2>
 80013c8:	e700      	b.n	80011cc <__aeabi_ddiv+0x2b4>
 80013ca:	4654      	mov	r4, sl
 80013cc:	3b08      	subs	r3, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	409c      	lsls	r4, r3
 80013d2:	e705      	b.n	80011e0 <__aeabi_ddiv+0x2c8>
 80013d4:	1936      	adds	r6, r6, r4
 80013d6:	3b01      	subs	r3, #1
 80013d8:	42b4      	cmp	r4, r6
 80013da:	d900      	bls.n	80013de <__aeabi_ddiv+0x4c6>
 80013dc:	e6a6      	b.n	800112c <__aeabi_ddiv+0x214>
 80013de:	42b2      	cmp	r2, r6
 80013e0:	d800      	bhi.n	80013e4 <__aeabi_ddiv+0x4cc>
 80013e2:	e6a3      	b.n	800112c <__aeabi_ddiv+0x214>
 80013e4:	1e83      	subs	r3, r0, #2
 80013e6:	1936      	adds	r6, r6, r4
 80013e8:	e6a0      	b.n	800112c <__aeabi_ddiv+0x214>
 80013ea:	1909      	adds	r1, r1, r4
 80013ec:	3d01      	subs	r5, #1
 80013ee:	428c      	cmp	r4, r1
 80013f0:	d900      	bls.n	80013f4 <__aeabi_ddiv+0x4dc>
 80013f2:	e68d      	b.n	8001110 <__aeabi_ddiv+0x1f8>
 80013f4:	428a      	cmp	r2, r1
 80013f6:	d800      	bhi.n	80013fa <__aeabi_ddiv+0x4e2>
 80013f8:	e68a      	b.n	8001110 <__aeabi_ddiv+0x1f8>
 80013fa:	1e85      	subs	r5, r0, #2
 80013fc:	1909      	adds	r1, r1, r4
 80013fe:	e687      	b.n	8001110 <__aeabi_ddiv+0x1f8>
 8001400:	230f      	movs	r3, #15
 8001402:	402b      	ands	r3, r5
 8001404:	2b04      	cmp	r3, #4
 8001406:	d100      	bne.n	800140a <__aeabi_ddiv+0x4f2>
 8001408:	e6bc      	b.n	8001184 <__aeabi_ddiv+0x26c>
 800140a:	2305      	movs	r3, #5
 800140c:	425b      	negs	r3, r3
 800140e:	42ab      	cmp	r3, r5
 8001410:	419b      	sbcs	r3, r3
 8001412:	3504      	adds	r5, #4
 8001414:	425b      	negs	r3, r3
 8001416:	08ed      	lsrs	r5, r5, #3
 8001418:	4498      	add	r8, r3
 800141a:	e6b4      	b.n	8001186 <__aeabi_ddiv+0x26e>
 800141c:	42af      	cmp	r7, r5
 800141e:	d900      	bls.n	8001422 <__aeabi_ddiv+0x50a>
 8001420:	e660      	b.n	80010e4 <__aeabi_ddiv+0x1cc>
 8001422:	4282      	cmp	r2, r0
 8001424:	d804      	bhi.n	8001430 <__aeabi_ddiv+0x518>
 8001426:	d000      	beq.n	800142a <__aeabi_ddiv+0x512>
 8001428:	e65c      	b.n	80010e4 <__aeabi_ddiv+0x1cc>
 800142a:	42ae      	cmp	r6, r5
 800142c:	d800      	bhi.n	8001430 <__aeabi_ddiv+0x518>
 800142e:	e659      	b.n	80010e4 <__aeabi_ddiv+0x1cc>
 8001430:	2302      	movs	r3, #2
 8001432:	425b      	negs	r3, r3
 8001434:	469c      	mov	ip, r3
 8001436:	9b00      	ldr	r3, [sp, #0]
 8001438:	44e0      	add	r8, ip
 800143a:	469c      	mov	ip, r3
 800143c:	4465      	add	r5, ip
 800143e:	429d      	cmp	r5, r3
 8001440:	419b      	sbcs	r3, r3
 8001442:	425b      	negs	r3, r3
 8001444:	191b      	adds	r3, r3, r4
 8001446:	18c0      	adds	r0, r0, r3
 8001448:	e64d      	b.n	80010e6 <__aeabi_ddiv+0x1ce>
 800144a:	428a      	cmp	r2, r1
 800144c:	d800      	bhi.n	8001450 <__aeabi_ddiv+0x538>
 800144e:	e60e      	b.n	800106e <__aeabi_ddiv+0x156>
 8001450:	1e83      	subs	r3, r0, #2
 8001452:	1909      	adds	r1, r1, r4
 8001454:	e60b      	b.n	800106e <__aeabi_ddiv+0x156>
 8001456:	428a      	cmp	r2, r1
 8001458:	d800      	bhi.n	800145c <__aeabi_ddiv+0x544>
 800145a:	e5f4      	b.n	8001046 <__aeabi_ddiv+0x12e>
 800145c:	1e83      	subs	r3, r0, #2
 800145e:	4698      	mov	r8, r3
 8001460:	1909      	adds	r1, r1, r4
 8001462:	e5f0      	b.n	8001046 <__aeabi_ddiv+0x12e>
 8001464:	4925      	ldr	r1, [pc, #148]	; (80014fc <__aeabi_ddiv+0x5e4>)
 8001466:	0028      	movs	r0, r5
 8001468:	4459      	add	r1, fp
 800146a:	408d      	lsls	r5, r1
 800146c:	4642      	mov	r2, r8
 800146e:	408a      	lsls	r2, r1
 8001470:	1e69      	subs	r1, r5, #1
 8001472:	418d      	sbcs	r5, r1
 8001474:	4641      	mov	r1, r8
 8001476:	40d8      	lsrs	r0, r3
 8001478:	40d9      	lsrs	r1, r3
 800147a:	4302      	orrs	r2, r0
 800147c:	432a      	orrs	r2, r5
 800147e:	000b      	movs	r3, r1
 8001480:	0751      	lsls	r1, r2, #29
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0x56e>
 8001484:	e751      	b.n	800132a <__aeabi_ddiv+0x412>
 8001486:	210f      	movs	r1, #15
 8001488:	4011      	ands	r1, r2
 800148a:	2904      	cmp	r1, #4
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x578>
 800148e:	e746      	b.n	800131e <__aeabi_ddiv+0x406>
 8001490:	e74b      	b.n	800132a <__aeabi_ddiv+0x412>
 8001492:	0005      	movs	r5, r0
 8001494:	428e      	cmp	r6, r1
 8001496:	d000      	beq.n	800149a <__aeabi_ddiv+0x582>
 8001498:	e66a      	b.n	8001170 <__aeabi_ddiv+0x258>
 800149a:	9a00      	ldr	r2, [sp, #0]
 800149c:	4293      	cmp	r3, r2
 800149e:	d000      	beq.n	80014a2 <__aeabi_ddiv+0x58a>
 80014a0:	e666      	b.n	8001170 <__aeabi_ddiv+0x258>
 80014a2:	e667      	b.n	8001174 <__aeabi_ddiv+0x25c>
 80014a4:	4a16      	ldr	r2, [pc, #88]	; (8001500 <__aeabi_ddiv+0x5e8>)
 80014a6:	445a      	add	r2, fp
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_ddiv+0x596>
 80014ac:	e710      	b.n	80012d0 <__aeabi_ddiv+0x3b8>
 80014ae:	2301      	movs	r3, #1
 80014b0:	2500      	movs	r5, #0
 80014b2:	4498      	add	r8, r3
 80014b4:	e667      	b.n	8001186 <__aeabi_ddiv+0x26e>
 80014b6:	075d      	lsls	r5, r3, #29
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	0b1c      	lsrs	r4, r3, #12
 80014bc:	08d2      	lsrs	r2, r2, #3
 80014be:	2300      	movs	r3, #0
 80014c0:	4315      	orrs	r5, r2
 80014c2:	e580      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 80014c4:	9800      	ldr	r0, [sp, #0]
 80014c6:	3d02      	subs	r5, #2
 80014c8:	0042      	lsls	r2, r0, #1
 80014ca:	4282      	cmp	r2, r0
 80014cc:	41bf      	sbcs	r7, r7
 80014ce:	427f      	negs	r7, r7
 80014d0:	193c      	adds	r4, r7, r4
 80014d2:	1936      	adds	r6, r6, r4
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	e7dd      	b.n	8001494 <__aeabi_ddiv+0x57c>
 80014d8:	2480      	movs	r4, #128	; 0x80
 80014da:	4643      	mov	r3, r8
 80014dc:	0324      	lsls	r4, r4, #12
 80014de:	431c      	orrs	r4, r3
 80014e0:	0324      	lsls	r4, r4, #12
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__aeabi_ddiv+0x5dc>)
 80014e4:	0b24      	lsrs	r4, r4, #12
 80014e6:	e56e      	b.n	8000fc6 <__aeabi_ddiv+0xae>
 80014e8:	9a00      	ldr	r2, [sp, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3ea      	bcc.n	80014c4 <__aeabi_ddiv+0x5ac>
 80014ee:	0005      	movs	r5, r0
 80014f0:	e7d3      	b.n	800149a <__aeabi_ddiv+0x582>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	000007ff 	.word	0x000007ff
 80014f8:	0000043e 	.word	0x0000043e
 80014fc:	0000041e 	.word	0x0000041e
 8001500:	000003ff 	.word	0x000003ff

08001504 <__eqdf2>:
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	464e      	mov	r6, r9
 8001508:	4645      	mov	r5, r8
 800150a:	46de      	mov	lr, fp
 800150c:	4657      	mov	r7, sl
 800150e:	4690      	mov	r8, r2
 8001510:	b5e0      	push	{r5, r6, r7, lr}
 8001512:	0017      	movs	r7, r2
 8001514:	031a      	lsls	r2, r3, #12
 8001516:	0b12      	lsrs	r2, r2, #12
 8001518:	0005      	movs	r5, r0
 800151a:	4684      	mov	ip, r0
 800151c:	4819      	ldr	r0, [pc, #100]	; (8001584 <__eqdf2+0x80>)
 800151e:	030e      	lsls	r6, r1, #12
 8001520:	004c      	lsls	r4, r1, #1
 8001522:	4691      	mov	r9, r2
 8001524:	005a      	lsls	r2, r3, #1
 8001526:	0fdb      	lsrs	r3, r3, #31
 8001528:	469b      	mov	fp, r3
 800152a:	0b36      	lsrs	r6, r6, #12
 800152c:	0d64      	lsrs	r4, r4, #21
 800152e:	0fc9      	lsrs	r1, r1, #31
 8001530:	0d52      	lsrs	r2, r2, #21
 8001532:	4284      	cmp	r4, r0
 8001534:	d019      	beq.n	800156a <__eqdf2+0x66>
 8001536:	4282      	cmp	r2, r0
 8001538:	d010      	beq.n	800155c <__eqdf2+0x58>
 800153a:	2001      	movs	r0, #1
 800153c:	4294      	cmp	r4, r2
 800153e:	d10e      	bne.n	800155e <__eqdf2+0x5a>
 8001540:	454e      	cmp	r6, r9
 8001542:	d10c      	bne.n	800155e <__eqdf2+0x5a>
 8001544:	2001      	movs	r0, #1
 8001546:	45c4      	cmp	ip, r8
 8001548:	d109      	bne.n	800155e <__eqdf2+0x5a>
 800154a:	4559      	cmp	r1, fp
 800154c:	d017      	beq.n	800157e <__eqdf2+0x7a>
 800154e:	2c00      	cmp	r4, #0
 8001550:	d105      	bne.n	800155e <__eqdf2+0x5a>
 8001552:	0030      	movs	r0, r6
 8001554:	4328      	orrs	r0, r5
 8001556:	1e43      	subs	r3, r0, #1
 8001558:	4198      	sbcs	r0, r3
 800155a:	e000      	b.n	800155e <__eqdf2+0x5a>
 800155c:	2001      	movs	r0, #1
 800155e:	bcf0      	pop	{r4, r5, r6, r7}
 8001560:	46bb      	mov	fp, r7
 8001562:	46b2      	mov	sl, r6
 8001564:	46a9      	mov	r9, r5
 8001566:	46a0      	mov	r8, r4
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156a:	0033      	movs	r3, r6
 800156c:	2001      	movs	r0, #1
 800156e:	432b      	orrs	r3, r5
 8001570:	d1f5      	bne.n	800155e <__eqdf2+0x5a>
 8001572:	42a2      	cmp	r2, r4
 8001574:	d1f3      	bne.n	800155e <__eqdf2+0x5a>
 8001576:	464b      	mov	r3, r9
 8001578:	433b      	orrs	r3, r7
 800157a:	d1f0      	bne.n	800155e <__eqdf2+0x5a>
 800157c:	e7e2      	b.n	8001544 <__eqdf2+0x40>
 800157e:	2000      	movs	r0, #0
 8001580:	e7ed      	b.n	800155e <__eqdf2+0x5a>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	000007ff 	.word	0x000007ff

08001588 <__gedf2>:
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	4647      	mov	r7, r8
 800158c:	46ce      	mov	lr, r9
 800158e:	0004      	movs	r4, r0
 8001590:	0018      	movs	r0, r3
 8001592:	0016      	movs	r6, r2
 8001594:	031b      	lsls	r3, r3, #12
 8001596:	0b1b      	lsrs	r3, r3, #12
 8001598:	4d2d      	ldr	r5, [pc, #180]	; (8001650 <__gedf2+0xc8>)
 800159a:	004a      	lsls	r2, r1, #1
 800159c:	4699      	mov	r9, r3
 800159e:	b580      	push	{r7, lr}
 80015a0:	0043      	lsls	r3, r0, #1
 80015a2:	030f      	lsls	r7, r1, #12
 80015a4:	46a4      	mov	ip, r4
 80015a6:	46b0      	mov	r8, r6
 80015a8:	0b3f      	lsrs	r7, r7, #12
 80015aa:	0d52      	lsrs	r2, r2, #21
 80015ac:	0fc9      	lsrs	r1, r1, #31
 80015ae:	0d5b      	lsrs	r3, r3, #21
 80015b0:	0fc0      	lsrs	r0, r0, #31
 80015b2:	42aa      	cmp	r2, r5
 80015b4:	d021      	beq.n	80015fa <__gedf2+0x72>
 80015b6:	42ab      	cmp	r3, r5
 80015b8:	d013      	beq.n	80015e2 <__gedf2+0x5a>
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d122      	bne.n	8001604 <__gedf2+0x7c>
 80015be:	433c      	orrs	r4, r7
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <__gedf2+0x42>
 80015c4:	464d      	mov	r5, r9
 80015c6:	432e      	orrs	r6, r5
 80015c8:	d022      	beq.n	8001610 <__gedf2+0x88>
 80015ca:	2c00      	cmp	r4, #0
 80015cc:	d010      	beq.n	80015f0 <__gedf2+0x68>
 80015ce:	4281      	cmp	r1, r0
 80015d0:	d022      	beq.n	8001618 <__gedf2+0x90>
 80015d2:	2002      	movs	r0, #2
 80015d4:	3901      	subs	r1, #1
 80015d6:	4008      	ands	r0, r1
 80015d8:	3801      	subs	r0, #1
 80015da:	bcc0      	pop	{r6, r7}
 80015dc:	46b9      	mov	r9, r7
 80015de:	46b0      	mov	r8, r6
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	464d      	mov	r5, r9
 80015e4:	432e      	orrs	r6, r5
 80015e6:	d129      	bne.n	800163c <__gedf2+0xb4>
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d1f0      	bne.n	80015ce <__gedf2+0x46>
 80015ec:	433c      	orrs	r4, r7
 80015ee:	d1ee      	bne.n	80015ce <__gedf2+0x46>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d1f2      	bne.n	80015da <__gedf2+0x52>
 80015f4:	2001      	movs	r0, #1
 80015f6:	4240      	negs	r0, r0
 80015f8:	e7ef      	b.n	80015da <__gedf2+0x52>
 80015fa:	003d      	movs	r5, r7
 80015fc:	4325      	orrs	r5, r4
 80015fe:	d11d      	bne.n	800163c <__gedf2+0xb4>
 8001600:	4293      	cmp	r3, r2
 8001602:	d0ee      	beq.n	80015e2 <__gedf2+0x5a>
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e2      	bne.n	80015ce <__gedf2+0x46>
 8001608:	464c      	mov	r4, r9
 800160a:	4326      	orrs	r6, r4
 800160c:	d1df      	bne.n	80015ce <__gedf2+0x46>
 800160e:	e7e0      	b.n	80015d2 <__gedf2+0x4a>
 8001610:	2000      	movs	r0, #0
 8001612:	2c00      	cmp	r4, #0
 8001614:	d0e1      	beq.n	80015da <__gedf2+0x52>
 8001616:	e7dc      	b.n	80015d2 <__gedf2+0x4a>
 8001618:	429a      	cmp	r2, r3
 800161a:	dc0a      	bgt.n	8001632 <__gedf2+0xaa>
 800161c:	dbe8      	blt.n	80015f0 <__gedf2+0x68>
 800161e:	454f      	cmp	r7, r9
 8001620:	d8d7      	bhi.n	80015d2 <__gedf2+0x4a>
 8001622:	d00e      	beq.n	8001642 <__gedf2+0xba>
 8001624:	2000      	movs	r0, #0
 8001626:	454f      	cmp	r7, r9
 8001628:	d2d7      	bcs.n	80015da <__gedf2+0x52>
 800162a:	2900      	cmp	r1, #0
 800162c:	d0e2      	beq.n	80015f4 <__gedf2+0x6c>
 800162e:	0008      	movs	r0, r1
 8001630:	e7d3      	b.n	80015da <__gedf2+0x52>
 8001632:	4243      	negs	r3, r0
 8001634:	4158      	adcs	r0, r3
 8001636:	0040      	lsls	r0, r0, #1
 8001638:	3801      	subs	r0, #1
 800163a:	e7ce      	b.n	80015da <__gedf2+0x52>
 800163c:	2002      	movs	r0, #2
 800163e:	4240      	negs	r0, r0
 8001640:	e7cb      	b.n	80015da <__gedf2+0x52>
 8001642:	45c4      	cmp	ip, r8
 8001644:	d8c5      	bhi.n	80015d2 <__gedf2+0x4a>
 8001646:	2000      	movs	r0, #0
 8001648:	45c4      	cmp	ip, r8
 800164a:	d2c6      	bcs.n	80015da <__gedf2+0x52>
 800164c:	e7ed      	b.n	800162a <__gedf2+0xa2>
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	000007ff 	.word	0x000007ff

08001654 <__ledf2>:
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	4647      	mov	r7, r8
 8001658:	46ce      	mov	lr, r9
 800165a:	0004      	movs	r4, r0
 800165c:	0018      	movs	r0, r3
 800165e:	0016      	movs	r6, r2
 8001660:	031b      	lsls	r3, r3, #12
 8001662:	0b1b      	lsrs	r3, r3, #12
 8001664:	4d2c      	ldr	r5, [pc, #176]	; (8001718 <__ledf2+0xc4>)
 8001666:	004a      	lsls	r2, r1, #1
 8001668:	4699      	mov	r9, r3
 800166a:	b580      	push	{r7, lr}
 800166c:	0043      	lsls	r3, r0, #1
 800166e:	030f      	lsls	r7, r1, #12
 8001670:	46a4      	mov	ip, r4
 8001672:	46b0      	mov	r8, r6
 8001674:	0b3f      	lsrs	r7, r7, #12
 8001676:	0d52      	lsrs	r2, r2, #21
 8001678:	0fc9      	lsrs	r1, r1, #31
 800167a:	0d5b      	lsrs	r3, r3, #21
 800167c:	0fc0      	lsrs	r0, r0, #31
 800167e:	42aa      	cmp	r2, r5
 8001680:	d00d      	beq.n	800169e <__ledf2+0x4a>
 8001682:	42ab      	cmp	r3, r5
 8001684:	d010      	beq.n	80016a8 <__ledf2+0x54>
 8001686:	2a00      	cmp	r2, #0
 8001688:	d127      	bne.n	80016da <__ledf2+0x86>
 800168a:	433c      	orrs	r4, r7
 800168c:	2b00      	cmp	r3, #0
 800168e:	d111      	bne.n	80016b4 <__ledf2+0x60>
 8001690:	464d      	mov	r5, r9
 8001692:	432e      	orrs	r6, r5
 8001694:	d10e      	bne.n	80016b4 <__ledf2+0x60>
 8001696:	2000      	movs	r0, #0
 8001698:	2c00      	cmp	r4, #0
 800169a:	d015      	beq.n	80016c8 <__ledf2+0x74>
 800169c:	e00e      	b.n	80016bc <__ledf2+0x68>
 800169e:	003d      	movs	r5, r7
 80016a0:	4325      	orrs	r5, r4
 80016a2:	d110      	bne.n	80016c6 <__ledf2+0x72>
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d118      	bne.n	80016da <__ledf2+0x86>
 80016a8:	464d      	mov	r5, r9
 80016aa:	432e      	orrs	r6, r5
 80016ac:	d10b      	bne.n	80016c6 <__ledf2+0x72>
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d102      	bne.n	80016b8 <__ledf2+0x64>
 80016b2:	433c      	orrs	r4, r7
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d00b      	beq.n	80016d0 <__ledf2+0x7c>
 80016b8:	4281      	cmp	r1, r0
 80016ba:	d014      	beq.n	80016e6 <__ledf2+0x92>
 80016bc:	2002      	movs	r0, #2
 80016be:	3901      	subs	r1, #1
 80016c0:	4008      	ands	r0, r1
 80016c2:	3801      	subs	r0, #1
 80016c4:	e000      	b.n	80016c8 <__ledf2+0x74>
 80016c6:	2002      	movs	r0, #2
 80016c8:	bcc0      	pop	{r6, r7}
 80016ca:	46b9      	mov	r9, r7
 80016cc:	46b0      	mov	r8, r6
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d1f9      	bne.n	80016c8 <__ledf2+0x74>
 80016d4:	2001      	movs	r0, #1
 80016d6:	4240      	negs	r0, r0
 80016d8:	e7f6      	b.n	80016c8 <__ledf2+0x74>
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ec      	bne.n	80016b8 <__ledf2+0x64>
 80016de:	464c      	mov	r4, r9
 80016e0:	4326      	orrs	r6, r4
 80016e2:	d1e9      	bne.n	80016b8 <__ledf2+0x64>
 80016e4:	e7ea      	b.n	80016bc <__ledf2+0x68>
 80016e6:	429a      	cmp	r2, r3
 80016e8:	dd04      	ble.n	80016f4 <__ledf2+0xa0>
 80016ea:	4243      	negs	r3, r0
 80016ec:	4158      	adcs	r0, r3
 80016ee:	0040      	lsls	r0, r0, #1
 80016f0:	3801      	subs	r0, #1
 80016f2:	e7e9      	b.n	80016c8 <__ledf2+0x74>
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbeb      	blt.n	80016d0 <__ledf2+0x7c>
 80016f8:	454f      	cmp	r7, r9
 80016fa:	d8df      	bhi.n	80016bc <__ledf2+0x68>
 80016fc:	d006      	beq.n	800170c <__ledf2+0xb8>
 80016fe:	2000      	movs	r0, #0
 8001700:	454f      	cmp	r7, r9
 8001702:	d2e1      	bcs.n	80016c8 <__ledf2+0x74>
 8001704:	2900      	cmp	r1, #0
 8001706:	d0e5      	beq.n	80016d4 <__ledf2+0x80>
 8001708:	0008      	movs	r0, r1
 800170a:	e7dd      	b.n	80016c8 <__ledf2+0x74>
 800170c:	45c4      	cmp	ip, r8
 800170e:	d8d5      	bhi.n	80016bc <__ledf2+0x68>
 8001710:	2000      	movs	r0, #0
 8001712:	45c4      	cmp	ip, r8
 8001714:	d2d8      	bcs.n	80016c8 <__ledf2+0x74>
 8001716:	e7f5      	b.n	8001704 <__ledf2+0xb0>
 8001718:	000007ff 	.word	0x000007ff

0800171c <__aeabi_dmul>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	4698      	mov	r8, r3
 800172a:	030c      	lsls	r4, r1, #12
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	0006      	movs	r6, r0
 8001730:	4692      	mov	sl, r2
 8001732:	b087      	sub	sp, #28
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	0d5b      	lsrs	r3, r3, #21
 8001738:	0fcf      	lsrs	r7, r1, #31
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_dmul+0x24>
 800173e:	e15c      	b.n	80019fa <__aeabi_dmul+0x2de>
 8001740:	4ad9      	ldr	r2, [pc, #868]	; (8001aa8 <__aeabi_dmul+0x38c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d100      	bne.n	8001748 <__aeabi_dmul+0x2c>
 8001746:	e175      	b.n	8001a34 <__aeabi_dmul+0x318>
 8001748:	0f42      	lsrs	r2, r0, #29
 800174a:	00e4      	lsls	r4, r4, #3
 800174c:	4314      	orrs	r4, r2
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	0412      	lsls	r2, r2, #16
 8001752:	4314      	orrs	r4, r2
 8001754:	4ad5      	ldr	r2, [pc, #852]	; (8001aac <__aeabi_dmul+0x390>)
 8001756:	00c5      	lsls	r5, r0, #3
 8001758:	4694      	mov	ip, r2
 800175a:	4463      	add	r3, ip
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2300      	movs	r3, #0
 8001760:	4699      	mov	r9, r3
 8001762:	469b      	mov	fp, r3
 8001764:	4643      	mov	r3, r8
 8001766:	4642      	mov	r2, r8
 8001768:	031e      	lsls	r6, r3, #12
 800176a:	0fd2      	lsrs	r2, r2, #31
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4650      	mov	r0, sl
 8001770:	4690      	mov	r8, r2
 8001772:	0b36      	lsrs	r6, r6, #12
 8001774:	0d5b      	lsrs	r3, r3, #21
 8001776:	d100      	bne.n	800177a <__aeabi_dmul+0x5e>
 8001778:	e120      	b.n	80019bc <__aeabi_dmul+0x2a0>
 800177a:	4acb      	ldr	r2, [pc, #812]	; (8001aa8 <__aeabi_dmul+0x38c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0x66>
 8001780:	e162      	b.n	8001a48 <__aeabi_dmul+0x32c>
 8001782:	49ca      	ldr	r1, [pc, #808]	; (8001aac <__aeabi_dmul+0x390>)
 8001784:	0f42      	lsrs	r2, r0, #29
 8001786:	468c      	mov	ip, r1
 8001788:	9900      	ldr	r1, [sp, #0]
 800178a:	4463      	add	r3, ip
 800178c:	00f6      	lsls	r6, r6, #3
 800178e:	468c      	mov	ip, r1
 8001790:	4316      	orrs	r6, r2
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	449c      	add	ip, r3
 8001796:	0412      	lsls	r2, r2, #16
 8001798:	4663      	mov	r3, ip
 800179a:	4316      	orrs	r6, r2
 800179c:	00c2      	lsls	r2, r0, #3
 800179e:	2000      	movs	r0, #0
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	9900      	ldr	r1, [sp, #0]
 80017a4:	4643      	mov	r3, r8
 80017a6:	3101      	adds	r1, #1
 80017a8:	468c      	mov	ip, r1
 80017aa:	4649      	mov	r1, r9
 80017ac:	407b      	eors	r3, r7
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	290f      	cmp	r1, #15
 80017b2:	d826      	bhi.n	8001802 <__aeabi_dmul+0xe6>
 80017b4:	4bbe      	ldr	r3, [pc, #760]	; (8001ab0 <__aeabi_dmul+0x394>)
 80017b6:	0089      	lsls	r1, r1, #2
 80017b8:	5859      	ldr	r1, [r3, r1]
 80017ba:	468f      	mov	pc, r1
 80017bc:	4643      	mov	r3, r8
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	0034      	movs	r4, r6
 80017c2:	0015      	movs	r5, r2
 80017c4:	4683      	mov	fp, r0
 80017c6:	465b      	mov	r3, fp
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d016      	beq.n	80017fa <__aeabi_dmul+0xde>
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0xb6>
 80017d0:	e203      	b.n	8001bda <__aeabi_dmul+0x4be>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dmul+0xbc>
 80017d6:	e0cd      	b.n	8001974 <__aeabi_dmul+0x258>
 80017d8:	2200      	movs	r2, #0
 80017da:	2400      	movs	r4, #0
 80017dc:	2500      	movs	r5, #0
 80017de:	9b01      	ldr	r3, [sp, #4]
 80017e0:	0512      	lsls	r2, r2, #20
 80017e2:	4322      	orrs	r2, r4
 80017e4:	07db      	lsls	r3, r3, #31
 80017e6:	431a      	orrs	r2, r3
 80017e8:	0028      	movs	r0, r5
 80017ea:	0011      	movs	r1, r2
 80017ec:	b007      	add	sp, #28
 80017ee:	bcf0      	pop	{r4, r5, r6, r7}
 80017f0:	46bb      	mov	fp, r7
 80017f2:	46b2      	mov	sl, r6
 80017f4:	46a9      	mov	r9, r5
 80017f6:	46a0      	mov	r8, r4
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	2400      	movs	r4, #0
 80017fc:	2500      	movs	r5, #0
 80017fe:	4aaa      	ldr	r2, [pc, #680]	; (8001aa8 <__aeabi_dmul+0x38c>)
 8001800:	e7ed      	b.n	80017de <__aeabi_dmul+0xc2>
 8001802:	0c28      	lsrs	r0, r5, #16
 8001804:	042d      	lsls	r5, r5, #16
 8001806:	0c2d      	lsrs	r5, r5, #16
 8001808:	002b      	movs	r3, r5
 800180a:	0c11      	lsrs	r1, r2, #16
 800180c:	0412      	lsls	r2, r2, #16
 800180e:	0c12      	lsrs	r2, r2, #16
 8001810:	4353      	muls	r3, r2
 8001812:	4698      	mov	r8, r3
 8001814:	0013      	movs	r3, r2
 8001816:	002f      	movs	r7, r5
 8001818:	4343      	muls	r3, r0
 800181a:	4699      	mov	r9, r3
 800181c:	434f      	muls	r7, r1
 800181e:	444f      	add	r7, r9
 8001820:	46bb      	mov	fp, r7
 8001822:	4647      	mov	r7, r8
 8001824:	000b      	movs	r3, r1
 8001826:	0c3f      	lsrs	r7, r7, #16
 8001828:	46ba      	mov	sl, r7
 800182a:	4343      	muls	r3, r0
 800182c:	44da      	add	sl, fp
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	45d1      	cmp	r9, sl
 8001832:	d904      	bls.n	800183e <__aeabi_dmul+0x122>
 8001834:	2780      	movs	r7, #128	; 0x80
 8001836:	027f      	lsls	r7, r7, #9
 8001838:	46b9      	mov	r9, r7
 800183a:	444b      	add	r3, r9
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	4653      	mov	r3, sl
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	469b      	mov	fp, r3
 8001844:	4653      	mov	r3, sl
 8001846:	041f      	lsls	r7, r3, #16
 8001848:	4643      	mov	r3, r8
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	4698      	mov	r8, r3
 8001850:	003b      	movs	r3, r7
 8001852:	4443      	add	r3, r8
 8001854:	9304      	str	r3, [sp, #16]
 8001856:	0c33      	lsrs	r3, r6, #16
 8001858:	0436      	lsls	r6, r6, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	4698      	mov	r8, r3
 800185e:	0033      	movs	r3, r6
 8001860:	4343      	muls	r3, r0
 8001862:	4699      	mov	r9, r3
 8001864:	4643      	mov	r3, r8
 8001866:	4343      	muls	r3, r0
 8001868:	002f      	movs	r7, r5
 800186a:	469a      	mov	sl, r3
 800186c:	4643      	mov	r3, r8
 800186e:	4377      	muls	r7, r6
 8001870:	435d      	muls	r5, r3
 8001872:	0c38      	lsrs	r0, r7, #16
 8001874:	444d      	add	r5, r9
 8001876:	1945      	adds	r5, r0, r5
 8001878:	45a9      	cmp	r9, r5
 800187a:	d903      	bls.n	8001884 <__aeabi_dmul+0x168>
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	4699      	mov	r9, r3
 8001882:	44ca      	add	sl, r9
 8001884:	043f      	lsls	r7, r7, #16
 8001886:	0c28      	lsrs	r0, r5, #16
 8001888:	0c3f      	lsrs	r7, r7, #16
 800188a:	042d      	lsls	r5, r5, #16
 800188c:	19ed      	adds	r5, r5, r7
 800188e:	0c27      	lsrs	r7, r4, #16
 8001890:	0424      	lsls	r4, r4, #16
 8001892:	0c24      	lsrs	r4, r4, #16
 8001894:	0003      	movs	r3, r0
 8001896:	0020      	movs	r0, r4
 8001898:	4350      	muls	r0, r2
 800189a:	437a      	muls	r2, r7
 800189c:	4691      	mov	r9, r2
 800189e:	003a      	movs	r2, r7
 80018a0:	4453      	add	r3, sl
 80018a2:	9305      	str	r3, [sp, #20]
 80018a4:	0c03      	lsrs	r3, r0, #16
 80018a6:	469a      	mov	sl, r3
 80018a8:	434a      	muls	r2, r1
 80018aa:	4361      	muls	r1, r4
 80018ac:	4449      	add	r1, r9
 80018ae:	4451      	add	r1, sl
 80018b0:	44ab      	add	fp, r5
 80018b2:	4589      	cmp	r9, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x1a2>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	4699      	mov	r9, r3
 80018bc:	444a      	add	r2, r9
 80018be:	0400      	lsls	r0, r0, #16
 80018c0:	0c0b      	lsrs	r3, r1, #16
 80018c2:	0c00      	lsrs	r0, r0, #16
 80018c4:	0409      	lsls	r1, r1, #16
 80018c6:	1809      	adds	r1, r1, r0
 80018c8:	0020      	movs	r0, r4
 80018ca:	4699      	mov	r9, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	4370      	muls	r0, r6
 80018d0:	435c      	muls	r4, r3
 80018d2:	437e      	muls	r6, r7
 80018d4:	435f      	muls	r7, r3
 80018d6:	0c03      	lsrs	r3, r0, #16
 80018d8:	4698      	mov	r8, r3
 80018da:	19a4      	adds	r4, r4, r6
 80018dc:	4444      	add	r4, r8
 80018de:	444a      	add	r2, r9
 80018e0:	9703      	str	r7, [sp, #12]
 80018e2:	42a6      	cmp	r6, r4
 80018e4:	d904      	bls.n	80018f0 <__aeabi_dmul+0x1d4>
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	025b      	lsls	r3, r3, #9
 80018ea:	4698      	mov	r8, r3
 80018ec:	4447      	add	r7, r8
 80018ee:	9703      	str	r7, [sp, #12]
 80018f0:	0423      	lsls	r3, r4, #16
 80018f2:	9e02      	ldr	r6, [sp, #8]
 80018f4:	469a      	mov	sl, r3
 80018f6:	9b05      	ldr	r3, [sp, #20]
 80018f8:	445e      	add	r6, fp
 80018fa:	4698      	mov	r8, r3
 80018fc:	42ae      	cmp	r6, r5
 80018fe:	41ad      	sbcs	r5, r5
 8001900:	1876      	adds	r6, r6, r1
 8001902:	428e      	cmp	r6, r1
 8001904:	4189      	sbcs	r1, r1
 8001906:	0400      	lsls	r0, r0, #16
 8001908:	0c00      	lsrs	r0, r0, #16
 800190a:	4450      	add	r0, sl
 800190c:	4440      	add	r0, r8
 800190e:	426d      	negs	r5, r5
 8001910:	1947      	adds	r7, r0, r5
 8001912:	46b8      	mov	r8, r7
 8001914:	4693      	mov	fp, r2
 8001916:	4249      	negs	r1, r1
 8001918:	4689      	mov	r9, r1
 800191a:	44c3      	add	fp, r8
 800191c:	44d9      	add	r9, fp
 800191e:	4298      	cmp	r0, r3
 8001920:	4180      	sbcs	r0, r0
 8001922:	45a8      	cmp	r8, r5
 8001924:	41ad      	sbcs	r5, r5
 8001926:	4593      	cmp	fp, r2
 8001928:	4192      	sbcs	r2, r2
 800192a:	4589      	cmp	r9, r1
 800192c:	4189      	sbcs	r1, r1
 800192e:	426d      	negs	r5, r5
 8001930:	4240      	negs	r0, r0
 8001932:	4328      	orrs	r0, r5
 8001934:	0c24      	lsrs	r4, r4, #16
 8001936:	4252      	negs	r2, r2
 8001938:	4249      	negs	r1, r1
 800193a:	430a      	orrs	r2, r1
 800193c:	9b03      	ldr	r3, [sp, #12]
 800193e:	1900      	adds	r0, r0, r4
 8001940:	1880      	adds	r0, r0, r2
 8001942:	18c7      	adds	r7, r0, r3
 8001944:	464b      	mov	r3, r9
 8001946:	0ddc      	lsrs	r4, r3, #23
 8001948:	9b04      	ldr	r3, [sp, #16]
 800194a:	0275      	lsls	r5, r6, #9
 800194c:	431d      	orrs	r5, r3
 800194e:	1e6a      	subs	r2, r5, #1
 8001950:	4195      	sbcs	r5, r2
 8001952:	464b      	mov	r3, r9
 8001954:	0df6      	lsrs	r6, r6, #23
 8001956:	027f      	lsls	r7, r7, #9
 8001958:	4335      	orrs	r5, r6
 800195a:	025a      	lsls	r2, r3, #9
 800195c:	433c      	orrs	r4, r7
 800195e:	4315      	orrs	r5, r2
 8001960:	01fb      	lsls	r3, r7, #7
 8001962:	d400      	bmi.n	8001966 <__aeabi_dmul+0x24a>
 8001964:	e11c      	b.n	8001ba0 <__aeabi_dmul+0x484>
 8001966:	2101      	movs	r1, #1
 8001968:	086a      	lsrs	r2, r5, #1
 800196a:	400d      	ands	r5, r1
 800196c:	4315      	orrs	r5, r2
 800196e:	07e2      	lsls	r2, r4, #31
 8001970:	4315      	orrs	r5, r2
 8001972:	0864      	lsrs	r4, r4, #1
 8001974:	494f      	ldr	r1, [pc, #316]	; (8001ab4 <__aeabi_dmul+0x398>)
 8001976:	4461      	add	r1, ip
 8001978:	2900      	cmp	r1, #0
 800197a:	dc00      	bgt.n	800197e <__aeabi_dmul+0x262>
 800197c:	e0b0      	b.n	8001ae0 <__aeabi_dmul+0x3c4>
 800197e:	076b      	lsls	r3, r5, #29
 8001980:	d009      	beq.n	8001996 <__aeabi_dmul+0x27a>
 8001982:	220f      	movs	r2, #15
 8001984:	402a      	ands	r2, r5
 8001986:	2a04      	cmp	r2, #4
 8001988:	d005      	beq.n	8001996 <__aeabi_dmul+0x27a>
 800198a:	1d2a      	adds	r2, r5, #4
 800198c:	42aa      	cmp	r2, r5
 800198e:	41ad      	sbcs	r5, r5
 8001990:	426d      	negs	r5, r5
 8001992:	1964      	adds	r4, r4, r5
 8001994:	0015      	movs	r5, r2
 8001996:	01e3      	lsls	r3, r4, #7
 8001998:	d504      	bpl.n	80019a4 <__aeabi_dmul+0x288>
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <__aeabi_dmul+0x39c>)
 800199e:	00c9      	lsls	r1, r1, #3
 80019a0:	4014      	ands	r4, r2
 80019a2:	4461      	add	r1, ip
 80019a4:	4a45      	ldr	r2, [pc, #276]	; (8001abc <__aeabi_dmul+0x3a0>)
 80019a6:	4291      	cmp	r1, r2
 80019a8:	dd00      	ble.n	80019ac <__aeabi_dmul+0x290>
 80019aa:	e726      	b.n	80017fa <__aeabi_dmul+0xde>
 80019ac:	0762      	lsls	r2, r4, #29
 80019ae:	08ed      	lsrs	r5, r5, #3
 80019b0:	0264      	lsls	r4, r4, #9
 80019b2:	0549      	lsls	r1, r1, #21
 80019b4:	4315      	orrs	r5, r2
 80019b6:	0b24      	lsrs	r4, r4, #12
 80019b8:	0d4a      	lsrs	r2, r1, #21
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0xc2>
 80019bc:	4652      	mov	r2, sl
 80019be:	4332      	orrs	r2, r6
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dmul+0x2a8>
 80019c2:	e07f      	b.n	8001ac4 <__aeabi_dmul+0x3a8>
 80019c4:	2e00      	cmp	r6, #0
 80019c6:	d100      	bne.n	80019ca <__aeabi_dmul+0x2ae>
 80019c8:	e0dc      	b.n	8001b84 <__aeabi_dmul+0x468>
 80019ca:	0030      	movs	r0, r6
 80019cc:	f000 fd4e 	bl	800246c <__clzsi2>
 80019d0:	0002      	movs	r2, r0
 80019d2:	3a0b      	subs	r2, #11
 80019d4:	231d      	movs	r3, #29
 80019d6:	0001      	movs	r1, r0
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	4652      	mov	r2, sl
 80019dc:	3908      	subs	r1, #8
 80019de:	40da      	lsrs	r2, r3
 80019e0:	408e      	lsls	r6, r1
 80019e2:	4316      	orrs	r6, r2
 80019e4:	4652      	mov	r2, sl
 80019e6:	408a      	lsls	r2, r1
 80019e8:	9b00      	ldr	r3, [sp, #0]
 80019ea:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <__aeabi_dmul+0x3a4>)
 80019ec:	1a18      	subs	r0, r3, r0
 80019ee:	0003      	movs	r3, r0
 80019f0:	468c      	mov	ip, r1
 80019f2:	4463      	add	r3, ip
 80019f4:	2000      	movs	r0, #0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	e6d3      	b.n	80017a2 <__aeabi_dmul+0x86>
 80019fa:	0025      	movs	r5, r4
 80019fc:	4305      	orrs	r5, r0
 80019fe:	d04a      	beq.n	8001a96 <__aeabi_dmul+0x37a>
 8001a00:	2c00      	cmp	r4, #0
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dmul+0x2ea>
 8001a04:	e0b0      	b.n	8001b68 <__aeabi_dmul+0x44c>
 8001a06:	0020      	movs	r0, r4
 8001a08:	f000 fd30 	bl	800246c <__clzsi2>
 8001a0c:	0001      	movs	r1, r0
 8001a0e:	0002      	movs	r2, r0
 8001a10:	390b      	subs	r1, #11
 8001a12:	231d      	movs	r3, #29
 8001a14:	0010      	movs	r0, r2
 8001a16:	1a5b      	subs	r3, r3, r1
 8001a18:	0031      	movs	r1, r6
 8001a1a:	0035      	movs	r5, r6
 8001a1c:	3808      	subs	r0, #8
 8001a1e:	4084      	lsls	r4, r0
 8001a20:	40d9      	lsrs	r1, r3
 8001a22:	4085      	lsls	r5, r0
 8001a24:	430c      	orrs	r4, r1
 8001a26:	4826      	ldr	r0, [pc, #152]	; (8001ac0 <__aeabi_dmul+0x3a4>)
 8001a28:	1a83      	subs	r3, r0, r2
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4699      	mov	r9, r3
 8001a30:	469b      	mov	fp, r3
 8001a32:	e697      	b.n	8001764 <__aeabi_dmul+0x48>
 8001a34:	0005      	movs	r5, r0
 8001a36:	4325      	orrs	r5, r4
 8001a38:	d126      	bne.n	8001a88 <__aeabi_dmul+0x36c>
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2400      	movs	r4, #0
 8001a42:	4691      	mov	r9, r2
 8001a44:	469b      	mov	fp, r3
 8001a46:	e68d      	b.n	8001764 <__aeabi_dmul+0x48>
 8001a48:	4652      	mov	r2, sl
 8001a4a:	9b00      	ldr	r3, [sp, #0]
 8001a4c:	4332      	orrs	r2, r6
 8001a4e:	d110      	bne.n	8001a72 <__aeabi_dmul+0x356>
 8001a50:	4915      	ldr	r1, [pc, #84]	; (8001aa8 <__aeabi_dmul+0x38c>)
 8001a52:	2600      	movs	r6, #0
 8001a54:	468c      	mov	ip, r1
 8001a56:	4463      	add	r3, ip
 8001a58:	4649      	mov	r1, r9
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	4319      	orrs	r1, r3
 8001a60:	4689      	mov	r9, r1
 8001a62:	2002      	movs	r0, #2
 8001a64:	e69d      	b.n	80017a2 <__aeabi_dmul+0x86>
 8001a66:	465b      	mov	r3, fp
 8001a68:	9701      	str	r7, [sp, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dmul+0x354>
 8001a6e:	e6ad      	b.n	80017cc <__aeabi_dmul+0xb0>
 8001a70:	e6c3      	b.n	80017fa <__aeabi_dmul+0xde>
 8001a72:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <__aeabi_dmul+0x38c>)
 8001a74:	2003      	movs	r0, #3
 8001a76:	4694      	mov	ip, r2
 8001a78:	4463      	add	r3, ip
 8001a7a:	464a      	mov	r2, r9
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2303      	movs	r3, #3
 8001a80:	431a      	orrs	r2, r3
 8001a82:	4691      	mov	r9, r2
 8001a84:	4652      	mov	r2, sl
 8001a86:	e68c      	b.n	80017a2 <__aeabi_dmul+0x86>
 8001a88:	220c      	movs	r2, #12
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	0005      	movs	r5, r0
 8001a90:	4691      	mov	r9, r2
 8001a92:	469b      	mov	fp, r3
 8001a94:	e666      	b.n	8001764 <__aeabi_dmul+0x48>
 8001a96:	2304      	movs	r3, #4
 8001a98:	4699      	mov	r9, r3
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	469b      	mov	fp, r3
 8001aa4:	e65e      	b.n	8001764 <__aeabi_dmul+0x48>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	fffffc01 	.word	0xfffffc01
 8001ab0:	08005f88 	.word	0x08005f88
 8001ab4:	000003ff 	.word	0x000003ff
 8001ab8:	feffffff 	.word	0xfeffffff
 8001abc:	000007fe 	.word	0x000007fe
 8001ac0:	fffffc0d 	.word	0xfffffc0d
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4319      	orrs	r1, r3
 8001aca:	4689      	mov	r9, r1
 8001acc:	2600      	movs	r6, #0
 8001ace:	2001      	movs	r0, #1
 8001ad0:	e667      	b.n	80017a2 <__aeabi_dmul+0x86>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2480      	movs	r4, #128	; 0x80
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <__aeabi_dmul+0x4cc>)
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	0324      	lsls	r4, r4, #12
 8001ade:	e67e      	b.n	80017de <__aeabi_dmul+0xc2>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	1a40      	subs	r0, r0, r1
 8001ae4:	2838      	cmp	r0, #56	; 0x38
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_dmul+0x3ce>
 8001ae8:	e676      	b.n	80017d8 <__aeabi_dmul+0xbc>
 8001aea:	281f      	cmp	r0, #31
 8001aec:	dd5b      	ble.n	8001ba6 <__aeabi_dmul+0x48a>
 8001aee:	221f      	movs	r2, #31
 8001af0:	0023      	movs	r3, r4
 8001af2:	4252      	negs	r2, r2
 8001af4:	1a51      	subs	r1, r2, r1
 8001af6:	40cb      	lsrs	r3, r1
 8001af8:	0019      	movs	r1, r3
 8001afa:	2820      	cmp	r0, #32
 8001afc:	d003      	beq.n	8001b06 <__aeabi_dmul+0x3ea>
 8001afe:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <__aeabi_dmul+0x4d0>)
 8001b00:	4462      	add	r2, ip
 8001b02:	4094      	lsls	r4, r2
 8001b04:	4325      	orrs	r5, r4
 8001b06:	1e6a      	subs	r2, r5, #1
 8001b08:	4195      	sbcs	r5, r2
 8001b0a:	002a      	movs	r2, r5
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	2107      	movs	r1, #7
 8001b10:	000d      	movs	r5, r1
 8001b12:	2400      	movs	r4, #0
 8001b14:	4015      	ands	r5, r2
 8001b16:	4211      	tst	r1, r2
 8001b18:	d05b      	beq.n	8001bd2 <__aeabi_dmul+0x4b6>
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	4011      	ands	r1, r2
 8001b20:	2904      	cmp	r1, #4
 8001b22:	d053      	beq.n	8001bcc <__aeabi_dmul+0x4b0>
 8001b24:	1d11      	adds	r1, r2, #4
 8001b26:	4291      	cmp	r1, r2
 8001b28:	4192      	sbcs	r2, r2
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	18a4      	adds	r4, r4, r2
 8001b2e:	000a      	movs	r2, r1
 8001b30:	0223      	lsls	r3, r4, #8
 8001b32:	d54b      	bpl.n	8001bcc <__aeabi_dmul+0x4b0>
 8001b34:	2201      	movs	r2, #1
 8001b36:	2400      	movs	r4, #0
 8001b38:	2500      	movs	r5, #0
 8001b3a:	e650      	b.n	80017de <__aeabi_dmul+0xc2>
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	031b      	lsls	r3, r3, #12
 8001b40:	421c      	tst	r4, r3
 8001b42:	d009      	beq.n	8001b58 <__aeabi_dmul+0x43c>
 8001b44:	421e      	tst	r6, r3
 8001b46:	d107      	bne.n	8001b58 <__aeabi_dmul+0x43c>
 8001b48:	4333      	orrs	r3, r6
 8001b4a:	031c      	lsls	r4, r3, #12
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	0015      	movs	r5, r2
 8001b50:	0b24      	lsrs	r4, r4, #12
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <__aeabi_dmul+0x4cc>)
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	e642      	b.n	80017de <__aeabi_dmul+0xc2>
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	4314      	orrs	r4, r2
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <__aeabi_dmul+0x4cc>)
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	9701      	str	r7, [sp, #4]
 8001b66:	e63a      	b.n	80017de <__aeabi_dmul+0xc2>
 8001b68:	f000 fc80 	bl	800246c <__clzsi2>
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	0002      	movs	r2, r0
 8001b70:	3115      	adds	r1, #21
 8001b72:	3220      	adds	r2, #32
 8001b74:	291c      	cmp	r1, #28
 8001b76:	dc00      	bgt.n	8001b7a <__aeabi_dmul+0x45e>
 8001b78:	e74b      	b.n	8001a12 <__aeabi_dmul+0x2f6>
 8001b7a:	0034      	movs	r4, r6
 8001b7c:	3808      	subs	r0, #8
 8001b7e:	2500      	movs	r5, #0
 8001b80:	4084      	lsls	r4, r0
 8001b82:	e750      	b.n	8001a26 <__aeabi_dmul+0x30a>
 8001b84:	f000 fc72 	bl	800246c <__clzsi2>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	3215      	adds	r2, #21
 8001b8e:	3020      	adds	r0, #32
 8001b90:	2a1c      	cmp	r2, #28
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dmul+0x47a>
 8001b94:	e71e      	b.n	80019d4 <__aeabi_dmul+0x2b8>
 8001b96:	4656      	mov	r6, sl
 8001b98:	3b08      	subs	r3, #8
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	409e      	lsls	r6, r3
 8001b9e:	e723      	b.n	80019e8 <__aeabi_dmul+0x2cc>
 8001ba0:	9b00      	ldr	r3, [sp, #0]
 8001ba2:	469c      	mov	ip, r3
 8001ba4:	e6e6      	b.n	8001974 <__aeabi_dmul+0x258>
 8001ba6:	4912      	ldr	r1, [pc, #72]	; (8001bf0 <__aeabi_dmul+0x4d4>)
 8001ba8:	0022      	movs	r2, r4
 8001baa:	4461      	add	r1, ip
 8001bac:	002e      	movs	r6, r5
 8001bae:	408d      	lsls	r5, r1
 8001bb0:	408a      	lsls	r2, r1
 8001bb2:	40c6      	lsrs	r6, r0
 8001bb4:	1e69      	subs	r1, r5, #1
 8001bb6:	418d      	sbcs	r5, r1
 8001bb8:	4332      	orrs	r2, r6
 8001bba:	432a      	orrs	r2, r5
 8001bbc:	40c4      	lsrs	r4, r0
 8001bbe:	0753      	lsls	r3, r2, #29
 8001bc0:	d0b6      	beq.n	8001b30 <__aeabi_dmul+0x414>
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	4011      	ands	r1, r2
 8001bc6:	2904      	cmp	r1, #4
 8001bc8:	d1ac      	bne.n	8001b24 <__aeabi_dmul+0x408>
 8001bca:	e7b1      	b.n	8001b30 <__aeabi_dmul+0x414>
 8001bcc:	0765      	lsls	r5, r4, #29
 8001bce:	0264      	lsls	r4, r4, #9
 8001bd0:	0b24      	lsrs	r4, r4, #12
 8001bd2:	08d2      	lsrs	r2, r2, #3
 8001bd4:	4315      	orrs	r5, r2
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	e601      	b.n	80017de <__aeabi_dmul+0xc2>
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0312      	lsls	r2, r2, #12
 8001bde:	4314      	orrs	r4, r2
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	4a01      	ldr	r2, [pc, #4]	; (8001be8 <__aeabi_dmul+0x4cc>)
 8001be4:	0b24      	lsrs	r4, r4, #12
 8001be6:	e5fa      	b.n	80017de <__aeabi_dmul+0xc2>
 8001be8:	000007ff 	.word	0x000007ff
 8001bec:	0000043e 	.word	0x0000043e
 8001bf0:	0000041e 	.word	0x0000041e

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	001e      	movs	r6, r3
 8001c02:	0017      	movs	r7, r2
 8001c04:	004a      	lsls	r2, r1, #1
 8001c06:	030b      	lsls	r3, r1, #12
 8001c08:	0d52      	lsrs	r2, r2, #21
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	4690      	mov	r8, r2
 8001c0e:	0f42      	lsrs	r2, r0, #29
 8001c10:	431a      	orrs	r2, r3
 8001c12:	0fcd      	lsrs	r5, r1, #31
 8001c14:	4ccd      	ldr	r4, [pc, #820]	; (8001f4c <__aeabi_dsub+0x358>)
 8001c16:	0331      	lsls	r1, r6, #12
 8001c18:	00c3      	lsls	r3, r0, #3
 8001c1a:	4694      	mov	ip, r2
 8001c1c:	0070      	lsls	r0, r6, #1
 8001c1e:	0f7a      	lsrs	r2, r7, #29
 8001c20:	0a49      	lsrs	r1, r1, #9
 8001c22:	00ff      	lsls	r7, r7, #3
 8001c24:	469a      	mov	sl, r3
 8001c26:	46b9      	mov	r9, r7
 8001c28:	0d40      	lsrs	r0, r0, #21
 8001c2a:	0ff6      	lsrs	r6, r6, #31
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	42a0      	cmp	r0, r4
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x40>
 8001c32:	e0b1      	b.n	8001d98 <__aeabi_dsub+0x1a4>
 8001c34:	2201      	movs	r2, #1
 8001c36:	4056      	eors	r6, r2
 8001c38:	46b3      	mov	fp, r6
 8001c3a:	42b5      	cmp	r5, r6
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x4c>
 8001c3e:	e088      	b.n	8001d52 <__aeabi_dsub+0x15e>
 8001c40:	4642      	mov	r2, r8
 8001c42:	1a12      	subs	r2, r2, r0
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x56>
 8001c48:	e0ae      	b.n	8001da8 <__aeabi_dsub+0x1b4>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0c1      	b.n	8001dd4 <__aeabi_dsub+0x1e0>
 8001c50:	48be      	ldr	r0, [pc, #760]	; (8001f4c <__aeabi_dsub+0x358>)
 8001c52:	4580      	cmp	r8, r0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x64>
 8001c56:	e151      	b.n	8001efc <__aeabi_dsub+0x308>
 8001c58:	2080      	movs	r0, #128	; 0x80
 8001c5a:	0400      	lsls	r0, r0, #16
 8001c5c:	4301      	orrs	r1, r0
 8001c5e:	2a38      	cmp	r2, #56	; 0x38
 8001c60:	dd00      	ble.n	8001c64 <__aeabi_dsub+0x70>
 8001c62:	e17b      	b.n	8001f5c <__aeabi_dsub+0x368>
 8001c64:	2a1f      	cmp	r2, #31
 8001c66:	dd00      	ble.n	8001c6a <__aeabi_dsub+0x76>
 8001c68:	e1ee      	b.n	8002048 <__aeabi_dsub+0x454>
 8001c6a:	2020      	movs	r0, #32
 8001c6c:	003e      	movs	r6, r7
 8001c6e:	1a80      	subs	r0, r0, r2
 8001c70:	000c      	movs	r4, r1
 8001c72:	40d6      	lsrs	r6, r2
 8001c74:	40d1      	lsrs	r1, r2
 8001c76:	4087      	lsls	r7, r0
 8001c78:	4662      	mov	r2, ip
 8001c7a:	4084      	lsls	r4, r0
 8001c7c:	1a52      	subs	r2, r2, r1
 8001c7e:	1e78      	subs	r0, r7, #1
 8001c80:	4187      	sbcs	r7, r0
 8001c82:	4694      	mov	ip, r2
 8001c84:	4334      	orrs	r4, r6
 8001c86:	4327      	orrs	r7, r4
 8001c88:	1bdc      	subs	r4, r3, r7
 8001c8a:	42a3      	cmp	r3, r4
 8001c8c:	419b      	sbcs	r3, r3
 8001c8e:	4662      	mov	r2, ip
 8001c90:	425b      	negs	r3, r3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4699      	mov	r9, r3
 8001c96:	464b      	mov	r3, r9
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	d400      	bmi.n	8001c9e <__aeabi_dsub+0xaa>
 8001c9c:	e118      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	0258      	lsls	r0, r3, #9
 8001ca2:	0a43      	lsrs	r3, r0, #9
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0xba>
 8001cac:	e137      	b.n	8001f1e <__aeabi_dsub+0x32a>
 8001cae:	4648      	mov	r0, r9
 8001cb0:	f000 fbdc 	bl	800246c <__clzsi2>
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	3908      	subs	r1, #8
 8001cb8:	2320      	movs	r3, #32
 8001cba:	0022      	movs	r2, r4
 8001cbc:	4648      	mov	r0, r9
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	40da      	lsrs	r2, r3
 8001cc2:	4088      	lsls	r0, r1
 8001cc4:	408c      	lsls	r4, r1
 8001cc6:	4643      	mov	r3, r8
 8001cc8:	4310      	orrs	r0, r2
 8001cca:	4588      	cmp	r8, r1
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0xdc>
 8001cce:	e136      	b.n	8001f3e <__aeabi_dsub+0x34a>
 8001cd0:	1ac9      	subs	r1, r1, r3
 8001cd2:	1c4b      	adds	r3, r1, #1
 8001cd4:	2b1f      	cmp	r3, #31
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0xe6>
 8001cd8:	e0ea      	b.n	8001eb0 <__aeabi_dsub+0x2bc>
 8001cda:	2220      	movs	r2, #32
 8001cdc:	0026      	movs	r6, r4
 8001cde:	1ad2      	subs	r2, r2, r3
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	4094      	lsls	r4, r2
 8001ce4:	40de      	lsrs	r6, r3
 8001ce6:	40d8      	lsrs	r0, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	4091      	lsls	r1, r2
 8001cec:	1e62      	subs	r2, r4, #1
 8001cee:	4194      	sbcs	r4, r2
 8001cf0:	4681      	mov	r9, r0
 8001cf2:	4698      	mov	r8, r3
 8001cf4:	4331      	orrs	r1, r6
 8001cf6:	430c      	orrs	r4, r1
 8001cf8:	0763      	lsls	r3, r4, #29
 8001cfa:	d009      	beq.n	8001d10 <__aeabi_dsub+0x11c>
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	4023      	ands	r3, r4
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d005      	beq.n	8001d10 <__aeabi_dsub+0x11c>
 8001d04:	1d23      	adds	r3, r4, #4
 8001d06:	42a3      	cmp	r3, r4
 8001d08:	41a4      	sbcs	r4, r4
 8001d0a:	4264      	negs	r4, r4
 8001d0c:	44a1      	add	r9, r4
 8001d0e:	001c      	movs	r4, r3
 8001d10:	464b      	mov	r3, r9
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	d400      	bmi.n	8001d18 <__aeabi_dsub+0x124>
 8001d16:	e0de      	b.n	8001ed6 <__aeabi_dsub+0x2e2>
 8001d18:	4641      	mov	r1, r8
 8001d1a:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <__aeabi_dsub+0x358>)
 8001d1c:	3101      	adds	r1, #1
 8001d1e:	4299      	cmp	r1, r3
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x130>
 8001d22:	e0e7      	b.n	8001ef4 <__aeabi_dsub+0x300>
 8001d24:	464b      	mov	r3, r9
 8001d26:	488a      	ldr	r0, [pc, #552]	; (8001f50 <__aeabi_dsub+0x35c>)
 8001d28:	08e4      	lsrs	r4, r4, #3
 8001d2a:	4003      	ands	r3, r0
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	0549      	lsls	r1, r1, #21
 8001d30:	075b      	lsls	r3, r3, #29
 8001d32:	0240      	lsls	r0, r0, #9
 8001d34:	4323      	orrs	r3, r4
 8001d36:	0d4a      	lsrs	r2, r1, #21
 8001d38:	0b04      	lsrs	r4, r0, #12
 8001d3a:	0512      	lsls	r2, r2, #20
 8001d3c:	07ed      	lsls	r5, r5, #31
 8001d3e:	4322      	orrs	r2, r4
 8001d40:	432a      	orrs	r2, r5
 8001d42:	0018      	movs	r0, r3
 8001d44:	0011      	movs	r1, r2
 8001d46:	bcf0      	pop	{r4, r5, r6, r7}
 8001d48:	46bb      	mov	fp, r7
 8001d4a:	46b2      	mov	sl, r6
 8001d4c:	46a9      	mov	r9, r5
 8001d4e:	46a0      	mov	r8, r4
 8001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d52:	4642      	mov	r2, r8
 8001d54:	1a12      	subs	r2, r2, r0
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	dd52      	ble.n	8001e00 <__aeabi_dsub+0x20c>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x16c>
 8001d5e:	e09c      	b.n	8001e9a <__aeabi_dsub+0x2a6>
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x172>
 8001d64:	e0ca      	b.n	8001efc <__aeabi_dsub+0x308>
 8001d66:	2080      	movs	r0, #128	; 0x80
 8001d68:	0400      	lsls	r0, r0, #16
 8001d6a:	4301      	orrs	r1, r0
 8001d6c:	2a38      	cmp	r2, #56	; 0x38
 8001d6e:	dd00      	ble.n	8001d72 <__aeabi_dsub+0x17e>
 8001d70:	e149      	b.n	8002006 <__aeabi_dsub+0x412>
 8001d72:	2a1f      	cmp	r2, #31
 8001d74:	dc00      	bgt.n	8001d78 <__aeabi_dsub+0x184>
 8001d76:	e197      	b.n	80020a8 <__aeabi_dsub+0x4b4>
 8001d78:	0010      	movs	r0, r2
 8001d7a:	000e      	movs	r6, r1
 8001d7c:	3820      	subs	r0, #32
 8001d7e:	40c6      	lsrs	r6, r0
 8001d80:	2a20      	cmp	r2, #32
 8001d82:	d004      	beq.n	8001d8e <__aeabi_dsub+0x19a>
 8001d84:	2040      	movs	r0, #64	; 0x40
 8001d86:	1a82      	subs	r2, r0, r2
 8001d88:	4091      	lsls	r1, r2
 8001d8a:	430f      	orrs	r7, r1
 8001d8c:	46b9      	mov	r9, r7
 8001d8e:	464c      	mov	r4, r9
 8001d90:	1e62      	subs	r2, r4, #1
 8001d92:	4194      	sbcs	r4, r2
 8001d94:	4334      	orrs	r4, r6
 8001d96:	e13a      	b.n	800200e <__aeabi_dsub+0x41a>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d028      	beq.n	8001df0 <__aeabi_dsub+0x1fc>
 8001d9e:	46b3      	mov	fp, r6
 8001da0:	42b5      	cmp	r5, r6
 8001da2:	d02b      	beq.n	8001dfc <__aeabi_dsub+0x208>
 8001da4:	4a6b      	ldr	r2, [pc, #428]	; (8001f54 <__aeabi_dsub+0x360>)
 8001da6:	4442      	add	r2, r8
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d05d      	beq.n	8001e68 <__aeabi_dsub+0x274>
 8001dac:	4642      	mov	r2, r8
 8001dae:	4644      	mov	r4, r8
 8001db0:	1a82      	subs	r2, r0, r2
 8001db2:	2c00      	cmp	r4, #0
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x1c4>
 8001db6:	e0f5      	b.n	8001fa4 <__aeabi_dsub+0x3b0>
 8001db8:	4665      	mov	r5, ip
 8001dba:	431d      	orrs	r5, r3
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001dbe:	e19c      	b.n	80020fa <__aeabi_dsub+0x506>
 8001dc0:	1e55      	subs	r5, r2, #1
 8001dc2:	2a01      	cmp	r2, #1
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x1d4>
 8001dc6:	e1fb      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001dc8:	4c60      	ldr	r4, [pc, #384]	; (8001f4c <__aeabi_dsub+0x358>)
 8001dca:	42a2      	cmp	r2, r4
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e1bd      	b.n	800214c <__aeabi_dsub+0x558>
 8001dd0:	002a      	movs	r2, r5
 8001dd2:	e0f0      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001dd4:	0008      	movs	r0, r1
 8001dd6:	4338      	orrs	r0, r7
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x1e8>
 8001dda:	e0c3      	b.n	8001f64 <__aeabi_dsub+0x370>
 8001ddc:	1e50      	subs	r0, r2, #1
 8001dde:	2a01      	cmp	r2, #1
 8001de0:	d100      	bne.n	8001de4 <__aeabi_dsub+0x1f0>
 8001de2:	e1a8      	b.n	8002136 <__aeabi_dsub+0x542>
 8001de4:	4c59      	ldr	r4, [pc, #356]	; (8001f4c <__aeabi_dsub+0x358>)
 8001de6:	42a2      	cmp	r2, r4
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x1f8>
 8001dea:	e087      	b.n	8001efc <__aeabi_dsub+0x308>
 8001dec:	0002      	movs	r2, r0
 8001dee:	e736      	b.n	8001c5e <__aeabi_dsub+0x6a>
 8001df0:	2201      	movs	r2, #1
 8001df2:	4056      	eors	r6, r2
 8001df4:	46b3      	mov	fp, r6
 8001df6:	42b5      	cmp	r5, r6
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x208>
 8001dfa:	e721      	b.n	8001c40 <__aeabi_dsub+0x4c>
 8001dfc:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <__aeabi_dsub+0x360>)
 8001dfe:	4442      	add	r2, r8
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x212>
 8001e04:	e0b5      	b.n	8001f72 <__aeabi_dsub+0x37e>
 8001e06:	4642      	mov	r2, r8
 8001e08:	4644      	mov	r4, r8
 8001e0a:	1a82      	subs	r2, r0, r2
 8001e0c:	2c00      	cmp	r4, #0
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x21e>
 8001e10:	e138      	b.n	8002084 <__aeabi_dsub+0x490>
 8001e12:	4e4e      	ldr	r6, [pc, #312]	; (8001f4c <__aeabi_dsub+0x358>)
 8001e14:	42b0      	cmp	r0, r6
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x226>
 8001e18:	e1de      	b.n	80021d8 <__aeabi_dsub+0x5e4>
 8001e1a:	2680      	movs	r6, #128	; 0x80
 8001e1c:	4664      	mov	r4, ip
 8001e1e:	0436      	lsls	r6, r6, #16
 8001e20:	4334      	orrs	r4, r6
 8001e22:	46a4      	mov	ip, r4
 8001e24:	2a38      	cmp	r2, #56	; 0x38
 8001e26:	dd00      	ble.n	8001e2a <__aeabi_dsub+0x236>
 8001e28:	e196      	b.n	8002158 <__aeabi_dsub+0x564>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dd00      	ble.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e224      	b.n	800227a <__aeabi_dsub+0x686>
 8001e30:	2620      	movs	r6, #32
 8001e32:	1ab4      	subs	r4, r6, r2
 8001e34:	46a2      	mov	sl, r4
 8001e36:	4664      	mov	r4, ip
 8001e38:	4656      	mov	r6, sl
 8001e3a:	40b4      	lsls	r4, r6
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	001c      	movs	r4, r3
 8001e40:	464e      	mov	r6, r9
 8001e42:	40d4      	lsrs	r4, r2
 8001e44:	4326      	orrs	r6, r4
 8001e46:	0034      	movs	r4, r6
 8001e48:	4656      	mov	r6, sl
 8001e4a:	40b3      	lsls	r3, r6
 8001e4c:	1e5e      	subs	r6, r3, #1
 8001e4e:	41b3      	sbcs	r3, r6
 8001e50:	431c      	orrs	r4, r3
 8001e52:	4663      	mov	r3, ip
 8001e54:	40d3      	lsrs	r3, r2
 8001e56:	18c9      	adds	r1, r1, r3
 8001e58:	19e4      	adds	r4, r4, r7
 8001e5a:	42bc      	cmp	r4, r7
 8001e5c:	41bf      	sbcs	r7, r7
 8001e5e:	427f      	negs	r7, r7
 8001e60:	46b9      	mov	r9, r7
 8001e62:	4680      	mov	r8, r0
 8001e64:	4489      	add	r9, r1
 8001e66:	e0d8      	b.n	800201a <__aeabi_dsub+0x426>
 8001e68:	4640      	mov	r0, r8
 8001e6a:	4c3b      	ldr	r4, [pc, #236]	; (8001f58 <__aeabi_dsub+0x364>)
 8001e6c:	3001      	adds	r0, #1
 8001e6e:	4220      	tst	r0, r4
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x280>
 8001e72:	e0b4      	b.n	8001fde <__aeabi_dsub+0x3ea>
 8001e74:	4640      	mov	r0, r8
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d000      	beq.n	8001e7c <__aeabi_dsub+0x288>
 8001e7a:	e144      	b.n	8002106 <__aeabi_dsub+0x512>
 8001e7c:	4660      	mov	r0, ip
 8001e7e:	4318      	orrs	r0, r3
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x290>
 8001e82:	e190      	b.n	80021a6 <__aeabi_dsub+0x5b2>
 8001e84:	0008      	movs	r0, r1
 8001e86:	4338      	orrs	r0, r7
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x298>
 8001e8a:	e1aa      	b.n	80021e2 <__aeabi_dsub+0x5ee>
 8001e8c:	4661      	mov	r1, ip
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	0749      	lsls	r1, r1, #29
 8001e92:	430b      	orrs	r3, r1
 8001e94:	4661      	mov	r1, ip
 8001e96:	08cc      	lsrs	r4, r1, #3
 8001e98:	e027      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001e9a:	0008      	movs	r0, r1
 8001e9c:	4338      	orrs	r0, r7
 8001e9e:	d061      	beq.n	8001f64 <__aeabi_dsub+0x370>
 8001ea0:	1e50      	subs	r0, r2, #1
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e139      	b.n	800211c <__aeabi_dsub+0x528>
 8001ea8:	42a2      	cmp	r2, r4
 8001eaa:	d027      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001eac:	0002      	movs	r2, r0
 8001eae:	e75d      	b.n	8001d6c <__aeabi_dsub+0x178>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	391f      	subs	r1, #31
 8001eb4:	40ca      	lsrs	r2, r1
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d003      	beq.n	8001ec4 <__aeabi_dsub+0x2d0>
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4098      	lsls	r0, r3
 8001ec2:	4304      	orrs	r4, r0
 8001ec4:	1e63      	subs	r3, r4, #1
 8001ec6:	419c      	sbcs	r4, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4698      	mov	r8, r3
 8001ece:	430c      	orrs	r4, r1
 8001ed0:	0763      	lsls	r3, r4, #29
 8001ed2:	d000      	beq.n	8001ed6 <__aeabi_dsub+0x2e2>
 8001ed4:	e712      	b.n	8001cfc <__aeabi_dsub+0x108>
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	464a      	mov	r2, r9
 8001eda:	08e4      	lsrs	r4, r4, #3
 8001edc:	075b      	lsls	r3, r3, #29
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	08d4      	lsrs	r4, r2, #3
 8001ee2:	4642      	mov	r2, r8
 8001ee4:	4919      	ldr	r1, [pc, #100]	; (8001f4c <__aeabi_dsub+0x358>)
 8001ee6:	428a      	cmp	r2, r1
 8001ee8:	d00e      	beq.n	8001f08 <__aeabi_dsub+0x314>
 8001eea:	0324      	lsls	r4, r4, #12
 8001eec:	0552      	lsls	r2, r2, #21
 8001eee:	0b24      	lsrs	r4, r4, #12
 8001ef0:	0d52      	lsrs	r2, r2, #21
 8001ef2:	e722      	b.n	8001d3a <__aeabi_dsub+0x146>
 8001ef4:	000a      	movs	r2, r1
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e71e      	b.n	8001d3a <__aeabi_dsub+0x146>
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	4662      	mov	r2, ip
 8001f00:	0752      	lsls	r2, r2, #29
 8001f02:	4313      	orrs	r3, r2
 8001f04:	4662      	mov	r2, ip
 8001f06:	08d4      	lsrs	r4, r2, #3
 8001f08:	001a      	movs	r2, r3
 8001f0a:	4322      	orrs	r2, r4
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x31c>
 8001f0e:	e1fc      	b.n	800230a <__aeabi_dsub+0x716>
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4314      	orrs	r4, r2
 8001f16:	0324      	lsls	r4, r4, #12
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <__aeabi_dsub+0x358>)
 8001f1a:	0b24      	lsrs	r4, r4, #12
 8001f1c:	e70d      	b.n	8001d3a <__aeabi_dsub+0x146>
 8001f1e:	0020      	movs	r0, r4
 8001f20:	f000 faa4 	bl	800246c <__clzsi2>
 8001f24:	0001      	movs	r1, r0
 8001f26:	3118      	adds	r1, #24
 8001f28:	291f      	cmp	r1, #31
 8001f2a:	dc00      	bgt.n	8001f2e <__aeabi_dsub+0x33a>
 8001f2c:	e6c4      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8001f2e:	3808      	subs	r0, #8
 8001f30:	4084      	lsls	r4, r0
 8001f32:	4643      	mov	r3, r8
 8001f34:	0020      	movs	r0, r4
 8001f36:	2400      	movs	r4, #0
 8001f38:	4588      	cmp	r8, r1
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x34a>
 8001f3c:	e6c8      	b.n	8001cd0 <__aeabi_dsub+0xdc>
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__aeabi_dsub+0x35c>)
 8001f40:	1a5b      	subs	r3, r3, r1
 8001f42:	4010      	ands	r0, r2
 8001f44:	4698      	mov	r8, r3
 8001f46:	4681      	mov	r9, r0
 8001f48:	e6d6      	b.n	8001cf8 <__aeabi_dsub+0x104>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000007ff 	.word	0x000007ff
 8001f50:	ff7fffff 	.word	0xff7fffff
 8001f54:	fffff801 	.word	0xfffff801
 8001f58:	000007fe 	.word	0x000007fe
 8001f5c:	430f      	orrs	r7, r1
 8001f5e:	1e7a      	subs	r2, r7, #1
 8001f60:	4197      	sbcs	r7, r2
 8001f62:	e691      	b.n	8001c88 <__aeabi_dsub+0x94>
 8001f64:	4661      	mov	r1, ip
 8001f66:	08db      	lsrs	r3, r3, #3
 8001f68:	0749      	lsls	r1, r1, #29
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	4661      	mov	r1, ip
 8001f6e:	08cc      	lsrs	r4, r1, #3
 8001f70:	e7b8      	b.n	8001ee4 <__aeabi_dsub+0x2f0>
 8001f72:	4640      	mov	r0, r8
 8001f74:	4cd3      	ldr	r4, [pc, #844]	; (80022c4 <__aeabi_dsub+0x6d0>)
 8001f76:	3001      	adds	r0, #1
 8001f78:	4220      	tst	r0, r4
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x38a>
 8001f7c:	e0a2      	b.n	80020c4 <__aeabi_dsub+0x4d0>
 8001f7e:	4640      	mov	r0, r8
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x392>
 8001f84:	e101      	b.n	800218a <__aeabi_dsub+0x596>
 8001f86:	4660      	mov	r0, ip
 8001f88:	4318      	orrs	r0, r3
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x39a>
 8001f8c:	e15e      	b.n	800224c <__aeabi_dsub+0x658>
 8001f8e:	0008      	movs	r0, r1
 8001f90:	4338      	orrs	r0, r7
 8001f92:	d000      	beq.n	8001f96 <__aeabi_dsub+0x3a2>
 8001f94:	e15f      	b.n	8002256 <__aeabi_dsub+0x662>
 8001f96:	4661      	mov	r1, ip
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	0749      	lsls	r1, r1, #29
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	4661      	mov	r1, ip
 8001fa0:	08cc      	lsrs	r4, r1, #3
 8001fa2:	e7a2      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001fa4:	4dc8      	ldr	r5, [pc, #800]	; (80022c8 <__aeabi_dsub+0x6d4>)
 8001fa6:	42a8      	cmp	r0, r5
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e0cf      	b.n	800214c <__aeabi_dsub+0x558>
 8001fac:	2580      	movs	r5, #128	; 0x80
 8001fae:	4664      	mov	r4, ip
 8001fb0:	042d      	lsls	r5, r5, #16
 8001fb2:	432c      	orrs	r4, r5
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	2a38      	cmp	r2, #56	; 0x38
 8001fb8:	dc56      	bgt.n	8002068 <__aeabi_dsub+0x474>
 8001fba:	2a1f      	cmp	r2, #31
 8001fbc:	dd00      	ble.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001fbe:	e0d1      	b.n	8002164 <__aeabi_dsub+0x570>
 8001fc0:	2520      	movs	r5, #32
 8001fc2:	001e      	movs	r6, r3
 8001fc4:	1aad      	subs	r5, r5, r2
 8001fc6:	4664      	mov	r4, ip
 8001fc8:	40ab      	lsls	r3, r5
 8001fca:	40ac      	lsls	r4, r5
 8001fcc:	40d6      	lsrs	r6, r2
 8001fce:	1e5d      	subs	r5, r3, #1
 8001fd0:	41ab      	sbcs	r3, r5
 8001fd2:	4334      	orrs	r4, r6
 8001fd4:	4323      	orrs	r3, r4
 8001fd6:	4664      	mov	r4, ip
 8001fd8:	40d4      	lsrs	r4, r2
 8001fda:	1b09      	subs	r1, r1, r4
 8001fdc:	e049      	b.n	8002072 <__aeabi_dsub+0x47e>
 8001fde:	4660      	mov	r0, ip
 8001fe0:	1bdc      	subs	r4, r3, r7
 8001fe2:	1a46      	subs	r6, r0, r1
 8001fe4:	42a3      	cmp	r3, r4
 8001fe6:	4180      	sbcs	r0, r0
 8001fe8:	4240      	negs	r0, r0
 8001fea:	4681      	mov	r9, r0
 8001fec:	0030      	movs	r0, r6
 8001fee:	464e      	mov	r6, r9
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	4681      	mov	r9, r0
 8001ff4:	0200      	lsls	r0, r0, #8
 8001ff6:	d476      	bmi.n	80020e6 <__aeabi_dsub+0x4f2>
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	d000      	beq.n	8002000 <__aeabi_dsub+0x40c>
 8001ffe:	e652      	b.n	8001ca6 <__aeabi_dsub+0xb2>
 8002000:	2400      	movs	r4, #0
 8002002:	2500      	movs	r5, #0
 8002004:	e771      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8002006:	4339      	orrs	r1, r7
 8002008:	000c      	movs	r4, r1
 800200a:	1e62      	subs	r2, r4, #1
 800200c:	4194      	sbcs	r4, r2
 800200e:	18e4      	adds	r4, r4, r3
 8002010:	429c      	cmp	r4, r3
 8002012:	419b      	sbcs	r3, r3
 8002014:	425b      	negs	r3, r3
 8002016:	4463      	add	r3, ip
 8002018:	4699      	mov	r9, r3
 800201a:	464b      	mov	r3, r9
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	d400      	bmi.n	8002022 <__aeabi_dsub+0x42e>
 8002020:	e756      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 8002022:	2301      	movs	r3, #1
 8002024:	469c      	mov	ip, r3
 8002026:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <__aeabi_dsub+0x6d4>)
 8002028:	44e0      	add	r8, ip
 800202a:	4598      	cmp	r8, r3
 800202c:	d038      	beq.n	80020a0 <__aeabi_dsub+0x4ac>
 800202e:	464b      	mov	r3, r9
 8002030:	48a6      	ldr	r0, [pc, #664]	; (80022cc <__aeabi_dsub+0x6d8>)
 8002032:	2201      	movs	r2, #1
 8002034:	4003      	ands	r3, r0
 8002036:	0018      	movs	r0, r3
 8002038:	0863      	lsrs	r3, r4, #1
 800203a:	4014      	ands	r4, r2
 800203c:	431c      	orrs	r4, r3
 800203e:	07c3      	lsls	r3, r0, #31
 8002040:	431c      	orrs	r4, r3
 8002042:	0843      	lsrs	r3, r0, #1
 8002044:	4699      	mov	r9, r3
 8002046:	e657      	b.n	8001cf8 <__aeabi_dsub+0x104>
 8002048:	0010      	movs	r0, r2
 800204a:	000e      	movs	r6, r1
 800204c:	3820      	subs	r0, #32
 800204e:	40c6      	lsrs	r6, r0
 8002050:	2a20      	cmp	r2, #32
 8002052:	d004      	beq.n	800205e <__aeabi_dsub+0x46a>
 8002054:	2040      	movs	r0, #64	; 0x40
 8002056:	1a82      	subs	r2, r0, r2
 8002058:	4091      	lsls	r1, r2
 800205a:	430f      	orrs	r7, r1
 800205c:	46b9      	mov	r9, r7
 800205e:	464f      	mov	r7, r9
 8002060:	1e7a      	subs	r2, r7, #1
 8002062:	4197      	sbcs	r7, r2
 8002064:	4337      	orrs	r7, r6
 8002066:	e60f      	b.n	8001c88 <__aeabi_dsub+0x94>
 8002068:	4662      	mov	r2, ip
 800206a:	431a      	orrs	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	4193      	sbcs	r3, r2
 8002072:	1afc      	subs	r4, r7, r3
 8002074:	42a7      	cmp	r7, r4
 8002076:	41bf      	sbcs	r7, r7
 8002078:	427f      	negs	r7, r7
 800207a:	1bcb      	subs	r3, r1, r7
 800207c:	4699      	mov	r9, r3
 800207e:	465d      	mov	r5, fp
 8002080:	4680      	mov	r8, r0
 8002082:	e608      	b.n	8001c96 <__aeabi_dsub+0xa2>
 8002084:	4666      	mov	r6, ip
 8002086:	431e      	orrs	r6, r3
 8002088:	d100      	bne.n	800208c <__aeabi_dsub+0x498>
 800208a:	e0be      	b.n	800220a <__aeabi_dsub+0x616>
 800208c:	1e56      	subs	r6, r2, #1
 800208e:	2a01      	cmp	r2, #1
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x4a0>
 8002092:	e109      	b.n	80022a8 <__aeabi_dsub+0x6b4>
 8002094:	4c8c      	ldr	r4, [pc, #560]	; (80022c8 <__aeabi_dsub+0x6d4>)
 8002096:	42a2      	cmp	r2, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x4a8>
 800209a:	e119      	b.n	80022d0 <__aeabi_dsub+0x6dc>
 800209c:	0032      	movs	r2, r6
 800209e:	e6c1      	b.n	8001e24 <__aeabi_dsub+0x230>
 80020a0:	4642      	mov	r2, r8
 80020a2:	2400      	movs	r4, #0
 80020a4:	2300      	movs	r3, #0
 80020a6:	e648      	b.n	8001d3a <__aeabi_dsub+0x146>
 80020a8:	2020      	movs	r0, #32
 80020aa:	000c      	movs	r4, r1
 80020ac:	1a80      	subs	r0, r0, r2
 80020ae:	003e      	movs	r6, r7
 80020b0:	4087      	lsls	r7, r0
 80020b2:	4084      	lsls	r4, r0
 80020b4:	40d6      	lsrs	r6, r2
 80020b6:	1e78      	subs	r0, r7, #1
 80020b8:	4187      	sbcs	r7, r0
 80020ba:	40d1      	lsrs	r1, r2
 80020bc:	4334      	orrs	r4, r6
 80020be:	433c      	orrs	r4, r7
 80020c0:	448c      	add	ip, r1
 80020c2:	e7a4      	b.n	800200e <__aeabi_dsub+0x41a>
 80020c4:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <__aeabi_dsub+0x6d4>)
 80020c6:	4290      	cmp	r0, r2
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x4d8>
 80020ca:	e0e9      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 80020cc:	19df      	adds	r7, r3, r7
 80020ce:	429f      	cmp	r7, r3
 80020d0:	419b      	sbcs	r3, r3
 80020d2:	4461      	add	r1, ip
 80020d4:	425b      	negs	r3, r3
 80020d6:	18c9      	adds	r1, r1, r3
 80020d8:	07cc      	lsls	r4, r1, #31
 80020da:	087f      	lsrs	r7, r7, #1
 80020dc:	084b      	lsrs	r3, r1, #1
 80020de:	4699      	mov	r9, r3
 80020e0:	4680      	mov	r8, r0
 80020e2:	433c      	orrs	r4, r7
 80020e4:	e6f4      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 80020e6:	1afc      	subs	r4, r7, r3
 80020e8:	42a7      	cmp	r7, r4
 80020ea:	41bf      	sbcs	r7, r7
 80020ec:	4663      	mov	r3, ip
 80020ee:	427f      	negs	r7, r7
 80020f0:	1ac9      	subs	r1, r1, r3
 80020f2:	1bcb      	subs	r3, r1, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	465d      	mov	r5, fp
 80020f8:	e5d5      	b.n	8001ca6 <__aeabi_dsub+0xb2>
 80020fa:	08ff      	lsrs	r7, r7, #3
 80020fc:	074b      	lsls	r3, r1, #29
 80020fe:	465d      	mov	r5, fp
 8002100:	433b      	orrs	r3, r7
 8002102:	08cc      	lsrs	r4, r1, #3
 8002104:	e6ee      	b.n	8001ee4 <__aeabi_dsub+0x2f0>
 8002106:	4662      	mov	r2, ip
 8002108:	431a      	orrs	r2, r3
 800210a:	d000      	beq.n	800210e <__aeabi_dsub+0x51a>
 800210c:	e082      	b.n	8002214 <__aeabi_dsub+0x620>
 800210e:	000b      	movs	r3, r1
 8002110:	433b      	orrs	r3, r7
 8002112:	d11b      	bne.n	800214c <__aeabi_dsub+0x558>
 8002114:	2480      	movs	r4, #128	; 0x80
 8002116:	2500      	movs	r5, #0
 8002118:	0324      	lsls	r4, r4, #12
 800211a:	e6f9      	b.n	8001f10 <__aeabi_dsub+0x31c>
 800211c:	19dc      	adds	r4, r3, r7
 800211e:	429c      	cmp	r4, r3
 8002120:	419b      	sbcs	r3, r3
 8002122:	4461      	add	r1, ip
 8002124:	4689      	mov	r9, r1
 8002126:	425b      	negs	r3, r3
 8002128:	4499      	add	r9, r3
 800212a:	464b      	mov	r3, r9
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	d444      	bmi.n	80021ba <__aeabi_dsub+0x5c6>
 8002130:	2301      	movs	r3, #1
 8002132:	4698      	mov	r8, r3
 8002134:	e6cc      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 8002136:	1bdc      	subs	r4, r3, r7
 8002138:	4662      	mov	r2, ip
 800213a:	42a3      	cmp	r3, r4
 800213c:	419b      	sbcs	r3, r3
 800213e:	1a51      	subs	r1, r2, r1
 8002140:	425b      	negs	r3, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	4699      	mov	r9, r3
 8002146:	2301      	movs	r3, #1
 8002148:	4698      	mov	r8, r3
 800214a:	e5a4      	b.n	8001c96 <__aeabi_dsub+0xa2>
 800214c:	08ff      	lsrs	r7, r7, #3
 800214e:	074b      	lsls	r3, r1, #29
 8002150:	465d      	mov	r5, fp
 8002152:	433b      	orrs	r3, r7
 8002154:	08cc      	lsrs	r4, r1, #3
 8002156:	e6d7      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002158:	4662      	mov	r2, ip
 800215a:	431a      	orrs	r2, r3
 800215c:	0014      	movs	r4, r2
 800215e:	1e63      	subs	r3, r4, #1
 8002160:	419c      	sbcs	r4, r3
 8002162:	e679      	b.n	8001e58 <__aeabi_dsub+0x264>
 8002164:	0015      	movs	r5, r2
 8002166:	4664      	mov	r4, ip
 8002168:	3d20      	subs	r5, #32
 800216a:	40ec      	lsrs	r4, r5
 800216c:	46a0      	mov	r8, r4
 800216e:	2a20      	cmp	r2, #32
 8002170:	d005      	beq.n	800217e <__aeabi_dsub+0x58a>
 8002172:	2540      	movs	r5, #64	; 0x40
 8002174:	4664      	mov	r4, ip
 8002176:	1aaa      	subs	r2, r5, r2
 8002178:	4094      	lsls	r4, r2
 800217a:	4323      	orrs	r3, r4
 800217c:	469a      	mov	sl, r3
 800217e:	4654      	mov	r4, sl
 8002180:	1e63      	subs	r3, r4, #1
 8002182:	419c      	sbcs	r4, r3
 8002184:	4643      	mov	r3, r8
 8002186:	4323      	orrs	r3, r4
 8002188:	e773      	b.n	8002072 <__aeabi_dsub+0x47e>
 800218a:	4662      	mov	r2, ip
 800218c:	431a      	orrs	r2, r3
 800218e:	d023      	beq.n	80021d8 <__aeabi_dsub+0x5e4>
 8002190:	000a      	movs	r2, r1
 8002192:	433a      	orrs	r2, r7
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x5a4>
 8002196:	e0a0      	b.n	80022da <__aeabi_dsub+0x6e6>
 8002198:	4662      	mov	r2, ip
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	0752      	lsls	r2, r2, #29
 800219e:	4313      	orrs	r3, r2
 80021a0:	4662      	mov	r2, ip
 80021a2:	08d4      	lsrs	r4, r2, #3
 80021a4:	e6b0      	b.n	8001f08 <__aeabi_dsub+0x314>
 80021a6:	000b      	movs	r3, r1
 80021a8:	433b      	orrs	r3, r7
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x5ba>
 80021ac:	e728      	b.n	8002000 <__aeabi_dsub+0x40c>
 80021ae:	08ff      	lsrs	r7, r7, #3
 80021b0:	074b      	lsls	r3, r1, #29
 80021b2:	465d      	mov	r5, fp
 80021b4:	433b      	orrs	r3, r7
 80021b6:	08cc      	lsrs	r4, r1, #3
 80021b8:	e697      	b.n	8001eea <__aeabi_dsub+0x2f6>
 80021ba:	2302      	movs	r3, #2
 80021bc:	4698      	mov	r8, r3
 80021be:	e736      	b.n	800202e <__aeabi_dsub+0x43a>
 80021c0:	1afc      	subs	r4, r7, r3
 80021c2:	42a7      	cmp	r7, r4
 80021c4:	41bf      	sbcs	r7, r7
 80021c6:	4663      	mov	r3, ip
 80021c8:	427f      	negs	r7, r7
 80021ca:	1ac9      	subs	r1, r1, r3
 80021cc:	1bcb      	subs	r3, r1, r7
 80021ce:	4699      	mov	r9, r3
 80021d0:	2301      	movs	r3, #1
 80021d2:	465d      	mov	r5, fp
 80021d4:	4698      	mov	r8, r3
 80021d6:	e55e      	b.n	8001c96 <__aeabi_dsub+0xa2>
 80021d8:	074b      	lsls	r3, r1, #29
 80021da:	08ff      	lsrs	r7, r7, #3
 80021dc:	433b      	orrs	r3, r7
 80021de:	08cc      	lsrs	r4, r1, #3
 80021e0:	e692      	b.n	8001f08 <__aeabi_dsub+0x314>
 80021e2:	1bdc      	subs	r4, r3, r7
 80021e4:	4660      	mov	r0, ip
 80021e6:	42a3      	cmp	r3, r4
 80021e8:	41b6      	sbcs	r6, r6
 80021ea:	1a40      	subs	r0, r0, r1
 80021ec:	4276      	negs	r6, r6
 80021ee:	1b80      	subs	r0, r0, r6
 80021f0:	4681      	mov	r9, r0
 80021f2:	0200      	lsls	r0, r0, #8
 80021f4:	d560      	bpl.n	80022b8 <__aeabi_dsub+0x6c4>
 80021f6:	1afc      	subs	r4, r7, r3
 80021f8:	42a7      	cmp	r7, r4
 80021fa:	41bf      	sbcs	r7, r7
 80021fc:	4663      	mov	r3, ip
 80021fe:	427f      	negs	r7, r7
 8002200:	1ac9      	subs	r1, r1, r3
 8002202:	1bcb      	subs	r3, r1, r7
 8002204:	4699      	mov	r9, r3
 8002206:	465d      	mov	r5, fp
 8002208:	e576      	b.n	8001cf8 <__aeabi_dsub+0x104>
 800220a:	08ff      	lsrs	r7, r7, #3
 800220c:	074b      	lsls	r3, r1, #29
 800220e:	433b      	orrs	r3, r7
 8002210:	08cc      	lsrs	r4, r1, #3
 8002212:	e667      	b.n	8001ee4 <__aeabi_dsub+0x2f0>
 8002214:	000a      	movs	r2, r1
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	433a      	orrs	r2, r7
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x62a>
 800221c:	e66f      	b.n	8001efe <__aeabi_dsub+0x30a>
 800221e:	4662      	mov	r2, ip
 8002220:	0752      	lsls	r2, r2, #29
 8002222:	4313      	orrs	r3, r2
 8002224:	4662      	mov	r2, ip
 8002226:	08d4      	lsrs	r4, r2, #3
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0312      	lsls	r2, r2, #12
 800222c:	4214      	tst	r4, r2
 800222e:	d007      	beq.n	8002240 <__aeabi_dsub+0x64c>
 8002230:	08c8      	lsrs	r0, r1, #3
 8002232:	4210      	tst	r0, r2
 8002234:	d104      	bne.n	8002240 <__aeabi_dsub+0x64c>
 8002236:	465d      	mov	r5, fp
 8002238:	0004      	movs	r4, r0
 800223a:	08fb      	lsrs	r3, r7, #3
 800223c:	0749      	lsls	r1, r1, #29
 800223e:	430b      	orrs	r3, r1
 8002240:	0f5a      	lsrs	r2, r3, #29
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	0752      	lsls	r2, r2, #29
 8002248:	4313      	orrs	r3, r2
 800224a:	e65d      	b.n	8001f08 <__aeabi_dsub+0x314>
 800224c:	074b      	lsls	r3, r1, #29
 800224e:	08ff      	lsrs	r7, r7, #3
 8002250:	433b      	orrs	r3, r7
 8002252:	08cc      	lsrs	r4, r1, #3
 8002254:	e649      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8002256:	19dc      	adds	r4, r3, r7
 8002258:	429c      	cmp	r4, r3
 800225a:	419b      	sbcs	r3, r3
 800225c:	4461      	add	r1, ip
 800225e:	4689      	mov	r9, r1
 8002260:	425b      	negs	r3, r3
 8002262:	4499      	add	r9, r3
 8002264:	464b      	mov	r3, r9
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	d400      	bmi.n	800226c <__aeabi_dsub+0x678>
 800226a:	e631      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 800226c:	464a      	mov	r2, r9
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <__aeabi_dsub+0x6d8>)
 8002270:	401a      	ands	r2, r3
 8002272:	2301      	movs	r3, #1
 8002274:	4691      	mov	r9, r2
 8002276:	4698      	mov	r8, r3
 8002278:	e62a      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 800227a:	0016      	movs	r6, r2
 800227c:	4664      	mov	r4, ip
 800227e:	3e20      	subs	r6, #32
 8002280:	40f4      	lsrs	r4, r6
 8002282:	46a0      	mov	r8, r4
 8002284:	2a20      	cmp	r2, #32
 8002286:	d005      	beq.n	8002294 <__aeabi_dsub+0x6a0>
 8002288:	2640      	movs	r6, #64	; 0x40
 800228a:	4664      	mov	r4, ip
 800228c:	1ab2      	subs	r2, r6, r2
 800228e:	4094      	lsls	r4, r2
 8002290:	4323      	orrs	r3, r4
 8002292:	469a      	mov	sl, r3
 8002294:	4654      	mov	r4, sl
 8002296:	1e63      	subs	r3, r4, #1
 8002298:	419c      	sbcs	r4, r3
 800229a:	4643      	mov	r3, r8
 800229c:	431c      	orrs	r4, r3
 800229e:	e5db      	b.n	8001e58 <__aeabi_dsub+0x264>
 80022a0:	0002      	movs	r2, r0
 80022a2:	2400      	movs	r4, #0
 80022a4:	2300      	movs	r3, #0
 80022a6:	e548      	b.n	8001d3a <__aeabi_dsub+0x146>
 80022a8:	19dc      	adds	r4, r3, r7
 80022aa:	42bc      	cmp	r4, r7
 80022ac:	41bf      	sbcs	r7, r7
 80022ae:	4461      	add	r1, ip
 80022b0:	4689      	mov	r9, r1
 80022b2:	427f      	negs	r7, r7
 80022b4:	44b9      	add	r9, r7
 80022b6:	e738      	b.n	800212a <__aeabi_dsub+0x536>
 80022b8:	464b      	mov	r3, r9
 80022ba:	4323      	orrs	r3, r4
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x6cc>
 80022be:	e69f      	b.n	8002000 <__aeabi_dsub+0x40c>
 80022c0:	e606      	b.n	8001ed0 <__aeabi_dsub+0x2dc>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	000007fe 	.word	0x000007fe
 80022c8:	000007ff 	.word	0x000007ff
 80022cc:	ff7fffff 	.word	0xff7fffff
 80022d0:	08ff      	lsrs	r7, r7, #3
 80022d2:	074b      	lsls	r3, r1, #29
 80022d4:	433b      	orrs	r3, r7
 80022d6:	08cc      	lsrs	r4, r1, #3
 80022d8:	e616      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022da:	4662      	mov	r2, ip
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	0752      	lsls	r2, r2, #29
 80022e0:	4313      	orrs	r3, r2
 80022e2:	4662      	mov	r2, ip
 80022e4:	08d4      	lsrs	r4, r2, #3
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	0312      	lsls	r2, r2, #12
 80022ea:	4214      	tst	r4, r2
 80022ec:	d007      	beq.n	80022fe <__aeabi_dsub+0x70a>
 80022ee:	08c8      	lsrs	r0, r1, #3
 80022f0:	4210      	tst	r0, r2
 80022f2:	d104      	bne.n	80022fe <__aeabi_dsub+0x70a>
 80022f4:	465d      	mov	r5, fp
 80022f6:	0004      	movs	r4, r0
 80022f8:	08fb      	lsrs	r3, r7, #3
 80022fa:	0749      	lsls	r1, r1, #29
 80022fc:	430b      	orrs	r3, r1
 80022fe:	0f5a      	lsrs	r2, r3, #29
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	0752      	lsls	r2, r2, #29
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	4313      	orrs	r3, r2
 8002308:	e5fe      	b.n	8001f08 <__aeabi_dsub+0x314>
 800230a:	2300      	movs	r3, #0
 800230c:	4a01      	ldr	r2, [pc, #4]	; (8002314 <__aeabi_dsub+0x720>)
 800230e:	001c      	movs	r4, r3
 8002310:	e513      	b.n	8001d3a <__aeabi_dsub+0x146>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff

08002318 <__aeabi_dcmpun>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	0005      	movs	r5, r0
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <__aeabi_dcmpun+0x38>)
 800231e:	031c      	lsls	r4, r3, #12
 8002320:	0016      	movs	r6, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	030a      	lsls	r2, r1, #12
 8002326:	0049      	lsls	r1, r1, #1
 8002328:	0b12      	lsrs	r2, r2, #12
 800232a:	0d49      	lsrs	r1, r1, #21
 800232c:	0b24      	lsrs	r4, r4, #12
 800232e:	0d5b      	lsrs	r3, r3, #21
 8002330:	4281      	cmp	r1, r0
 8002332:	d008      	beq.n	8002346 <__aeabi_dcmpun+0x2e>
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <__aeabi_dcmpun+0x38>)
 8002336:	2000      	movs	r0, #0
 8002338:	4293      	cmp	r3, r2
 800233a:	d103      	bne.n	8002344 <__aeabi_dcmpun+0x2c>
 800233c:	0020      	movs	r0, r4
 800233e:	4330      	orrs	r0, r6
 8002340:	1e43      	subs	r3, r0, #1
 8002342:	4198      	sbcs	r0, r3
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	432a      	orrs	r2, r5
 800234a:	d1fb      	bne.n	8002344 <__aeabi_dcmpun+0x2c>
 800234c:	e7f2      	b.n	8002334 <__aeabi_dcmpun+0x1c>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000a      	movs	r2, r1
 8002356:	b530      	push	{r4, r5, lr}
 8002358:	4c13      	ldr	r4, [pc, #76]	; (80023a8 <__aeabi_d2iz+0x54>)
 800235a:	0053      	lsls	r3, r2, #1
 800235c:	0309      	lsls	r1, r1, #12
 800235e:	0005      	movs	r5, r0
 8002360:	0b09      	lsrs	r1, r1, #12
 8002362:	2000      	movs	r0, #0
 8002364:	0d5b      	lsrs	r3, r3, #21
 8002366:	0fd2      	lsrs	r2, r2, #31
 8002368:	42a3      	cmp	r3, r4
 800236a:	dd04      	ble.n	8002376 <__aeabi_d2iz+0x22>
 800236c:	480f      	ldr	r0, [pc, #60]	; (80023ac <__aeabi_d2iz+0x58>)
 800236e:	4283      	cmp	r3, r0
 8002370:	dd02      	ble.n	8002378 <__aeabi_d2iz+0x24>
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <__aeabi_d2iz+0x5c>)
 8002374:	18d0      	adds	r0, r2, r3
 8002376:	bd30      	pop	{r4, r5, pc}
 8002378:	2080      	movs	r0, #128	; 0x80
 800237a:	0340      	lsls	r0, r0, #13
 800237c:	4301      	orrs	r1, r0
 800237e:	480d      	ldr	r0, [pc, #52]	; (80023b4 <__aeabi_d2iz+0x60>)
 8002380:	1ac0      	subs	r0, r0, r3
 8002382:	281f      	cmp	r0, #31
 8002384:	dd08      	ble.n	8002398 <__aeabi_d2iz+0x44>
 8002386:	480c      	ldr	r0, [pc, #48]	; (80023b8 <__aeabi_d2iz+0x64>)
 8002388:	1ac3      	subs	r3, r0, r3
 800238a:	40d9      	lsrs	r1, r3
 800238c:	000b      	movs	r3, r1
 800238e:	4258      	negs	r0, r3
 8002390:	2a00      	cmp	r2, #0
 8002392:	d1f0      	bne.n	8002376 <__aeabi_d2iz+0x22>
 8002394:	0018      	movs	r0, r3
 8002396:	e7ee      	b.n	8002376 <__aeabi_d2iz+0x22>
 8002398:	4c08      	ldr	r4, [pc, #32]	; (80023bc <__aeabi_d2iz+0x68>)
 800239a:	40c5      	lsrs	r5, r0
 800239c:	46a4      	mov	ip, r4
 800239e:	4463      	add	r3, ip
 80023a0:	4099      	lsls	r1, r3
 80023a2:	000b      	movs	r3, r1
 80023a4:	432b      	orrs	r3, r5
 80023a6:	e7f2      	b.n	800238e <__aeabi_d2iz+0x3a>
 80023a8:	000003fe 	.word	0x000003fe
 80023ac:	0000041d 	.word	0x0000041d
 80023b0:	7fffffff 	.word	0x7fffffff
 80023b4:	00000433 	.word	0x00000433
 80023b8:	00000413 	.word	0x00000413
 80023bc:	fffffbed 	.word	0xfffffbed

080023c0 <__aeabi_i2d>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d016      	beq.n	80023f4 <__aeabi_i2d+0x34>
 80023c6:	17c3      	asrs	r3, r0, #31
 80023c8:	18c5      	adds	r5, r0, r3
 80023ca:	405d      	eors	r5, r3
 80023cc:	0fc4      	lsrs	r4, r0, #31
 80023ce:	0028      	movs	r0, r5
 80023d0:	f000 f84c 	bl	800246c <__clzsi2>
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <__aeabi_i2d+0x5c>)
 80023d6:	1a12      	subs	r2, r2, r0
 80023d8:	280a      	cmp	r0, #10
 80023da:	dc16      	bgt.n	800240a <__aeabi_i2d+0x4a>
 80023dc:	0003      	movs	r3, r0
 80023de:	002e      	movs	r6, r5
 80023e0:	3315      	adds	r3, #21
 80023e2:	409e      	lsls	r6, r3
 80023e4:	230b      	movs	r3, #11
 80023e6:	1a18      	subs	r0, r3, r0
 80023e8:	40c5      	lsrs	r5, r0
 80023ea:	0552      	lsls	r2, r2, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	0b2d      	lsrs	r5, r5, #12
 80023f0:	0d53      	lsrs	r3, r2, #21
 80023f2:	e003      	b.n	80023fc <__aeabi_i2d+0x3c>
 80023f4:	2400      	movs	r4, #0
 80023f6:	2300      	movs	r3, #0
 80023f8:	2500      	movs	r5, #0
 80023fa:	2600      	movs	r6, #0
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	432b      	orrs	r3, r5
 8002400:	07e4      	lsls	r4, r4, #31
 8002402:	4323      	orrs	r3, r4
 8002404:	0030      	movs	r0, r6
 8002406:	0019      	movs	r1, r3
 8002408:	bd70      	pop	{r4, r5, r6, pc}
 800240a:	380b      	subs	r0, #11
 800240c:	4085      	lsls	r5, r0
 800240e:	0552      	lsls	r2, r2, #21
 8002410:	032d      	lsls	r5, r5, #12
 8002412:	2600      	movs	r6, #0
 8002414:	0b2d      	lsrs	r5, r5, #12
 8002416:	0d53      	lsrs	r3, r2, #21
 8002418:	e7f0      	b.n	80023fc <__aeabi_i2d+0x3c>
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	0000041e 	.word	0x0000041e

08002420 <__aeabi_ui2d>:
 8002420:	b510      	push	{r4, lr}
 8002422:	1e04      	subs	r4, r0, #0
 8002424:	d010      	beq.n	8002448 <__aeabi_ui2d+0x28>
 8002426:	f000 f821 	bl	800246c <__clzsi2>
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <__aeabi_ui2d+0x48>)
 800242c:	1a1b      	subs	r3, r3, r0
 800242e:	280a      	cmp	r0, #10
 8002430:	dc11      	bgt.n	8002456 <__aeabi_ui2d+0x36>
 8002432:	220b      	movs	r2, #11
 8002434:	0021      	movs	r1, r4
 8002436:	1a12      	subs	r2, r2, r0
 8002438:	40d1      	lsrs	r1, r2
 800243a:	3015      	adds	r0, #21
 800243c:	030a      	lsls	r2, r1, #12
 800243e:	055b      	lsls	r3, r3, #21
 8002440:	4084      	lsls	r4, r0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e001      	b.n	800244c <__aeabi_ui2d+0x2c>
 8002448:	2300      	movs	r3, #0
 800244a:	2200      	movs	r2, #0
 800244c:	051b      	lsls	r3, r3, #20
 800244e:	4313      	orrs	r3, r2
 8002450:	0020      	movs	r0, r4
 8002452:	0019      	movs	r1, r3
 8002454:	bd10      	pop	{r4, pc}
 8002456:	0022      	movs	r2, r4
 8002458:	380b      	subs	r0, #11
 800245a:	4082      	lsls	r2, r0
 800245c:	055b      	lsls	r3, r3, #21
 800245e:	0312      	lsls	r2, r2, #12
 8002460:	2400      	movs	r4, #0
 8002462:	0b12      	lsrs	r2, r2, #12
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	e7f1      	b.n	800244c <__aeabi_ui2d+0x2c>
 8002468:	0000041e 	.word	0x0000041e

0800246c <__clzsi2>:
 800246c:	211c      	movs	r1, #28
 800246e:	2301      	movs	r3, #1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	4298      	cmp	r0, r3
 8002474:	d301      	bcc.n	800247a <__clzsi2+0xe>
 8002476:	0c00      	lsrs	r0, r0, #16
 8002478:	3910      	subs	r1, #16
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	4298      	cmp	r0, r3
 800247e:	d301      	bcc.n	8002484 <__clzsi2+0x18>
 8002480:	0a00      	lsrs	r0, r0, #8
 8002482:	3908      	subs	r1, #8
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	4298      	cmp	r0, r3
 8002488:	d301      	bcc.n	800248e <__clzsi2+0x22>
 800248a:	0900      	lsrs	r0, r0, #4
 800248c:	3904      	subs	r1, #4
 800248e:	a202      	add	r2, pc, #8	; (adr r2, 8002498 <__clzsi2+0x2c>)
 8002490:	5c10      	ldrb	r0, [r2, r0]
 8002492:	1840      	adds	r0, r0, r1
 8002494:	4770      	bx	lr
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	02020304 	.word	0x02020304
 800249c:	01010101 	.word	0x01010101
	...

080024a8 <angleToProportion>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 signed int angleToProportion(double curr_angle,double start_angle ,double death_zone){
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60b8      	str	r0, [r7, #8]
 80024b0:	60f9      	str	r1, [r7, #12]
 80024b2:	603a      	str	r2, [r7, #0]
 80024b4:	607b      	str	r3, [r7, #4]
	 int16_t sol;
	 int8_t pmax = 30;
 80024b6:	2617      	movs	r6, #23
 80024b8:	19bb      	adds	r3, r7, r6
 80024ba:	221e      	movs	r2, #30
 80024bc:	701a      	strb	r2, [r3, #0]
	 int8_t nmax = -30;
 80024be:	2316      	movs	r3, #22
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	22e2      	movs	r2, #226	; 0xe2
 80024c4:	701a      	strb	r2, [r3, #0]
	 double delta = curr_angle - start_angle;
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68b8      	ldr	r0, [r7, #8]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	f7ff fb91 	bl	8001bf4 <__aeabi_dsub>
 80024d2:	0002      	movs	r2, r0
 80024d4:	000b      	movs	r3, r1
 80024d6:	61ba      	str	r2, [r7, #24]
 80024d8:	61fb      	str	r3, [r7, #28]
	 if(delta>pmax)
 80024da:	19bb      	adds	r3, r7, r6
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff ff6d 	bl	80023c0 <__aeabi_i2d>
 80024e6:	0002      	movs	r2, r0
 80024e8:	000b      	movs	r3, r1
 80024ea:	69b8      	ldr	r0, [r7, #24]
 80024ec:	69f9      	ldr	r1, [r7, #28]
 80024ee:	f7fd febf 	bl	8000270 <__aeabi_dcmpgt>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d009      	beq.n	800250a <angleToProportion+0x62>
		 delta = pmax;
 80024f6:	19bb      	adds	r3, r7, r6
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff ff5f 	bl	80023c0 <__aeabi_i2d>
 8002502:	0002      	movs	r2, r0
 8002504:	000b      	movs	r3, r1
 8002506:	61ba      	str	r2, [r7, #24]
 8002508:	61fb      	str	r3, [r7, #28]

	 if(delta<nmax)
 800250a:	2616      	movs	r6, #22
 800250c:	19bb      	adds	r3, r7, r6
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b25b      	sxtb	r3, r3
 8002512:	0018      	movs	r0, r3
 8002514:	f7ff ff54 	bl	80023c0 <__aeabi_i2d>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	69b8      	ldr	r0, [r7, #24]
 800251e:	69f9      	ldr	r1, [r7, #28]
 8002520:	f7fd fe92 	bl	8000248 <__aeabi_dcmplt>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d009      	beq.n	800253c <angleToProportion+0x94>
		 delta = nmax;
 8002528:	19bb      	adds	r3, r7, r6
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff ff46 	bl	80023c0 <__aeabi_i2d>
 8002534:	0002      	movs	r2, r0
 8002536:	000b      	movs	r3, r1
 8002538:	61ba      	str	r2, [r7, #24]
 800253a:	61fb      	str	r3, [r7, #28]

	 if ((delta<death_zone)&&(delta>0)) {
 800253c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002540:	69b8      	ldr	r0, [r7, #24]
 8002542:	69f9      	ldr	r1, [r7, #28]
 8002544:	f7fd fe80 	bl	8000248 <__aeabi_dcmplt>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d00b      	beq.n	8002564 <angleToProportion+0xbc>
 800254c:	2200      	movs	r2, #0
 800254e:	2300      	movs	r3, #0
 8002550:	69b8      	ldr	r0, [r7, #24]
 8002552:	69f9      	ldr	r1, [r7, #28]
 8002554:	f7fd fe8c 	bl	8000270 <__aeabi_dcmpgt>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d003      	beq.n	8002564 <angleToProportion+0xbc>
		delta=0;
 800255c:	2200      	movs	r2, #0
 800255e:	2300      	movs	r3, #0
 8002560:	61ba      	str	r2, [r7, #24]
 8002562:	61fb      	str	r3, [r7, #28]
	}
	 if ((delta > (-1*death_zone))&&(delta<0)) {
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	001c      	movs	r4, r3
 8002568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	0612      	lsls	r2, r2, #24
 800256e:	405a      	eors	r2, r3
 8002570:	0015      	movs	r5, r2
 8002572:	0022      	movs	r2, r4
 8002574:	002b      	movs	r3, r5
 8002576:	69b8      	ldr	r0, [r7, #24]
 8002578:	69f9      	ldr	r1, [r7, #28]
 800257a:	f7fd fe79 	bl	8000270 <__aeabi_dcmpgt>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d00b      	beq.n	800259a <angleToProportion+0xf2>
 8002582:	2200      	movs	r2, #0
 8002584:	2300      	movs	r3, #0
 8002586:	69b8      	ldr	r0, [r7, #24]
 8002588:	69f9      	ldr	r1, [r7, #28]
 800258a:	f7fd fe5d 	bl	8000248 <__aeabi_dcmplt>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d003      	beq.n	800259a <angleToProportion+0xf2>
	 		delta=0;
 8002592:	2200      	movs	r2, #0
 8002594:	2300      	movs	r3, #0
 8002596:	61ba      	str	r2, [r7, #24]
 8002598:	61fb      	str	r3, [r7, #28]
	}
	 sol = 255*delta/pmax;
 800259a:	2200      	movs	r2, #0
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <angleToProportion+0x144>)
 800259e:	69b8      	ldr	r0, [r7, #24]
 80025a0:	69f9      	ldr	r1, [r7, #28]
 80025a2:	f7ff f8bb 	bl	800171c <__aeabi_dmul>
 80025a6:	0002      	movs	r2, r0
 80025a8:	000b      	movs	r3, r1
 80025aa:	0014      	movs	r4, r2
 80025ac:	001d      	movs	r5, r3
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	0018      	movs	r0, r3
 80025b8:	f7ff ff02 	bl	80023c0 <__aeabi_i2d>
 80025bc:	0002      	movs	r2, r0
 80025be:	000b      	movs	r3, r1
 80025c0:	0020      	movs	r0, r4
 80025c2:	0029      	movs	r1, r5
 80025c4:	f7fe fca8 	bl	8000f18 <__aeabi_ddiv>
 80025c8:	0002      	movs	r2, r0
 80025ca:	000b      	movs	r3, r1
 80025cc:	2514      	movs	r5, #20
 80025ce:	197c      	adds	r4, r7, r5
 80025d0:	0010      	movs	r0, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	f7ff febe 	bl	8002354 <__aeabi_d2iz>
 80025d8:	0003      	movs	r3, r0
 80025da:	8023      	strh	r3, [r4, #0]


	 return (int16_t)sol;
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	2200      	movs	r2, #0
 80025e0:	5e9b      	ldrsh	r3, [r3, r2]
 }
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b009      	add	sp, #36	; 0x24
 80025e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	406fe000 	.word	0x406fe000

080025f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f6:	f000 fe57 	bl	80032a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025fa:	f000 f84d 	bl	8002698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fe:	f000 f921 	bl	8002844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002602:	f000 f8ef 	bl	80027e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002606:	f000 f8ad 	bl	8002764 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <main+0x9c>)
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f996 	bl	800293e <MPU6050_Init>
//  if(MPU6050_Init(&hi2c1)!=0){
//	  Error_Handler();
//  }
  HAL_Delay(500);
 8002612:	23fa      	movs	r3, #250	; 0xfa
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	0018      	movs	r0, r3
 8002618:	f000 feaa 	bl	8003370 <HAL_Delay>
  MPU6050_Read_All(&hi2c1, &MPU6050);
 800261c:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <main+0xa0>)
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <main+0x9c>)
 8002620:	0011      	movs	r1, r2
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f9f0 	bl	8002a08 <MPU6050_Read_All>

  x_angle_base=MPU6050.KalmanAngleX;
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <main+0xa0>)
 800262a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	60ba      	str	r2, [r7, #8]
 8002630:	60fb      	str	r3, [r7, #12]
  y_angle_base=MPU6050.KalmanAngleY;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <main+0xa0>)
 8002634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	603a      	str	r2, [r7, #0]
 800263a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	 MPU6050_Read_All(&hi2c1, &MPU6050);
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <main+0xa0>)
 800263e:	4b13      	ldr	r3, [pc, #76]	; (800268c <main+0x9c>)
 8002640:	0011      	movs	r1, r2
 8002642:	0018      	movs	r0, r3
 8002644:	f000 f9e0 	bl	8002a08 <MPU6050_Read_All>
	 MPU6050.converted_x = angleToProportion(MPU6050.KalmanAngleX, x_angle_base, 3);
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <main+0xa0>)
 800264a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800264c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2400      	movs	r4, #0
 8002654:	4d0f      	ldr	r5, [pc, #60]	; (8002694 <main+0xa4>)
 8002656:	9400      	str	r4, [sp, #0]
 8002658:	9501      	str	r5, [sp, #4]
 800265a:	f7ff ff25 	bl	80024a8 <angleToProportion>
 800265e:	0003      	movs	r3, r0
 8002660:	b219      	sxth	r1, r3
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <main+0xa0>)
 8002664:	2258      	movs	r2, #88	; 0x58
 8002666:	5299      	strh	r1, [r3, r2]
	 MPU6050.converted_y = angleToProportion(MPU6050.KalmanAngleY, y_angle_base, 3);
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <main+0xa0>)
 800266a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800266c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2400      	movs	r4, #0
 8002674:	4d07      	ldr	r5, [pc, #28]	; (8002694 <main+0xa4>)
 8002676:	9400      	str	r4, [sp, #0]
 8002678:	9501      	str	r5, [sp, #4]
 800267a:	f7ff ff15 	bl	80024a8 <angleToProportion>
 800267e:	0003      	movs	r3, r0
 8002680:	b219      	sxth	r1, r3
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <main+0xa0>)
 8002684:	225a      	movs	r2, #90	; 0x5a
 8002686:	5299      	strh	r1, [r3, r2]
	 MPU6050_Read_All(&hi2c1, &MPU6050);
 8002688:	e7d8      	b.n	800263c <main+0x4c>
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	2000011c 	.word	0x2000011c
 8002690:	200001f0 	.word	0x200001f0
 8002694:	40080000 	.word	0x40080000

08002698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b099      	sub	sp, #100	; 0x64
 800269c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269e:	242c      	movs	r4, #44	; 0x2c
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	0018      	movs	r0, r3
 80026a4:	2334      	movs	r3, #52	; 0x34
 80026a6:	001a      	movs	r2, r3
 80026a8:	2100      	movs	r1, #0
 80026aa:	f003 f8d7 	bl	800585c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ae:	231c      	movs	r3, #28
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	0018      	movs	r0, r3
 80026b4:	2310      	movs	r3, #16
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f003 f8cf 	bl	800585c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026be:	003b      	movs	r3, r7
 80026c0:	0018      	movs	r0, r3
 80026c2:	231c      	movs	r3, #28
 80026c4:	001a      	movs	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	f003 f8c8 	bl	800585c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026cc:	0021      	movs	r1, r4
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2201      	movs	r2, #1
 80026d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2210      	movs	r2, #16
 80026de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2202      	movs	r2, #2
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0212      	lsls	r2, r2, #8
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	22a0      	movs	r2, #160	; 0xa0
 80026f2:	0392      	lsls	r2, r2, #14
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2201      	movs	r2, #1
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fe86 	bl	8004410 <HAL_RCC_OscConfig>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002708:	f000 f914 	bl	8002934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270c:	211c      	movs	r1, #28
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2202      	movs	r2, #2
 8002718:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2101      	movs	r1, #1
 800272a:	0018      	movs	r0, r3
 800272c:	f002 f9f6 	bl	8004b1c <HAL_RCC_ClockConfig>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d001      	beq.n	8002738 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002734:	f000 f8fe 	bl	8002934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002738:	003b      	movs	r3, r7
 800273a:	2222      	movs	r2, #34	; 0x22
 800273c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273e:	003b      	movs	r3, r7
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002744:	003b      	movs	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800274a:	003b      	movs	r3, r7
 800274c:	0018      	movs	r0, r3
 800274e:	f002 fb5f 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002756:	f000 f8ed 	bl	8002934 <Error_Handler>
  }
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b019      	add	sp, #100	; 0x64
 8002760:	bd90      	pop	{r4, r7, pc}
	...

08002764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_I2C1_Init+0x74>)
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <MX_I2C1_Init+0x78>)
 800276c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <MX_I2C1_Init+0x7c>)
 8002772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_I2C1_Init+0x74>)
 800277c:	2201      	movs	r2, #1
 800277e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_I2C1_Init+0x74>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_I2C1_Init+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_I2C1_Init+0x74>)
 80027a0:	0018      	movs	r0, r3
 80027a2:	f001 f853 	bl	800384c <HAL_I2C_Init>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027aa:	f000 f8c3 	bl	8002934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <MX_I2C1_Init+0x74>)
 80027b0:	2100      	movs	r1, #0
 80027b2:	0018      	movs	r0, r3
 80027b4:	f001 fd94 	bl	80042e0 <HAL_I2CEx_ConfigAnalogFilter>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027bc:	f000 f8ba 	bl	8002934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <MX_I2C1_Init+0x74>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 fdd7 	bl	8004378 <HAL_I2CEx_ConfigDigitalFilter>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ce:	f000 f8b1 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000011c 	.word	0x2000011c
 80027dc:	40005400 	.word	0x40005400
 80027e0:	2000090e 	.word	0x2000090e

080027e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_USART2_UART_Init+0x58>)
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <MX_USART2_UART_Init+0x5c>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <MX_USART2_UART_Init+0x58>)
 80027f0:	22e1      	movs	r2, #225	; 0xe1
 80027f2:	0252      	lsls	r2, r2, #9
 80027f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_USART2_UART_Init+0x58>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_USART2_UART_Init+0x58>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_USART2_UART_Init+0x58>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_USART2_UART_Init+0x58>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_USART2_UART_Init+0x58>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_USART2_UART_Init+0x58>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <MX_USART2_UART_Init+0x58>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_USART2_UART_Init+0x58>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <MX_USART2_UART_Init+0x58>)
 8002828:	0018      	movs	r0, r3
 800282a:	f002 fbf1 	bl	8005010 <HAL_UART_Init>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d001      	beq.n	8002836 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002832:	f000 f87f 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000168 	.word	0x20000168
 8002840:	40004400 	.word	0x40004400

08002844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b08b      	sub	sp, #44	; 0x2c
 8002848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	2414      	movs	r4, #20
 800284c:	193b      	adds	r3, r7, r4
 800284e:	0018      	movs	r0, r3
 8002850:	2314      	movs	r3, #20
 8002852:	001a      	movs	r2, r3
 8002854:	2100      	movs	r1, #0
 8002856:	f003 f801 	bl	800585c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <MX_GPIO_Init+0xe8>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <MX_GPIO_Init+0xe8>)
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	0309      	lsls	r1, r1, #12
 8002864:	430a      	orrs	r2, r1
 8002866:	615a      	str	r2, [r3, #20]
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <MX_GPIO_Init+0xe8>)
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	031b      	lsls	r3, r3, #12
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <MX_GPIO_Init+0xe8>)
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <MX_GPIO_Init+0xe8>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	03c9      	lsls	r1, r1, #15
 8002880:	430a      	orrs	r2, r1
 8002882:	615a      	str	r2, [r3, #20]
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <MX_GPIO_Init+0xe8>)
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	03db      	lsls	r3, r3, #15
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <MX_GPIO_Init+0xe8>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <MX_GPIO_Init+0xe8>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0289      	lsls	r1, r1, #10
 800289c:	430a      	orrs	r2, r1
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <MX_GPIO_Init+0xe8>)
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <MX_GPIO_Init+0xe8>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <MX_GPIO_Init+0xe8>)
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	02c9      	lsls	r1, r1, #11
 80028b8:	430a      	orrs	r2, r1
 80028ba:	615a      	str	r2, [r3, #20]
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <MX_GPIO_Init+0xe8>)
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	02db      	lsls	r3, r3, #11
 80028c4:	4013      	ands	r3, r2
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028ca:	2390      	movs	r3, #144	; 0x90
 80028cc:	05db      	lsls	r3, r3, #23
 80028ce:	2200      	movs	r2, #0
 80028d0:	2120      	movs	r1, #32
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 ff9c 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0192      	lsls	r2, r2, #6
 80028de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	2284      	movs	r2, #132	; 0x84
 80028e4:	0392      	lsls	r2, r2, #14
 80028e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <MX_GPIO_Init+0xec>)
 80028f2:	0019      	movs	r1, r3
 80028f4:	0010      	movs	r0, r2
 80028f6:	f000 fe13 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028fa:	0021      	movs	r1, r4
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2220      	movs	r2, #32
 8002900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002902:	187b      	adds	r3, r7, r1
 8002904:	2201      	movs	r2, #1
 8002906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	187b      	adds	r3, r7, r1
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002914:	187a      	adds	r2, r7, r1
 8002916:	2390      	movs	r3, #144	; 0x90
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fdff 	bl	8003520 <HAL_GPIO_Init>

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b00b      	add	sp, #44	; 0x2c
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	40021000 	.word	0x40021000
 8002930:	48000800 	.word	0x48000800

08002934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002938:	b672      	cpsid	i
}
 800293a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800293c:	e7fe      	b.n	800293c <Error_Handler+0x8>

0800293e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800293e:	b590      	push	{r4, r7, lr}
 8002940:	b089      	sub	sp, #36	; 0x24
 8002942:	af04      	add	r7, sp, #16
 8002944:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002946:	23fa      	movs	r3, #250	; 0xfa
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2301      	movs	r3, #1
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	240f      	movs	r4, #15
 8002954:	193b      	adds	r3, r7, r4
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	2275      	movs	r2, #117	; 0x75
 800295c:	21d0      	movs	r1, #208	; 0xd0
 800295e:	f001 f939 	bl	8003bd4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002962:	193b      	adds	r3, r7, r4
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b68      	cmp	r3, #104	; 0x68
 8002968:	d148      	bne.n	80029fc <MPU6050_Init+0xbe>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800296a:	210e      	movs	r1, #14
 800296c:	187b      	adds	r3, r7, r1
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002972:	23fa      	movs	r3, #250	; 0xfa
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	2301      	movs	r3, #1
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	000c      	movs	r4, r1
 8002980:	187b      	adds	r3, r7, r1
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2301      	movs	r3, #1
 8002986:	226b      	movs	r2, #107	; 0x6b
 8002988:	21d0      	movs	r1, #208	; 0xd0
 800298a:	f000 fff5 	bl	8003978 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800298e:	0021      	movs	r1, r4
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2207      	movs	r2, #7
 8002994:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002996:	23fa      	movs	r3, #250	; 0xfa
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	2301      	movs	r3, #1
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	000c      	movs	r4, r1
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2301      	movs	r3, #1
 80029aa:	2219      	movs	r2, #25
 80029ac:	21d0      	movs	r1, #208	; 0xd0
 80029ae:	f000 ffe3 	bl	8003978 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80029b2:	0021      	movs	r1, r4
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80029ba:	23fa      	movs	r3, #250	; 0xfa
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	9302      	str	r3, [sp, #8]
 80029c2:	2301      	movs	r3, #1
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	000c      	movs	r4, r1
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2301      	movs	r3, #1
 80029ce:	221c      	movs	r2, #28
 80029d0:	21d0      	movs	r1, #208	; 0xd0
 80029d2:	f000 ffd1 	bl	8003978 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80029d6:	0021      	movs	r1, r4
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80029de:	23fa      	movs	r3, #250	; 0xfa
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	221b      	movs	r2, #27
 80029f2:	21d0      	movs	r1, #208	; 0xd0
 80029f4:	f000 ffc0 	bl	8003978 <HAL_I2C_Mem_Write>
        return 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <MPU6050_Init+0xc0>
    }
    return 1;
 80029fc:	2301      	movs	r3, #1
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b005      	add	sp, #20
 8002a04:	bd90      	pop	{r4, r7, pc}
	...

08002a08 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	b099      	sub	sp, #100	; 0x64
 8002a0c:	af04      	add	r7, sp, #16
 8002a0e:	6178      	str	r0, [r7, #20]
 8002a10:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002a12:	23fa      	movs	r3, #250	; 0xfa
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	230e      	movs	r3, #14
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	2408      	movs	r4, #8
 8002a20:	2510      	movs	r5, #16
 8002a22:	1963      	adds	r3, r4, r5
 8002a24:	19db      	adds	r3, r3, r7
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	223b      	movs	r2, #59	; 0x3b
 8002a2c:	21d0      	movs	r1, #208	; 0xd0
 8002a2e:	f001 f8d1 	bl	8003bd4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002a32:	0020      	movs	r0, r4
 8002a34:	0029      	movs	r1, r5
 8002a36:	1843      	adds	r3, r0, r1
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	1843      	adds	r3, r0, r1
 8002a42:	19db      	adds	r3, r3, r7
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002a50:	1843      	adds	r3, r0, r1
 8002a52:	19db      	adds	r3, r3, r7
 8002a54:	789b      	ldrb	r3, [r3, #2]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	b21a      	sxth	r2, r3
 8002a5a:	1843      	adds	r3, r0, r1
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	78db      	ldrb	r3, [r3, #3]
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002a6a:	1843      	adds	r3, r0, r1
 8002a6c:	19db      	adds	r3, r3, r7
 8002a6e:	791b      	ldrb	r3, [r3, #4]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	1843      	adds	r3, r0, r1
 8002a76:	19db      	adds	r3, r3, r7
 8002a78:	795b      	ldrb	r3, [r3, #5]
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002a84:	000d      	movs	r5, r1
 8002a86:	1843      	adds	r3, r0, r1
 8002a88:	19db      	adds	r3, r3, r7
 8002a8a:	799b      	ldrb	r3, [r3, #6]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	b219      	sxth	r1, r3
 8002a90:	1943      	adds	r3, r0, r5
 8002a92:	19db      	adds	r3, r3, r7
 8002a94:	79db      	ldrb	r3, [r3, #7]
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	2436      	movs	r4, #54	; 0x36
 8002a9a:	1963      	adds	r3, r4, r5
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002aa2:	0001      	movs	r1, r0
 8002aa4:	194b      	adds	r3, r1, r5
 8002aa6:	19db      	adds	r3, r3, r7
 8002aa8:	7a1b      	ldrb	r3, [r3, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	194b      	adds	r3, r1, r5
 8002ab0:	19db      	adds	r3, r3, r7
 8002ab2:	7a5b      	ldrb	r3, [r3, #9]
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002abe:	194b      	adds	r3, r1, r5
 8002ac0:	19db      	adds	r3, r3, r7
 8002ac2:	7a9b      	ldrb	r3, [r3, #10]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	b21a      	sxth	r2, r3
 8002ac8:	194b      	adds	r3, r1, r5
 8002aca:	19db      	adds	r3, r3, r7
 8002acc:	7adb      	ldrb	r3, [r3, #11]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002ad8:	194b      	adds	r3, r1, r5
 8002ada:	19db      	adds	r3, r3, r7
 8002adc:	7b1b      	ldrb	r3, [r3, #12]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	194b      	adds	r3, r1, r5
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	7b5b      	ldrb	r3, [r3, #13]
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b21a      	sxth	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2200      	movs	r2, #0
 8002af6:	5e9b      	ldrsh	r3, [r3, r2]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fc61 	bl	80023c0 <__aeabi_i2d>
 8002afe:	2200      	movs	r2, #0
 8002b00:	4bac      	ldr	r3, [pc, #688]	; (8002db4 <MPU6050_Read_All+0x3ac>)
 8002b02:	f7fe fa09 	bl	8000f18 <__aeabi_ddiv>
 8002b06:	0002      	movs	r2, r0
 8002b08:	000b      	movs	r3, r1
 8002b0a:	6939      	ldr	r1, [r7, #16]
 8002b0c:	608a      	str	r2, [r1, #8]
 8002b0e:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2202      	movs	r2, #2
 8002b14:	5e9b      	ldrsh	r3, [r3, r2]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff fc52 	bl	80023c0 <__aeabi_i2d>
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4ba5      	ldr	r3, [pc, #660]	; (8002db4 <MPU6050_Read_All+0x3ac>)
 8002b20:	f7fe f9fa 	bl	8000f18 <__aeabi_ddiv>
 8002b24:	0002      	movs	r2, r0
 8002b26:	000b      	movs	r3, r1
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	610a      	str	r2, [r1, #16]
 8002b2c:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2204      	movs	r2, #4
 8002b32:	5e9b      	ldrsh	r3, [r3, r2]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff fc43 	bl	80023c0 <__aeabi_i2d>
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4b9e      	ldr	r3, [pc, #632]	; (8002db8 <MPU6050_Read_All+0x3b0>)
 8002b3e:	f7fe f9eb 	bl	8000f18 <__aeabi_ddiv>
 8002b42:	0002      	movs	r2, r0
 8002b44:	000b      	movs	r3, r1
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	618a      	str	r2, [r1, #24]
 8002b4a:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002b4c:	1963      	adds	r3, r4, r5
 8002b4e:	19db      	adds	r3, r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	5e9b      	ldrsh	r3, [r3, r2]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fd fe55 	bl	8000804 <__aeabi_i2f>
 8002b5a:	1c03      	adds	r3, r0, #0
 8002b5c:	4997      	ldr	r1, [pc, #604]	; (8002dbc <MPU6050_Read_All+0x3b4>)
 8002b5e:	1c18      	adds	r0, r3, #0
 8002b60:	f7fd fd38 	bl	80005d4 <__aeabi_fdiv>
 8002b64:	1c03      	adds	r3, r0, #0
 8002b66:	4996      	ldr	r1, [pc, #600]	; (8002dc0 <MPU6050_Read_All+0x3b8>)
 8002b68:	1c18      	adds	r0, r3, #0
 8002b6a:	f7fd fb95 	bl	8000298 <__aeabi_fadd>
 8002b6e:	1c03      	adds	r3, r0, #0
 8002b70:	1c1a      	adds	r2, r3, #0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	5e9b      	ldrsh	r3, [r3, r2]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff fc1f 	bl	80023c0 <__aeabi_i2d>
 8002b82:	2200      	movs	r2, #0
 8002b84:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <MPU6050_Read_All+0x3bc>)
 8002b86:	f7fe f9c7 	bl	8000f18 <__aeabi_ddiv>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	000b      	movs	r3, r1
 8002b8e:	6939      	ldr	r1, [r7, #16]
 8002b90:	628a      	str	r2, [r1, #40]	; 0x28
 8002b92:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2222      	movs	r2, #34	; 0x22
 8002b98:	5e9b      	ldrsh	r3, [r3, r2]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff fc10 	bl	80023c0 <__aeabi_i2d>
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <MPU6050_Read_All+0x3bc>)
 8002ba4:	f7fe f9b8 	bl	8000f18 <__aeabi_ddiv>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	000b      	movs	r3, r1
 8002bac:	6939      	ldr	r1, [r7, #16]
 8002bae:	630a      	str	r2, [r1, #48]	; 0x30
 8002bb0:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2224      	movs	r2, #36	; 0x24
 8002bb6:	5e9b      	ldrsh	r3, [r3, r2]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff fc01 	bl	80023c0 <__aeabi_i2d>
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4b80      	ldr	r3, [pc, #512]	; (8002dc4 <MPU6050_Read_All+0x3bc>)
 8002bc2:	f7fe f9a9 	bl	8000f18 <__aeabi_ddiv>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	000b      	movs	r3, r1
 8002bca:	6939      	ldr	r1, [r7, #16]
 8002bcc:	638a      	str	r2, [r1, #56]	; 0x38
 8002bce:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002bd0:	f000 fbc4 	bl	800335c <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <MPU6050_Read_All+0x3c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fc1f 	bl	8002420 <__aeabi_ui2d>
 8002be2:	2200      	movs	r2, #0
 8002be4:	4b79      	ldr	r3, [pc, #484]	; (8002dcc <MPU6050_Read_All+0x3c4>)
 8002be6:	f7fe f997 	bl	8000f18 <__aeabi_ddiv>
 8002bea:	0002      	movs	r2, r0
 8002bec:	000b      	movs	r3, r1
 8002bee:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 8002bf2:	f000 fbb3 	bl	800335c <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <MPU6050_Read_All+0x3c0>)
 8002bfa:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	5e9b      	ldrsh	r3, [r3, r2]
 8002c02:	001a      	movs	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2100      	movs	r1, #0
 8002c08:	5e5b      	ldrsh	r3, [r3, r1]
 8002c0a:	435a      	muls	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2104      	movs	r1, #4
 8002c10:	5e5b      	ldrsh	r3, [r3, r1]
 8002c12:	0019      	movs	r1, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2004      	movs	r0, #4
 8002c18:	5e1b      	ldrsh	r3, [r3, r0]
 8002c1a:	434b      	muls	r3, r1
 8002c1c:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff fbce 	bl	80023c0 <__aeabi_i2d>
 8002c24:	0002      	movs	r2, r0
 8002c26:	000b      	movs	r3, r1
 8002c28:	0010      	movs	r0, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	f002 ffa5 	bl	8005b7a <sqrt>
 8002c30:	0002      	movs	r2, r0
 8002c32:	000b      	movs	r3, r1
 8002c34:	633a      	str	r2, [r7, #48]	; 0x30
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c40:	f7fd fafc 	bl	800023c <__aeabi_dcmpeq>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d118      	bne.n	8002c7a <MPU6050_Read_All+0x272>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff fbb6 	bl	80023c0 <__aeabi_i2d>
 8002c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	f7fe f95e 	bl	8000f18 <__aeabi_ddiv>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	000b      	movs	r3, r1
 8002c60:	0010      	movs	r0, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	f002 fe02 	bl	800586c <atan>
 8002c68:	4a59      	ldr	r2, [pc, #356]	; (8002dd0 <MPU6050_Read_All+0x3c8>)
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <MPU6050_Read_All+0x3cc>)
 8002c6c:	f7fe fd56 	bl	800171c <__aeabi_dmul>
 8002c70:	0002      	movs	r2, r0
 8002c72:	000b      	movs	r3, r1
 8002c74:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	e003      	b.n	8002c82 <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c80:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2200      	movs	r2, #0
 8002c86:	5e9b      	ldrsh	r3, [r3, r2]
 8002c88:	425b      	negs	r3, r3
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff fb98 	bl	80023c0 <__aeabi_i2d>
 8002c90:	0004      	movs	r4, r0
 8002c92:	000d      	movs	r5, r1
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2204      	movs	r2, #4
 8002c98:	5e9b      	ldrsh	r3, [r3, r2]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7ff fb90 	bl	80023c0 <__aeabi_i2d>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	000b      	movs	r3, r1
 8002ca4:	0020      	movs	r0, r4
 8002ca6:	0029      	movs	r1, r5
 8002ca8:	f002 ff63 	bl	8005b72 <atan2>
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <MPU6050_Read_All+0x3c8>)
 8002cae:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <MPU6050_Read_All+0x3cc>)
 8002cb0:	f7fe fd34 	bl	800171c <__aeabi_dmul>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	000b      	movs	r3, r1
 8002cb8:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <MPU6050_Read_All+0x3d0>)
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc4:	f7fd fac0 	bl	8000248 <__aeabi_dcmplt>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d008      	beq.n	8002cde <MPU6050_Read_All+0x2d6>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002cd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <MPU6050_Read_All+0x3d4>)
 8002cd6:	f7fd facb 	bl	8000270 <__aeabi_dcmpgt>
 8002cda:	1e03      	subs	r3, r0, #0
 8002cdc:	d110      	bne.n	8002d00 <MPU6050_Read_All+0x2f8>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <MPU6050_Read_All+0x3d4>)
 8002ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce6:	f7fd fac3 	bl	8000270 <__aeabi_dcmpgt>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d013      	beq.n	8002d16 <MPU6050_Read_All+0x30e>
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002cf2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <MPU6050_Read_All+0x3d0>)
 8002cf8:	f7fd faa6 	bl	8000248 <__aeabi_dcmplt>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d00a      	beq.n	8002d16 <MPU6050_Read_All+0x30e>
    {
        KalmanY.angle = pitch;
 8002d00:	4937      	ldr	r1, [pc, #220]	; (8002de0 <MPU6050_Read_All+0x3d8>)
 8002d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	618a      	str	r2, [r1, #24]
 8002d08:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 8002d0a:	6939      	ldr	r1, [r7, #16]
 8002d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	650a      	str	r2, [r1, #80]	; 0x50
 8002d12:	654b      	str	r3, [r1, #84]	; 0x54
 8002d14:	e015      	b.n	8002d42 <MPU6050_Read_All+0x33a>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002d1e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002d20:	4e2f      	ldr	r6, [pc, #188]	; (8002de0 <MPU6050_Read_All+0x3d8>)
 8002d22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d26:	9002      	str	r0, [sp, #8]
 8002d28:	9103      	str	r1, [sp, #12]
 8002d2a:	9200      	str	r2, [sp, #0]
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	0022      	movs	r2, r4
 8002d30:	002b      	movs	r3, r5
 8002d32:	0030      	movs	r0, r6
 8002d34:	f000 f858 	bl	8002de8 <Kalman_getAngle>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	6939      	ldr	r1, [r7, #16]
 8002d3e:	650a      	str	r2, [r1, #80]	; 0x50
 8002d40:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	0011      	movs	r1, r2
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <MPU6050_Read_All+0x3d4>)
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	f7fd fa89 	bl	8000270 <__aeabi_dcmpgt>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d00d      	beq.n	8002d7e <MPU6050_Read_All+0x376>
        DataStruct->Gx = -DataStruct->Gx;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	0011      	movs	r1, r2
 8002d6a:	6039      	str	r1, [r7, #0]
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	0609      	lsls	r1, r1, #24
 8002d70:	4059      	eors	r1, r3
 8002d72:	6079      	str	r1, [r7, #4]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6299      	str	r1, [r3, #40]	; 0x28
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002d86:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002d88:	4e16      	ldr	r6, [pc, #88]	; (8002de4 <MPU6050_Read_All+0x3dc>)
 8002d8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d8e:	9002      	str	r0, [sp, #8]
 8002d90:	9103      	str	r1, [sp, #12]
 8002d92:	9200      	str	r2, [sp, #0]
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	0022      	movs	r2, r4
 8002d98:	002b      	movs	r3, r5
 8002d9a:	0030      	movs	r0, r6
 8002d9c:	f000 f824 	bl	8002de8 <Kalman_getAngle>
 8002da0:	0002      	movs	r2, r0
 8002da2:	000b      	movs	r3, r1
 8002da4:	6939      	ldr	r1, [r7, #16]
 8002da6:	648a      	str	r2, [r1, #72]	; 0x48
 8002da8:	64cb      	str	r3, [r1, #76]	; 0x4c


}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b015      	add	sp, #84	; 0x54
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40d00000 	.word	0x40d00000
 8002db8:	40cc2900 	.word	0x40cc2900
 8002dbc:	43aa0000 	.word	0x43aa0000
 8002dc0:	42121eb8 	.word	0x42121eb8
 8002dc4:	40606000 	.word	0x40606000
 8002dc8:	20000250 	.word	0x20000250
 8002dcc:	408f4000 	.word	0x408f4000
 8002dd0:	1a63c1f8 	.word	0x1a63c1f8
 8002dd4:	404ca5dc 	.word	0x404ca5dc
 8002dd8:	c0568000 	.word	0xc0568000
 8002ddc:	40568000 	.word	0x40568000
 8002de0:	20000048 	.word	0x20000048
 8002de4:	20000000 	.word	0x20000000

08002de8 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b093      	sub	sp, #76	; 0x4c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	603a      	str	r2, [r7, #0]
 8002df2:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002dfc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002dfe:	f7fe fef9 	bl	8001bf4 <__aeabi_dsub>
 8002e02:	0002      	movs	r2, r0
 8002e04:	000b      	movs	r3, r1
 8002e06:	643a      	str	r2, [r7, #64]	; 0x40
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699c      	ldr	r4, [r3, #24]
 8002e0e:	69dd      	ldr	r5, [r3, #28]
 8002e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e14:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e16:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002e18:	f7fe fc80 	bl	800171c <__aeabi_dmul>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	000b      	movs	r3, r1
 8002e20:	0020      	movs	r0, r4
 8002e22:	0029      	movs	r1, r5
 8002e24:	f7fd fd3c 	bl	80008a0 <__aeabi_dadd>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	000b      	movs	r3, r1
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	618a      	str	r2, [r1, #24]
 8002e30:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002e36:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002e3c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	f7fe fc6b 	bl	800171c <__aeabi_dmul>
 8002e46:	0002      	movs	r2, r0
 8002e48:	000b      	movs	r3, r1
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	f7fe fece 	bl	8001bf4 <__aeabi_dsub>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	000b      	movs	r3, r1
 8002e5c:	0010      	movs	r0, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	f7fe fec5 	bl	8001bf4 <__aeabi_dsub>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	000b      	movs	r3, r1
 8002e6e:	0010      	movs	r0, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f7fd fd12 	bl	80008a0 <__aeabi_dadd>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	000b      	movs	r3, r1
 8002e80:	0010      	movs	r0, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e88:	f7fe fc48 	bl	800171c <__aeabi_dmul>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	000b      	movs	r3, r1
 8002e90:	0020      	movs	r0, r4
 8002e92:	0029      	movs	r1, r5
 8002e94:	f7fd fd04 	bl	80008a0 <__aeabi_dadd>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	000b      	movs	r3, r1
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	628a      	str	r2, [r1, #40]	; 0x28
 8002ea0:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002ea6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002eac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002eae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	f7fe fc33 	bl	800171c <__aeabi_dmul>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	000b      	movs	r3, r1
 8002eba:	0020      	movs	r0, r4
 8002ebc:	0029      	movs	r1, r5
 8002ebe:	f7fe fe99 	bl	8001bf4 <__aeabi_dsub>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	630a      	str	r2, [r1, #48]	; 0x30
 8002eca:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002ed0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002ed6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ed8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002edc:	f7fe fc1e 	bl	800171c <__aeabi_dmul>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	0020      	movs	r0, r4
 8002ee6:	0029      	movs	r1, r5
 8002ee8:	f7fe fe84 	bl	8001bf4 <__aeabi_dsub>
 8002eec:	0002      	movs	r2, r0
 8002eee:	000b      	movs	r3, r1
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	638a      	str	r2, [r1, #56]	; 0x38
 8002ef4:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002efa:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6898      	ldr	r0, [r3, #8]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f06:	f7fe fc09 	bl	800171c <__aeabi_dmul>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0020      	movs	r0, r4
 8002f10:	0029      	movs	r1, r5
 8002f12:	f7fd fcc5 	bl	80008a0 <__aeabi_dadd>
 8002f16:	0002      	movs	r2, r0
 8002f18:	000b      	movs	r3, r1
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	640a      	str	r2, [r1, #64]	; 0x40
 8002f1e:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f7fd fcb8 	bl	80008a0 <__aeabi_dadd>
 8002f30:	0002      	movs	r2, r0
 8002f32:	000b      	movs	r3, r1
 8002f34:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	f7fd ffe9 	bl	8000f18 <__aeabi_ddiv>
 8002f46:	0002      	movs	r2, r0
 8002f48:	000b      	movs	r3, r1
 8002f4a:	2610      	movs	r6, #16
 8002f4c:	19b9      	adds	r1, r7, r6
 8002f4e:	600a      	str	r2, [r1, #0]
 8002f50:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f56:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5c:	f7fd ffdc 	bl	8000f18 <__aeabi_ddiv>
 8002f60:	0002      	movs	r2, r0
 8002f62:	000b      	movs	r3, r1
 8002f64:	19b9      	adds	r1, r7, r6
 8002f66:	608a      	str	r2, [r1, #8]
 8002f68:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f7fe fe3e 	bl	8001bf4 <__aeabi_dsub>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	633a      	str	r2, [r7, #48]	; 0x30
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	699c      	ldr	r4, [r3, #24]
 8002f84:	69dd      	ldr	r5, [r3, #28]
 8002f86:	19bb      	adds	r3, r7, r6
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	f7fe fbc4 	bl	800171c <__aeabi_dmul>
 8002f94:	0002      	movs	r2, r0
 8002f96:	000b      	movs	r3, r1
 8002f98:	0020      	movs	r0, r4
 8002f9a:	0029      	movs	r1, r5
 8002f9c:	f7fd fc80 	bl	80008a0 <__aeabi_dadd>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	000b      	movs	r3, r1
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	618a      	str	r2, [r1, #24]
 8002fa8:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1c      	ldr	r4, [r3, #32]
 8002fae:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002fb0:	19bb      	adds	r3, r7, r6
 8002fb2:	6898      	ldr	r0, [r3, #8]
 8002fb4:	68d9      	ldr	r1, [r3, #12]
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	f7fe fbaf 	bl	800171c <__aeabi_dmul>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	0020      	movs	r0, r4
 8002fc4:	0029      	movs	r1, r5
 8002fc6:	f7fd fc6b 	bl	80008a0 <__aeabi_dadd>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	000b      	movs	r3, r1
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	620a      	str	r2, [r1, #32]
 8002fd2:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	623a      	str	r2, [r7, #32]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002fec:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002fee:	19bb      	adds	r3, r7, r6
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	f7fe fb90 	bl	800171c <__aeabi_dmul>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	000b      	movs	r3, r1
 8003000:	0020      	movs	r0, r4
 8003002:	0029      	movs	r1, r5
 8003004:	f7fe fdf6 	bl	8001bf4 <__aeabi_dsub>
 8003008:	0002      	movs	r2, r0
 800300a:	000b      	movs	r3, r1
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	628a      	str	r2, [r1, #40]	; 0x28
 8003010:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003016:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003018:	19bb      	adds	r3, r7, r6
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f7fe fb7b 	bl	800171c <__aeabi_dmul>
 8003026:	0002      	movs	r2, r0
 8003028:	000b      	movs	r3, r1
 800302a:	0020      	movs	r0, r4
 800302c:	0029      	movs	r1, r5
 800302e:	f7fe fde1 	bl	8001bf4 <__aeabi_dsub>
 8003032:	0002      	movs	r2, r0
 8003034:	000b      	movs	r3, r1
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	630a      	str	r2, [r1, #48]	; 0x30
 800303a:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003040:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8003042:	19bb      	adds	r3, r7, r6
 8003044:	6898      	ldr	r0, [r3, #8]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	f7fe fb66 	bl	800171c <__aeabi_dmul>
 8003050:	0002      	movs	r2, r0
 8003052:	000b      	movs	r3, r1
 8003054:	0020      	movs	r0, r4
 8003056:	0029      	movs	r1, r5
 8003058:	f7fe fdcc 	bl	8001bf4 <__aeabi_dsub>
 800305c:	0002      	movs	r2, r0
 800305e:	000b      	movs	r3, r1
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	638a      	str	r2, [r1, #56]	; 0x38
 8003064:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800306a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800306c:	19bb      	adds	r3, r7, r6
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	68d9      	ldr	r1, [r3, #12]
 8003072:	6a3a      	ldr	r2, [r7, #32]
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	f7fe fb51 	bl	800171c <__aeabi_dmul>
 800307a:	0002      	movs	r2, r0
 800307c:	000b      	movs	r3, r1
 800307e:	0020      	movs	r0, r4
 8003080:	0029      	movs	r1, r5
 8003082:	f7fe fdb7 	bl	8001bf4 <__aeabi_dsub>
 8003086:	0002      	movs	r2, r0
 8003088:	000b      	movs	r3, r1
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	640a      	str	r2, [r1, #64]	; 0x40
 800308e:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	69db      	ldr	r3, [r3, #28]
};
 8003096:	0010      	movs	r0, r2
 8003098:	0019      	movs	r1, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b013      	add	sp, #76	; 0x4c
 800309e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_MspInit+0x44>)
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_MspInit+0x44>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	619a      	str	r2, [r3, #24]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_MspInit+0x44>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_MspInit+0x44>)
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_MspInit+0x44>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	0549      	lsls	r1, r1, #21
 80030c8:	430a      	orrs	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_MspInit+0x44>)
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	055b      	lsls	r3, r3, #21
 80030d4:	4013      	ands	r3, r2
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	2414      	movs	r4, #20
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	0018      	movs	r0, r3
 80030f6:	2314      	movs	r3, #20
 80030f8:	001a      	movs	r2, r3
 80030fa:	2100      	movs	r1, #0
 80030fc:	f002 fbae 	bl	800585c <memset>
  if(hi2c->Instance==I2C1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_I2C_MspInit+0x90>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d132      	bne.n	8003170 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_I2C_MspInit+0x94>)
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_I2C_MspInit+0x94>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	02c9      	lsls	r1, r1, #11
 8003114:	430a      	orrs	r2, r1
 8003116:	615a      	str	r2, [r3, #20]
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_I2C_MspInit+0x94>)
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	02db      	lsls	r3, r3, #11
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003126:	193b      	adds	r3, r7, r4
 8003128:	22c0      	movs	r2, #192	; 0xc0
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800312e:	0021      	movs	r1, r4
 8003130:	187b      	adds	r3, r7, r1
 8003132:	2212      	movs	r2, #18
 8003134:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2203      	movs	r2, #3
 8003140:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2201      	movs	r2, #1
 8003146:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	187b      	adds	r3, r7, r1
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_I2C_MspInit+0x98>)
 800314c:	0019      	movs	r1, r3
 800314e:	0010      	movs	r0, r2
 8003150:	f000 f9e6 	bl	8003520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_I2C_MspInit+0x94>)
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_I2C_MspInit+0x94>)
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	0389      	lsls	r1, r1, #14
 800315e:	430a      	orrs	r2, r1
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_I2C_MspInit+0x94>)
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	039b      	lsls	r3, r3, #14
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b00b      	add	sp, #44	; 0x2c
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	40005400 	.word	0x40005400
 800317c:	40021000 	.word	0x40021000
 8003180:	48000400 	.word	0x48000400

08003184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b08b      	sub	sp, #44	; 0x2c
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	2414      	movs	r4, #20
 800318e:	193b      	adds	r3, r7, r4
 8003190:	0018      	movs	r0, r3
 8003192:	2314      	movs	r3, #20
 8003194:	001a      	movs	r2, r3
 8003196:	2100      	movs	r1, #0
 8003198:	f002 fb60 	bl	800585c <memset>
  if(huart->Instance==USART2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d132      	bne.n	800320c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	0289      	lsls	r1, r1, #10
 80031b0:	430a      	orrs	r2, r1
 80031b2:	61da      	str	r2, [r3, #28]
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	0289      	lsls	r1, r1, #10
 80031cc:	430a      	orrs	r2, r1
 80031ce:	615a      	str	r2, [r3, #20]
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	029b      	lsls	r3, r3, #10
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031de:	0021      	movs	r1, r4
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	220c      	movs	r2, #12
 80031e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	2202      	movs	r2, #2
 80031ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2201      	movs	r2, #1
 80031fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	187a      	adds	r2, r7, r1
 8003200:	2390      	movs	r3, #144	; 0x90
 8003202:	05db      	lsls	r3, r3, #23
 8003204:	0011      	movs	r1, r2
 8003206:	0018      	movs	r0, r3
 8003208:	f000 f98a 	bl	8003520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b00b      	add	sp, #44	; 0x2c
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	40004400 	.word	0x40004400
 8003218:	40021000 	.word	0x40021000

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <NMI_Handler+0x4>

08003222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <HardFault_Handler+0x4>

08003228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003240:	f000 f87a 	bl	8003338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003254:	480d      	ldr	r0, [pc, #52]	; (800328c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003256:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopForever+0x6>)
  ldr r1, =_edata
 800325a:	490e      	ldr	r1, [pc, #56]	; (8003294 <LoopForever+0xa>)
  ldr r2, =_sidata
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LoopForever+0xe>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <LoopForever+0x16>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800327e:	f7ff ffe4 	bl	800324a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003282:	f002 fac7 	bl	8005814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003286:	f7ff f9b3 	bl	80025f0 <main>

0800328a <LoopForever>:

LoopForever:
    b LoopForever
 800328a:	e7fe      	b.n	800328a <LoopForever>
  ldr   r0, =_estack
 800328c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003298:	08006058 	.word	0x08006058
  ldr r2, =_sbss
 800329c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80032a0:	20000258 	.word	0x20000258

080032a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <ADC1_COMP_IRQHandler>
	...

080032a8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_Init+0x24>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_Init+0x24>)
 80032b2:	2110      	movs	r1, #16
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f000 f809 	bl	80032d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032be:	f7ff feef 	bl	80030a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_InitTick+0x5c>)
 80032da:	681c      	ldr	r4, [r3, #0]
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_InitTick+0x60>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	0019      	movs	r1, r3
 80032e2:	23fa      	movs	r3, #250	; 0xfa
 80032e4:	0098      	lsls	r0, r3, #2
 80032e6:	f7fc ff0d 	bl	8000104 <__udivsi3>
 80032ea:	0003      	movs	r3, r0
 80032ec:	0019      	movs	r1, r3
 80032ee:	0020      	movs	r0, r4
 80032f0:	f7fc ff08 	bl	8000104 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f905 	bl	8003506 <HAL_SYSTICK_Config>
 80032fc:	1e03      	subs	r3, r0, #0
 80032fe:	d001      	beq.n	8003304 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e00f      	b.n	8003324 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d80b      	bhi.n	8003322 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	2301      	movs	r3, #1
 800330e:	425b      	negs	r3, r3
 8003310:	2200      	movs	r2, #0
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f8e2 	bl	80034dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_InitTick+0x64>)
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b003      	add	sp, #12
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	20000090 	.word	0x20000090
 8003330:	20000098 	.word	0x20000098
 8003334:	20000094 	.word	0x20000094

08003338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_IncTick+0x1c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	001a      	movs	r2, r3
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_IncTick+0x20>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	18d2      	adds	r2, r2, r3
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_IncTick+0x20>)
 800334a:	601a      	str	r2, [r3, #0]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	20000098 	.word	0x20000098
 8003358:	20000254 	.word	0x20000254

0800335c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  return uwTick;
 8003360:	4b02      	ldr	r3, [pc, #8]	; (800336c <HAL_GetTick+0x10>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	20000254 	.word	0x20000254

08003370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7ff fff0 	bl	800335c <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	d005      	beq.n	8003396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <HAL_Delay+0x44>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	001a      	movs	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	189b      	adds	r3, r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	f7ff ffe0 	bl	800335c <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d8f7      	bhi.n	8003398 <HAL_Delay+0x28>
  {
  }
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000098 	.word	0x20000098

080033b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	0002      	movs	r2, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	1dfb      	adds	r3, r7, #7
 80033c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b7f      	cmp	r3, #127	; 0x7f
 80033cc:	d828      	bhi.n	8003420 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ce:	4a2f      	ldr	r2, [pc, #188]	; (800348c <__NVIC_SetPriority+0xd4>)
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b25b      	sxtb	r3, r3
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	33c0      	adds	r3, #192	; 0xc0
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	589b      	ldr	r3, [r3, r2]
 80033de:	1dfa      	adds	r2, r7, #7
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	0011      	movs	r1, r2
 80033e4:	2203      	movs	r2, #3
 80033e6:	400a      	ands	r2, r1
 80033e8:	00d2      	lsls	r2, r2, #3
 80033ea:	21ff      	movs	r1, #255	; 0xff
 80033ec:	4091      	lsls	r1, r2
 80033ee:	000a      	movs	r2, r1
 80033f0:	43d2      	mvns	r2, r2
 80033f2:	401a      	ands	r2, r3
 80033f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	401a      	ands	r2, r3
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	2303      	movs	r3, #3
 8003406:	4003      	ands	r3, r0
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800340c:	481f      	ldr	r0, [pc, #124]	; (800348c <__NVIC_SetPriority+0xd4>)
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b25b      	sxtb	r3, r3
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	430a      	orrs	r2, r1
 8003418:	33c0      	adds	r3, #192	; 0xc0
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800341e:	e031      	b.n	8003484 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <__NVIC_SetPriority+0xd8>)
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	0019      	movs	r1, r3
 8003428:	230f      	movs	r3, #15
 800342a:	400b      	ands	r3, r1
 800342c:	3b08      	subs	r3, #8
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3306      	adds	r3, #6
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	18d3      	adds	r3, r2, r3
 8003436:	3304      	adds	r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	1dfa      	adds	r2, r7, #7
 800343c:	7812      	ldrb	r2, [r2, #0]
 800343e:	0011      	movs	r1, r2
 8003440:	2203      	movs	r2, #3
 8003442:	400a      	ands	r2, r1
 8003444:	00d2      	lsls	r2, r2, #3
 8003446:	21ff      	movs	r1, #255	; 0xff
 8003448:	4091      	lsls	r1, r2
 800344a:	000a      	movs	r2, r1
 800344c:	43d2      	mvns	r2, r2
 800344e:	401a      	ands	r2, r3
 8003450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	401a      	ands	r2, r3
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	0018      	movs	r0, r3
 8003460:	2303      	movs	r3, #3
 8003462:	4003      	ands	r3, r0
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003468:	4809      	ldr	r0, [pc, #36]	; (8003490 <__NVIC_SetPriority+0xd8>)
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	001c      	movs	r4, r3
 8003470:	230f      	movs	r3, #15
 8003472:	4023      	ands	r3, r4
 8003474:	3b08      	subs	r3, #8
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	430a      	orrs	r2, r1
 800347a:	3306      	adds	r3, #6
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	18c3      	adds	r3, r0, r3
 8003480:	3304      	adds	r3, #4
 8003482:	601a      	str	r2, [r3, #0]
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b003      	add	sp, #12
 800348a:	bd90      	pop	{r4, r7, pc}
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	045b      	lsls	r3, r3, #17
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d301      	bcc.n	80034ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a8:	2301      	movs	r3, #1
 80034aa:	e010      	b.n	80034ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <SysTick_Config+0x44>)
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	3a01      	subs	r2, #1
 80034b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b4:	2301      	movs	r3, #1
 80034b6:	425b      	negs	r3, r3
 80034b8:	2103      	movs	r1, #3
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff ff7c 	bl	80033b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x44>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x44>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b002      	add	sp, #8
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	210f      	movs	r1, #15
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	1c02      	adds	r2, r0, #0
 80034ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b25b      	sxtb	r3, r3
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff ff5d 	bl	80033b8 <__NVIC_SetPriority>
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ffbf 	bl	8003494 <SysTick_Config>
 8003516:	0003      	movs	r3, r0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352e:	e155      	b.n	80037dc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4091      	lsls	r1, r2
 800353a:	000a      	movs	r2, r1
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d100      	bne.n	8003548 <HAL_GPIO_Init+0x28>
 8003546:	e146      	b.n	80037d6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	4013      	ands	r3, r2
 8003550:	2b01      	cmp	r3, #1
 8003552:	d005      	beq.n	8003560 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800355c:	2b02      	cmp	r3, #2
 800355e:	d130      	bne.n	80035c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	409a      	lsls	r2, r3
 800356e:	0013      	movs	r3, r2
 8003570:	43da      	mvns	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	0013      	movs	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003596:	2201      	movs	r2, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	2201      	movs	r2, #1
 80035ae:	401a      	ands	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	409a      	lsls	r2, r3
 80035b4:	0013      	movs	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d017      	beq.n	80035fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	409a      	lsls	r2, r3
 80035dc:	0013      	movs	r3, r2
 80035de:	43da      	mvns	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	0013      	movs	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2203      	movs	r2, #3
 8003604:	4013      	ands	r3, r2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d123      	bne.n	8003652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	58d3      	ldr	r3, [r2, r3]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2207      	movs	r2, #7
 800361c:	4013      	ands	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	409a      	lsls	r2, r3
 8003624:	0013      	movs	r3, r2
 8003626:	43da      	mvns	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2107      	movs	r1, #7
 8003636:	400b      	ands	r3, r1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	409a      	lsls	r2, r3
 800363c:	0013      	movs	r3, r2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	6939      	ldr	r1, [r7, #16]
 8003650:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2203      	movs	r2, #3
 800365e:	409a      	lsls	r2, r3
 8003660:	0013      	movs	r3, r2
 8003662:	43da      	mvns	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2203      	movs	r2, #3
 8003670:	401a      	ands	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	23c0      	movs	r3, #192	; 0xc0
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	4013      	ands	r3, r2
 8003690:	d100      	bne.n	8003694 <HAL_GPIO_Init+0x174>
 8003692:	e0a0      	b.n	80037d6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003694:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <HAL_GPIO_Init+0x2d4>)
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <HAL_GPIO_Init+0x2d4>)
 800369a:	2101      	movs	r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	619a      	str	r2, [r3, #24]
 80036a0:	4b54      	ldr	r3, [pc, #336]	; (80037f4 <HAL_GPIO_Init+0x2d4>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036ac:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_GPIO_Init+0x2d8>)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	3302      	adds	r3, #2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	589b      	ldr	r3, [r3, r2]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2203      	movs	r2, #3
 80036be:	4013      	ands	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	409a      	lsls	r2, r3
 80036c6:	0013      	movs	r3, r2
 80036c8:	43da      	mvns	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	2390      	movs	r3, #144	; 0x90
 80036d4:	05db      	lsls	r3, r3, #23
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x1ee>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_GPIO_Init+0x2dc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x1ea>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a46      	ldr	r2, [pc, #280]	; (8003800 <HAL_GPIO_Init+0x2e0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x1e6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a45      	ldr	r2, [pc, #276]	; (8003804 <HAL_GPIO_Init+0x2e4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x1e2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a44      	ldr	r2, [pc, #272]	; (8003808 <HAL_GPIO_Init+0x2e8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x1de>
 80036fa:	2304      	movs	r3, #4
 80036fc:	e008      	b.n	8003710 <HAL_GPIO_Init+0x1f0>
 80036fe:	2305      	movs	r3, #5
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x1f0>
 8003702:	2303      	movs	r3, #3
 8003704:	e004      	b.n	8003710 <HAL_GPIO_Init+0x1f0>
 8003706:	2302      	movs	r3, #2
 8003708:	e002      	b.n	8003710 <HAL_GPIO_Init+0x1f0>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_GPIO_Init+0x1f0>
 800370e:	2300      	movs	r3, #0
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	2103      	movs	r1, #3
 8003714:	400a      	ands	r2, r1
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	4093      	lsls	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003720:	4935      	ldr	r1, [pc, #212]	; (80037f8 <HAL_GPIO_Init+0x2d8>)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_GPIO_Init+0x2ec>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43da      	mvns	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	025b      	lsls	r3, r3, #9
 8003746:	4013      	ands	r3, r2
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_GPIO_Init+0x2ec>)
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_GPIO_Init+0x2ec>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43da      	mvns	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	4013      	ands	r3, r2
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800377c:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_GPIO_Init+0x2ec>)
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003782:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_GPIO_Init+0x2ec>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43da      	mvns	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	035b      	lsls	r3, r3, #13
 800379a:	4013      	ands	r3, r2
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_GPIO_Init+0x2ec>)
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_GPIO_Init+0x2ec>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43da      	mvns	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	039b      	lsls	r3, r3, #14
 80037c4:	4013      	ands	r3, r2
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_GPIO_Init+0x2ec>)
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	3301      	adds	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	40da      	lsrs	r2, r3
 80037e4:	1e13      	subs	r3, r2, #0
 80037e6:	d000      	beq.n	80037ea <HAL_GPIO_Init+0x2ca>
 80037e8:	e6a2      	b.n	8003530 <HAL_GPIO_Init+0x10>
  } 
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b006      	add	sp, #24
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40010000 	.word	0x40010000
 80037fc:	48000400 	.word	0x48000400
 8003800:	48000800 	.word	0x48000800
 8003804:	48000c00 	.word	0x48000c00
 8003808:	48001000 	.word	0x48001000
 800380c:	40010400 	.word	0x40010400

08003810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	0008      	movs	r0, r1
 800381a:	0011      	movs	r1, r2
 800381c:	1cbb      	adds	r3, r7, #2
 800381e:	1c02      	adds	r2, r0, #0
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	1c7b      	adds	r3, r7, #1
 8003824:	1c0a      	adds	r2, r1, #0
 8003826:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003828:	1c7b      	adds	r3, r7, #1
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003830:	1cbb      	adds	r3, r7, #2
 8003832:	881a      	ldrh	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800383a:	1cbb      	adds	r3, r7, #2
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b002      	add	sp, #8
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e082      	b.n	8003964 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2241      	movs	r2, #65	; 0x41
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d107      	bne.n	800387a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2240      	movs	r2, #64	; 0x40
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0018      	movs	r0, r3
 8003876:	f7ff fc37 	bl	80030e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2241      	movs	r2, #65	; 0x41
 800387e:	2124      	movs	r1, #36	; 0x24
 8003880:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	438a      	bics	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_I2C_Init+0x120>)
 800389c:	400a      	ands	r2, r1
 800389e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4931      	ldr	r1, [pc, #196]	; (8003970 <HAL_I2C_Init+0x124>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d108      	bne.n	80038ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0209      	lsls	r1, r1, #8
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	e007      	b.n	80038da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2184      	movs	r1, #132	; 0x84
 80038d4:	0209      	lsls	r1, r1, #8
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d104      	bne.n	80038ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	491f      	ldr	r1, [pc, #124]	; (8003974 <HAL_I2C_Init+0x128>)
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	491a      	ldr	r1, [pc, #104]	; (8003970 <HAL_I2C_Init+0x124>)
 8003908:	400a      	ands	r2, r1
 800390a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	431a      	orrs	r2, r3
 8003916:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69d9      	ldr	r1, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1a      	ldr	r2, [r3, #32]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2241      	movs	r2, #65	; 0x41
 8003950:	2120      	movs	r1, #32
 8003952:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2242      	movs	r2, #66	; 0x42
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	f0ffffff 	.word	0xf0ffffff
 8003970:	ffff7fff 	.word	0xffff7fff
 8003974:	02008000 	.word	0x02008000

08003978 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	000c      	movs	r4, r1
 8003982:	0010      	movs	r0, r2
 8003984:	0019      	movs	r1, r3
 8003986:	230a      	movs	r3, #10
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	1c22      	adds	r2, r4, #0
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	2308      	movs	r3, #8
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	1c02      	adds	r2, r0, #0
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	1c0a      	adds	r2, r1, #0
 800399a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2241      	movs	r2, #65	; 0x41
 80039a0:	5c9b      	ldrb	r3, [r3, r2]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d000      	beq.n	80039aa <HAL_I2C_Mem_Write+0x32>
 80039a8:	e10c      	b.n	8003bc4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d004      	beq.n	80039ba <HAL_I2C_Mem_Write+0x42>
 80039b0:	232c      	movs	r3, #44	; 0x2c
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0ff      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2240      	movs	r2, #64	; 0x40
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2C_Mem_Write+0x5c>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0f8      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2101      	movs	r1, #1
 80039da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039dc:	f7ff fcbe 	bl	800335c <HAL_GetTick>
 80039e0:	0003      	movs	r3, r0
 80039e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	0219      	lsls	r1, r3, #8
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	f000 fb0b 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0e3      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2241      	movs	r2, #65	; 0x41
 8003a02:	2121      	movs	r1, #33	; 0x21
 8003a04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2242      	movs	r2, #66	; 0x42
 8003a0a:	2140      	movs	r1, #64	; 0x40
 8003a0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	222c      	movs	r2, #44	; 0x2c
 8003a1e:	18ba      	adds	r2, r7, r2
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	881c      	ldrh	r4, [r3, #0]
 8003a2e:	2308      	movs	r3, #8
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	230a      	movs	r3, #10
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	8819      	ldrh	r1, [r3, #0]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	0023      	movs	r3, r4
 8003a46:	f000 f9f9 	bl	8003e3c <I2C_RequestMemoryWrite>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0b5      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2bff      	cmp	r3, #255	; 0xff
 8003a62:	d911      	bls.n	8003a88 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	045c      	lsls	r4, r3, #17
 8003a74:	230a      	movs	r3, #10
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	8819      	ldrh	r1, [r3, #0]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0023      	movs	r3, r4
 8003a82:	f000 fbf7 	bl	8004274 <I2C_TransferConfig>
 8003a86:	e012      	b.n	8003aae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	049c      	lsls	r4, r3, #18
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	8819      	ldrh	r1, [r3, #0]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	0023      	movs	r3, r4
 8003aaa:	f000 fbe3 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 fae8 	bl	800408a <I2C_WaitOnTXISFlagUntilTimeout>
 8003aba:	1e03      	subs	r3, r0, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e081      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03a      	beq.n	8003b72 <HAL_I2C_Mem_Write+0x1fa>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d136      	bne.n	8003b72 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	f000 fa7b 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e053      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2bff      	cmp	r3, #255	; 0xff
 8003b26:	d911      	bls.n	8003b4c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	045c      	lsls	r4, r3, #17
 8003b38:	230a      	movs	r3, #10
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	8819      	ldrh	r1, [r3, #0]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	2300      	movs	r3, #0
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	0023      	movs	r3, r4
 8003b46:	f000 fb95 	bl	8004274 <I2C_TransferConfig>
 8003b4a:	e012      	b.n	8003b72 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	049c      	lsls	r4, r3, #18
 8003b60:	230a      	movs	r3, #10
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	8819      	ldrh	r1, [r3, #0]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	0023      	movs	r3, r4
 8003b6e:	f000 fb81 	bl	8004274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d198      	bne.n	8003aae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 fac0 	bl	8004108 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e01a      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2220      	movs	r2, #32
 8003b96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <HAL_I2C_Mem_Write+0x258>)
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2241      	movs	r2, #65	; 0x41
 8003bac:	2120      	movs	r1, #32
 8003bae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2242      	movs	r2, #66	; 0x42
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b007      	add	sp, #28
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	fe00e800 	.word	0xfe00e800

08003bd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	000c      	movs	r4, r1
 8003bde:	0010      	movs	r0, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	230a      	movs	r3, #10
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	1c22      	adds	r2, r4, #0
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	2308      	movs	r3, #8
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	1c02      	adds	r2, r0, #0
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	1dbb      	adds	r3, r7, #6
 8003bf4:	1c0a      	adds	r2, r1, #0
 8003bf6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2241      	movs	r2, #65	; 0x41
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d000      	beq.n	8003c06 <HAL_I2C_Mem_Read+0x32>
 8003c04:	e110      	b.n	8003e28 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <HAL_I2C_Mem_Read+0x42>
 8003c0c:	232c      	movs	r3, #44	; 0x2c
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e103      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	5c9b      	ldrb	r3, [r3, r2]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2C_Mem_Read+0x5c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0fc      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	2101      	movs	r1, #1
 8003c36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c38:	f7ff fb90 	bl	800335c <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	0219      	lsls	r1, r3, #8
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2319      	movs	r3, #25
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f000 f9dd 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003c52:	1e03      	subs	r3, r0, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0e7      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2241      	movs	r2, #65	; 0x41
 8003c5e:	2122      	movs	r1, #34	; 0x22
 8003c60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2242      	movs	r2, #66	; 0x42
 8003c66:	2140      	movs	r1, #64	; 0x40
 8003c68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	222c      	movs	r2, #44	; 0x2c
 8003c7a:	18ba      	adds	r2, r7, r2
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c86:	1dbb      	adds	r3, r7, #6
 8003c88:	881c      	ldrh	r4, [r3, #0]
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	230a      	movs	r3, #10
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	8819      	ldrh	r1, [r3, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	0023      	movs	r3, r4
 8003ca2:	f000 f92f 	bl	8003f04 <I2C_RequestMemoryRead>
 8003ca6:	1e03      	subs	r3, r0, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	2100      	movs	r1, #0
 8003cb0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0b9      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2bff      	cmp	r3, #255	; 0xff
 8003cbe:	d911      	bls.n	8003ce4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	045c      	lsls	r4, r3, #17
 8003cd0:	230a      	movs	r3, #10
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	8819      	ldrh	r1, [r3, #0]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_I2C_Mem_Read+0x260>)
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	0023      	movs	r3, r4
 8003cde:	f000 fac9 	bl	8004274 <I2C_TransferConfig>
 8003ce2:	e012      	b.n	8003d0a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	049c      	lsls	r4, r3, #18
 8003cf8:	230a      	movs	r3, #10
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	8819      	ldrh	r1, [r3, #0]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <HAL_I2C_Mem_Read+0x260>)
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	0023      	movs	r3, r4
 8003d06:	f000 fab5 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0013      	movs	r3, r2
 8003d14:	2200      	movs	r2, #0
 8003d16:	2104      	movs	r1, #4
 8003d18:	f000 f978 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e082      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03a      	beq.n	8003dd6 <HAL_I2C_Mem_Read+0x202>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d136      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	0013      	movs	r3, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	f000 f949 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e053      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2bff      	cmp	r3, #255	; 0xff
 8003d8a:	d911      	bls.n	8003db0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	22ff      	movs	r2, #255	; 0xff
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	045c      	lsls	r4, r3, #17
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	8819      	ldrh	r1, [r3, #0]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	2300      	movs	r3, #0
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0023      	movs	r3, r4
 8003daa:	f000 fa63 	bl	8004274 <I2C_TransferConfig>
 8003dae:	e012      	b.n	8003dd6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	049c      	lsls	r4, r3, #18
 8003dc4:	230a      	movs	r3, #10
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	8819      	ldrh	r1, [r3, #0]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	0023      	movs	r3, r4
 8003dd2:	f000 fa4f 	bl	8004274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d194      	bne.n	8003d0a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f98e 	bl	8004108 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e01a      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	490c      	ldr	r1, [pc, #48]	; (8003e38 <HAL_I2C_Mem_Read+0x264>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2241      	movs	r2, #65	; 0x41
 8003e10:	2120      	movs	r1, #32
 8003e12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2242      	movs	r2, #66	; 0x42
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2240      	movs	r2, #64	; 0x40
 8003e20:	2100      	movs	r1, #0
 8003e22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b007      	add	sp, #28
 8003e30:	bd90      	pop	{r4, r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	80002400 	.word	0x80002400
 8003e38:	fe00e800 	.word	0xfe00e800

08003e3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	000c      	movs	r4, r1
 8003e46:	0010      	movs	r0, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	250a      	movs	r5, #10
 8003e4c:	197b      	adds	r3, r7, r5
 8003e4e:	1c22      	adds	r2, r4, #0
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	2308      	movs	r3, #8
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	1c02      	adds	r2, r0, #0
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	1dbb      	adds	r3, r7, #6
 8003e5c:	1c0a      	adds	r2, r1, #0
 8003e5e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e60:	1dbb      	adds	r3, r7, #6
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	045c      	lsls	r4, r3, #17
 8003e6a:	197b      	adds	r3, r7, r5
 8003e6c:	8819      	ldrh	r1, [r3, #0]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <I2C_RequestMemoryWrite+0xc4>)
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	0023      	movs	r3, r4
 8003e76:	f000 f9fd 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f902 	bl	800408a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e033      	b.n	8003ef6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8e:	1dbb      	adds	r3, r7, #6
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e96:	2308      	movs	r3, #8
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ea4:	e019      	b.n	8003eda <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	6a39      	ldr	r1, [r7, #32]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 f8e3 	bl	800408a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e014      	b.n	8003ef6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ecc:	2308      	movs	r3, #8
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	0013      	movs	r3, r2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	f000 f890 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bdb0      	pop	{r4, r5, r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	80002000 	.word	0x80002000

08003f04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f04:	b5b0      	push	{r4, r5, r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	000c      	movs	r4, r1
 8003f0e:	0010      	movs	r0, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	250a      	movs	r5, #10
 8003f14:	197b      	adds	r3, r7, r5
 8003f16:	1c22      	adds	r2, r4, #0
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	1c02      	adds	r2, r0, #0
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	1dbb      	adds	r3, r7, #6
 8003f24:	1c0a      	adds	r2, r1, #0
 8003f26:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f28:	1dbb      	adds	r3, r7, #6
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	197b      	adds	r3, r7, r5
 8003f30:	8819      	ldrh	r1, [r3, #0]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <I2C_RequestMemoryRead+0xc0>)
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f000 f99b 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f000 f8a0 	bl	800408a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e033      	b.n	8003fba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
 8003f68:	e019      	b.n	8003f9e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 f881 	bl	800408a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d001      	beq.n	8003f90 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e014      	b.n	8003fba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f90:	2308      	movs	r3, #8
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0013      	movs	r3, r2
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2140      	movs	r1, #64	; 0x40
 8003fac:	f000 f82e 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	80002000 	.word	0x80002000

08003fc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d103      	bne.n	8003fe6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2201      	movs	r2, #1
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d007      	beq.n	8004004 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2101      	movs	r1, #1
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
  }
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b002      	add	sp, #8
 800400a:	bd80      	pop	{r7, pc}

0800400c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	1dfb      	adds	r3, r7, #7
 800401a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800401c:	e021      	b.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	d01e      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004024:	f7ff f99a 	bl	800335c <HAL_GetTick>
 8004028:	0002      	movs	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	2220      	movs	r2, #32
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2241      	movs	r2, #65	; 0x41
 800404a:	2120      	movs	r1, #32
 800404c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2242      	movs	r2, #66	; 0x42
 8004052:	2100      	movs	r1, #0
 8004054:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2240      	movs	r2, #64	; 0x40
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	425a      	negs	r2, r3
 8004072:	4153      	adcs	r3, r2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	001a      	movs	r2, r3
 8004078:	1dfb      	adds	r3, r7, #7
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0ce      	beq.n	800401e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004096:	e02b      	b.n	80040f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 f86e 	bl	8004180 <I2C_IsAcknowledgeFailed>
 80040a4:	1e03      	subs	r3, r0, #0
 80040a6:	d001      	beq.n	80040ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e029      	b.n	8004100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3301      	adds	r3, #1
 80040b0:	d01e      	beq.n	80040f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7ff f953 	bl	800335c <HAL_GetTick>
 80040b6:	0002      	movs	r2, r0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d113      	bne.n	80040f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	2220      	movs	r2, #32
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2241      	movs	r2, #65	; 0x41
 80040d8:	2120      	movs	r1, #32
 80040da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2242      	movs	r2, #66	; 0x42
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	2100      	movs	r1, #0
 80040ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e007      	b.n	8004100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d1cc      	bne.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b004      	add	sp, #16
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004114:	e028      	b.n	8004168 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f82f 	bl	8004180 <I2C_IsAcknowledgeFailed>
 8004122:	1e03      	subs	r3, r0, #0
 8004124:	d001      	beq.n	800412a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e026      	b.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7ff f917 	bl	800335c <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d113      	bne.n	8004168 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	2220      	movs	r2, #32
 8004146:	431a      	orrs	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2241      	movs	r2, #65	; 0x41
 8004150:	2120      	movs	r1, #32
 8004152:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2242      	movs	r2, #66	; 0x42
 8004158:	2100      	movs	r1, #0
 800415a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2240      	movs	r2, #64	; 0x40
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2220      	movs	r2, #32
 8004170:	4013      	ands	r3, r2
 8004172:	2b20      	cmp	r3, #32
 8004174:	d1cf      	bne.n	8004116 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2210      	movs	r2, #16
 8004194:	4013      	ands	r3, r2
 8004196:	2b10      	cmp	r3, #16
 8004198:	d164      	bne.n	8004264 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	049b      	lsls	r3, r3, #18
 80041a4:	401a      	ands	r2, r3
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	049b      	lsls	r3, r3, #18
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d02b      	beq.n	8004206 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	01c9      	lsls	r1, r1, #7
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c0:	e021      	b.n	8004206 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3301      	adds	r3, #1
 80041c6:	d01e      	beq.n	8004206 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7ff f8c8 	bl	800335c <HAL_GetTick>
 80041cc:	0002      	movs	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <I2C_IsAcknowledgeFailed+0x5e>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d113      	bne.n	8004206 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	2220      	movs	r2, #32
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2241      	movs	r2, #65	; 0x41
 80041ee:	2120      	movs	r1, #32
 80041f0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2242      	movs	r2, #66	; 0x42
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2240      	movs	r2, #64	; 0x40
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e02f      	b.n	8004266 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2220      	movs	r2, #32
 800420e:	4013      	ands	r3, r2
 8004210:	2b20      	cmp	r3, #32
 8004212:	d1d6      	bne.n	80041c2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2210      	movs	r2, #16
 800421a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2220      	movs	r2, #32
 8004222:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff fece 	bl	8003fc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	490e      	ldr	r1, [pc, #56]	; (8004270 <I2C_IsAcknowledgeFailed+0xf0>)
 8004238:	400a      	ands	r2, r1
 800423a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	2204      	movs	r2, #4
 8004242:	431a      	orrs	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2241      	movs	r2, #65	; 0x41
 800424c:	2120      	movs	r1, #32
 800424e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2242      	movs	r2, #66	; 0x42
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b004      	add	sp, #16
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	fe00e800 	.word	0xfe00e800

08004274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	0008      	movs	r0, r1
 800427e:	0011      	movs	r1, r2
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	240a      	movs	r4, #10
 8004284:	193b      	adds	r3, r7, r4
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	2009      	movs	r0, #9
 800428c:	183b      	adds	r3, r7, r0
 800428e:	1c0a      	adds	r2, r1, #0
 8004290:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	0d51      	lsrs	r1, r2, #21
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	00d2      	lsls	r2, r2, #3
 80042a0:	400a      	ands	r2, r1
 80042a2:	490e      	ldr	r1, [pc, #56]	; (80042dc <I2C_TransferConfig+0x68>)
 80042a4:	430a      	orrs	r2, r1
 80042a6:	43d2      	mvns	r2, r2
 80042a8:	401a      	ands	r2, r3
 80042aa:	0011      	movs	r1, r2
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	059b      	lsls	r3, r3, #22
 80042b2:	0d9a      	lsrs	r2, r3, #22
 80042b4:	183b      	adds	r3, r7, r0
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	0418      	lsls	r0, r3, #16
 80042ba:	23ff      	movs	r3, #255	; 0xff
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	4003      	ands	r3, r0
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b005      	add	sp, #20
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	03ff63ff 	.word	0x03ff63ff

080042e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2241      	movs	r2, #65	; 0x41
 80042ee:	5c9b      	ldrb	r3, [r3, r2]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d138      	bne.n	8004368 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2240      	movs	r2, #64	; 0x40
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004300:	2302      	movs	r3, #2
 8004302:	e032      	b.n	800436a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	2101      	movs	r1, #1
 800430a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2241      	movs	r2, #65	; 0x41
 8004310:	2124      	movs	r1, #36	; 0x24
 8004312:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	438a      	bics	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4911      	ldr	r1, [pc, #68]	; (8004374 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004330:	400a      	ands	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2241      	movs	r2, #65	; 0x41
 8004358:	2120      	movs	r1, #32
 800435a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2240      	movs	r2, #64	; 0x40
 8004360:	2100      	movs	r1, #0
 8004362:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b002      	add	sp, #8
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	ffffefff 	.word	0xffffefff

08004378 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2241      	movs	r2, #65	; 0x41
 8004386:	5c9b      	ldrb	r3, [r3, r2]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b20      	cmp	r3, #32
 800438c:	d139      	bne.n	8004402 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004398:	2302      	movs	r3, #2
 800439a:	e033      	b.n	8004404 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2240      	movs	r2, #64	; 0x40
 80043a0:	2101      	movs	r1, #1
 80043a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2241      	movs	r2, #65	; 0x41
 80043a8:	2124      	movs	r1, #36	; 0x24
 80043aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2101      	movs	r1, #1
 80043b8:	438a      	bics	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4a11      	ldr	r2, [pc, #68]	; (800440c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2101      	movs	r1, #1
 80043ea:	430a      	orrs	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2241      	movs	r2, #65	; 0x41
 80043f2:	2120      	movs	r1, #32
 80043f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2240      	movs	r2, #64	; 0x40
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b004      	add	sp, #16
 800440a:	bd80      	pop	{r7, pc}
 800440c:	fffff0ff 	.word	0xfffff0ff

08004410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f000 fb76 	bl	8004b10 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	4013      	ands	r3, r2
 800442c:	d100      	bne.n	8004430 <HAL_RCC_OscConfig+0x20>
 800442e:	e08e      	b.n	800454e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004430:	4bc5      	ldr	r3, [pc, #788]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	220c      	movs	r2, #12
 8004436:	4013      	ands	r3, r2
 8004438:	2b04      	cmp	r3, #4
 800443a:	d00e      	beq.n	800445a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800443c:	4bc2      	ldr	r3, [pc, #776]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	220c      	movs	r2, #12
 8004442:	4013      	ands	r3, r2
 8004444:	2b08      	cmp	r3, #8
 8004446:	d117      	bne.n	8004478 <HAL_RCC_OscConfig+0x68>
 8004448:	4bbf      	ldr	r3, [pc, #764]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	23c0      	movs	r3, #192	; 0xc0
 800444e:	025b      	lsls	r3, r3, #9
 8004450:	401a      	ands	r2, r3
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	025b      	lsls	r3, r3, #9
 8004456:	429a      	cmp	r2, r3
 8004458:	d10e      	bne.n	8004478 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445a:	4bbb      	ldr	r3, [pc, #748]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	029b      	lsls	r3, r3, #10
 8004462:	4013      	ands	r3, r2
 8004464:	d100      	bne.n	8004468 <HAL_RCC_OscConfig+0x58>
 8004466:	e071      	b.n	800454c <HAL_RCC_OscConfig+0x13c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d000      	beq.n	8004472 <HAL_RCC_OscConfig+0x62>
 8004470:	e06c      	b.n	800454c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f000 fb4c 	bl	8004b10 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x80>
 8004480:	4bb1      	ldr	r3, [pc, #708]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4bb0      	ldr	r3, [pc, #704]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	0249      	lsls	r1, r1, #9
 800448a:	430a      	orrs	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e02f      	b.n	80044f0 <HAL_RCC_OscConfig+0xe0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10c      	bne.n	80044b2 <HAL_RCC_OscConfig+0xa2>
 8004498:	4bab      	ldr	r3, [pc, #684]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4baa      	ldr	r3, [pc, #680]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800449e:	49ab      	ldr	r1, [pc, #684]	; (800474c <HAL_RCC_OscConfig+0x33c>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	4ba8      	ldr	r3, [pc, #672]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4ba7      	ldr	r3, [pc, #668]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044aa:	49a9      	ldr	r1, [pc, #676]	; (8004750 <HAL_RCC_OscConfig+0x340>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e01e      	b.n	80044f0 <HAL_RCC_OscConfig+0xe0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d10e      	bne.n	80044d8 <HAL_RCC_OscConfig+0xc8>
 80044ba:	4ba3      	ldr	r3, [pc, #652]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4ba2      	ldr	r3, [pc, #648]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044c0:	2180      	movs	r1, #128	; 0x80
 80044c2:	02c9      	lsls	r1, r1, #11
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	4b9f      	ldr	r3, [pc, #636]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b9e      	ldr	r3, [pc, #632]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	0249      	lsls	r1, r1, #9
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0xe0>
 80044d8:	4b9b      	ldr	r3, [pc, #620]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b9a      	ldr	r3, [pc, #616]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044de:	499b      	ldr	r1, [pc, #620]	; (800474c <HAL_RCC_OscConfig+0x33c>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	4b98      	ldr	r3, [pc, #608]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b97      	ldr	r3, [pc, #604]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80044ea:	4999      	ldr	r1, [pc, #612]	; (8004750 <HAL_RCC_OscConfig+0x340>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d014      	beq.n	8004522 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fe ff30 	bl	800335c <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004502:	f7fe ff2b 	bl	800335c <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	; 0x64
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e2fd      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004514:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	029b      	lsls	r3, r3, #10
 800451c:	4013      	ands	r3, r2
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0xf2>
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fe ff1b 	bl	800335c <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe ff16 	bl	800335c <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e2e8      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453e:	4b82      	ldr	r3, [pc, #520]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	029b      	lsls	r3, r3, #10
 8004546:	4013      	ands	r3, r2
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x11c>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2202      	movs	r2, #2
 8004554:	4013      	ands	r3, r2
 8004556:	d100      	bne.n	800455a <HAL_RCC_OscConfig+0x14a>
 8004558:	e06c      	b.n	8004634 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800455a:	4b7b      	ldr	r3, [pc, #492]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	220c      	movs	r2, #12
 8004560:	4013      	ands	r3, r2
 8004562:	d00e      	beq.n	8004582 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004564:	4b78      	ldr	r3, [pc, #480]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	220c      	movs	r2, #12
 800456a:	4013      	ands	r3, r2
 800456c:	2b08      	cmp	r3, #8
 800456e:	d11f      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1a0>
 8004570:	4b75      	ldr	r3, [pc, #468]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	23c0      	movs	r3, #192	; 0xc0
 8004576:	025b      	lsls	r3, r3, #9
 8004578:	401a      	ands	r2, r3
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	429a      	cmp	r2, r3
 8004580:	d116      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2202      	movs	r2, #2
 8004588:	4013      	ands	r3, r2
 800458a:	d005      	beq.n	8004598 <HAL_RCC_OscConfig+0x188>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e2bb      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b6b      	ldr	r3, [pc, #428]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	22f8      	movs	r2, #248	; 0xf8
 800459e:	4393      	bics	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	00da      	lsls	r2, r3, #3
 80045a8:	4b67      	ldr	r3, [pc, #412]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	e041      	b.n	8004634 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d024      	beq.n	8004602 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b8:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b62      	ldr	r3, [pc, #392]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80045be:	2101      	movs	r1, #1
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fe feca 	bl	800335c <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fe fec5 	bl	800335c <HAL_GetTick>
 80045d2:	0002      	movs	r2, r0
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e297      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2202      	movs	r2, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d0f1      	beq.n	80045ce <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b57      	ldr	r3, [pc, #348]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	22f8      	movs	r2, #248	; 0xf8
 80045f0:	4393      	bics	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00da      	lsls	r2, r3, #3
 80045fa:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e018      	b.n	8004634 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b51      	ldr	r3, [pc, #324]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004608:	2101      	movs	r1, #1
 800460a:	438a      	bics	r2, r1
 800460c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fe fea5 	bl	800335c <HAL_GetTick>
 8004612:	0003      	movs	r3, r0
 8004614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004618:	f7fe fea0 	bl	800335c <HAL_GetTick>
 800461c:	0002      	movs	r2, r0
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e272      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d1f1      	bne.n	8004618 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2208      	movs	r2, #8
 800463a:	4013      	ands	r3, r2
 800463c:	d036      	beq.n	80046ac <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d019      	beq.n	800467a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004646:	4b40      	ldr	r3, [pc, #256]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800464c:	2101      	movs	r1, #1
 800464e:	430a      	orrs	r2, r1
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fe fe83 	bl	800335c <HAL_GetTick>
 8004656:	0003      	movs	r3, r0
 8004658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465c:	f7fe fe7e 	bl	800335c <HAL_GetTick>
 8004660:	0002      	movs	r2, r0
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e250      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2202      	movs	r2, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d0f1      	beq.n	800465c <HAL_RCC_OscConfig+0x24c>
 8004678:	e018      	b.n	80046ac <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467a:	4b33      	ldr	r3, [pc, #204]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800467c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467e:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 8004680:	2101      	movs	r1, #1
 8004682:	438a      	bics	r2, r1
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004686:	f7fe fe69 	bl	800335c <HAL_GetTick>
 800468a:	0003      	movs	r3, r0
 800468c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004690:	f7fe fe64 	bl	800335c <HAL_GetTick>
 8004694:	0002      	movs	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e236      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2202      	movs	r2, #2
 80046a8:	4013      	ands	r3, r2
 80046aa:	d1f1      	bne.n	8004690 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2204      	movs	r2, #4
 80046b2:	4013      	ands	r3, r2
 80046b4:	d100      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2a8>
 80046b6:	e0b5      	b.n	8004824 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b8:	201f      	movs	r0, #31
 80046ba:	183b      	adds	r3, r7, r0
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c0:	4b21      	ldr	r3, [pc, #132]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	055b      	lsls	r3, r3, #21
 80046c8:	4013      	ands	r3, r2
 80046ca:	d110      	bne.n	80046ee <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	0549      	lsls	r1, r1, #21
 80046d6:	430a      	orrs	r2, r1
 80046d8:	61da      	str	r2, [r3, #28]
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	055b      	lsls	r3, r3, #21
 80046e2:	4013      	ands	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <HAL_RCC_OscConfig+0x344>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	d11a      	bne.n	8004730 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_RCC_OscConfig+0x344>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_RCC_OscConfig+0x344>)
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	0049      	lsls	r1, r1, #1
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004708:	f7fe fe28 	bl	800335c <HAL_GetTick>
 800470c:	0003      	movs	r3, r0
 800470e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fe fe23 	bl	800335c <HAL_GetTick>
 8004716:	0002      	movs	r2, r0
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	; 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e1f5      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x344>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4013      	ands	r3, r2
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d10f      	bne.n	8004758 <HAL_RCC_OscConfig+0x348>
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <HAL_RCC_OscConfig+0x338>)
 800473e:	2101      	movs	r1, #1
 8004740:	430a      	orrs	r2, r1
 8004742:	621a      	str	r2, [r3, #32]
 8004744:	e036      	b.n	80047b4 <HAL_RCC_OscConfig+0x3a4>
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	40021000 	.word	0x40021000
 800474c:	fffeffff 	.word	0xfffeffff
 8004750:	fffbffff 	.word	0xfffbffff
 8004754:	40007000 	.word	0x40007000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <HAL_RCC_OscConfig+0x36a>
 8004760:	4bca      	ldr	r3, [pc, #808]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	4bc9      	ldr	r3, [pc, #804]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004766:	2101      	movs	r1, #1
 8004768:	438a      	bics	r2, r1
 800476a:	621a      	str	r2, [r3, #32]
 800476c:	4bc7      	ldr	r3, [pc, #796]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	4bc6      	ldr	r3, [pc, #792]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004772:	2104      	movs	r1, #4
 8004774:	438a      	bics	r2, r1
 8004776:	621a      	str	r2, [r3, #32]
 8004778:	e01c      	b.n	80047b4 <HAL_RCC_OscConfig+0x3a4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b05      	cmp	r3, #5
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x38c>
 8004782:	4bc2      	ldr	r3, [pc, #776]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	4bc1      	ldr	r3, [pc, #772]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004788:	2104      	movs	r1, #4
 800478a:	430a      	orrs	r2, r1
 800478c:	621a      	str	r2, [r3, #32]
 800478e:	4bbf      	ldr	r3, [pc, #764]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	4bbe      	ldr	r3, [pc, #760]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	621a      	str	r2, [r3, #32]
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0x3a4>
 800479c:	4bbb      	ldr	r3, [pc, #748]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	4bba      	ldr	r3, [pc, #744]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	438a      	bics	r2, r1
 80047a6:	621a      	str	r2, [r3, #32]
 80047a8:	4bb8      	ldr	r3, [pc, #736]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	4bb7      	ldr	r3, [pc, #732]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80047ae:	2104      	movs	r1, #4
 80047b0:	438a      	bics	r2, r1
 80047b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d014      	beq.n	80047e6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047bc:	f7fe fdce 	bl	800335c <HAL_GetTick>
 80047c0:	0003      	movs	r3, r0
 80047c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	e009      	b.n	80047da <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fe fdc9 	bl	800335c <HAL_GetTick>
 80047ca:	0002      	movs	r2, r0
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	4aaf      	ldr	r2, [pc, #700]	; (8004a90 <HAL_RCC_OscConfig+0x680>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e19a      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	4bac      	ldr	r3, [pc, #688]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	2202      	movs	r2, #2
 80047e0:	4013      	ands	r3, r2
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x3b6>
 80047e4:	e013      	b.n	800480e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fdb9 	bl	800335c <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ee:	e009      	b.n	8004804 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fe fdb4 	bl	800335c <HAL_GetTick>
 80047f4:	0002      	movs	r2, r0
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	4aa5      	ldr	r2, [pc, #660]	; (8004a90 <HAL_RCC_OscConfig+0x680>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e185      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004804:	4ba1      	ldr	r3, [pc, #644]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	2202      	movs	r2, #2
 800480a:	4013      	ands	r3, r2
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800480e:	231f      	movs	r3, #31
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b9c      	ldr	r3, [pc, #624]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	4b9b      	ldr	r3, [pc, #620]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800481e:	499d      	ldr	r1, [pc, #628]	; (8004a94 <HAL_RCC_OscConfig+0x684>)
 8004820:	400a      	ands	r2, r1
 8004822:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	4013      	ands	r3, r2
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d12a      	bne.n	800488c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004836:	4b95      	ldr	r3, [pc, #596]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483a:	4b94      	ldr	r3, [pc, #592]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800483c:	2104      	movs	r1, #4
 800483e:	430a      	orrs	r2, r1
 8004840:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004842:	4b92      	ldr	r3, [pc, #584]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004846:	4b91      	ldr	r3, [pc, #580]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004848:	2101      	movs	r1, #1
 800484a:	430a      	orrs	r2, r1
 800484c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484e:	f7fe fd85 	bl	800335c <HAL_GetTick>
 8004852:	0003      	movs	r3, r0
 8004854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004858:	f7fe fd80 	bl	800335c <HAL_GetTick>
 800485c:	0002      	movs	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e152      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800486a:	4b88      	ldr	r3, [pc, #544]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	2202      	movs	r2, #2
 8004870:	4013      	ands	r3, r2
 8004872:	d0f1      	beq.n	8004858 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004874:	4b85      	ldr	r3, [pc, #532]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	22f8      	movs	r2, #248	; 0xf8
 800487a:	4393      	bics	r3, r2
 800487c:	0019      	movs	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	00da      	lsls	r2, r3, #3
 8004884:	4b81      	ldr	r3, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004886:	430a      	orrs	r2, r1
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
 800488a:	e034      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	3305      	adds	r3, #5
 8004892:	d111      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004894:	4b7d      	ldr	r3, [pc, #500]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004898:	4b7c      	ldr	r3, [pc, #496]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800489a:	2104      	movs	r1, #4
 800489c:	438a      	bics	r2, r1
 800489e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80048a0:	4b7a      	ldr	r3, [pc, #488]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	22f8      	movs	r2, #248	; 0xf8
 80048a6:	4393      	bics	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	00da      	lsls	r2, r3, #3
 80048b0:	4b76      	ldr	r3, [pc, #472]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048b2:	430a      	orrs	r2, r1
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34
 80048b6:	e01e      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80048b8:	4b74      	ldr	r3, [pc, #464]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048be:	2104      	movs	r1, #4
 80048c0:	430a      	orrs	r2, r1
 80048c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80048c4:	4b71      	ldr	r3, [pc, #452]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c8:	4b70      	ldr	r3, [pc, #448]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048ca:	2101      	movs	r1, #1
 80048cc:	438a      	bics	r2, r1
 80048ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d0:	f7fe fd44 	bl	800335c <HAL_GetTick>
 80048d4:	0003      	movs	r3, r0
 80048d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048da:	f7fe fd3f 	bl	800335c <HAL_GetTick>
 80048de:	0002      	movs	r2, r0
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e111      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048ec:	4b67      	ldr	r3, [pc, #412]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	2202      	movs	r2, #2
 80048f2:	4013      	ands	r3, r2
 80048f4:	d1f1      	bne.n	80048da <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2220      	movs	r2, #32
 80048fc:	4013      	ands	r3, r2
 80048fe:	d05c      	beq.n	80049ba <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004900:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	220c      	movs	r2, #12
 8004906:	4013      	ands	r3, r2
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d00e      	beq.n	800492a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800490c:	4b5f      	ldr	r3, [pc, #380]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	220c      	movs	r2, #12
 8004912:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004914:	2b08      	cmp	r3, #8
 8004916:	d114      	bne.n	8004942 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004918:	4b5c      	ldr	r3, [pc, #368]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	23c0      	movs	r3, #192	; 0xc0
 800491e:	025b      	lsls	r3, r3, #9
 8004920:	401a      	ands	r2, r3
 8004922:	23c0      	movs	r3, #192	; 0xc0
 8004924:	025b      	lsls	r3, r3, #9
 8004926:	429a      	cmp	r2, r3
 8004928:	d10b      	bne.n	8004942 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	025b      	lsls	r3, r3, #9
 8004932:	4013      	ands	r3, r2
 8004934:	d040      	beq.n	80049b8 <HAL_RCC_OscConfig+0x5a8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d03c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0e6      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800494a:	4b50      	ldr	r3, [pc, #320]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 800494c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494e:	4b4f      	ldr	r3, [pc, #316]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	0249      	lsls	r1, r1, #9
 8004954:	430a      	orrs	r2, r1
 8004956:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fe fd00 	bl	800335c <HAL_GetTick>
 800495c:	0003      	movs	r3, r0
 800495e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004962:	f7fe fcfb 	bl	800335c <HAL_GetTick>
 8004966:	0002      	movs	r2, r0
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e0cd      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004974:	4b45      	ldr	r3, [pc, #276]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	025b      	lsls	r3, r3, #9
 800497c:	4013      	ands	r3, r2
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x552>
 8004980:	e01b      	b.n	80049ba <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004982:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004986:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004988:	4943      	ldr	r1, [pc, #268]	; (8004a98 <HAL_RCC_OscConfig+0x688>)
 800498a:	400a      	ands	r2, r1
 800498c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe fce5 	bl	800335c <HAL_GetTick>
 8004992:	0003      	movs	r3, r0
 8004994:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004998:	f7fe fce0 	bl	800335c <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0b2      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80049aa:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80049ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	025b      	lsls	r3, r3, #9
 80049b2:	4013      	ands	r3, r2
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x588>
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80049b8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d100      	bne.n	80049c4 <HAL_RCC_OscConfig+0x5b4>
 80049c2:	e0a4      	b.n	8004b0e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c4:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	220c      	movs	r2, #12
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d100      	bne.n	80049d2 <HAL_RCC_OscConfig+0x5c2>
 80049d0:	e078      	b.n	8004ac4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d14c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 80049e0:	492e      	ldr	r1, [pc, #184]	; (8004a9c <HAL_RCC_OscConfig+0x68c>)
 80049e2:	400a      	ands	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e6:	f7fe fcb9 	bl	800335c <HAL_GetTick>
 80049ea:	0003      	movs	r3, r0
 80049ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fe fcb4 	bl	800335c <HAL_GetTick>
 80049f4:	0002      	movs	r2, r0
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e086      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a02:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	049b      	lsls	r3, r3, #18
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a0e:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	220f      	movs	r2, #15
 8004a14:	4393      	bics	r3, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a22:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <HAL_RCC_OscConfig+0x690>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	431a      	orrs	r2, r3
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	0449      	lsls	r1, r1, #17
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4a:	f7fe fc87 	bl	800335c <HAL_GetTick>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe fc82 	bl	800335c <HAL_GetTick>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e054      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	049b      	lsls	r3, r3, #18
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x644>
 8004a72:	e04c      	b.n	8004b0e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <HAL_RCC_OscConfig+0x67c>)
 8004a7a:	4908      	ldr	r1, [pc, #32]	; (8004a9c <HAL_RCC_OscConfig+0x68c>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fc6c 	bl	800335c <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a88:	e015      	b.n	8004ab6 <HAL_RCC_OscConfig+0x6a6>
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	00001388 	.word	0x00001388
 8004a94:	efffffff 	.word	0xefffffff
 8004a98:	fffeffff 	.word	0xfffeffff
 8004a9c:	feffffff 	.word	0xfeffffff
 8004aa0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fe fc5a 	bl	800335c <HAL_GetTick>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e02c      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <HAL_RCC_OscConfig+0x708>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	049b      	lsls	r3, r3, #18
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x694>
 8004ac2:	e024      	b.n	8004b0e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e01f      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_RCC_OscConfig+0x708>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_RCC_OscConfig+0x708>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	23c0      	movs	r3, #192	; 0xc0
 8004ae0:	025b      	lsls	r3, r3, #9
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d10e      	bne.n	8004b0a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	220f      	movs	r2, #15
 8004af0:	401a      	ands	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	23f0      	movs	r3, #240	; 0xf0
 8004afe:	039b      	lsls	r3, r3, #14
 8004b00:	401a      	ands	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b008      	add	sp, #32
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0bf      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b61      	ldr	r3, [pc, #388]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	4013      	ands	r3, r2
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d911      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b5e      	ldr	r3, [pc, #376]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	4393      	bics	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	4b5b      	ldr	r3, [pc, #364]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0a6      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2204      	movs	r2, #4
 8004b72:	4013      	ands	r3, r2
 8004b74:	d006      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b76:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004b7c:	21e0      	movs	r1, #224	; 0xe0
 8004b7e:	00c9      	lsls	r1, r1, #3
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b4d      	ldr	r3, [pc, #308]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	22f0      	movs	r2, #240	; 0xf0
 8004b8a:	4393      	bics	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	4b4a      	ldr	r3, [pc, #296]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d04c      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b44      	ldr	r3, [pc, #272]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	029b      	lsls	r3, r3, #10
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d120      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07a      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	049b      	lsls	r3, r3, #18
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d114      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06e      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004bda:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	025b      	lsls	r3, r3, #9
 8004be2:	4013      	ands	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e062      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e05b      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf8:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	4393      	bics	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fe fba6 	bl	800335c <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c14:	e009      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c16:	f7fe fba1 	bl	800335c <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <HAL_RCC_ClockConfig+0x1a4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e042      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	220c      	movs	r2, #12
 8004c30:	401a      	ands	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1ec      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d211      	bcs.n	8004c6e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4393      	bics	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5c:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <HAL_RCC_ClockConfig+0x19c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e020      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2204      	movs	r2, #4
 8004c74:	4013      	ands	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <HAL_RCC_ClockConfig+0x1a8>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	0019      	movs	r1, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c8c:	f000 f820 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c90:	0001      	movs	r1, r0
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1a0>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	220f      	movs	r2, #15
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_RCC_ClockConfig+0x1ac>)
 8004c9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ca0:	000a      	movs	r2, r1
 8004ca2:	40da      	lsrs	r2, r3
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <HAL_RCC_ClockConfig+0x1b0>)
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7fe fb11 	bl	80032d0 <HAL_InitTick>
  
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b004      	add	sp, #16
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40022000 	.word	0x40022000
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	00001388 	.word	0x00001388
 8004cc4:	fffff8ff 	.word	0xfffff8ff
 8004cc8:	08005fc8 	.word	0x08005fc8
 8004ccc:	20000090 	.word	0x20000090

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b08f      	sub	sp, #60	; 0x3c
 8004cd4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004cd6:	2314      	movs	r3, #20
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	4a38      	ldr	r2, [pc, #224]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xec>)
 8004cdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cde:	c313      	stmia	r3!, {r0, r1, r4}
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	4a36      	ldr	r2, [pc, #216]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004ce8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cea:	c313      	stmia	r3!, {r0, r1, r4}
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b0c      	cmp	r3, #12
 8004d12:	d047      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0xd4>
 8004d14:	d849      	bhi.n	8004daa <HAL_RCC_GetSysClockFreq+0xda>
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x50>
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x56>
 8004d1e:	e044      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d20:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d24:	e044      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	0c9b      	lsrs	r3, r3, #18
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2214      	movs	r2, #20
 8004d30:	18ba      	adds	r2, r7, r2
 8004d32:	5cd3      	ldrb	r3, [r2, r3]
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d36:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	220f      	movs	r2, #15
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	1d3a      	adds	r2, r7, #4
 8004d40:	5cd3      	ldrb	r3, [r2, r3]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d46:	23c0      	movs	r3, #192	; 0xc0
 8004d48:	025b      	lsls	r3, r3, #9
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	025b      	lsls	r3, r3, #9
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d109      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	481c      	ldr	r0, [pc, #112]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d58:	f7fb f9d4 	bl	8000104 <__udivsi3>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	001a      	movs	r2, r3
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	4353      	muls	r3, r2
 8004d64:	637b      	str	r3, [r7, #52]	; 0x34
 8004d66:	e01a      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6a:	23c0      	movs	r3, #192	; 0xc0
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	401a      	ands	r2, r3
 8004d70:	23c0      	movs	r3, #192	; 0xc0
 8004d72:	025b      	lsls	r3, r3, #9
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d109      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7a:	4814      	ldr	r0, [pc, #80]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d7c:	f7fb f9c2 	bl	8000104 <__udivsi3>
 8004d80:	0003      	movs	r3, r0
 8004d82:	001a      	movs	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	4353      	muls	r3, r2
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8e:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d90:	f7fb f9b8 	bl	8000104 <__udivsi3>
 8004d94:	0003      	movs	r3, r0
 8004d96:	001a      	movs	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	4353      	muls	r3, r2
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004db2:	0018      	movs	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b00f      	add	sp, #60	; 0x3c
 8004db8:	bd90      	pop	{r4, r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	08005ea8 	.word	0x08005ea8
 8004dc0:	08005eb8 	.word	0x08005eb8
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	007a1200 	.word	0x007a1200
 8004dcc:	02dc6c00 	.word	0x02dc6c00

08004dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	20000090 	.word	0x20000090

08004de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004de8:	f7ff fff2 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 8004dec:	0001      	movs	r1, r0
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	2207      	movs	r2, #7
 8004df6:	4013      	ands	r3, r2
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	40d9      	lsrs	r1, r3
 8004dfe:	000b      	movs	r3, r1
}    
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	08005fd8 	.word	0x08005fd8

08004e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	025b      	lsls	r3, r3, #9
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004e2c:	e08e      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2017      	movs	r0, #23
 8004e30:	183b      	adds	r3, r7, r0
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e36:	4b6e      	ldr	r3, [pc, #440]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	055b      	lsls	r3, r3, #21
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d110      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e42:	4b6b      	ldr	r3, [pc, #428]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	0549      	lsls	r1, r1, #21
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
 8004e50:	4b67      	ldr	r3, [pc, #412]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	055b      	lsls	r3, r3, #21
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5e:	183b      	adds	r3, r7, r0
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b63      	ldr	r3, [pc, #396]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d11a      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e70:	4b60      	ldr	r3, [pc, #384]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b5f      	ldr	r3, [pc, #380]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	0049      	lsls	r1, r1, #1
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e7e:	f7fe fa6d 	bl	800335c <HAL_GetTick>
 8004e82:	0003      	movs	r3, r0
 8004e84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e88:	f7fe fa68 	bl	800335c <HAL_GetTick>
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e0a6      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ea6:	4b52      	ldr	r3, [pc, #328]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	23c0      	movs	r3, #192	; 0xc0
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d034      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	23c0      	movs	r3, #192	; 0xc0
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d02c      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec8:	4b49      	ldr	r3, [pc, #292]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4a4a      	ldr	r2, [pc, #296]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ed2:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ed4:	6a1a      	ldr	r2, [r3, #32]
 8004ed6:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	0249      	lsls	r1, r1, #9
 8004edc:	430a      	orrs	r2, r1
 8004ede:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee0:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ee6:	4945      	ldr	r1, [pc, #276]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eec:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fe fa2f 	bl	800335c <HAL_GetTick>
 8004efe:	0003      	movs	r3, r0
 8004f00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f04:	f7fe fa2a 	bl	800335c <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a3c      	ldr	r2, [pc, #240]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e067      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f18:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f22:	4b33      	ldr	r3, [pc, #204]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	4a34      	ldr	r2, [pc, #208]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b2f      	ldr	r3, [pc, #188]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f32:	430a      	orrs	r2, r1
 8004f34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f36:	2317      	movs	r3, #23
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f46:	492f      	ldr	r1, [pc, #188]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	4393      	bics	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f66:	430a      	orrs	r2, r1
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	4013      	ands	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f74:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f84:	430a      	orrs	r2, r1
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	02db      	lsls	r3, r3, #11
 8004f90:	4013      	ands	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f94:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2220      	movs	r2, #32
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	4393      	bics	r3, r2
 8004fba:	0019      	movs	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	4393      	bics	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b006      	add	sp, #24
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40007000 	.word	0x40007000
 8004ff8:	fffffcff 	.word	0xfffffcff
 8004ffc:	fffeffff 	.word	0xfffeffff
 8005000:	00001388 	.word	0x00001388
 8005004:	efffffff 	.word	0xefffffff
 8005008:	fffcffff 	.word	0xfffcffff
 800500c:	fff3ffff 	.word	0xfff3ffff

08005010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e044      	b.n	80050ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2274      	movs	r2, #116	; 0x74
 800502e:	2100      	movs	r1, #0
 8005030:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0018      	movs	r0, r3
 8005036:	f7fe f8a5 	bl	8003184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2101      	movs	r1, #1
 800504c:	438a      	bics	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0018      	movs	r0, r3
 8005054:	f000 f830 	bl	80050b8 <UART_SetConfig>
 8005058:	0003      	movs	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e024      	b.n	80050ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	0018      	movs	r0, r3
 800506e:	f000 fa0b 	bl	8005488 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	490d      	ldr	r1, [pc, #52]	; (80050b4 <HAL_UART_Init+0xa4>)
 800507e:	400a      	ands	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	212a      	movs	r1, #42	; 0x2a
 800508e:	438a      	bics	r2, r1
 8005090:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2101      	movs	r1, #1
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 faa3 	bl	80055f0 <UART_CheckIdleState>
 80050aa:	0003      	movs	r3, r0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	ffffb7ff 	.word	0xffffb7ff

080050b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c0:	231e      	movs	r3, #30
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4abe      	ldr	r2, [pc, #760]	; (80053e0 <UART_SetConfig+0x328>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	0019      	movs	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4ab9      	ldr	r2, [pc, #740]	; (80053e4 <UART_SetConfig+0x32c>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4ab0      	ldr	r2, [pc, #704]	; (80053e8 <UART_SetConfig+0x330>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4aac      	ldr	r2, [pc, #688]	; (80053ec <UART_SetConfig+0x334>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d127      	bne.n	800518e <UART_SetConfig+0xd6>
 800513e:	4bac      	ldr	r3, [pc, #688]	; (80053f0 <UART_SetConfig+0x338>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	2203      	movs	r2, #3
 8005144:	4013      	ands	r3, r2
 8005146:	2b03      	cmp	r3, #3
 8005148:	d00d      	beq.n	8005166 <UART_SetConfig+0xae>
 800514a:	d81b      	bhi.n	8005184 <UART_SetConfig+0xcc>
 800514c:	2b02      	cmp	r3, #2
 800514e:	d014      	beq.n	800517a <UART_SetConfig+0xc2>
 8005150:	d818      	bhi.n	8005184 <UART_SetConfig+0xcc>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <UART_SetConfig+0xa4>
 8005156:	2b01      	cmp	r3, #1
 8005158:	d00a      	beq.n	8005170 <UART_SetConfig+0xb8>
 800515a:	e013      	b.n	8005184 <UART_SetConfig+0xcc>
 800515c:	231f      	movs	r3, #31
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e0bd      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005166:	231f      	movs	r3, #31
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2202      	movs	r2, #2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e0b8      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005170:	231f      	movs	r3, #31
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2204      	movs	r2, #4
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e0b3      	b.n	80052e2 <UART_SetConfig+0x22a>
 800517a:	231f      	movs	r3, #31
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	2208      	movs	r2, #8
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e0ae      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005184:	231f      	movs	r3, #31
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	2210      	movs	r2, #16
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e0a9      	b.n	80052e2 <UART_SetConfig+0x22a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a98      	ldr	r2, [pc, #608]	; (80053f4 <UART_SetConfig+0x33c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d134      	bne.n	8005202 <UART_SetConfig+0x14a>
 8005198:	4b95      	ldr	r3, [pc, #596]	; (80053f0 <UART_SetConfig+0x338>)
 800519a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519c:	23c0      	movs	r3, #192	; 0xc0
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	4013      	ands	r3, r2
 80051a2:	22c0      	movs	r2, #192	; 0xc0
 80051a4:	0292      	lsls	r2, r2, #10
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d017      	beq.n	80051da <UART_SetConfig+0x122>
 80051aa:	22c0      	movs	r2, #192	; 0xc0
 80051ac:	0292      	lsls	r2, r2, #10
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d822      	bhi.n	80051f8 <UART_SetConfig+0x140>
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	0292      	lsls	r2, r2, #10
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d019      	beq.n	80051ee <UART_SetConfig+0x136>
 80051ba:	2280      	movs	r2, #128	; 0x80
 80051bc:	0292      	lsls	r2, r2, #10
 80051be:	4293      	cmp	r3, r2
 80051c0:	d81a      	bhi.n	80051f8 <UART_SetConfig+0x140>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <UART_SetConfig+0x118>
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	0252      	lsls	r2, r2, #9
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00a      	beq.n	80051e4 <UART_SetConfig+0x12c>
 80051ce:	e013      	b.n	80051f8 <UART_SetConfig+0x140>
 80051d0:	231f      	movs	r3, #31
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e083      	b.n	80052e2 <UART_SetConfig+0x22a>
 80051da:	231f      	movs	r3, #31
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e07e      	b.n	80052e2 <UART_SetConfig+0x22a>
 80051e4:	231f      	movs	r3, #31
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	2204      	movs	r2, #4
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e079      	b.n	80052e2 <UART_SetConfig+0x22a>
 80051ee:	231f      	movs	r3, #31
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	2208      	movs	r2, #8
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e074      	b.n	80052e2 <UART_SetConfig+0x22a>
 80051f8:	231f      	movs	r3, #31
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	2210      	movs	r2, #16
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e06f      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <UART_SetConfig+0x340>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d134      	bne.n	8005276 <UART_SetConfig+0x1be>
 800520c:	4b78      	ldr	r3, [pc, #480]	; (80053f0 <UART_SetConfig+0x338>)
 800520e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005210:	23c0      	movs	r3, #192	; 0xc0
 8005212:	031b      	lsls	r3, r3, #12
 8005214:	4013      	ands	r3, r2
 8005216:	22c0      	movs	r2, #192	; 0xc0
 8005218:	0312      	lsls	r2, r2, #12
 800521a:	4293      	cmp	r3, r2
 800521c:	d017      	beq.n	800524e <UART_SetConfig+0x196>
 800521e:	22c0      	movs	r2, #192	; 0xc0
 8005220:	0312      	lsls	r2, r2, #12
 8005222:	4293      	cmp	r3, r2
 8005224:	d822      	bhi.n	800526c <UART_SetConfig+0x1b4>
 8005226:	2280      	movs	r2, #128	; 0x80
 8005228:	0312      	lsls	r2, r2, #12
 800522a:	4293      	cmp	r3, r2
 800522c:	d019      	beq.n	8005262 <UART_SetConfig+0x1aa>
 800522e:	2280      	movs	r2, #128	; 0x80
 8005230:	0312      	lsls	r2, r2, #12
 8005232:	4293      	cmp	r3, r2
 8005234:	d81a      	bhi.n	800526c <UART_SetConfig+0x1b4>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <UART_SetConfig+0x18c>
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	02d2      	lsls	r2, r2, #11
 800523e:	4293      	cmp	r3, r2
 8005240:	d00a      	beq.n	8005258 <UART_SetConfig+0x1a0>
 8005242:	e013      	b.n	800526c <UART_SetConfig+0x1b4>
 8005244:	231f      	movs	r3, #31
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e049      	b.n	80052e2 <UART_SetConfig+0x22a>
 800524e:	231f      	movs	r3, #31
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	2202      	movs	r2, #2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e044      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005258:	231f      	movs	r3, #31
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	2204      	movs	r2, #4
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e03f      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005262:	231f      	movs	r3, #31
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	2208      	movs	r2, #8
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e03a      	b.n	80052e2 <UART_SetConfig+0x22a>
 800526c:	231f      	movs	r3, #31
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	2210      	movs	r2, #16
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e035      	b.n	80052e2 <UART_SetConfig+0x22a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a60      	ldr	r2, [pc, #384]	; (80053fc <UART_SetConfig+0x344>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d104      	bne.n	800528a <UART_SetConfig+0x1d2>
 8005280:	231f      	movs	r3, #31
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e02b      	b.n	80052e2 <UART_SetConfig+0x22a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a5c      	ldr	r2, [pc, #368]	; (8005400 <UART_SetConfig+0x348>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d104      	bne.n	800529e <UART_SetConfig+0x1e6>
 8005294:	231f      	movs	r3, #31
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e021      	b.n	80052e2 <UART_SetConfig+0x22a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a58      	ldr	r2, [pc, #352]	; (8005404 <UART_SetConfig+0x34c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d104      	bne.n	80052b2 <UART_SetConfig+0x1fa>
 80052a8:	231f      	movs	r3, #31
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e017      	b.n	80052e2 <UART_SetConfig+0x22a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a54      	ldr	r2, [pc, #336]	; (8005408 <UART_SetConfig+0x350>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d104      	bne.n	80052c6 <UART_SetConfig+0x20e>
 80052bc:	231f      	movs	r3, #31
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e00d      	b.n	80052e2 <UART_SetConfig+0x22a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a50      	ldr	r2, [pc, #320]	; (800540c <UART_SetConfig+0x354>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d104      	bne.n	80052da <UART_SetConfig+0x222>
 80052d0:	231f      	movs	r3, #31
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e003      	b.n	80052e2 <UART_SetConfig+0x22a>
 80052da:	231f      	movs	r3, #31
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	2210      	movs	r2, #16
 80052e0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69da      	ldr	r2, [r3, #28]
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d15d      	bne.n	80053aa <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80052ee:	231f      	movs	r3, #31
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d015      	beq.n	8005324 <UART_SetConfig+0x26c>
 80052f8:	dc18      	bgt.n	800532c <UART_SetConfig+0x274>
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d00d      	beq.n	800531a <UART_SetConfig+0x262>
 80052fe:	dc15      	bgt.n	800532c <UART_SetConfig+0x274>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <UART_SetConfig+0x252>
 8005304:	2b02      	cmp	r3, #2
 8005306:	d005      	beq.n	8005314 <UART_SetConfig+0x25c>
 8005308:	e010      	b.n	800532c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7ff fd6b 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 800530e:	0003      	movs	r3, r0
 8005310:	61bb      	str	r3, [r7, #24]
        break;
 8005312:	e012      	b.n	800533a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005314:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <UART_SetConfig+0x358>)
 8005316:	61bb      	str	r3, [r7, #24]
        break;
 8005318:	e00f      	b.n	800533a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531a:	f7ff fcd9 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 800531e:	0003      	movs	r3, r0
 8005320:	61bb      	str	r3, [r7, #24]
        break;
 8005322:	e00a      	b.n	800533a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	61bb      	str	r3, [r7, #24]
        break;
 800532a:	e006      	b.n	800533a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005330:	231e      	movs	r3, #30
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
        break;
 8005338:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d100      	bne.n	8005342 <UART_SetConfig+0x28a>
 8005340:	e095      	b.n	800546e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	005a      	lsls	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	18d2      	adds	r2, r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	0019      	movs	r1, r3
 8005354:	0010      	movs	r0, r2
 8005356:	f7fa fed5 	bl	8000104 <__udivsi3>
 800535a:	0003      	movs	r3, r0
 800535c:	b29b      	uxth	r3, r3
 800535e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d91c      	bls.n	80053a0 <UART_SetConfig+0x2e8>
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	429a      	cmp	r2, r3
 800536e:	d217      	bcs.n	80053a0 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	b29a      	uxth	r2, r3
 8005374:	200e      	movs	r0, #14
 8005376:	183b      	adds	r3, r7, r0
 8005378:	210f      	movs	r1, #15
 800537a:	438a      	bics	r2, r1
 800537c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	b29b      	uxth	r3, r3
 8005384:	2207      	movs	r2, #7
 8005386:	4013      	ands	r3, r2
 8005388:	b299      	uxth	r1, r3
 800538a:	183b      	adds	r3, r7, r0
 800538c:	183a      	adds	r2, r7, r0
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	183a      	adds	r2, r7, r0
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e066      	b.n	800546e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80053a0:	231e      	movs	r3, #30
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e061      	b.n	800546e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053aa:	231f      	movs	r3, #31
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d02f      	beq.n	8005414 <UART_SetConfig+0x35c>
 80053b4:	dc32      	bgt.n	800541c <UART_SetConfig+0x364>
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d00d      	beq.n	80053d6 <UART_SetConfig+0x31e>
 80053ba:	dc2f      	bgt.n	800541c <UART_SetConfig+0x364>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <UART_SetConfig+0x30e>
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d005      	beq.n	80053d0 <UART_SetConfig+0x318>
 80053c4:	e02a      	b.n	800541c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c6:	f7ff fd0d 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 80053ca:	0003      	movs	r3, r0
 80053cc:	61bb      	str	r3, [r7, #24]
        break;
 80053ce:	e02c      	b.n	800542a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <UART_SetConfig+0x358>)
 80053d2:	61bb      	str	r3, [r7, #24]
        break;
 80053d4:	e029      	b.n	800542a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7ff fc7b 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 80053da:	0003      	movs	r3, r0
 80053dc:	61bb      	str	r3, [r7, #24]
        break;
 80053de:	e024      	b.n	800542a <UART_SetConfig+0x372>
 80053e0:	efff69f3 	.word	0xefff69f3
 80053e4:	ffffcfff 	.word	0xffffcfff
 80053e8:	fffff4ff 	.word	0xfffff4ff
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40004800 	.word	0x40004800
 80053fc:	40004c00 	.word	0x40004c00
 8005400:	40005000 	.word	0x40005000
 8005404:	40011400 	.word	0x40011400
 8005408:	40011800 	.word	0x40011800
 800540c:	40011c00 	.word	0x40011c00
 8005410:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	61bb      	str	r3, [r7, #24]
        break;
 800541a:	e006      	b.n	800542a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005420:	231e      	movs	r3, #30
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
        break;
 8005428:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01e      	beq.n	800546e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	085a      	lsrs	r2, r3, #1
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	18d2      	adds	r2, r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	0019      	movs	r1, r3
 8005440:	0010      	movs	r0, r2
 8005442:	f7fa fe5f 	bl	8000104 <__udivsi3>
 8005446:	0003      	movs	r3, r0
 8005448:	b29b      	uxth	r3, r3
 800544a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b0f      	cmp	r3, #15
 8005450:	d909      	bls.n	8005466 <UART_SetConfig+0x3ae>
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	025b      	lsls	r3, r3, #9
 8005458:	429a      	cmp	r2, r3
 800545a:	d204      	bcs.n	8005466 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	60da      	str	r2, [r3, #12]
 8005464:	e003      	b.n	800546e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005466:	231e      	movs	r3, #30
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800547a:	231e      	movs	r3, #30
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	781b      	ldrb	r3, [r3, #0]
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b008      	add	sp, #32
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d00b      	beq.n	80054b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a4a      	ldr	r2, [pc, #296]	; (80055cc <UART_AdvFeatureConfig+0x144>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	0019      	movs	r1, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2202      	movs	r2, #2
 80054b8:	4013      	ands	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4a43      	ldr	r2, [pc, #268]	; (80055d0 <UART_AdvFeatureConfig+0x148>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2204      	movs	r2, #4
 80054da:	4013      	ands	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a3b      	ldr	r2, [pc, #236]	; (80055d4 <UART_AdvFeatureConfig+0x14c>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	0019      	movs	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2208      	movs	r2, #8
 80054fc:	4013      	ands	r3, r2
 80054fe:	d00b      	beq.n	8005518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <UART_AdvFeatureConfig+0x150>)
 8005508:	4013      	ands	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2210      	movs	r2, #16
 800551e:	4013      	ands	r3, r2
 8005520:	d00b      	beq.n	800553a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a2c      	ldr	r2, [pc, #176]	; (80055dc <UART_AdvFeatureConfig+0x154>)
 800552a:	4013      	ands	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2220      	movs	r2, #32
 8005540:	4013      	ands	r3, r2
 8005542:	d00b      	beq.n	800555c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <UART_AdvFeatureConfig+0x158>)
 800554c:	4013      	ands	r3, r2
 800554e:	0019      	movs	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2240      	movs	r2, #64	; 0x40
 8005562:	4013      	ands	r3, r2
 8005564:	d01d      	beq.n	80055a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <UART_AdvFeatureConfig+0x15c>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	035b      	lsls	r3, r3, #13
 8005586:	429a      	cmp	r2, r3
 8005588:	d10b      	bne.n	80055a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <UART_AdvFeatureConfig+0x160>)
 8005592:	4013      	ands	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	4013      	ands	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <UART_AdvFeatureConfig+0x164>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	fffdffff 	.word	0xfffdffff
 80055d0:	fffeffff 	.word	0xfffeffff
 80055d4:	fffbffff 	.word	0xfffbffff
 80055d8:	ffff7fff 	.word	0xffff7fff
 80055dc:	ffffefff 	.word	0xffffefff
 80055e0:	ffffdfff 	.word	0xffffdfff
 80055e4:	ffefffff 	.word	0xffefffff
 80055e8:	ff9fffff 	.word	0xff9fffff
 80055ec:	fff7ffff 	.word	0xfff7ffff

080055f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	2100      	movs	r1, #0
 80055fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005600:	f7fd feac 	bl	800335c <HAL_GetTick>
 8005604:	0003      	movs	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2208      	movs	r2, #8
 8005610:	4013      	ands	r3, r2
 8005612:	2b08      	cmp	r3, #8
 8005614:	d10c      	bne.n	8005630 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	0391      	lsls	r1, r2, #14
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4a17      	ldr	r2, [pc, #92]	; (800567c <UART_CheckIdleState+0x8c>)
 8005620:	9200      	str	r2, [sp, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	f000 f82c 	bl	8005680 <UART_WaitOnFlagUntilTimeout>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d001      	beq.n	8005630 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e021      	b.n	8005674 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2204      	movs	r2, #4
 8005638:	4013      	ands	r3, r2
 800563a:	2b04      	cmp	r3, #4
 800563c:	d10c      	bne.n	8005658 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	03d1      	lsls	r1, r2, #15
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4a0d      	ldr	r2, [pc, #52]	; (800567c <UART_CheckIdleState+0x8c>)
 8005648:	9200      	str	r2, [sp, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	f000 f818 	bl	8005680 <UART_WaitOnFlagUntilTimeout>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d001      	beq.n	8005658 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e00d      	b.n	8005674 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2274      	movs	r2, #116	; 0x74
 800566e:	2100      	movs	r1, #0
 8005670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b004      	add	sp, #16
 800567a:	bd80      	pop	{r7, pc}
 800567c:	01ffffff 	.word	0x01ffffff

08005680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b094      	sub	sp, #80	; 0x50
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005690:	e0a3      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005694:	3301      	adds	r3, #1
 8005696:	d100      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005698:	e09f      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fd fe5f 	bl	800335c <HAL_GetTick>
 800569e:	0002      	movs	r2, r0
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d13d      	bne.n	800572c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b0:	f3ef 8310 	mrs	r3, PRIMASK
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ba:	2301      	movs	r3, #1
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	f383 8810 	msr	PRIMASK, r3
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	494c      	ldr	r1, [pc, #304]	; (8005804 <UART_WaitOnFlagUntilTimeout+0x184>)
 80056d2:	400a      	ands	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e2:	f3ef 8310 	mrs	r3, PRIMASK
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
 80056ec:	2301      	movs	r3, #1
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	f383 8810 	msr	PRIMASK, r3
}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2101      	movs	r1, #1
 8005704:	438a      	bics	r2, r1
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	f383 8810 	msr	PRIMASK, r3
}
 8005712:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2274      	movs	r2, #116	; 0x74
 8005724:	2100      	movs	r1, #0
 8005726:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e067      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2204      	movs	r2, #4
 8005734:	4013      	ands	r3, r2
 8005736:	d050      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	401a      	ands	r2, r3
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	429a      	cmp	r2, r3
 800574a:	d146      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2280      	movs	r2, #128	; 0x80
 8005752:	0112      	lsls	r2, r2, #4
 8005754:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005756:	f3ef 8310 	mrs	r3, PRIMASK
 800575a:	613b      	str	r3, [r7, #16]
  return(result);
 800575c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f383 8810 	msr	PRIMASK, r3
}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4923      	ldr	r1, [pc, #140]	; (8005804 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005778:	400a      	ands	r2, r1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005788:	f3ef 8310 	mrs	r3, PRIMASK
 800578c:	61fb      	str	r3, [r7, #28]
  return(result);
 800578e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005790:	64bb      	str	r3, [r7, #72]	; 0x48
 8005792:	2301      	movs	r3, #1
 8005794:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2101      	movs	r1, #1
 80057aa:	438a      	bics	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	2120      	movs	r1, #32
 80057cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2274      	movs	r2, #116	; 0x74
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e010      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	425a      	negs	r2, r3
 80057ea:	4153      	adcs	r3, r2
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	001a      	movs	r2, r3
 80057f0:	1dfb      	adds	r3, r7, #7
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d100      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0x17a>
 80057f8:	e74b      	b.n	8005692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b014      	add	sp, #80	; 0x50
 8005802:	bd80      	pop	{r7, pc}
 8005804:	fffffe5f 	.word	0xfffffe5f

08005808 <__errno>:
 8005808:	4b01      	ldr	r3, [pc, #4]	; (8005810 <__errno+0x8>)
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	4770      	bx	lr
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	2000009c 	.word	0x2000009c

08005814 <__libc_init_array>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	2600      	movs	r6, #0
 8005818:	4d0c      	ldr	r5, [pc, #48]	; (800584c <__libc_init_array+0x38>)
 800581a:	4c0d      	ldr	r4, [pc, #52]	; (8005850 <__libc_init_array+0x3c>)
 800581c:	1b64      	subs	r4, r4, r5
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	42a6      	cmp	r6, r4
 8005822:	d109      	bne.n	8005838 <__libc_init_array+0x24>
 8005824:	2600      	movs	r6, #0
 8005826:	f000 fb31 	bl	8005e8c <_init>
 800582a:	4d0a      	ldr	r5, [pc, #40]	; (8005854 <__libc_init_array+0x40>)
 800582c:	4c0a      	ldr	r4, [pc, #40]	; (8005858 <__libc_init_array+0x44>)
 800582e:	1b64      	subs	r4, r4, r5
 8005830:	10a4      	asrs	r4, r4, #2
 8005832:	42a6      	cmp	r6, r4
 8005834:	d105      	bne.n	8005842 <__libc_init_array+0x2e>
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	00b3      	lsls	r3, r6, #2
 800583a:	58eb      	ldr	r3, [r5, r3]
 800583c:	4798      	blx	r3
 800583e:	3601      	adds	r6, #1
 8005840:	e7ee      	b.n	8005820 <__libc_init_array+0xc>
 8005842:	00b3      	lsls	r3, r6, #2
 8005844:	58eb      	ldr	r3, [r5, r3]
 8005846:	4798      	blx	r3
 8005848:	3601      	adds	r6, #1
 800584a:	e7f2      	b.n	8005832 <__libc_init_array+0x1e>
 800584c:	08006050 	.word	0x08006050
 8005850:	08006050 	.word	0x08006050
 8005854:	08006050 	.word	0x08006050
 8005858:	08006054 	.word	0x08006054

0800585c <memset>:
 800585c:	0003      	movs	r3, r0
 800585e:	1882      	adds	r2, r0, r2
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	7019      	strb	r1, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <atan>:
 800586c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586e:	4b98      	ldr	r3, [pc, #608]	; (8005ad0 <atan+0x264>)
 8005870:	b085      	sub	sp, #20
 8005872:	004e      	lsls	r6, r1, #1
 8005874:	0004      	movs	r4, r0
 8005876:	000d      	movs	r5, r1
 8005878:	9103      	str	r1, [sp, #12]
 800587a:	0876      	lsrs	r6, r6, #1
 800587c:	429e      	cmp	r6, r3
 800587e:	dd18      	ble.n	80058b2 <atan+0x46>
 8005880:	4b94      	ldr	r3, [pc, #592]	; (8005ad4 <atan+0x268>)
 8005882:	429e      	cmp	r6, r3
 8005884:	dc02      	bgt.n	800588c <atan+0x20>
 8005886:	d10a      	bne.n	800589e <atan+0x32>
 8005888:	2800      	cmp	r0, #0
 800588a:	d008      	beq.n	800589e <atan+0x32>
 800588c:	0022      	movs	r2, r4
 800588e:	002b      	movs	r3, r5
 8005890:	0020      	movs	r0, r4
 8005892:	0029      	movs	r1, r5
 8005894:	f7fb f804 	bl	80008a0 <__aeabi_dadd>
 8005898:	0004      	movs	r4, r0
 800589a:	000d      	movs	r5, r1
 800589c:	e005      	b.n	80058aa <atan+0x3e>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4c8d      	ldr	r4, [pc, #564]	; (8005ad8 <atan+0x26c>)
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dd00      	ble.n	80058a8 <atan+0x3c>
 80058a6:	e110      	b.n	8005aca <atan+0x25e>
 80058a8:	4d8c      	ldr	r5, [pc, #560]	; (8005adc <atan+0x270>)
 80058aa:	0020      	movs	r0, r4
 80058ac:	0029      	movs	r1, r5
 80058ae:	b005      	add	sp, #20
 80058b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b2:	4b8b      	ldr	r3, [pc, #556]	; (8005ae0 <atan+0x274>)
 80058b4:	429e      	cmp	r6, r3
 80058b6:	dc0f      	bgt.n	80058d8 <atan+0x6c>
 80058b8:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <atan+0x278>)
 80058ba:	429e      	cmp	r6, r3
 80058bc:	dc09      	bgt.n	80058d2 <atan+0x66>
 80058be:	4a8a      	ldr	r2, [pc, #552]	; (8005ae8 <atan+0x27c>)
 80058c0:	4b8a      	ldr	r3, [pc, #552]	; (8005aec <atan+0x280>)
 80058c2:	f7fa ffed 	bl	80008a0 <__aeabi_dadd>
 80058c6:	2200      	movs	r2, #0
 80058c8:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <atan+0x284>)
 80058ca:	f7fa fcd1 	bl	8000270 <__aeabi_dcmpgt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d1eb      	bne.n	80058aa <atan+0x3e>
 80058d2:	2301      	movs	r3, #1
 80058d4:	425b      	negs	r3, r3
 80058d6:	e025      	b.n	8005924 <atan+0xb8>
 80058d8:	f000 f948 	bl	8005b6c <fabs>
 80058dc:	4b85      	ldr	r3, [pc, #532]	; (8005af4 <atan+0x288>)
 80058de:	0004      	movs	r4, r0
 80058e0:	000d      	movs	r5, r1
 80058e2:	429e      	cmp	r6, r3
 80058e4:	dd00      	ble.n	80058e8 <atan+0x7c>
 80058e6:	e0aa      	b.n	8005a3e <atan+0x1d2>
 80058e8:	4b83      	ldr	r3, [pc, #524]	; (8005af8 <atan+0x28c>)
 80058ea:	429e      	cmp	r6, r3
 80058ec:	dd00      	ble.n	80058f0 <atan+0x84>
 80058ee:	e090      	b.n	8005a12 <atan+0x1a6>
 80058f0:	0002      	movs	r2, r0
 80058f2:	000b      	movs	r3, r1
 80058f4:	f7fa ffd4 	bl	80008a0 <__aeabi_dadd>
 80058f8:	2200      	movs	r2, #0
 80058fa:	4b7d      	ldr	r3, [pc, #500]	; (8005af0 <atan+0x284>)
 80058fc:	f7fc f97a 	bl	8001bf4 <__aeabi_dsub>
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	0006      	movs	r6, r0
 8005904:	000f      	movs	r7, r1
 8005906:	2200      	movs	r2, #0
 8005908:	0020      	movs	r0, r4
 800590a:	0029      	movs	r1, r5
 800590c:	05db      	lsls	r3, r3, #23
 800590e:	f7fa ffc7 	bl	80008a0 <__aeabi_dadd>
 8005912:	000b      	movs	r3, r1
 8005914:	0002      	movs	r2, r0
 8005916:	0039      	movs	r1, r7
 8005918:	0030      	movs	r0, r6
 800591a:	f7fb fafd 	bl	8000f18 <__aeabi_ddiv>
 800591e:	2300      	movs	r3, #0
 8005920:	0004      	movs	r4, r0
 8005922:	000d      	movs	r5, r1
 8005924:	0022      	movs	r2, r4
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	0020      	movs	r0, r4
 800592a:	002b      	movs	r3, r5
 800592c:	0029      	movs	r1, r5
 800592e:	f7fb fef5 	bl	800171c <__aeabi_dmul>
 8005932:	0002      	movs	r2, r0
 8005934:	000b      	movs	r3, r1
 8005936:	9000      	str	r0, [sp, #0]
 8005938:	9101      	str	r1, [sp, #4]
 800593a:	f7fb feef 	bl	800171c <__aeabi_dmul>
 800593e:	0006      	movs	r6, r0
 8005940:	000f      	movs	r7, r1
 8005942:	4a6e      	ldr	r2, [pc, #440]	; (8005afc <atan+0x290>)
 8005944:	4b6e      	ldr	r3, [pc, #440]	; (8005b00 <atan+0x294>)
 8005946:	f7fb fee9 	bl	800171c <__aeabi_dmul>
 800594a:	4a6e      	ldr	r2, [pc, #440]	; (8005b04 <atan+0x298>)
 800594c:	4b6e      	ldr	r3, [pc, #440]	; (8005b08 <atan+0x29c>)
 800594e:	f7fa ffa7 	bl	80008a0 <__aeabi_dadd>
 8005952:	0032      	movs	r2, r6
 8005954:	003b      	movs	r3, r7
 8005956:	f7fb fee1 	bl	800171c <__aeabi_dmul>
 800595a:	4a6c      	ldr	r2, [pc, #432]	; (8005b0c <atan+0x2a0>)
 800595c:	4b6c      	ldr	r3, [pc, #432]	; (8005b10 <atan+0x2a4>)
 800595e:	f7fa ff9f 	bl	80008a0 <__aeabi_dadd>
 8005962:	0032      	movs	r2, r6
 8005964:	003b      	movs	r3, r7
 8005966:	f7fb fed9 	bl	800171c <__aeabi_dmul>
 800596a:	4a6a      	ldr	r2, [pc, #424]	; (8005b14 <atan+0x2a8>)
 800596c:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <atan+0x2ac>)
 800596e:	f7fa ff97 	bl	80008a0 <__aeabi_dadd>
 8005972:	0032      	movs	r2, r6
 8005974:	003b      	movs	r3, r7
 8005976:	f7fb fed1 	bl	800171c <__aeabi_dmul>
 800597a:	4a68      	ldr	r2, [pc, #416]	; (8005b1c <atan+0x2b0>)
 800597c:	4b68      	ldr	r3, [pc, #416]	; (8005b20 <atan+0x2b4>)
 800597e:	f7fa ff8f 	bl	80008a0 <__aeabi_dadd>
 8005982:	0032      	movs	r2, r6
 8005984:	003b      	movs	r3, r7
 8005986:	f7fb fec9 	bl	800171c <__aeabi_dmul>
 800598a:	4a66      	ldr	r2, [pc, #408]	; (8005b24 <atan+0x2b8>)
 800598c:	4b66      	ldr	r3, [pc, #408]	; (8005b28 <atan+0x2bc>)
 800598e:	f7fa ff87 	bl	80008a0 <__aeabi_dadd>
 8005992:	9a00      	ldr	r2, [sp, #0]
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	f7fb fec1 	bl	800171c <__aeabi_dmul>
 800599a:	4a64      	ldr	r2, [pc, #400]	; (8005b2c <atan+0x2c0>)
 800599c:	9000      	str	r0, [sp, #0]
 800599e:	9101      	str	r1, [sp, #4]
 80059a0:	4b63      	ldr	r3, [pc, #396]	; (8005b30 <atan+0x2c4>)
 80059a2:	0030      	movs	r0, r6
 80059a4:	0039      	movs	r1, r7
 80059a6:	f7fb feb9 	bl	800171c <__aeabi_dmul>
 80059aa:	4a62      	ldr	r2, [pc, #392]	; (8005b34 <atan+0x2c8>)
 80059ac:	4b62      	ldr	r3, [pc, #392]	; (8005b38 <atan+0x2cc>)
 80059ae:	f7fc f921 	bl	8001bf4 <__aeabi_dsub>
 80059b2:	0032      	movs	r2, r6
 80059b4:	003b      	movs	r3, r7
 80059b6:	f7fb feb1 	bl	800171c <__aeabi_dmul>
 80059ba:	4a60      	ldr	r2, [pc, #384]	; (8005b3c <atan+0x2d0>)
 80059bc:	4b60      	ldr	r3, [pc, #384]	; (8005b40 <atan+0x2d4>)
 80059be:	f7fc f919 	bl	8001bf4 <__aeabi_dsub>
 80059c2:	0032      	movs	r2, r6
 80059c4:	003b      	movs	r3, r7
 80059c6:	f7fb fea9 	bl	800171c <__aeabi_dmul>
 80059ca:	4a5e      	ldr	r2, [pc, #376]	; (8005b44 <atan+0x2d8>)
 80059cc:	4b5e      	ldr	r3, [pc, #376]	; (8005b48 <atan+0x2dc>)
 80059ce:	f7fc f911 	bl	8001bf4 <__aeabi_dsub>
 80059d2:	0032      	movs	r2, r6
 80059d4:	003b      	movs	r3, r7
 80059d6:	f7fb fea1 	bl	800171c <__aeabi_dmul>
 80059da:	4a5c      	ldr	r2, [pc, #368]	; (8005b4c <atan+0x2e0>)
 80059dc:	4b5c      	ldr	r3, [pc, #368]	; (8005b50 <atan+0x2e4>)
 80059de:	f7fc f909 	bl	8001bf4 <__aeabi_dsub>
 80059e2:	0032      	movs	r2, r6
 80059e4:	003b      	movs	r3, r7
 80059e6:	f7fb fe99 	bl	800171c <__aeabi_dmul>
 80059ea:	0002      	movs	r2, r0
 80059ec:	000b      	movs	r3, r1
 80059ee:	9800      	ldr	r0, [sp, #0]
 80059f0:	9901      	ldr	r1, [sp, #4]
 80059f2:	f7fa ff55 	bl	80008a0 <__aeabi_dadd>
 80059f6:	002b      	movs	r3, r5
 80059f8:	0022      	movs	r2, r4
 80059fa:	f7fb fe8f 	bl	800171c <__aeabi_dmul>
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	3301      	adds	r3, #1
 8005a02:	d143      	bne.n	8005a8c <atan+0x220>
 8005a04:	0002      	movs	r2, r0
 8005a06:	000b      	movs	r3, r1
 8005a08:	0020      	movs	r0, r4
 8005a0a:	0029      	movs	r1, r5
 8005a0c:	f7fc f8f2 	bl	8001bf4 <__aeabi_dsub>
 8005a10:	e742      	b.n	8005898 <atan+0x2c>
 8005a12:	2200      	movs	r2, #0
 8005a14:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <atan+0x284>)
 8005a16:	f7fc f8ed 	bl	8001bf4 <__aeabi_dsub>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	0006      	movs	r6, r0
 8005a1e:	000f      	movs	r7, r1
 8005a20:	0020      	movs	r0, r4
 8005a22:	0029      	movs	r1, r5
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <atan+0x284>)
 8005a26:	f7fa ff3b 	bl	80008a0 <__aeabi_dadd>
 8005a2a:	000b      	movs	r3, r1
 8005a2c:	0002      	movs	r2, r0
 8005a2e:	0039      	movs	r1, r7
 8005a30:	0030      	movs	r0, r6
 8005a32:	f7fb fa71 	bl	8000f18 <__aeabi_ddiv>
 8005a36:	2301      	movs	r3, #1
 8005a38:	0004      	movs	r4, r0
 8005a3a:	000d      	movs	r5, r1
 8005a3c:	e772      	b.n	8005924 <atan+0xb8>
 8005a3e:	4b45      	ldr	r3, [pc, #276]	; (8005b54 <atan+0x2e8>)
 8005a40:	429e      	cmp	r6, r3
 8005a42:	dc19      	bgt.n	8005a78 <atan+0x20c>
 8005a44:	2200      	movs	r2, #0
 8005a46:	4b44      	ldr	r3, [pc, #272]	; (8005b58 <atan+0x2ec>)
 8005a48:	f7fc f8d4 	bl	8001bf4 <__aeabi_dsub>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	0006      	movs	r6, r0
 8005a50:	000f      	movs	r7, r1
 8005a52:	0020      	movs	r0, r4
 8005a54:	0029      	movs	r1, r5
 8005a56:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <atan+0x2ec>)
 8005a58:	f7fb fe60 	bl	800171c <__aeabi_dmul>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <atan+0x284>)
 8005a60:	f7fa ff1e 	bl	80008a0 <__aeabi_dadd>
 8005a64:	000b      	movs	r3, r1
 8005a66:	0002      	movs	r2, r0
 8005a68:	0039      	movs	r1, r7
 8005a6a:	0030      	movs	r0, r6
 8005a6c:	f7fb fa54 	bl	8000f18 <__aeabi_ddiv>
 8005a70:	2302      	movs	r3, #2
 8005a72:	0004      	movs	r4, r0
 8005a74:	000d      	movs	r5, r1
 8005a76:	e755      	b.n	8005924 <atan+0xb8>
 8005a78:	000b      	movs	r3, r1
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	4937      	ldr	r1, [pc, #220]	; (8005b5c <atan+0x2f0>)
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7fb fa4a 	bl	8000f18 <__aeabi_ddiv>
 8005a84:	2303      	movs	r3, #3
 8005a86:	0004      	movs	r4, r0
 8005a88:	000d      	movs	r5, r1
 8005a8a:	e74b      	b.n	8005924 <atan+0xb8>
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	4f34      	ldr	r7, [pc, #208]	; (8005b60 <atan+0x2f4>)
 8005a90:	00de      	lsls	r6, r3, #3
 8005a92:	4b34      	ldr	r3, [pc, #208]	; (8005b64 <atan+0x2f8>)
 8005a94:	19bf      	adds	r7, r7, r6
 8005a96:	199e      	adds	r6, r3, r6
 8005a98:	6832      	ldr	r2, [r6, #0]
 8005a9a:	6873      	ldr	r3, [r6, #4]
 8005a9c:	f7fc f8aa 	bl	8001bf4 <__aeabi_dsub>
 8005aa0:	0022      	movs	r2, r4
 8005aa2:	002b      	movs	r3, r5
 8005aa4:	f7fc f8a6 	bl	8001bf4 <__aeabi_dsub>
 8005aa8:	000b      	movs	r3, r1
 8005aaa:	0002      	movs	r2, r0
 8005aac:	6838      	ldr	r0, [r7, #0]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	f7fc f8a0 	bl	8001bf4 <__aeabi_dsub>
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	0004      	movs	r4, r0
 8005ab8:	000d      	movs	r5, r1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	db00      	blt.n	8005ac0 <atan+0x254>
 8005abe:	e6f4      	b.n	80058aa <atan+0x3e>
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	0609      	lsls	r1, r1, #24
 8005ac4:	186b      	adds	r3, r5, r1
 8005ac6:	001d      	movs	r5, r3
 8005ac8:	e6ef      	b.n	80058aa <atan+0x3e>
 8005aca:	4d27      	ldr	r5, [pc, #156]	; (8005b68 <atan+0x2fc>)
 8005acc:	e6ed      	b.n	80058aa <atan+0x3e>
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	440fffff 	.word	0x440fffff
 8005ad4:	7ff00000 	.word	0x7ff00000
 8005ad8:	54442d18 	.word	0x54442d18
 8005adc:	bff921fb 	.word	0xbff921fb
 8005ae0:	3fdbffff 	.word	0x3fdbffff
 8005ae4:	3e1fffff 	.word	0x3e1fffff
 8005ae8:	8800759c 	.word	0x8800759c
 8005aec:	7e37e43c 	.word	0x7e37e43c
 8005af0:	3ff00000 	.word	0x3ff00000
 8005af4:	3ff2ffff 	.word	0x3ff2ffff
 8005af8:	3fe5ffff 	.word	0x3fe5ffff
 8005afc:	e322da11 	.word	0xe322da11
 8005b00:	3f90ad3a 	.word	0x3f90ad3a
 8005b04:	24760deb 	.word	0x24760deb
 8005b08:	3fa97b4b 	.word	0x3fa97b4b
 8005b0c:	a0d03d51 	.word	0xa0d03d51
 8005b10:	3fb10d66 	.word	0x3fb10d66
 8005b14:	c54c206e 	.word	0xc54c206e
 8005b18:	3fb745cd 	.word	0x3fb745cd
 8005b1c:	920083ff 	.word	0x920083ff
 8005b20:	3fc24924 	.word	0x3fc24924
 8005b24:	5555550d 	.word	0x5555550d
 8005b28:	3fd55555 	.word	0x3fd55555
 8005b2c:	2c6a6c2f 	.word	0x2c6a6c2f
 8005b30:	bfa2b444 	.word	0xbfa2b444
 8005b34:	52defd9a 	.word	0x52defd9a
 8005b38:	3fadde2d 	.word	0x3fadde2d
 8005b3c:	af749a6d 	.word	0xaf749a6d
 8005b40:	3fb3b0f2 	.word	0x3fb3b0f2
 8005b44:	fe231671 	.word	0xfe231671
 8005b48:	3fbc71c6 	.word	0x3fbc71c6
 8005b4c:	9998ebc4 	.word	0x9998ebc4
 8005b50:	3fc99999 	.word	0x3fc99999
 8005b54:	40037fff 	.word	0x40037fff
 8005b58:	3ff80000 	.word	0x3ff80000
 8005b5c:	bff00000 	.word	0xbff00000
 8005b60:	08005fe0 	.word	0x08005fe0
 8005b64:	08006000 	.word	0x08006000
 8005b68:	3ff921fb 	.word	0x3ff921fb

08005b6c <fabs>:
 8005b6c:	004b      	lsls	r3, r1, #1
 8005b6e:	0859      	lsrs	r1, r3, #1
 8005b70:	4770      	bx	lr

08005b72 <atan2>:
 8005b72:	b510      	push	{r4, lr}
 8005b74:	f000 f828 	bl	8005bc8 <__ieee754_atan2>
 8005b78:	bd10      	pop	{r4, pc}

08005b7a <sqrt>:
 8005b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7c:	0004      	movs	r4, r0
 8005b7e:	000d      	movs	r5, r1
 8005b80:	f000 f8ce 	bl	8005d20 <__ieee754_sqrt>
 8005b84:	0022      	movs	r2, r4
 8005b86:	0006      	movs	r6, r0
 8005b88:	000f      	movs	r7, r1
 8005b8a:	002b      	movs	r3, r5
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	0029      	movs	r1, r5
 8005b90:	f7fc fbc2 	bl	8002318 <__aeabi_dcmpun>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d113      	bne.n	8005bc0 <sqrt+0x46>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	0020      	movs	r0, r4
 8005b9e:	0029      	movs	r1, r5
 8005ba0:	f7fa fb52 	bl	8000248 <__aeabi_dcmplt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d00b      	beq.n	8005bc0 <sqrt+0x46>
 8005ba8:	f7ff fe2e 	bl	8005808 <__errno>
 8005bac:	2321      	movs	r3, #33	; 0x21
 8005bae:	2200      	movs	r2, #0
 8005bb0:	6003      	str	r3, [r0, #0]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	0010      	movs	r0, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	f7fb f9ae 	bl	8000f18 <__aeabi_ddiv>
 8005bbc:	0006      	movs	r6, r0
 8005bbe:	000f      	movs	r7, r1
 8005bc0:	0030      	movs	r0, r6
 8005bc2:	0039      	movs	r1, r7
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bc8 <__ieee754_atan2>:
 8005bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bca:	0016      	movs	r6, r2
 8005bcc:	001d      	movs	r5, r3
 8005bce:	005a      	lsls	r2, r3, #1
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	4273      	negs	r3, r6
 8005bd4:	4333      	orrs	r3, r6
 8005bd6:	4f46      	ldr	r7, [pc, #280]	; (8005cf0 <__ieee754_atan2+0x128>)
 8005bd8:	0852      	lsrs	r2, r2, #1
 8005bda:	0fdb      	lsrs	r3, r3, #31
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	42bb      	cmp	r3, r7
 8005be0:	d809      	bhi.n	8005bf6 <__ieee754_atan2+0x2e>
 8005be2:	4244      	negs	r4, r0
 8005be4:	004b      	lsls	r3, r1, #1
 8005be6:	4304      	orrs	r4, r0
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	0fe4      	lsrs	r4, r4, #31
 8005bec:	9100      	str	r1, [sp, #0]
 8005bee:	9001      	str	r0, [sp, #4]
 8005bf0:	431c      	orrs	r4, r3
 8005bf2:	42bc      	cmp	r4, r7
 8005bf4:	d905      	bls.n	8005c02 <__ieee754_atan2+0x3a>
 8005bf6:	0032      	movs	r2, r6
 8005bf8:	002b      	movs	r3, r5
 8005bfa:	f7fa fe51 	bl	80008a0 <__aeabi_dadd>
 8005bfe:	b003      	add	sp, #12
 8005c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c02:	4c3c      	ldr	r4, [pc, #240]	; (8005cf4 <__ieee754_atan2+0x12c>)
 8005c04:	192c      	adds	r4, r5, r4
 8005c06:	4334      	orrs	r4, r6
 8005c08:	d102      	bne.n	8005c10 <__ieee754_atan2+0x48>
 8005c0a:	f7ff fe2f 	bl	800586c <atan>
 8005c0e:	e7f6      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005c10:	17ac      	asrs	r4, r5, #30
 8005c12:	46a4      	mov	ip, r4
 8005c14:	2402      	movs	r4, #2
 8005c16:	4667      	mov	r7, ip
 8005c18:	403c      	ands	r4, r7
 8005c1a:	9f00      	ldr	r7, [sp, #0]
 8005c1c:	0fff      	lsrs	r7, r7, #31
 8005c1e:	433c      	orrs	r4, r7
 8005c20:	9f01      	ldr	r7, [sp, #4]
 8005c22:	431f      	orrs	r7, r3
 8005c24:	d106      	bne.n	8005c34 <__ieee754_atan2+0x6c>
 8005c26:	2c02      	cmp	r4, #2
 8005c28:	d056      	beq.n	8005cd8 <__ieee754_atan2+0x110>
 8005c2a:	2c03      	cmp	r4, #3
 8005c2c:	d1e7      	bne.n	8005bfe <__ieee754_atan2+0x36>
 8005c2e:	4832      	ldr	r0, [pc, #200]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005c30:	4932      	ldr	r1, [pc, #200]	; (8005cfc <__ieee754_atan2+0x134>)
 8005c32:	e7e4      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005c34:	0017      	movs	r7, r2
 8005c36:	4337      	orrs	r7, r6
 8005c38:	d105      	bne.n	8005c46 <__ieee754_atan2+0x7e>
 8005c3a:	9b00      	ldr	r3, [sp, #0]
 8005c3c:	482e      	ldr	r0, [pc, #184]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da53      	bge.n	8005cea <__ieee754_atan2+0x122>
 8005c42:	492f      	ldr	r1, [pc, #188]	; (8005d00 <__ieee754_atan2+0x138>)
 8005c44:	e7db      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005c46:	4f2a      	ldr	r7, [pc, #168]	; (8005cf0 <__ieee754_atan2+0x128>)
 8005c48:	42ba      	cmp	r2, r7
 8005c4a:	d10f      	bne.n	8005c6c <__ieee754_atan2+0xa4>
 8005c4c:	3c01      	subs	r4, #1
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d107      	bne.n	8005c62 <__ieee754_atan2+0x9a>
 8005c52:	2c02      	cmp	r4, #2
 8005c54:	d843      	bhi.n	8005cde <__ieee754_atan2+0x116>
 8005c56:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <__ieee754_atan2+0x13c>)
 8005c58:	00e4      	lsls	r4, r4, #3
 8005c5a:	191c      	adds	r4, r3, r4
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	6861      	ldr	r1, [r4, #4]
 8005c60:	e7cd      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005c62:	2c02      	cmp	r4, #2
 8005c64:	d83e      	bhi.n	8005ce4 <__ieee754_atan2+0x11c>
 8005c66:	4b28      	ldr	r3, [pc, #160]	; (8005d08 <__ieee754_atan2+0x140>)
 8005c68:	00e4      	lsls	r4, r4, #3
 8005c6a:	e7f6      	b.n	8005c5a <__ieee754_atan2+0x92>
 8005c6c:	4f20      	ldr	r7, [pc, #128]	; (8005cf0 <__ieee754_atan2+0x128>)
 8005c6e:	42bb      	cmp	r3, r7
 8005c70:	d0e3      	beq.n	8005c3a <__ieee754_atan2+0x72>
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	151b      	asrs	r3, r3, #20
 8005c76:	2b3c      	cmp	r3, #60	; 0x3c
 8005c78:	dc18      	bgt.n	8005cac <__ieee754_atan2+0xe4>
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	da01      	bge.n	8005c82 <__ieee754_atan2+0xba>
 8005c7e:	333c      	adds	r3, #60	; 0x3c
 8005c80:	db17      	blt.n	8005cb2 <__ieee754_atan2+0xea>
 8005c82:	0032      	movs	r2, r6
 8005c84:	002b      	movs	r3, r5
 8005c86:	f7fb f947 	bl	8000f18 <__aeabi_ddiv>
 8005c8a:	f7ff ff6f 	bl	8005b6c <fabs>
 8005c8e:	f7ff fded 	bl	800586c <atan>
 8005c92:	2c01      	cmp	r4, #1
 8005c94:	d010      	beq.n	8005cb8 <__ieee754_atan2+0xf0>
 8005c96:	2c02      	cmp	r4, #2
 8005c98:	d013      	beq.n	8005cc2 <__ieee754_atan2+0xfa>
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d0af      	beq.n	8005bfe <__ieee754_atan2+0x36>
 8005c9e:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <__ieee754_atan2+0x144>)
 8005ca0:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <__ieee754_atan2+0x148>)
 8005ca2:	f7fb ffa7 	bl	8001bf4 <__aeabi_dsub>
 8005ca6:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <__ieee754_atan2+0x14c>)
 8005caa:	e012      	b.n	8005cd2 <__ieee754_atan2+0x10a>
 8005cac:	4812      	ldr	r0, [pc, #72]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005cae:	491a      	ldr	r1, [pc, #104]	; (8005d18 <__ieee754_atan2+0x150>)
 8005cb0:	e7ef      	b.n	8005c92 <__ieee754_atan2+0xca>
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	e7ec      	b.n	8005c92 <__ieee754_atan2+0xca>
 8005cb8:	2480      	movs	r4, #128	; 0x80
 8005cba:	0624      	lsls	r4, r4, #24
 8005cbc:	190b      	adds	r3, r1, r4
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	e79d      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <__ieee754_atan2+0x144>)
 8005cc4:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <__ieee754_atan2+0x148>)
 8005cc6:	f7fb ff95 	bl	8001bf4 <__aeabi_dsub>
 8005cca:	0002      	movs	r2, r0
 8005ccc:	000b      	movs	r3, r1
 8005cce:	480a      	ldr	r0, [pc, #40]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005cd0:	4910      	ldr	r1, [pc, #64]	; (8005d14 <__ieee754_atan2+0x14c>)
 8005cd2:	f7fb ff8f 	bl	8001bf4 <__aeabi_dsub>
 8005cd6:	e792      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005cd8:	4807      	ldr	r0, [pc, #28]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005cda:	490e      	ldr	r1, [pc, #56]	; (8005d14 <__ieee754_atan2+0x14c>)
 8005cdc:	e78f      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005cde:	4806      	ldr	r0, [pc, #24]	; (8005cf8 <__ieee754_atan2+0x130>)
 8005ce0:	490e      	ldr	r1, [pc, #56]	; (8005d1c <__ieee754_atan2+0x154>)
 8005ce2:	e78c      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	e789      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005cea:	490b      	ldr	r1, [pc, #44]	; (8005d18 <__ieee754_atan2+0x150>)
 8005cec:	e787      	b.n	8005bfe <__ieee754_atan2+0x36>
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	7ff00000 	.word	0x7ff00000
 8005cf4:	c0100000 	.word	0xc0100000
 8005cf8:	54442d18 	.word	0x54442d18
 8005cfc:	c00921fb 	.word	0xc00921fb
 8005d00:	bff921fb 	.word	0xbff921fb
 8005d04:	08006020 	.word	0x08006020
 8005d08:	08006038 	.word	0x08006038
 8005d0c:	33145c07 	.word	0x33145c07
 8005d10:	3ca1a626 	.word	0x3ca1a626
 8005d14:	400921fb 	.word	0x400921fb
 8005d18:	3ff921fb 	.word	0x3ff921fb
 8005d1c:	3fe921fb 	.word	0x3fe921fb

08005d20 <__ieee754_sqrt>:
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	000b      	movs	r3, r1
 8005d24:	000c      	movs	r4, r1
 8005d26:	4956      	ldr	r1, [pc, #344]	; (8005e80 <__ieee754_sqrt+0x160>)
 8005d28:	0005      	movs	r5, r0
 8005d2a:	0002      	movs	r2, r0
 8005d2c:	0008      	movs	r0, r1
 8005d2e:	b085      	sub	sp, #20
 8005d30:	4020      	ands	r0, r4
 8005d32:	4288      	cmp	r0, r1
 8005d34:	d10f      	bne.n	8005d56 <__ieee754_sqrt+0x36>
 8005d36:	0028      	movs	r0, r5
 8005d38:	0021      	movs	r1, r4
 8005d3a:	f7fb fcef 	bl	800171c <__aeabi_dmul>
 8005d3e:	0002      	movs	r2, r0
 8005d40:	000b      	movs	r3, r1
 8005d42:	0028      	movs	r0, r5
 8005d44:	0021      	movs	r1, r4
 8005d46:	f7fa fdab 	bl	80008a0 <__aeabi_dadd>
 8005d4a:	0005      	movs	r5, r0
 8005d4c:	000c      	movs	r4, r1
 8005d4e:	0028      	movs	r0, r5
 8005d50:	0021      	movs	r1, r4
 8005d52:	b005      	add	sp, #20
 8005d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	dc10      	bgt.n	8005d7c <__ieee754_sqrt+0x5c>
 8005d5a:	0061      	lsls	r1, r4, #1
 8005d5c:	0849      	lsrs	r1, r1, #1
 8005d5e:	4329      	orrs	r1, r5
 8005d60:	d0f5      	beq.n	8005d4e <__ieee754_sqrt+0x2e>
 8005d62:	2100      	movs	r1, #0
 8005d64:	428c      	cmp	r4, r1
 8005d66:	d100      	bne.n	8005d6a <__ieee754_sqrt+0x4a>
 8005d68:	e080      	b.n	8005e6c <__ieee754_sqrt+0x14c>
 8005d6a:	0028      	movs	r0, r5
 8005d6c:	0021      	movs	r1, r4
 8005d6e:	f7fb ff41 	bl	8001bf4 <__aeabi_dsub>
 8005d72:	0002      	movs	r2, r0
 8005d74:	000b      	movs	r3, r1
 8005d76:	f7fb f8cf 	bl	8000f18 <__aeabi_ddiv>
 8005d7a:	e7e6      	b.n	8005d4a <__ieee754_sqrt+0x2a>
 8005d7c:	1521      	asrs	r1, r4, #20
 8005d7e:	d075      	beq.n	8005e6c <__ieee754_sqrt+0x14c>
 8005d80:	4840      	ldr	r0, [pc, #256]	; (8005e84 <__ieee754_sqrt+0x164>)
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	180c      	adds	r4, r1, r0
 8005d86:	2080      	movs	r0, #128	; 0x80
 8005d88:	0b1b      	lsrs	r3, r3, #12
 8005d8a:	0340      	lsls	r0, r0, #13
 8005d8c:	4303      	orrs	r3, r0
 8005d8e:	07c9      	lsls	r1, r1, #31
 8005d90:	d403      	bmi.n	8005d9a <__ieee754_sqrt+0x7a>
 8005d92:	0fd1      	lsrs	r1, r2, #31
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	185b      	adds	r3, r3, r1
 8005d98:	0052      	lsls	r2, r2, #1
 8005d9a:	1061      	asrs	r1, r4, #1
 8005d9c:	2400      	movs	r4, #0
 8005d9e:	9103      	str	r1, [sp, #12]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	0fd1      	lsrs	r1, r2, #31
 8005da4:	185b      	adds	r3, r3, r1
 8005da6:	2180      	movs	r1, #128	; 0x80
 8005da8:	2516      	movs	r5, #22
 8005daa:	0020      	movs	r0, r4
 8005dac:	0052      	lsls	r2, r2, #1
 8005dae:	0389      	lsls	r1, r1, #14
 8005db0:	1846      	adds	r6, r0, r1
 8005db2:	429e      	cmp	r6, r3
 8005db4:	dc02      	bgt.n	8005dbc <__ieee754_sqrt+0x9c>
 8005db6:	1870      	adds	r0, r6, r1
 8005db8:	1b9b      	subs	r3, r3, r6
 8005dba:	1864      	adds	r4, r4, r1
 8005dbc:	0fd6      	lsrs	r6, r2, #31
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	3d01      	subs	r5, #1
 8005dc2:	18f3      	adds	r3, r6, r3
 8005dc4:	0052      	lsls	r2, r2, #1
 8005dc6:	0849      	lsrs	r1, r1, #1
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	d1f1      	bne.n	8005db0 <__ieee754_sqrt+0x90>
 8005dcc:	2620      	movs	r6, #32
 8005dce:	2780      	movs	r7, #128	; 0x80
 8005dd0:	0029      	movs	r1, r5
 8005dd2:	9601      	str	r6, [sp, #4]
 8005dd4:	063f      	lsls	r7, r7, #24
 8005dd6:	197e      	adds	r6, r7, r5
 8005dd8:	46b4      	mov	ip, r6
 8005dda:	4283      	cmp	r3, r0
 8005ddc:	dc02      	bgt.n	8005de4 <__ieee754_sqrt+0xc4>
 8005dde:	d114      	bne.n	8005e0a <__ieee754_sqrt+0xea>
 8005de0:	4296      	cmp	r6, r2
 8005de2:	d812      	bhi.n	8005e0a <__ieee754_sqrt+0xea>
 8005de4:	4665      	mov	r5, ip
 8005de6:	4666      	mov	r6, ip
 8005de8:	19ed      	adds	r5, r5, r7
 8005dea:	9002      	str	r0, [sp, #8]
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	da03      	bge.n	8005df8 <__ieee754_sqrt+0xd8>
 8005df0:	43ee      	mvns	r6, r5
 8005df2:	0ff6      	lsrs	r6, r6, #31
 8005df4:	1986      	adds	r6, r0, r6
 8005df6:	9602      	str	r6, [sp, #8]
 8005df8:	1a1b      	subs	r3, r3, r0
 8005dfa:	4562      	cmp	r2, ip
 8005dfc:	4180      	sbcs	r0, r0
 8005dfe:	4240      	negs	r0, r0
 8005e00:	1a1b      	subs	r3, r3, r0
 8005e02:	4660      	mov	r0, ip
 8005e04:	1a12      	subs	r2, r2, r0
 8005e06:	9802      	ldr	r0, [sp, #8]
 8005e08:	19c9      	adds	r1, r1, r7
 8005e0a:	0fd6      	lsrs	r6, r2, #31
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	199b      	adds	r3, r3, r6
 8005e10:	9e01      	ldr	r6, [sp, #4]
 8005e12:	0052      	lsls	r2, r2, #1
 8005e14:	3e01      	subs	r6, #1
 8005e16:	087f      	lsrs	r7, r7, #1
 8005e18:	9601      	str	r6, [sp, #4]
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	d1db      	bne.n	8005dd6 <__ieee754_sqrt+0xb6>
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d003      	beq.n	8005e2a <__ieee754_sqrt+0x10a>
 8005e22:	1c4b      	adds	r3, r1, #1
 8005e24:	d127      	bne.n	8005e76 <__ieee754_sqrt+0x156>
 8005e26:	0031      	movs	r1, r6
 8005e28:	3401      	adds	r4, #1
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <__ieee754_sqrt+0x168>)
 8005e2c:	1060      	asrs	r0, r4, #1
 8005e2e:	18c0      	adds	r0, r0, r3
 8005e30:	0849      	lsrs	r1, r1, #1
 8005e32:	07e3      	lsls	r3, r4, #31
 8005e34:	d502      	bpl.n	8005e3c <__ieee754_sqrt+0x11c>
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	4319      	orrs	r1, r3
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	000d      	movs	r5, r1
 8005e40:	051c      	lsls	r4, r3, #20
 8005e42:	1823      	adds	r3, r4, r0
 8005e44:	001c      	movs	r4, r3
 8005e46:	e782      	b.n	8005d4e <__ieee754_sqrt+0x2e>
 8005e48:	0ad3      	lsrs	r3, r2, #11
 8005e4a:	3815      	subs	r0, #21
 8005e4c:	0552      	lsls	r2, r2, #21
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0fa      	beq.n	8005e48 <__ieee754_sqrt+0x128>
 8005e52:	2480      	movs	r4, #128	; 0x80
 8005e54:	0364      	lsls	r4, r4, #13
 8005e56:	4223      	tst	r3, r4
 8005e58:	d00a      	beq.n	8005e70 <__ieee754_sqrt+0x150>
 8005e5a:	2420      	movs	r4, #32
 8005e5c:	0016      	movs	r6, r2
 8005e5e:	1a64      	subs	r4, r4, r1
 8005e60:	40e6      	lsrs	r6, r4
 8005e62:	1e4d      	subs	r5, r1, #1
 8005e64:	408a      	lsls	r2, r1
 8005e66:	4333      	orrs	r3, r6
 8005e68:	1b41      	subs	r1, r0, r5
 8005e6a:	e789      	b.n	8005d80 <__ieee754_sqrt+0x60>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e7ee      	b.n	8005e4e <__ieee754_sqrt+0x12e>
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	3101      	adds	r1, #1
 8005e74:	e7ef      	b.n	8005e56 <__ieee754_sqrt+0x136>
 8005e76:	2301      	movs	r3, #1
 8005e78:	3101      	adds	r1, #1
 8005e7a:	4399      	bics	r1, r3
 8005e7c:	e7d5      	b.n	8005e2a <__ieee754_sqrt+0x10a>
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	7ff00000 	.word	0x7ff00000
 8005e84:	fffffc01 	.word	0xfffffc01
 8005e88:	3fe00000 	.word	0x3fe00000

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
