
tilt_controlled_controller_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006f78  08006f78  00016f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007140  08007140  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08007140  08007140  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007140  08007140  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007148  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000100  08007248  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007248  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc57  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a8  00000000  00000000  0002dd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  000308d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002641  00000000  00000000  000312b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e767  00000000  00000000  000338f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13aa  00000000  00000000  00042058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000e3454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006f5c 	.word	0x08006f5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	08006f5c 	.word	0x08006f5c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cdrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0010      	movs	r0, r2
 8000220:	4662      	mov	r2, ip
 8000222:	468c      	mov	ip, r1
 8000224:	0019      	movs	r1, r3
 8000226:	4663      	mov	r3, ip
 8000228:	e000      	b.n	800022c <__aeabi_cdcmpeq>
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdcmpeq>:
 800022c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022e:	f001 fa2f 	bl	8001690 <__ledf2>
 8000232:	2800      	cmp	r0, #0
 8000234:	d401      	bmi.n	800023a <__aeabi_cdcmpeq+0xe>
 8000236:	2100      	movs	r1, #0
 8000238:	42c8      	cmn	r0, r1
 800023a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800023c <__aeabi_dcmpeq>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f001 f97f 	bl	8001540 <__eqdf2>
 8000242:	4240      	negs	r0, r0
 8000244:	3001      	adds	r0, #1
 8000246:	bd10      	pop	{r4, pc}

08000248 <__aeabi_dcmplt>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f001 fa21 	bl	8001690 <__ledf2>
 800024e:	2800      	cmp	r0, #0
 8000250:	db01      	blt.n	8000256 <__aeabi_dcmplt+0xe>
 8000252:	2000      	movs	r0, #0
 8000254:	bd10      	pop	{r4, pc}
 8000256:	2001      	movs	r0, #1
 8000258:	bd10      	pop	{r4, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_dcmple>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 fa17 	bl	8001690 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	dd01      	ble.n	800026a <__aeabi_dcmple+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmpgt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 f9a7 	bl	80015c4 <__gedf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dc01      	bgt.n	800027e <__aeabi_dcmpgt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpge>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f99d 	bl	80015c4 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	da01      	bge.n	8000292 <__aeabi_dcmpge+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_d2uiz>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	2200      	movs	r2, #0
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <__aeabi_d2uiz+0x38>)
 800029e:	0004      	movs	r4, r0
 80002a0:	000d      	movs	r5, r1
 80002a2:	f7ff ffef 	bl	8000284 <__aeabi_dcmpge>
 80002a6:	2800      	cmp	r0, #0
 80002a8:	d104      	bne.n	80002b4 <__aeabi_d2uiz+0x1c>
 80002aa:	0020      	movs	r0, r4
 80002ac:	0029      	movs	r1, r5
 80002ae:	f002 f86f 	bl	8002390 <__aeabi_d2iz>
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <__aeabi_d2uiz+0x38>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	0020      	movs	r0, r4
 80002ba:	0029      	movs	r1, r5
 80002bc:	f001 fcb8 	bl	8001c30 <__aeabi_dsub>
 80002c0:	f002 f866 	bl	8002390 <__aeabi_d2iz>
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	061b      	lsls	r3, r3, #24
 80002c8:	469c      	mov	ip, r3
 80002ca:	4460      	add	r0, ip
 80002cc:	e7f1      	b.n	80002b2 <__aeabi_d2uiz+0x1a>
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	41e00000 	.word	0x41e00000

080002d4 <__aeabi_fadd>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46c6      	mov	lr, r8
 80002d8:	0243      	lsls	r3, r0, #9
 80002da:	0a5b      	lsrs	r3, r3, #9
 80002dc:	024e      	lsls	r6, r1, #9
 80002de:	0045      	lsls	r5, r0, #1
 80002e0:	004f      	lsls	r7, r1, #1
 80002e2:	00da      	lsls	r2, r3, #3
 80002e4:	0fc4      	lsrs	r4, r0, #31
 80002e6:	469c      	mov	ip, r3
 80002e8:	0a70      	lsrs	r0, r6, #9
 80002ea:	4690      	mov	r8, r2
 80002ec:	b500      	push	{lr}
 80002ee:	0e2d      	lsrs	r5, r5, #24
 80002f0:	0e3f      	lsrs	r7, r7, #24
 80002f2:	0fc9      	lsrs	r1, r1, #31
 80002f4:	09b6      	lsrs	r6, r6, #6
 80002f6:	428c      	cmp	r4, r1
 80002f8:	d04b      	beq.n	8000392 <__aeabi_fadd+0xbe>
 80002fa:	1bea      	subs	r2, r5, r7
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	dd36      	ble.n	800036e <__aeabi_fadd+0x9a>
 8000300:	2f00      	cmp	r7, #0
 8000302:	d061      	beq.n	80003c8 <__aeabi_fadd+0xf4>
 8000304:	2dff      	cmp	r5, #255	; 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0x36>
 8000308:	e0ad      	b.n	8000466 <__aeabi_fadd+0x192>
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	04db      	lsls	r3, r3, #19
 800030e:	431e      	orrs	r6, r3
 8000310:	2a1b      	cmp	r2, #27
 8000312:	dc00      	bgt.n	8000316 <__aeabi_fadd+0x42>
 8000314:	e0d3      	b.n	80004be <__aeabi_fadd+0x1ea>
 8000316:	2001      	movs	r0, #1
 8000318:	4643      	mov	r3, r8
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	0143      	lsls	r3, r0, #5
 800031e:	d400      	bmi.n	8000322 <__aeabi_fadd+0x4e>
 8000320:	e08c      	b.n	800043c <__aeabi_fadd+0x168>
 8000322:	0180      	lsls	r0, r0, #6
 8000324:	0987      	lsrs	r7, r0, #6
 8000326:	0038      	movs	r0, r7
 8000328:	f002 f8be 	bl	80024a8 <__clzsi2>
 800032c:	3805      	subs	r0, #5
 800032e:	4087      	lsls	r7, r0
 8000330:	4285      	cmp	r5, r0
 8000332:	dc00      	bgt.n	8000336 <__aeabi_fadd+0x62>
 8000334:	e0b6      	b.n	80004a4 <__aeabi_fadd+0x1d0>
 8000336:	1a2d      	subs	r5, r5, r0
 8000338:	48b3      	ldr	r0, [pc, #716]	; (8000608 <__aeabi_fadd+0x334>)
 800033a:	4038      	ands	r0, r7
 800033c:	0743      	lsls	r3, r0, #29
 800033e:	d004      	beq.n	800034a <__aeabi_fadd+0x76>
 8000340:	230f      	movs	r3, #15
 8000342:	4003      	ands	r3, r0
 8000344:	2b04      	cmp	r3, #4
 8000346:	d000      	beq.n	800034a <__aeabi_fadd+0x76>
 8000348:	3004      	adds	r0, #4
 800034a:	0143      	lsls	r3, r0, #5
 800034c:	d400      	bmi.n	8000350 <__aeabi_fadd+0x7c>
 800034e:	e078      	b.n	8000442 <__aeabi_fadd+0x16e>
 8000350:	1c6a      	adds	r2, r5, #1
 8000352:	2dfe      	cmp	r5, #254	; 0xfe
 8000354:	d065      	beq.n	8000422 <__aeabi_fadd+0x14e>
 8000356:	0180      	lsls	r0, r0, #6
 8000358:	0a43      	lsrs	r3, r0, #9
 800035a:	469c      	mov	ip, r3
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	4663      	mov	r3, ip
 8000360:	05d0      	lsls	r0, r2, #23
 8000362:	4318      	orrs	r0, r3
 8000364:	07e4      	lsls	r4, r4, #31
 8000366:	4320      	orrs	r0, r4
 8000368:	bc80      	pop	{r7}
 800036a:	46b8      	mov	r8, r7
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	2a00      	cmp	r2, #0
 8000370:	d035      	beq.n	80003de <__aeabi_fadd+0x10a>
 8000372:	1b7a      	subs	r2, r7, r5
 8000374:	2d00      	cmp	r5, #0
 8000376:	d000      	beq.n	800037a <__aeabi_fadd+0xa6>
 8000378:	e0af      	b.n	80004da <__aeabi_fadd+0x206>
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0xae>
 8000380:	e0a7      	b.n	80004d2 <__aeabi_fadd+0x1fe>
 8000382:	1e53      	subs	r3, r2, #1
 8000384:	2a01      	cmp	r2, #1
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0xb6>
 8000388:	e12f      	b.n	80005ea <__aeabi_fadd+0x316>
 800038a:	2aff      	cmp	r2, #255	; 0xff
 800038c:	d069      	beq.n	8000462 <__aeabi_fadd+0x18e>
 800038e:	001a      	movs	r2, r3
 8000390:	e0aa      	b.n	80004e8 <__aeabi_fadd+0x214>
 8000392:	1be9      	subs	r1, r5, r7
 8000394:	2900      	cmp	r1, #0
 8000396:	dd70      	ble.n	800047a <__aeabi_fadd+0x1a6>
 8000398:	2f00      	cmp	r7, #0
 800039a:	d037      	beq.n	800040c <__aeabi_fadd+0x138>
 800039c:	2dff      	cmp	r5, #255	; 0xff
 800039e:	d062      	beq.n	8000466 <__aeabi_fadd+0x192>
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	04db      	lsls	r3, r3, #19
 80003a4:	431e      	orrs	r6, r3
 80003a6:	291b      	cmp	r1, #27
 80003a8:	dc00      	bgt.n	80003ac <__aeabi_fadd+0xd8>
 80003aa:	e0b0      	b.n	800050e <__aeabi_fadd+0x23a>
 80003ac:	2001      	movs	r0, #1
 80003ae:	4440      	add	r0, r8
 80003b0:	0143      	lsls	r3, r0, #5
 80003b2:	d543      	bpl.n	800043c <__aeabi_fadd+0x168>
 80003b4:	3501      	adds	r5, #1
 80003b6:	2dff      	cmp	r5, #255	; 0xff
 80003b8:	d033      	beq.n	8000422 <__aeabi_fadd+0x14e>
 80003ba:	2301      	movs	r3, #1
 80003bc:	4a93      	ldr	r2, [pc, #588]	; (800060c <__aeabi_fadd+0x338>)
 80003be:	4003      	ands	r3, r0
 80003c0:	0840      	lsrs	r0, r0, #1
 80003c2:	4010      	ands	r0, r2
 80003c4:	4318      	orrs	r0, r3
 80003c6:	e7b9      	b.n	800033c <__aeabi_fadd+0x68>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d100      	bne.n	80003ce <__aeabi_fadd+0xfa>
 80003cc:	e083      	b.n	80004d6 <__aeabi_fadd+0x202>
 80003ce:	1e51      	subs	r1, r2, #1
 80003d0:	2a01      	cmp	r2, #1
 80003d2:	d100      	bne.n	80003d6 <__aeabi_fadd+0x102>
 80003d4:	e0d8      	b.n	8000588 <__aeabi_fadd+0x2b4>
 80003d6:	2aff      	cmp	r2, #255	; 0xff
 80003d8:	d045      	beq.n	8000466 <__aeabi_fadd+0x192>
 80003da:	000a      	movs	r2, r1
 80003dc:	e798      	b.n	8000310 <__aeabi_fadd+0x3c>
 80003de:	27fe      	movs	r7, #254	; 0xfe
 80003e0:	1c6a      	adds	r2, r5, #1
 80003e2:	4217      	tst	r7, r2
 80003e4:	d000      	beq.n	80003e8 <__aeabi_fadd+0x114>
 80003e6:	e086      	b.n	80004f6 <__aeabi_fadd+0x222>
 80003e8:	2d00      	cmp	r5, #0
 80003ea:	d000      	beq.n	80003ee <__aeabi_fadd+0x11a>
 80003ec:	e0b7      	b.n	800055e <__aeabi_fadd+0x28a>
 80003ee:	4643      	mov	r3, r8
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d100      	bne.n	80003f6 <__aeabi_fadd+0x122>
 80003f4:	e0f3      	b.n	80005de <__aeabi_fadd+0x30a>
 80003f6:	2200      	movs	r2, #0
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0b0      	beq.n	800035e <__aeabi_fadd+0x8a>
 80003fc:	1b98      	subs	r0, r3, r6
 80003fe:	0143      	lsls	r3, r0, #5
 8000400:	d400      	bmi.n	8000404 <__aeabi_fadd+0x130>
 8000402:	e0fa      	b.n	80005fa <__aeabi_fadd+0x326>
 8000404:	4643      	mov	r3, r8
 8000406:	000c      	movs	r4, r1
 8000408:	1af0      	subs	r0, r6, r3
 800040a:	e797      	b.n	800033c <__aeabi_fadd+0x68>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_fadd+0x13e>
 8000410:	e0c8      	b.n	80005a4 <__aeabi_fadd+0x2d0>
 8000412:	1e4a      	subs	r2, r1, #1
 8000414:	2901      	cmp	r1, #1
 8000416:	d100      	bne.n	800041a <__aeabi_fadd+0x146>
 8000418:	e0ae      	b.n	8000578 <__aeabi_fadd+0x2a4>
 800041a:	29ff      	cmp	r1, #255	; 0xff
 800041c:	d023      	beq.n	8000466 <__aeabi_fadd+0x192>
 800041e:	0011      	movs	r1, r2
 8000420:	e7c1      	b.n	80003a6 <__aeabi_fadd+0xd2>
 8000422:	2300      	movs	r3, #0
 8000424:	22ff      	movs	r2, #255	; 0xff
 8000426:	469c      	mov	ip, r3
 8000428:	e799      	b.n	800035e <__aeabi_fadd+0x8a>
 800042a:	21fe      	movs	r1, #254	; 0xfe
 800042c:	1c6a      	adds	r2, r5, #1
 800042e:	4211      	tst	r1, r2
 8000430:	d077      	beq.n	8000522 <__aeabi_fadd+0x24e>
 8000432:	2aff      	cmp	r2, #255	; 0xff
 8000434:	d0f5      	beq.n	8000422 <__aeabi_fadd+0x14e>
 8000436:	0015      	movs	r5, r2
 8000438:	4446      	add	r6, r8
 800043a:	0870      	lsrs	r0, r6, #1
 800043c:	0743      	lsls	r3, r0, #29
 800043e:	d000      	beq.n	8000442 <__aeabi_fadd+0x16e>
 8000440:	e77e      	b.n	8000340 <__aeabi_fadd+0x6c>
 8000442:	08c3      	lsrs	r3, r0, #3
 8000444:	2dff      	cmp	r5, #255	; 0xff
 8000446:	d00e      	beq.n	8000466 <__aeabi_fadd+0x192>
 8000448:	025b      	lsls	r3, r3, #9
 800044a:	0a5b      	lsrs	r3, r3, #9
 800044c:	469c      	mov	ip, r3
 800044e:	b2ea      	uxtb	r2, r5
 8000450:	e785      	b.n	800035e <__aeabi_fadd+0x8a>
 8000452:	2e00      	cmp	r6, #0
 8000454:	d007      	beq.n	8000466 <__aeabi_fadd+0x192>
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	03d2      	lsls	r2, r2, #15
 800045a:	4213      	tst	r3, r2
 800045c:	d003      	beq.n	8000466 <__aeabi_fadd+0x192>
 800045e:	4210      	tst	r0, r2
 8000460:	d101      	bne.n	8000466 <__aeabi_fadd+0x192>
 8000462:	000c      	movs	r4, r1
 8000464:	0003      	movs	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0db      	beq.n	8000422 <__aeabi_fadd+0x14e>
 800046a:	2080      	movs	r0, #128	; 0x80
 800046c:	03c0      	lsls	r0, r0, #15
 800046e:	4318      	orrs	r0, r3
 8000470:	0240      	lsls	r0, r0, #9
 8000472:	0a43      	lsrs	r3, r0, #9
 8000474:	469c      	mov	ip, r3
 8000476:	22ff      	movs	r2, #255	; 0xff
 8000478:	e771      	b.n	800035e <__aeabi_fadd+0x8a>
 800047a:	2900      	cmp	r1, #0
 800047c:	d0d5      	beq.n	800042a <__aeabi_fadd+0x156>
 800047e:	1b7a      	subs	r2, r7, r5
 8000480:	2d00      	cmp	r5, #0
 8000482:	d160      	bne.n	8000546 <__aeabi_fadd+0x272>
 8000484:	4643      	mov	r3, r8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d024      	beq.n	80004d4 <__aeabi_fadd+0x200>
 800048a:	1e53      	subs	r3, r2, #1
 800048c:	2a01      	cmp	r2, #1
 800048e:	d073      	beq.n	8000578 <__aeabi_fadd+0x2a4>
 8000490:	2aff      	cmp	r2, #255	; 0xff
 8000492:	d0e7      	beq.n	8000464 <__aeabi_fadd+0x190>
 8000494:	001a      	movs	r2, r3
 8000496:	2a1b      	cmp	r2, #27
 8000498:	dc00      	bgt.n	800049c <__aeabi_fadd+0x1c8>
 800049a:	e085      	b.n	80005a8 <__aeabi_fadd+0x2d4>
 800049c:	2001      	movs	r0, #1
 800049e:	003d      	movs	r5, r7
 80004a0:	1980      	adds	r0, r0, r6
 80004a2:	e785      	b.n	80003b0 <__aeabi_fadd+0xdc>
 80004a4:	2320      	movs	r3, #32
 80004a6:	003a      	movs	r2, r7
 80004a8:	1b45      	subs	r5, r0, r5
 80004aa:	0038      	movs	r0, r7
 80004ac:	3501      	adds	r5, #1
 80004ae:	40ea      	lsrs	r2, r5
 80004b0:	1b5d      	subs	r5, r3, r5
 80004b2:	40a8      	lsls	r0, r5
 80004b4:	1e43      	subs	r3, r0, #1
 80004b6:	4198      	sbcs	r0, r3
 80004b8:	2500      	movs	r5, #0
 80004ba:	4310      	orrs	r0, r2
 80004bc:	e73e      	b.n	800033c <__aeabi_fadd+0x68>
 80004be:	2320      	movs	r3, #32
 80004c0:	0030      	movs	r0, r6
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	0031      	movs	r1, r6
 80004c6:	4098      	lsls	r0, r3
 80004c8:	40d1      	lsrs	r1, r2
 80004ca:	1e43      	subs	r3, r0, #1
 80004cc:	4198      	sbcs	r0, r3
 80004ce:	4308      	orrs	r0, r1
 80004d0:	e722      	b.n	8000318 <__aeabi_fadd+0x44>
 80004d2:	000c      	movs	r4, r1
 80004d4:	0003      	movs	r3, r0
 80004d6:	0015      	movs	r5, r2
 80004d8:	e7b4      	b.n	8000444 <__aeabi_fadd+0x170>
 80004da:	2fff      	cmp	r7, #255	; 0xff
 80004dc:	d0c1      	beq.n	8000462 <__aeabi_fadd+0x18e>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	4640      	mov	r0, r8
 80004e2:	04db      	lsls	r3, r3, #19
 80004e4:	4318      	orrs	r0, r3
 80004e6:	4680      	mov	r8, r0
 80004e8:	2a1b      	cmp	r2, #27
 80004ea:	dd51      	ble.n	8000590 <__aeabi_fadd+0x2bc>
 80004ec:	2001      	movs	r0, #1
 80004ee:	000c      	movs	r4, r1
 80004f0:	003d      	movs	r5, r7
 80004f2:	1a30      	subs	r0, r6, r0
 80004f4:	e712      	b.n	800031c <__aeabi_fadd+0x48>
 80004f6:	4643      	mov	r3, r8
 80004f8:	1b9f      	subs	r7, r3, r6
 80004fa:	017b      	lsls	r3, r7, #5
 80004fc:	d42b      	bmi.n	8000556 <__aeabi_fadd+0x282>
 80004fe:	2f00      	cmp	r7, #0
 8000500:	d000      	beq.n	8000504 <__aeabi_fadd+0x230>
 8000502:	e710      	b.n	8000326 <__aeabi_fadd+0x52>
 8000504:	2300      	movs	r3, #0
 8000506:	2400      	movs	r4, #0
 8000508:	2200      	movs	r2, #0
 800050a:	469c      	mov	ip, r3
 800050c:	e727      	b.n	800035e <__aeabi_fadd+0x8a>
 800050e:	2320      	movs	r3, #32
 8000510:	0032      	movs	r2, r6
 8000512:	0030      	movs	r0, r6
 8000514:	40ca      	lsrs	r2, r1
 8000516:	1a59      	subs	r1, r3, r1
 8000518:	4088      	lsls	r0, r1
 800051a:	1e43      	subs	r3, r0, #1
 800051c:	4198      	sbcs	r0, r3
 800051e:	4310      	orrs	r0, r2
 8000520:	e745      	b.n	80003ae <__aeabi_fadd+0xda>
 8000522:	2d00      	cmp	r5, #0
 8000524:	d14a      	bne.n	80005bc <__aeabi_fadd+0x2e8>
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d063      	beq.n	80005f4 <__aeabi_fadd+0x320>
 800052c:	2200      	movs	r2, #0
 800052e:	2e00      	cmp	r6, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x260>
 8000532:	e714      	b.n	800035e <__aeabi_fadd+0x8a>
 8000534:	0030      	movs	r0, r6
 8000536:	4440      	add	r0, r8
 8000538:	0143      	lsls	r3, r0, #5
 800053a:	d400      	bmi.n	800053e <__aeabi_fadd+0x26a>
 800053c:	e77e      	b.n	800043c <__aeabi_fadd+0x168>
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <__aeabi_fadd+0x334>)
 8000540:	3501      	adds	r5, #1
 8000542:	4018      	ands	r0, r3
 8000544:	e77a      	b.n	800043c <__aeabi_fadd+0x168>
 8000546:	2fff      	cmp	r7, #255	; 0xff
 8000548:	d08c      	beq.n	8000464 <__aeabi_fadd+0x190>
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	4641      	mov	r1, r8
 800054e:	04db      	lsls	r3, r3, #19
 8000550:	4319      	orrs	r1, r3
 8000552:	4688      	mov	r8, r1
 8000554:	e79f      	b.n	8000496 <__aeabi_fadd+0x1c2>
 8000556:	4643      	mov	r3, r8
 8000558:	000c      	movs	r4, r1
 800055a:	1af7      	subs	r7, r6, r3
 800055c:	e6e3      	b.n	8000326 <__aeabi_fadd+0x52>
 800055e:	4642      	mov	r2, r8
 8000560:	2a00      	cmp	r2, #0
 8000562:	d000      	beq.n	8000566 <__aeabi_fadd+0x292>
 8000564:	e775      	b.n	8000452 <__aeabi_fadd+0x17e>
 8000566:	2e00      	cmp	r6, #0
 8000568:	d000      	beq.n	800056c <__aeabi_fadd+0x298>
 800056a:	e77a      	b.n	8000462 <__aeabi_fadd+0x18e>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	03db      	lsls	r3, r3, #15
 8000570:	2400      	movs	r4, #0
 8000572:	469c      	mov	ip, r3
 8000574:	22ff      	movs	r2, #255	; 0xff
 8000576:	e6f2      	b.n	800035e <__aeabi_fadd+0x8a>
 8000578:	0030      	movs	r0, r6
 800057a:	4440      	add	r0, r8
 800057c:	2501      	movs	r5, #1
 800057e:	0143      	lsls	r3, r0, #5
 8000580:	d400      	bmi.n	8000584 <__aeabi_fadd+0x2b0>
 8000582:	e75b      	b.n	800043c <__aeabi_fadd+0x168>
 8000584:	2502      	movs	r5, #2
 8000586:	e718      	b.n	80003ba <__aeabi_fadd+0xe6>
 8000588:	4643      	mov	r3, r8
 800058a:	2501      	movs	r5, #1
 800058c:	1b98      	subs	r0, r3, r6
 800058e:	e6c5      	b.n	800031c <__aeabi_fadd+0x48>
 8000590:	2320      	movs	r3, #32
 8000592:	4644      	mov	r4, r8
 8000594:	4640      	mov	r0, r8
 8000596:	40d4      	lsrs	r4, r2
 8000598:	1a9a      	subs	r2, r3, r2
 800059a:	4090      	lsls	r0, r2
 800059c:	1e43      	subs	r3, r0, #1
 800059e:	4198      	sbcs	r0, r3
 80005a0:	4320      	orrs	r0, r4
 80005a2:	e7a4      	b.n	80004ee <__aeabi_fadd+0x21a>
 80005a4:	000d      	movs	r5, r1
 80005a6:	e74d      	b.n	8000444 <__aeabi_fadd+0x170>
 80005a8:	2320      	movs	r3, #32
 80005aa:	4641      	mov	r1, r8
 80005ac:	4640      	mov	r0, r8
 80005ae:	40d1      	lsrs	r1, r2
 80005b0:	1a9a      	subs	r2, r3, r2
 80005b2:	4090      	lsls	r0, r2
 80005b4:	1e43      	subs	r3, r0, #1
 80005b6:	4198      	sbcs	r0, r3
 80005b8:	4308      	orrs	r0, r1
 80005ba:	e770      	b.n	800049e <__aeabi_fadd+0x1ca>
 80005bc:	4642      	mov	r2, r8
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x2f0>
 80005c2:	e74f      	b.n	8000464 <__aeabi_fadd+0x190>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x2f6>
 80005c8:	e74d      	b.n	8000466 <__aeabi_fadd+0x192>
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	03d2      	lsls	r2, r2, #15
 80005ce:	4213      	tst	r3, r2
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x300>
 80005d2:	e748      	b.n	8000466 <__aeabi_fadd+0x192>
 80005d4:	4210      	tst	r0, r2
 80005d6:	d000      	beq.n	80005da <__aeabi_fadd+0x306>
 80005d8:	e745      	b.n	8000466 <__aeabi_fadd+0x192>
 80005da:	0003      	movs	r3, r0
 80005dc:	e743      	b.n	8000466 <__aeabi_fadd+0x192>
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d090      	beq.n	8000504 <__aeabi_fadd+0x230>
 80005e2:	000c      	movs	r4, r1
 80005e4:	4684      	mov	ip, r0
 80005e6:	2200      	movs	r2, #0
 80005e8:	e6b9      	b.n	800035e <__aeabi_fadd+0x8a>
 80005ea:	4643      	mov	r3, r8
 80005ec:	000c      	movs	r4, r1
 80005ee:	1af0      	subs	r0, r6, r3
 80005f0:	3501      	adds	r5, #1
 80005f2:	e693      	b.n	800031c <__aeabi_fadd+0x48>
 80005f4:	4684      	mov	ip, r0
 80005f6:	2200      	movs	r2, #0
 80005f8:	e6b1      	b.n	800035e <__aeabi_fadd+0x8a>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d000      	beq.n	8000600 <__aeabi_fadd+0x32c>
 80005fe:	e71d      	b.n	800043c <__aeabi_fadd+0x168>
 8000600:	2300      	movs	r3, #0
 8000602:	2400      	movs	r4, #0
 8000604:	469c      	mov	ip, r3
 8000606:	e6aa      	b.n	800035e <__aeabi_fadd+0x8a>
 8000608:	fbffffff 	.word	0xfbffffff
 800060c:	7dffffff 	.word	0x7dffffff

08000610 <__aeabi_fdiv>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	464f      	mov	r7, r9
 8000614:	4646      	mov	r6, r8
 8000616:	46d6      	mov	lr, sl
 8000618:	0245      	lsls	r5, r0, #9
 800061a:	b5c0      	push	{r6, r7, lr}
 800061c:	0047      	lsls	r7, r0, #1
 800061e:	1c0c      	adds	r4, r1, #0
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e3f      	lsrs	r7, r7, #24
 8000624:	0fc6      	lsrs	r6, r0, #31
 8000626:	2f00      	cmp	r7, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fdiv+0x1c>
 800062a:	e070      	b.n	800070e <__aeabi_fdiv+0xfe>
 800062c:	2fff      	cmp	r7, #255	; 0xff
 800062e:	d100      	bne.n	8000632 <__aeabi_fdiv+0x22>
 8000630:	e075      	b.n	800071e <__aeabi_fdiv+0x10e>
 8000632:	00eb      	lsls	r3, r5, #3
 8000634:	2580      	movs	r5, #128	; 0x80
 8000636:	04ed      	lsls	r5, r5, #19
 8000638:	431d      	orrs	r5, r3
 800063a:	2300      	movs	r3, #0
 800063c:	4699      	mov	r9, r3
 800063e:	469a      	mov	sl, r3
 8000640:	3f7f      	subs	r7, #127	; 0x7f
 8000642:	0260      	lsls	r0, r4, #9
 8000644:	0a43      	lsrs	r3, r0, #9
 8000646:	4698      	mov	r8, r3
 8000648:	0063      	lsls	r3, r4, #1
 800064a:	0e1b      	lsrs	r3, r3, #24
 800064c:	0fe4      	lsrs	r4, r4, #31
 800064e:	2b00      	cmp	r3, #0
 8000650:	d04e      	beq.n	80006f0 <__aeabi_fdiv+0xe0>
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	d046      	beq.n	80006e4 <__aeabi_fdiv+0xd4>
 8000656:	4642      	mov	r2, r8
 8000658:	00d0      	lsls	r0, r2, #3
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	04d2      	lsls	r2, r2, #19
 800065e:	4302      	orrs	r2, r0
 8000660:	4690      	mov	r8, r2
 8000662:	2200      	movs	r2, #0
 8000664:	3b7f      	subs	r3, #127	; 0x7f
 8000666:	0031      	movs	r1, r6
 8000668:	1aff      	subs	r7, r7, r3
 800066a:	464b      	mov	r3, r9
 800066c:	4061      	eors	r1, r4
 800066e:	b2c9      	uxtb	r1, r1
 8000670:	4313      	orrs	r3, r2
 8000672:	2b0f      	cmp	r3, #15
 8000674:	d900      	bls.n	8000678 <__aeabi_fdiv+0x68>
 8000676:	e0b5      	b.n	80007e4 <__aeabi_fdiv+0x1d4>
 8000678:	486e      	ldr	r0, [pc, #440]	; (8000834 <__aeabi_fdiv+0x224>)
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	58c3      	ldr	r3, [r0, r3]
 800067e:	469f      	mov	pc, r3
 8000680:	2300      	movs	r3, #0
 8000682:	4698      	mov	r8, r3
 8000684:	0026      	movs	r6, r4
 8000686:	4645      	mov	r5, r8
 8000688:	4692      	mov	sl, r2
 800068a:	4653      	mov	r3, sl
 800068c:	2b02      	cmp	r3, #2
 800068e:	d100      	bne.n	8000692 <__aeabi_fdiv+0x82>
 8000690:	e089      	b.n	80007a6 <__aeabi_fdiv+0x196>
 8000692:	2b03      	cmp	r3, #3
 8000694:	d100      	bne.n	8000698 <__aeabi_fdiv+0x88>
 8000696:	e09e      	b.n	80007d6 <__aeabi_fdiv+0x1c6>
 8000698:	2b01      	cmp	r3, #1
 800069a:	d018      	beq.n	80006ce <__aeabi_fdiv+0xbe>
 800069c:	003b      	movs	r3, r7
 800069e:	337f      	adds	r3, #127	; 0x7f
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	dd69      	ble.n	8000778 <__aeabi_fdiv+0x168>
 80006a4:	076a      	lsls	r2, r5, #29
 80006a6:	d004      	beq.n	80006b2 <__aeabi_fdiv+0xa2>
 80006a8:	220f      	movs	r2, #15
 80006aa:	402a      	ands	r2, r5
 80006ac:	2a04      	cmp	r2, #4
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fdiv+0xa2>
 80006b0:	3504      	adds	r5, #4
 80006b2:	012a      	lsls	r2, r5, #4
 80006b4:	d503      	bpl.n	80006be <__aeabi_fdiv+0xae>
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <__aeabi_fdiv+0x228>)
 80006b8:	401d      	ands	r5, r3
 80006ba:	003b      	movs	r3, r7
 80006bc:	3380      	adds	r3, #128	; 0x80
 80006be:	2bfe      	cmp	r3, #254	; 0xfe
 80006c0:	dd00      	ble.n	80006c4 <__aeabi_fdiv+0xb4>
 80006c2:	e070      	b.n	80007a6 <__aeabi_fdiv+0x196>
 80006c4:	01ad      	lsls	r5, r5, #6
 80006c6:	0a6d      	lsrs	r5, r5, #9
 80006c8:	b2d8      	uxtb	r0, r3
 80006ca:	e002      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 80006cc:	000e      	movs	r6, r1
 80006ce:	2000      	movs	r0, #0
 80006d0:	2500      	movs	r5, #0
 80006d2:	05c0      	lsls	r0, r0, #23
 80006d4:	4328      	orrs	r0, r5
 80006d6:	07f6      	lsls	r6, r6, #31
 80006d8:	4330      	orrs	r0, r6
 80006da:	bce0      	pop	{r5, r6, r7}
 80006dc:	46ba      	mov	sl, r7
 80006de:	46b1      	mov	r9, r6
 80006e0:	46a8      	mov	r8, r5
 80006e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e4:	4643      	mov	r3, r8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d13f      	bne.n	800076a <__aeabi_fdiv+0x15a>
 80006ea:	2202      	movs	r2, #2
 80006ec:	3fff      	subs	r7, #255	; 0xff
 80006ee:	e003      	b.n	80006f8 <__aeabi_fdiv+0xe8>
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d12d      	bne.n	8000752 <__aeabi_fdiv+0x142>
 80006f6:	2201      	movs	r2, #1
 80006f8:	0031      	movs	r1, r6
 80006fa:	464b      	mov	r3, r9
 80006fc:	4061      	eors	r1, r4
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4313      	orrs	r3, r2
 8000702:	2b0f      	cmp	r3, #15
 8000704:	d834      	bhi.n	8000770 <__aeabi_fdiv+0x160>
 8000706:	484d      	ldr	r0, [pc, #308]	; (800083c <__aeabi_fdiv+0x22c>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	58c3      	ldr	r3, [r0, r3]
 800070c:	469f      	mov	pc, r3
 800070e:	2d00      	cmp	r5, #0
 8000710:	d113      	bne.n	800073a <__aeabi_fdiv+0x12a>
 8000712:	2304      	movs	r3, #4
 8000714:	4699      	mov	r9, r3
 8000716:	3b03      	subs	r3, #3
 8000718:	2700      	movs	r7, #0
 800071a:	469a      	mov	sl, r3
 800071c:	e791      	b.n	8000642 <__aeabi_fdiv+0x32>
 800071e:	2d00      	cmp	r5, #0
 8000720:	d105      	bne.n	800072e <__aeabi_fdiv+0x11e>
 8000722:	2308      	movs	r3, #8
 8000724:	4699      	mov	r9, r3
 8000726:	3b06      	subs	r3, #6
 8000728:	27ff      	movs	r7, #255	; 0xff
 800072a:	469a      	mov	sl, r3
 800072c:	e789      	b.n	8000642 <__aeabi_fdiv+0x32>
 800072e:	230c      	movs	r3, #12
 8000730:	4699      	mov	r9, r3
 8000732:	3b09      	subs	r3, #9
 8000734:	27ff      	movs	r7, #255	; 0xff
 8000736:	469a      	mov	sl, r3
 8000738:	e783      	b.n	8000642 <__aeabi_fdiv+0x32>
 800073a:	0028      	movs	r0, r5
 800073c:	f001 feb4 	bl	80024a8 <__clzsi2>
 8000740:	2776      	movs	r7, #118	; 0x76
 8000742:	1f43      	subs	r3, r0, #5
 8000744:	409d      	lsls	r5, r3
 8000746:	2300      	movs	r3, #0
 8000748:	427f      	negs	r7, r7
 800074a:	4699      	mov	r9, r3
 800074c:	469a      	mov	sl, r3
 800074e:	1a3f      	subs	r7, r7, r0
 8000750:	e777      	b.n	8000642 <__aeabi_fdiv+0x32>
 8000752:	4640      	mov	r0, r8
 8000754:	f001 fea8 	bl	80024a8 <__clzsi2>
 8000758:	4642      	mov	r2, r8
 800075a:	1f43      	subs	r3, r0, #5
 800075c:	409a      	lsls	r2, r3
 800075e:	2376      	movs	r3, #118	; 0x76
 8000760:	425b      	negs	r3, r3
 8000762:	4690      	mov	r8, r2
 8000764:	1a1b      	subs	r3, r3, r0
 8000766:	2200      	movs	r2, #0
 8000768:	e77d      	b.n	8000666 <__aeabi_fdiv+0x56>
 800076a:	23ff      	movs	r3, #255	; 0xff
 800076c:	2203      	movs	r2, #3
 800076e:	e77a      	b.n	8000666 <__aeabi_fdiv+0x56>
 8000770:	000e      	movs	r6, r1
 8000772:	20ff      	movs	r0, #255	; 0xff
 8000774:	2500      	movs	r5, #0
 8000776:	e7ac      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 8000778:	2001      	movs	r0, #1
 800077a:	1ac0      	subs	r0, r0, r3
 800077c:	281b      	cmp	r0, #27
 800077e:	dca6      	bgt.n	80006ce <__aeabi_fdiv+0xbe>
 8000780:	379e      	adds	r7, #158	; 0x9e
 8000782:	002a      	movs	r2, r5
 8000784:	40bd      	lsls	r5, r7
 8000786:	40c2      	lsrs	r2, r0
 8000788:	1e6b      	subs	r3, r5, #1
 800078a:	419d      	sbcs	r5, r3
 800078c:	4315      	orrs	r5, r2
 800078e:	076b      	lsls	r3, r5, #29
 8000790:	d004      	beq.n	800079c <__aeabi_fdiv+0x18c>
 8000792:	230f      	movs	r3, #15
 8000794:	402b      	ands	r3, r5
 8000796:	2b04      	cmp	r3, #4
 8000798:	d000      	beq.n	800079c <__aeabi_fdiv+0x18c>
 800079a:	3504      	adds	r5, #4
 800079c:	016b      	lsls	r3, r5, #5
 800079e:	d544      	bpl.n	800082a <__aeabi_fdiv+0x21a>
 80007a0:	2001      	movs	r0, #1
 80007a2:	2500      	movs	r5, #0
 80007a4:	e795      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	2500      	movs	r5, #0
 80007aa:	e792      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 80007ac:	2580      	movs	r5, #128	; 0x80
 80007ae:	2600      	movs	r6, #0
 80007b0:	20ff      	movs	r0, #255	; 0xff
 80007b2:	03ed      	lsls	r5, r5, #15
 80007b4:	e78d      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 80007b6:	2300      	movs	r3, #0
 80007b8:	4698      	mov	r8, r3
 80007ba:	2080      	movs	r0, #128	; 0x80
 80007bc:	03c0      	lsls	r0, r0, #15
 80007be:	4205      	tst	r5, r0
 80007c0:	d009      	beq.n	80007d6 <__aeabi_fdiv+0x1c6>
 80007c2:	4643      	mov	r3, r8
 80007c4:	4203      	tst	r3, r0
 80007c6:	d106      	bne.n	80007d6 <__aeabi_fdiv+0x1c6>
 80007c8:	4645      	mov	r5, r8
 80007ca:	4305      	orrs	r5, r0
 80007cc:	026d      	lsls	r5, r5, #9
 80007ce:	0026      	movs	r6, r4
 80007d0:	20ff      	movs	r0, #255	; 0xff
 80007d2:	0a6d      	lsrs	r5, r5, #9
 80007d4:	e77d      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 80007d6:	2080      	movs	r0, #128	; 0x80
 80007d8:	03c0      	lsls	r0, r0, #15
 80007da:	4305      	orrs	r5, r0
 80007dc:	026d      	lsls	r5, r5, #9
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	0a6d      	lsrs	r5, r5, #9
 80007e2:	e776      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 80007e4:	4642      	mov	r2, r8
 80007e6:	016b      	lsls	r3, r5, #5
 80007e8:	0150      	lsls	r0, r2, #5
 80007ea:	4283      	cmp	r3, r0
 80007ec:	d219      	bcs.n	8000822 <__aeabi_fdiv+0x212>
 80007ee:	221b      	movs	r2, #27
 80007f0:	2500      	movs	r5, #0
 80007f2:	3f01      	subs	r7, #1
 80007f4:	2601      	movs	r6, #1
 80007f6:	001c      	movs	r4, r3
 80007f8:	006d      	lsls	r5, r5, #1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	db01      	blt.n	8000804 <__aeabi_fdiv+0x1f4>
 8000800:	4298      	cmp	r0, r3
 8000802:	d801      	bhi.n	8000808 <__aeabi_fdiv+0x1f8>
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	4335      	orrs	r5, r6
 8000808:	3a01      	subs	r2, #1
 800080a:	2a00      	cmp	r2, #0
 800080c:	d1f3      	bne.n	80007f6 <__aeabi_fdiv+0x1e6>
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	4193      	sbcs	r3, r2
 8000812:	431d      	orrs	r5, r3
 8000814:	003b      	movs	r3, r7
 8000816:	337f      	adds	r3, #127	; 0x7f
 8000818:	000e      	movs	r6, r1
 800081a:	2b00      	cmp	r3, #0
 800081c:	dd00      	ble.n	8000820 <__aeabi_fdiv+0x210>
 800081e:	e741      	b.n	80006a4 <__aeabi_fdiv+0x94>
 8000820:	e7aa      	b.n	8000778 <__aeabi_fdiv+0x168>
 8000822:	221a      	movs	r2, #26
 8000824:	2501      	movs	r5, #1
 8000826:	1a1b      	subs	r3, r3, r0
 8000828:	e7e4      	b.n	80007f4 <__aeabi_fdiv+0x1e4>
 800082a:	01ad      	lsls	r5, r5, #6
 800082c:	2000      	movs	r0, #0
 800082e:	0a6d      	lsrs	r5, r5, #9
 8000830:	e74f      	b.n	80006d2 <__aeabi_fdiv+0xc2>
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	08006f98 	.word	0x08006f98
 8000838:	f7ffffff 	.word	0xf7ffffff
 800083c:	08006fd8 	.word	0x08006fd8

08000840 <__aeabi_i2f>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	2800      	cmp	r0, #0
 8000844:	d013      	beq.n	800086e <__aeabi_i2f+0x2e>
 8000846:	17c3      	asrs	r3, r0, #31
 8000848:	18c6      	adds	r6, r0, r3
 800084a:	405e      	eors	r6, r3
 800084c:	0fc4      	lsrs	r4, r0, #31
 800084e:	0030      	movs	r0, r6
 8000850:	f001 fe2a 	bl	80024a8 <__clzsi2>
 8000854:	239e      	movs	r3, #158	; 0x9e
 8000856:	0005      	movs	r5, r0
 8000858:	1a1b      	subs	r3, r3, r0
 800085a:	2b96      	cmp	r3, #150	; 0x96
 800085c:	dc0f      	bgt.n	800087e <__aeabi_i2f+0x3e>
 800085e:	2808      	cmp	r0, #8
 8000860:	dd01      	ble.n	8000866 <__aeabi_i2f+0x26>
 8000862:	3d08      	subs	r5, #8
 8000864:	40ae      	lsls	r6, r5
 8000866:	0276      	lsls	r6, r6, #9
 8000868:	0a76      	lsrs	r6, r6, #9
 800086a:	b2d8      	uxtb	r0, r3
 800086c:	e002      	b.n	8000874 <__aeabi_i2f+0x34>
 800086e:	2400      	movs	r4, #0
 8000870:	2000      	movs	r0, #0
 8000872:	2600      	movs	r6, #0
 8000874:	05c0      	lsls	r0, r0, #23
 8000876:	4330      	orrs	r0, r6
 8000878:	07e4      	lsls	r4, r4, #31
 800087a:	4320      	orrs	r0, r4
 800087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800087e:	2b99      	cmp	r3, #153	; 0x99
 8000880:	dd0c      	ble.n	800089c <__aeabi_i2f+0x5c>
 8000882:	2205      	movs	r2, #5
 8000884:	0031      	movs	r1, r6
 8000886:	1a12      	subs	r2, r2, r0
 8000888:	40d1      	lsrs	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	0001      	movs	r1, r0
 800088e:	0030      	movs	r0, r6
 8000890:	311b      	adds	r1, #27
 8000892:	4088      	lsls	r0, r1
 8000894:	1e41      	subs	r1, r0, #1
 8000896:	4188      	sbcs	r0, r1
 8000898:	4302      	orrs	r2, r0
 800089a:	0016      	movs	r6, r2
 800089c:	2d05      	cmp	r5, #5
 800089e:	dc12      	bgt.n	80008c6 <__aeabi_i2f+0x86>
 80008a0:	0031      	movs	r1, r6
 80008a2:	4f0d      	ldr	r7, [pc, #52]	; (80008d8 <__aeabi_i2f+0x98>)
 80008a4:	4039      	ands	r1, r7
 80008a6:	0772      	lsls	r2, r6, #29
 80008a8:	d009      	beq.n	80008be <__aeabi_i2f+0x7e>
 80008aa:	200f      	movs	r0, #15
 80008ac:	4030      	ands	r0, r6
 80008ae:	2804      	cmp	r0, #4
 80008b0:	d005      	beq.n	80008be <__aeabi_i2f+0x7e>
 80008b2:	3104      	adds	r1, #4
 80008b4:	014a      	lsls	r2, r1, #5
 80008b6:	d502      	bpl.n	80008be <__aeabi_i2f+0x7e>
 80008b8:	239f      	movs	r3, #159	; 0x9f
 80008ba:	4039      	ands	r1, r7
 80008bc:	1b5b      	subs	r3, r3, r5
 80008be:	0189      	lsls	r1, r1, #6
 80008c0:	0a4e      	lsrs	r6, r1, #9
 80008c2:	b2d8      	uxtb	r0, r3
 80008c4:	e7d6      	b.n	8000874 <__aeabi_i2f+0x34>
 80008c6:	1f6a      	subs	r2, r5, #5
 80008c8:	4096      	lsls	r6, r2
 80008ca:	0031      	movs	r1, r6
 80008cc:	4f02      	ldr	r7, [pc, #8]	; (80008d8 <__aeabi_i2f+0x98>)
 80008ce:	4039      	ands	r1, r7
 80008d0:	0772      	lsls	r2, r6, #29
 80008d2:	d0f4      	beq.n	80008be <__aeabi_i2f+0x7e>
 80008d4:	e7e9      	b.n	80008aa <__aeabi_i2f+0x6a>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	fbffffff 	.word	0xfbffffff

080008dc <__aeabi_dadd>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	464f      	mov	r7, r9
 80008e0:	4646      	mov	r6, r8
 80008e2:	46d6      	mov	lr, sl
 80008e4:	000d      	movs	r5, r1
 80008e6:	0004      	movs	r4, r0
 80008e8:	b5c0      	push	{r6, r7, lr}
 80008ea:	001f      	movs	r7, r3
 80008ec:	0011      	movs	r1, r2
 80008ee:	0328      	lsls	r0, r5, #12
 80008f0:	0f62      	lsrs	r2, r4, #29
 80008f2:	0a40      	lsrs	r0, r0, #9
 80008f4:	4310      	orrs	r0, r2
 80008f6:	007a      	lsls	r2, r7, #1
 80008f8:	0d52      	lsrs	r2, r2, #21
 80008fa:	00e3      	lsls	r3, r4, #3
 80008fc:	033c      	lsls	r4, r7, #12
 80008fe:	4691      	mov	r9, r2
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	0ffa      	lsrs	r2, r7, #31
 8000904:	0f4f      	lsrs	r7, r1, #29
 8000906:	006e      	lsls	r6, r5, #1
 8000908:	4327      	orrs	r7, r4
 800090a:	4692      	mov	sl, r2
 800090c:	46b8      	mov	r8, r7
 800090e:	0d76      	lsrs	r6, r6, #21
 8000910:	0fed      	lsrs	r5, r5, #31
 8000912:	00c9      	lsls	r1, r1, #3
 8000914:	4295      	cmp	r5, r2
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x3e>
 8000918:	e099      	b.n	8000a4e <__aeabi_dadd+0x172>
 800091a:	464c      	mov	r4, r9
 800091c:	1b34      	subs	r4, r6, r4
 800091e:	46a4      	mov	ip, r4
 8000920:	2c00      	cmp	r4, #0
 8000922:	dc00      	bgt.n	8000926 <__aeabi_dadd+0x4a>
 8000924:	e07c      	b.n	8000a20 <__aeabi_dadd+0x144>
 8000926:	464a      	mov	r2, r9
 8000928:	2a00      	cmp	r2, #0
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x52>
 800092c:	e0b8      	b.n	8000aa0 <__aeabi_dadd+0x1c4>
 800092e:	4ac5      	ldr	r2, [pc, #788]	; (8000c44 <__aeabi_dadd+0x368>)
 8000930:	4296      	cmp	r6, r2
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x5a>
 8000934:	e11c      	b.n	8000b70 <__aeabi_dadd+0x294>
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	003c      	movs	r4, r7
 800093a:	0412      	lsls	r2, r2, #16
 800093c:	4314      	orrs	r4, r2
 800093e:	46a0      	mov	r8, r4
 8000940:	4662      	mov	r2, ip
 8000942:	2a38      	cmp	r2, #56	; 0x38
 8000944:	dd00      	ble.n	8000948 <__aeabi_dadd+0x6c>
 8000946:	e161      	b.n	8000c0c <__aeabi_dadd+0x330>
 8000948:	2a1f      	cmp	r2, #31
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x72>
 800094c:	e1cc      	b.n	8000ce8 <__aeabi_dadd+0x40c>
 800094e:	4664      	mov	r4, ip
 8000950:	2220      	movs	r2, #32
 8000952:	1b12      	subs	r2, r2, r4
 8000954:	4644      	mov	r4, r8
 8000956:	4094      	lsls	r4, r2
 8000958:	000f      	movs	r7, r1
 800095a:	46a1      	mov	r9, r4
 800095c:	4664      	mov	r4, ip
 800095e:	4091      	lsls	r1, r2
 8000960:	40e7      	lsrs	r7, r4
 8000962:	464c      	mov	r4, r9
 8000964:	1e4a      	subs	r2, r1, #1
 8000966:	4191      	sbcs	r1, r2
 8000968:	433c      	orrs	r4, r7
 800096a:	4642      	mov	r2, r8
 800096c:	4321      	orrs	r1, r4
 800096e:	4664      	mov	r4, ip
 8000970:	40e2      	lsrs	r2, r4
 8000972:	1a80      	subs	r0, r0, r2
 8000974:	1a5c      	subs	r4, r3, r1
 8000976:	42a3      	cmp	r3, r4
 8000978:	419b      	sbcs	r3, r3
 800097a:	425f      	negs	r7, r3
 800097c:	1bc7      	subs	r7, r0, r7
 800097e:	023b      	lsls	r3, r7, #8
 8000980:	d400      	bmi.n	8000984 <__aeabi_dadd+0xa8>
 8000982:	e0d0      	b.n	8000b26 <__aeabi_dadd+0x24a>
 8000984:	027f      	lsls	r7, r7, #9
 8000986:	0a7f      	lsrs	r7, r7, #9
 8000988:	2f00      	cmp	r7, #0
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0xb2>
 800098c:	e0ff      	b.n	8000b8e <__aeabi_dadd+0x2b2>
 800098e:	0038      	movs	r0, r7
 8000990:	f001 fd8a 	bl	80024a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3908      	subs	r1, #8
 8000998:	2320      	movs	r3, #32
 800099a:	0022      	movs	r2, r4
 800099c:	1a5b      	subs	r3, r3, r1
 800099e:	408f      	lsls	r7, r1
 80009a0:	40da      	lsrs	r2, r3
 80009a2:	408c      	lsls	r4, r1
 80009a4:	4317      	orrs	r7, r2
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	da00      	bge.n	80009ac <__aeabi_dadd+0xd0>
 80009aa:	e0ff      	b.n	8000bac <__aeabi_dadd+0x2d0>
 80009ac:	1b89      	subs	r1, r1, r6
 80009ae:	1c4b      	adds	r3, r1, #1
 80009b0:	2b1f      	cmp	r3, #31
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dadd+0xda>
 80009b4:	e0a8      	b.n	8000b08 <__aeabi_dadd+0x22c>
 80009b6:	2220      	movs	r2, #32
 80009b8:	0039      	movs	r1, r7
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	0020      	movs	r0, r4
 80009be:	4094      	lsls	r4, r2
 80009c0:	4091      	lsls	r1, r2
 80009c2:	40d8      	lsrs	r0, r3
 80009c4:	1e62      	subs	r2, r4, #1
 80009c6:	4194      	sbcs	r4, r2
 80009c8:	40df      	lsrs	r7, r3
 80009ca:	2600      	movs	r6, #0
 80009cc:	4301      	orrs	r1, r0
 80009ce:	430c      	orrs	r4, r1
 80009d0:	0763      	lsls	r3, r4, #29
 80009d2:	d009      	beq.n	80009e8 <__aeabi_dadd+0x10c>
 80009d4:	230f      	movs	r3, #15
 80009d6:	4023      	ands	r3, r4
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d005      	beq.n	80009e8 <__aeabi_dadd+0x10c>
 80009dc:	1d23      	adds	r3, r4, #4
 80009de:	42a3      	cmp	r3, r4
 80009e0:	41a4      	sbcs	r4, r4
 80009e2:	4264      	negs	r4, r4
 80009e4:	193f      	adds	r7, r7, r4
 80009e6:	001c      	movs	r4, r3
 80009e8:	023b      	lsls	r3, r7, #8
 80009ea:	d400      	bmi.n	80009ee <__aeabi_dadd+0x112>
 80009ec:	e09e      	b.n	8000b2c <__aeabi_dadd+0x250>
 80009ee:	4b95      	ldr	r3, [pc, #596]	; (8000c44 <__aeabi_dadd+0x368>)
 80009f0:	3601      	adds	r6, #1
 80009f2:	429e      	cmp	r6, r3
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x11c>
 80009f6:	e0b7      	b.n	8000b68 <__aeabi_dadd+0x28c>
 80009f8:	4a93      	ldr	r2, [pc, #588]	; (8000c48 <__aeabi_dadd+0x36c>)
 80009fa:	08e4      	lsrs	r4, r4, #3
 80009fc:	4017      	ands	r7, r2
 80009fe:	077b      	lsls	r3, r7, #29
 8000a00:	0571      	lsls	r1, r6, #21
 8000a02:	027f      	lsls	r7, r7, #9
 8000a04:	4323      	orrs	r3, r4
 8000a06:	0b3f      	lsrs	r7, r7, #12
 8000a08:	0d4a      	lsrs	r2, r1, #21
 8000a0a:	0512      	lsls	r2, r2, #20
 8000a0c:	433a      	orrs	r2, r7
 8000a0e:	07ed      	lsls	r5, r5, #31
 8000a10:	432a      	orrs	r2, r5
 8000a12:	0018      	movs	r0, r3
 8000a14:	0011      	movs	r1, r2
 8000a16:	bce0      	pop	{r5, r6, r7}
 8000a18:	46ba      	mov	sl, r7
 8000a1a:	46b1      	mov	r9, r6
 8000a1c:	46a8      	mov	r8, r5
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	d04b      	beq.n	8000abc <__aeabi_dadd+0x1e0>
 8000a24:	464c      	mov	r4, r9
 8000a26:	1ba4      	subs	r4, r4, r6
 8000a28:	46a4      	mov	ip, r4
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x154>
 8000a2e:	e123      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000a30:	0004      	movs	r4, r0
 8000a32:	431c      	orrs	r4, r3
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dadd+0x15c>
 8000a36:	e1af      	b.n	8000d98 <__aeabi_dadd+0x4bc>
 8000a38:	4662      	mov	r2, ip
 8000a3a:	1e54      	subs	r4, r2, #1
 8000a3c:	2a01      	cmp	r2, #1
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x166>
 8000a40:	e215      	b.n	8000e6e <__aeabi_dadd+0x592>
 8000a42:	4d80      	ldr	r5, [pc, #512]	; (8000c44 <__aeabi_dadd+0x368>)
 8000a44:	45ac      	cmp	ip, r5
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x16e>
 8000a48:	e1c8      	b.n	8000ddc <__aeabi_dadd+0x500>
 8000a4a:	46a4      	mov	ip, r4
 8000a4c:	e11b      	b.n	8000c86 <__aeabi_dadd+0x3aa>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1ab2      	subs	r2, r6, r2
 8000a52:	4694      	mov	ip, r2
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	dc00      	bgt.n	8000a5a <__aeabi_dadd+0x17e>
 8000a58:	e0ac      	b.n	8000bb4 <__aeabi_dadd+0x2d8>
 8000a5a:	464a      	mov	r2, r9
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	d043      	beq.n	8000ae8 <__aeabi_dadd+0x20c>
 8000a60:	4a78      	ldr	r2, [pc, #480]	; (8000c44 <__aeabi_dadd+0x368>)
 8000a62:	4296      	cmp	r6, r2
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x18c>
 8000a66:	e1af      	b.n	8000dc8 <__aeabi_dadd+0x4ec>
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	003c      	movs	r4, r7
 8000a6c:	0412      	lsls	r2, r2, #16
 8000a6e:	4314      	orrs	r4, r2
 8000a70:	46a0      	mov	r8, r4
 8000a72:	4662      	mov	r2, ip
 8000a74:	2a38      	cmp	r2, #56	; 0x38
 8000a76:	dc67      	bgt.n	8000b48 <__aeabi_dadd+0x26c>
 8000a78:	2a1f      	cmp	r2, #31
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_dadd+0x1a2>
 8000a7c:	e15f      	b.n	8000d3e <__aeabi_dadd+0x462>
 8000a7e:	4647      	mov	r7, r8
 8000a80:	3a20      	subs	r2, #32
 8000a82:	40d7      	lsrs	r7, r2
 8000a84:	4662      	mov	r2, ip
 8000a86:	2a20      	cmp	r2, #32
 8000a88:	d005      	beq.n	8000a96 <__aeabi_dadd+0x1ba>
 8000a8a:	4664      	mov	r4, ip
 8000a8c:	2240      	movs	r2, #64	; 0x40
 8000a8e:	1b12      	subs	r2, r2, r4
 8000a90:	4644      	mov	r4, r8
 8000a92:	4094      	lsls	r4, r2
 8000a94:	4321      	orrs	r1, r4
 8000a96:	1e4a      	subs	r2, r1, #1
 8000a98:	4191      	sbcs	r1, r2
 8000a9a:	000c      	movs	r4, r1
 8000a9c:	433c      	orrs	r4, r7
 8000a9e:	e057      	b.n	8000b50 <__aeabi_dadd+0x274>
 8000aa0:	003a      	movs	r2, r7
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x1cc>
 8000aa6:	e105      	b.n	8000cb4 <__aeabi_dadd+0x3d8>
 8000aa8:	0022      	movs	r2, r4
 8000aaa:	3a01      	subs	r2, #1
 8000aac:	2c01      	cmp	r4, #1
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x1d6>
 8000ab0:	e182      	b.n	8000db8 <__aeabi_dadd+0x4dc>
 8000ab2:	4c64      	ldr	r4, [pc, #400]	; (8000c44 <__aeabi_dadd+0x368>)
 8000ab4:	45a4      	cmp	ip, r4
 8000ab6:	d05b      	beq.n	8000b70 <__aeabi_dadd+0x294>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	e741      	b.n	8000940 <__aeabi_dadd+0x64>
 8000abc:	4c63      	ldr	r4, [pc, #396]	; (8000c4c <__aeabi_dadd+0x370>)
 8000abe:	1c77      	adds	r7, r6, #1
 8000ac0:	4227      	tst	r7, r4
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dadd+0x1ea>
 8000ac4:	e0c4      	b.n	8000c50 <__aeabi_dadd+0x374>
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x1f4>
 8000ace:	e169      	b.n	8000da4 <__aeabi_dadd+0x4c8>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x1fa>
 8000ad4:	e1bf      	b.n	8000e56 <__aeabi_dadd+0x57a>
 8000ad6:	4644      	mov	r4, r8
 8000ad8:	430c      	orrs	r4, r1
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x202>
 8000adc:	e1d0      	b.n	8000e80 <__aeabi_dadd+0x5a4>
 8000ade:	0742      	lsls	r2, r0, #29
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	08c0      	lsrs	r0, r0, #3
 8000ae6:	e029      	b.n	8000b3c <__aeabi_dadd+0x260>
 8000ae8:	003a      	movs	r2, r7
 8000aea:	430a      	orrs	r2, r1
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x214>
 8000aee:	e170      	b.n	8000dd2 <__aeabi_dadd+0x4f6>
 8000af0:	4662      	mov	r2, ip
 8000af2:	4664      	mov	r4, ip
 8000af4:	3a01      	subs	r2, #1
 8000af6:	2c01      	cmp	r4, #1
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x220>
 8000afa:	e0e0      	b.n	8000cbe <__aeabi_dadd+0x3e2>
 8000afc:	4c51      	ldr	r4, [pc, #324]	; (8000c44 <__aeabi_dadd+0x368>)
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dadd+0x228>
 8000b02:	e161      	b.n	8000dc8 <__aeabi_dadd+0x4ec>
 8000b04:	4694      	mov	ip, r2
 8000b06:	e7b4      	b.n	8000a72 <__aeabi_dadd+0x196>
 8000b08:	003a      	movs	r2, r7
 8000b0a:	391f      	subs	r1, #31
 8000b0c:	40ca      	lsrs	r2, r1
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2b20      	cmp	r3, #32
 8000b12:	d003      	beq.n	8000b1c <__aeabi_dadd+0x240>
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	409f      	lsls	r7, r3
 8000b1a:	433c      	orrs	r4, r7
 8000b1c:	1e63      	subs	r3, r4, #1
 8000b1e:	419c      	sbcs	r4, r3
 8000b20:	2700      	movs	r7, #0
 8000b22:	2600      	movs	r6, #0
 8000b24:	430c      	orrs	r4, r1
 8000b26:	0763      	lsls	r3, r4, #29
 8000b28:	d000      	beq.n	8000b2c <__aeabi_dadd+0x250>
 8000b2a:	e753      	b.n	80009d4 <__aeabi_dadd+0xf8>
 8000b2c:	46b4      	mov	ip, r6
 8000b2e:	08e4      	lsrs	r4, r4, #3
 8000b30:	077b      	lsls	r3, r7, #29
 8000b32:	4323      	orrs	r3, r4
 8000b34:	08f8      	lsrs	r0, r7, #3
 8000b36:	4a43      	ldr	r2, [pc, #268]	; (8000c44 <__aeabi_dadd+0x368>)
 8000b38:	4594      	cmp	ip, r2
 8000b3a:	d01d      	beq.n	8000b78 <__aeabi_dadd+0x29c>
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	0307      	lsls	r7, r0, #12
 8000b40:	0552      	lsls	r2, r2, #21
 8000b42:	0b3f      	lsrs	r7, r7, #12
 8000b44:	0d52      	lsrs	r2, r2, #21
 8000b46:	e760      	b.n	8000a0a <__aeabi_dadd+0x12e>
 8000b48:	4644      	mov	r4, r8
 8000b4a:	430c      	orrs	r4, r1
 8000b4c:	1e62      	subs	r2, r4, #1
 8000b4e:	4194      	sbcs	r4, r2
 8000b50:	18e4      	adds	r4, r4, r3
 8000b52:	429c      	cmp	r4, r3
 8000b54:	419b      	sbcs	r3, r3
 8000b56:	425f      	negs	r7, r3
 8000b58:	183f      	adds	r7, r7, r0
 8000b5a:	023b      	lsls	r3, r7, #8
 8000b5c:	d5e3      	bpl.n	8000b26 <__aeabi_dadd+0x24a>
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <__aeabi_dadd+0x368>)
 8000b60:	3601      	adds	r6, #1
 8000b62:	429e      	cmp	r6, r3
 8000b64:	d000      	beq.n	8000b68 <__aeabi_dadd+0x28c>
 8000b66:	e0b5      	b.n	8000cd4 <__aeabi_dadd+0x3f8>
 8000b68:	0032      	movs	r2, r6
 8000b6a:	2700      	movs	r7, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e74c      	b.n	8000a0a <__aeabi_dadd+0x12e>
 8000b70:	0742      	lsls	r2, r0, #29
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	08c0      	lsrs	r0, r0, #3
 8000b78:	001a      	movs	r2, r3
 8000b7a:	4302      	orrs	r2, r0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x2a4>
 8000b7e:	e1e1      	b.n	8000f44 <__aeabi_dadd+0x668>
 8000b80:	2780      	movs	r7, #128	; 0x80
 8000b82:	033f      	lsls	r7, r7, #12
 8000b84:	4307      	orrs	r7, r0
 8000b86:	033f      	lsls	r7, r7, #12
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <__aeabi_dadd+0x368>)
 8000b8a:	0b3f      	lsrs	r7, r7, #12
 8000b8c:	e73d      	b.n	8000a0a <__aeabi_dadd+0x12e>
 8000b8e:	0020      	movs	r0, r4
 8000b90:	f001 fc8a 	bl	80024a8 <__clzsi2>
 8000b94:	0001      	movs	r1, r0
 8000b96:	3118      	adds	r1, #24
 8000b98:	291f      	cmp	r1, #31
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dadd+0x2c2>
 8000b9c:	e6fc      	b.n	8000998 <__aeabi_dadd+0xbc>
 8000b9e:	3808      	subs	r0, #8
 8000ba0:	4084      	lsls	r4, r0
 8000ba2:	0027      	movs	r7, r4
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	42b1      	cmp	r1, r6
 8000ba8:	db00      	blt.n	8000bac <__aeabi_dadd+0x2d0>
 8000baa:	e6ff      	b.n	80009ac <__aeabi_dadd+0xd0>
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <__aeabi_dadd+0x36c>)
 8000bae:	1a76      	subs	r6, r6, r1
 8000bb0:	4017      	ands	r7, r2
 8000bb2:	e70d      	b.n	80009d0 <__aeabi_dadd+0xf4>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d02f      	beq.n	8000c18 <__aeabi_dadd+0x33c>
 8000bb8:	464a      	mov	r2, r9
 8000bba:	1b92      	subs	r2, r2, r6
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x2e8>
 8000bc2:	e0ad      	b.n	8000d20 <__aeabi_dadd+0x444>
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <__aeabi_dadd+0x368>)
 8000bc6:	4591      	cmp	r9, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x2f0>
 8000bca:	e10f      	b.n	8000dec <__aeabi_dadd+0x510>
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	0412      	lsls	r2, r2, #16
 8000bd0:	4310      	orrs	r0, r2
 8000bd2:	4662      	mov	r2, ip
 8000bd4:	2a38      	cmp	r2, #56	; 0x38
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dadd+0x2fe>
 8000bd8:	e10f      	b.n	8000dfa <__aeabi_dadd+0x51e>
 8000bda:	2a1f      	cmp	r2, #31
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_dadd+0x304>
 8000bde:	e180      	b.n	8000ee2 <__aeabi_dadd+0x606>
 8000be0:	4664      	mov	r4, ip
 8000be2:	2220      	movs	r2, #32
 8000be4:	001e      	movs	r6, r3
 8000be6:	1b12      	subs	r2, r2, r4
 8000be8:	4667      	mov	r7, ip
 8000bea:	0004      	movs	r4, r0
 8000bec:	4093      	lsls	r3, r2
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	40fe      	lsrs	r6, r7
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	4193      	sbcs	r3, r2
 8000bf6:	40f8      	lsrs	r0, r7
 8000bf8:	4334      	orrs	r4, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	4480      	add	r8, r0
 8000bfe:	1864      	adds	r4, r4, r1
 8000c00:	428c      	cmp	r4, r1
 8000c02:	41bf      	sbcs	r7, r7
 8000c04:	427f      	negs	r7, r7
 8000c06:	464e      	mov	r6, r9
 8000c08:	4447      	add	r7, r8
 8000c0a:	e7a6      	b.n	8000b5a <__aeabi_dadd+0x27e>
 8000c0c:	4642      	mov	r2, r8
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	0011      	movs	r1, r2
 8000c12:	1e4a      	subs	r2, r1, #1
 8000c14:	4191      	sbcs	r1, r2
 8000c16:	e6ad      	b.n	8000974 <__aeabi_dadd+0x98>
 8000c18:	4c0c      	ldr	r4, [pc, #48]	; (8000c4c <__aeabi_dadd+0x370>)
 8000c1a:	1c72      	adds	r2, r6, #1
 8000c1c:	4222      	tst	r2, r4
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_dadd+0x346>
 8000c20:	e0a1      	b.n	8000d66 <__aeabi_dadd+0x48a>
 8000c22:	0002      	movs	r2, r0
 8000c24:	431a      	orrs	r2, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d000      	beq.n	8000c2c <__aeabi_dadd+0x350>
 8000c2a:	e0fa      	b.n	8000e22 <__aeabi_dadd+0x546>
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x356>
 8000c30:	e145      	b.n	8000ebe <__aeabi_dadd+0x5e2>
 8000c32:	003a      	movs	r2, r7
 8000c34:	430a      	orrs	r2, r1
 8000c36:	d000      	beq.n	8000c3a <__aeabi_dadd+0x35e>
 8000c38:	e146      	b.n	8000ec8 <__aeabi_dadd+0x5ec>
 8000c3a:	0742      	lsls	r2, r0, #29
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	08c0      	lsrs	r0, r0, #3
 8000c42:	e77b      	b.n	8000b3c <__aeabi_dadd+0x260>
 8000c44:	000007ff 	.word	0x000007ff
 8000c48:	ff7fffff 	.word	0xff7fffff
 8000c4c:	000007fe 	.word	0x000007fe
 8000c50:	4647      	mov	r7, r8
 8000c52:	1a5c      	subs	r4, r3, r1
 8000c54:	1bc2      	subs	r2, r0, r7
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	41bf      	sbcs	r7, r7
 8000c5a:	427f      	negs	r7, r7
 8000c5c:	46b9      	mov	r9, r7
 8000c5e:	0017      	movs	r7, r2
 8000c60:	464a      	mov	r2, r9
 8000c62:	1abf      	subs	r7, r7, r2
 8000c64:	023a      	lsls	r2, r7, #8
 8000c66:	d500      	bpl.n	8000c6a <__aeabi_dadd+0x38e>
 8000c68:	e08d      	b.n	8000d86 <__aeabi_dadd+0x4aa>
 8000c6a:	0023      	movs	r3, r4
 8000c6c:	433b      	orrs	r3, r7
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_dadd+0x396>
 8000c70:	e68a      	b.n	8000988 <__aeabi_dadd+0xac>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2500      	movs	r5, #0
 8000c76:	e761      	b.n	8000b3c <__aeabi_dadd+0x260>
 8000c78:	4cb4      	ldr	r4, [pc, #720]	; (8000f4c <__aeabi_dadd+0x670>)
 8000c7a:	45a1      	cmp	r9, r4
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x3a4>
 8000c7e:	e0ad      	b.n	8000ddc <__aeabi_dadd+0x500>
 8000c80:	2480      	movs	r4, #128	; 0x80
 8000c82:	0424      	lsls	r4, r4, #16
 8000c84:	4320      	orrs	r0, r4
 8000c86:	4664      	mov	r4, ip
 8000c88:	2c38      	cmp	r4, #56	; 0x38
 8000c8a:	dc3d      	bgt.n	8000d08 <__aeabi_dadd+0x42c>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2c1f      	cmp	r4, #31
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_dadd+0x3b8>
 8000c92:	e0b7      	b.n	8000e04 <__aeabi_dadd+0x528>
 8000c94:	2520      	movs	r5, #32
 8000c96:	001e      	movs	r6, r3
 8000c98:	1b2d      	subs	r5, r5, r4
 8000c9a:	0004      	movs	r4, r0
 8000c9c:	40ab      	lsls	r3, r5
 8000c9e:	40ac      	lsls	r4, r5
 8000ca0:	40d6      	lsrs	r6, r2
 8000ca2:	40d0      	lsrs	r0, r2
 8000ca4:	4642      	mov	r2, r8
 8000ca6:	1e5d      	subs	r5, r3, #1
 8000ca8:	41ab      	sbcs	r3, r5
 8000caa:	4334      	orrs	r4, r6
 8000cac:	1a12      	subs	r2, r2, r0
 8000cae:	4690      	mov	r8, r2
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	e02c      	b.n	8000d0e <__aeabi_dadd+0x432>
 8000cb4:	0742      	lsls	r2, r0, #29
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e73b      	b.n	8000b36 <__aeabi_dadd+0x25a>
 8000cbe:	185c      	adds	r4, r3, r1
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	4440      	add	r0, r8
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	18c7      	adds	r7, r0, r3
 8000cca:	2601      	movs	r6, #1
 8000ccc:	023b      	lsls	r3, r7, #8
 8000cce:	d400      	bmi.n	8000cd2 <__aeabi_dadd+0x3f6>
 8000cd0:	e729      	b.n	8000b26 <__aeabi_dadd+0x24a>
 8000cd2:	2602      	movs	r6, #2
 8000cd4:	4a9e      	ldr	r2, [pc, #632]	; (8000f50 <__aeabi_dadd+0x674>)
 8000cd6:	0863      	lsrs	r3, r4, #1
 8000cd8:	4017      	ands	r7, r2
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4014      	ands	r4, r2
 8000cde:	431c      	orrs	r4, r3
 8000ce0:	07fb      	lsls	r3, r7, #31
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	087f      	lsrs	r7, r7, #1
 8000ce6:	e673      	b.n	80009d0 <__aeabi_dadd+0xf4>
 8000ce8:	4644      	mov	r4, r8
 8000cea:	3a20      	subs	r2, #32
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	4662      	mov	r2, ip
 8000cf0:	2a20      	cmp	r2, #32
 8000cf2:	d005      	beq.n	8000d00 <__aeabi_dadd+0x424>
 8000cf4:	4667      	mov	r7, ip
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	1bd2      	subs	r2, r2, r7
 8000cfa:	4647      	mov	r7, r8
 8000cfc:	4097      	lsls	r7, r2
 8000cfe:	4339      	orrs	r1, r7
 8000d00:	1e4a      	subs	r2, r1, #1
 8000d02:	4191      	sbcs	r1, r2
 8000d04:	4321      	orrs	r1, r4
 8000d06:	e635      	b.n	8000974 <__aeabi_dadd+0x98>
 8000d08:	4303      	orrs	r3, r0
 8000d0a:	1e58      	subs	r0, r3, #1
 8000d0c:	4183      	sbcs	r3, r0
 8000d0e:	1acc      	subs	r4, r1, r3
 8000d10:	42a1      	cmp	r1, r4
 8000d12:	41bf      	sbcs	r7, r7
 8000d14:	4643      	mov	r3, r8
 8000d16:	427f      	negs	r7, r7
 8000d18:	4655      	mov	r5, sl
 8000d1a:	464e      	mov	r6, r9
 8000d1c:	1bdf      	subs	r7, r3, r7
 8000d1e:	e62e      	b.n	800097e <__aeabi_dadd+0xa2>
 8000d20:	0002      	movs	r2, r0
 8000d22:	431a      	orrs	r2, r3
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dadd+0x44c>
 8000d26:	e0bd      	b.n	8000ea4 <__aeabi_dadd+0x5c8>
 8000d28:	4662      	mov	r2, ip
 8000d2a:	4664      	mov	r4, ip
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	2c01      	cmp	r4, #1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x458>
 8000d32:	e0e5      	b.n	8000f00 <__aeabi_dadd+0x624>
 8000d34:	4c85      	ldr	r4, [pc, #532]	; (8000f4c <__aeabi_dadd+0x670>)
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d058      	beq.n	8000dec <__aeabi_dadd+0x510>
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	e749      	b.n	8000bd2 <__aeabi_dadd+0x2f6>
 8000d3e:	4664      	mov	r4, ip
 8000d40:	2220      	movs	r2, #32
 8000d42:	1b12      	subs	r2, r2, r4
 8000d44:	4644      	mov	r4, r8
 8000d46:	4094      	lsls	r4, r2
 8000d48:	000f      	movs	r7, r1
 8000d4a:	46a1      	mov	r9, r4
 8000d4c:	4664      	mov	r4, ip
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	40e7      	lsrs	r7, r4
 8000d52:	464c      	mov	r4, r9
 8000d54:	1e4a      	subs	r2, r1, #1
 8000d56:	4191      	sbcs	r1, r2
 8000d58:	433c      	orrs	r4, r7
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	430c      	orrs	r4, r1
 8000d5e:	4661      	mov	r1, ip
 8000d60:	40ca      	lsrs	r2, r1
 8000d62:	1880      	adds	r0, r0, r2
 8000d64:	e6f4      	b.n	8000b50 <__aeabi_dadd+0x274>
 8000d66:	4c79      	ldr	r4, [pc, #484]	; (8000f4c <__aeabi_dadd+0x670>)
 8000d68:	42a2      	cmp	r2, r4
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x492>
 8000d6c:	e6fd      	b.n	8000b6a <__aeabi_dadd+0x28e>
 8000d6e:	1859      	adds	r1, r3, r1
 8000d70:	4299      	cmp	r1, r3
 8000d72:	419b      	sbcs	r3, r3
 8000d74:	4440      	add	r0, r8
 8000d76:	425f      	negs	r7, r3
 8000d78:	19c7      	adds	r7, r0, r7
 8000d7a:	07fc      	lsls	r4, r7, #31
 8000d7c:	0849      	lsrs	r1, r1, #1
 8000d7e:	0016      	movs	r6, r2
 8000d80:	430c      	orrs	r4, r1
 8000d82:	087f      	lsrs	r7, r7, #1
 8000d84:	e6cf      	b.n	8000b26 <__aeabi_dadd+0x24a>
 8000d86:	1acc      	subs	r4, r1, r3
 8000d88:	42a1      	cmp	r1, r4
 8000d8a:	41bf      	sbcs	r7, r7
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	427f      	negs	r7, r7
 8000d90:	1a18      	subs	r0, r3, r0
 8000d92:	4655      	mov	r5, sl
 8000d94:	1bc7      	subs	r7, r0, r7
 8000d96:	e5f7      	b.n	8000988 <__aeabi_dadd+0xac>
 8000d98:	08c9      	lsrs	r1, r1, #3
 8000d9a:	077b      	lsls	r3, r7, #29
 8000d9c:	4655      	mov	r5, sl
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	08f8      	lsrs	r0, r7, #3
 8000da2:	e6c8      	b.n	8000b36 <__aeabi_dadd+0x25a>
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d000      	beq.n	8000daa <__aeabi_dadd+0x4ce>
 8000da8:	e081      	b.n	8000eae <__aeabi_dadd+0x5d2>
 8000daa:	4643      	mov	r3, r8
 8000dac:	430b      	orrs	r3, r1
 8000dae:	d115      	bne.n	8000ddc <__aeabi_dadd+0x500>
 8000db0:	2080      	movs	r0, #128	; 0x80
 8000db2:	2500      	movs	r5, #0
 8000db4:	0300      	lsls	r0, r0, #12
 8000db6:	e6e3      	b.n	8000b80 <__aeabi_dadd+0x2a4>
 8000db8:	1a5c      	subs	r4, r3, r1
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	419b      	sbcs	r3, r3
 8000dbe:	1bc7      	subs	r7, r0, r7
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	2601      	movs	r6, #1
 8000dc4:	1aff      	subs	r7, r7, r3
 8000dc6:	e5da      	b.n	800097e <__aeabi_dadd+0xa2>
 8000dc8:	0742      	lsls	r2, r0, #29
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c0      	lsrs	r0, r0, #3
 8000dd0:	e6d2      	b.n	8000b78 <__aeabi_dadd+0x29c>
 8000dd2:	0742      	lsls	r2, r0, #29
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	e6ac      	b.n	8000b36 <__aeabi_dadd+0x25a>
 8000ddc:	4643      	mov	r3, r8
 8000dde:	4642      	mov	r2, r8
 8000de0:	08c9      	lsrs	r1, r1, #3
 8000de2:	075b      	lsls	r3, r3, #29
 8000de4:	4655      	mov	r5, sl
 8000de6:	430b      	orrs	r3, r1
 8000de8:	08d0      	lsrs	r0, r2, #3
 8000dea:	e6c5      	b.n	8000b78 <__aeabi_dadd+0x29c>
 8000dec:	4643      	mov	r3, r8
 8000dee:	4642      	mov	r2, r8
 8000df0:	075b      	lsls	r3, r3, #29
 8000df2:	08c9      	lsrs	r1, r1, #3
 8000df4:	430b      	orrs	r3, r1
 8000df6:	08d0      	lsrs	r0, r2, #3
 8000df8:	e6be      	b.n	8000b78 <__aeabi_dadd+0x29c>
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	001c      	movs	r4, r3
 8000dfe:	1e63      	subs	r3, r4, #1
 8000e00:	419c      	sbcs	r4, r3
 8000e02:	e6fc      	b.n	8000bfe <__aeabi_dadd+0x322>
 8000e04:	0002      	movs	r2, r0
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e2      	lsrs	r2, r4
 8000e0a:	0014      	movs	r4, r2
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	2a20      	cmp	r2, #32
 8000e10:	d003      	beq.n	8000e1a <__aeabi_dadd+0x53e>
 8000e12:	2540      	movs	r5, #64	; 0x40
 8000e14:	1aad      	subs	r5, r5, r2
 8000e16:	40a8      	lsls	r0, r5
 8000e18:	4303      	orrs	r3, r0
 8000e1a:	1e58      	subs	r0, r3, #1
 8000e1c:	4183      	sbcs	r3, r0
 8000e1e:	4323      	orrs	r3, r4
 8000e20:	e775      	b.n	8000d0e <__aeabi_dadd+0x432>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d0e2      	beq.n	8000dec <__aeabi_dadd+0x510>
 8000e26:	003a      	movs	r2, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	d0cd      	beq.n	8000dc8 <__aeabi_dadd+0x4ec>
 8000e2c:	0742      	lsls	r2, r0, #29
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	08c0      	lsrs	r0, r0, #3
 8000e36:	0312      	lsls	r2, r2, #12
 8000e38:	4210      	tst	r0, r2
 8000e3a:	d006      	beq.n	8000e4a <__aeabi_dadd+0x56e>
 8000e3c:	08fc      	lsrs	r4, r7, #3
 8000e3e:	4214      	tst	r4, r2
 8000e40:	d103      	bne.n	8000e4a <__aeabi_dadd+0x56e>
 8000e42:	0020      	movs	r0, r4
 8000e44:	08cb      	lsrs	r3, r1, #3
 8000e46:	077a      	lsls	r2, r7, #29
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	0f5a      	lsrs	r2, r3, #29
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	0752      	lsls	r2, r2, #29
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	e690      	b.n	8000b78 <__aeabi_dadd+0x29c>
 8000e56:	4643      	mov	r3, r8
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dadd+0x582>
 8000e5c:	e709      	b.n	8000c72 <__aeabi_dadd+0x396>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	4642      	mov	r2, r8
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	075b      	lsls	r3, r3, #29
 8000e66:	4655      	mov	r5, sl
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	08d0      	lsrs	r0, r2, #3
 8000e6c:	e666      	b.n	8000b3c <__aeabi_dadd+0x260>
 8000e6e:	1acc      	subs	r4, r1, r3
 8000e70:	42a1      	cmp	r1, r4
 8000e72:	4189      	sbcs	r1, r1
 8000e74:	1a3f      	subs	r7, r7, r0
 8000e76:	4249      	negs	r1, r1
 8000e78:	4655      	mov	r5, sl
 8000e7a:	2601      	movs	r6, #1
 8000e7c:	1a7f      	subs	r7, r7, r1
 8000e7e:	e57e      	b.n	800097e <__aeabi_dadd+0xa2>
 8000e80:	4642      	mov	r2, r8
 8000e82:	1a5c      	subs	r4, r3, r1
 8000e84:	1a87      	subs	r7, r0, r2
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	4192      	sbcs	r2, r2
 8000e8a:	4252      	negs	r2, r2
 8000e8c:	1abf      	subs	r7, r7, r2
 8000e8e:	023a      	lsls	r2, r7, #8
 8000e90:	d53d      	bpl.n	8000f0e <__aeabi_dadd+0x632>
 8000e92:	1acc      	subs	r4, r1, r3
 8000e94:	42a1      	cmp	r1, r4
 8000e96:	4189      	sbcs	r1, r1
 8000e98:	4643      	mov	r3, r8
 8000e9a:	4249      	negs	r1, r1
 8000e9c:	1a1f      	subs	r7, r3, r0
 8000e9e:	4655      	mov	r5, sl
 8000ea0:	1a7f      	subs	r7, r7, r1
 8000ea2:	e595      	b.n	80009d0 <__aeabi_dadd+0xf4>
 8000ea4:	077b      	lsls	r3, r7, #29
 8000ea6:	08c9      	lsrs	r1, r1, #3
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	08f8      	lsrs	r0, r7, #3
 8000eac:	e643      	b.n	8000b36 <__aeabi_dadd+0x25a>
 8000eae:	4644      	mov	r4, r8
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	430c      	orrs	r4, r1
 8000eb4:	d130      	bne.n	8000f18 <__aeabi_dadd+0x63c>
 8000eb6:	0742      	lsls	r2, r0, #29
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	08c0      	lsrs	r0, r0, #3
 8000ebc:	e65c      	b.n	8000b78 <__aeabi_dadd+0x29c>
 8000ebe:	077b      	lsls	r3, r7, #29
 8000ec0:	08c9      	lsrs	r1, r1, #3
 8000ec2:	430b      	orrs	r3, r1
 8000ec4:	08f8      	lsrs	r0, r7, #3
 8000ec6:	e639      	b.n	8000b3c <__aeabi_dadd+0x260>
 8000ec8:	185c      	adds	r4, r3, r1
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	419b      	sbcs	r3, r3
 8000ece:	4440      	add	r0, r8
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	18c7      	adds	r7, r0, r3
 8000ed4:	023b      	lsls	r3, r7, #8
 8000ed6:	d400      	bmi.n	8000eda <__aeabi_dadd+0x5fe>
 8000ed8:	e625      	b.n	8000b26 <__aeabi_dadd+0x24a>
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <__aeabi_dadd+0x674>)
 8000edc:	2601      	movs	r6, #1
 8000ede:	401f      	ands	r7, r3
 8000ee0:	e621      	b.n	8000b26 <__aeabi_dadd+0x24a>
 8000ee2:	0004      	movs	r4, r0
 8000ee4:	3a20      	subs	r2, #32
 8000ee6:	40d4      	lsrs	r4, r2
 8000ee8:	4662      	mov	r2, ip
 8000eea:	2a20      	cmp	r2, #32
 8000eec:	d004      	beq.n	8000ef8 <__aeabi_dadd+0x61c>
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	4666      	mov	r6, ip
 8000ef2:	1b92      	subs	r2, r2, r6
 8000ef4:	4090      	lsls	r0, r2
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	4193      	sbcs	r3, r2
 8000efc:	431c      	orrs	r4, r3
 8000efe:	e67e      	b.n	8000bfe <__aeabi_dadd+0x322>
 8000f00:	185c      	adds	r4, r3, r1
 8000f02:	428c      	cmp	r4, r1
 8000f04:	4189      	sbcs	r1, r1
 8000f06:	4440      	add	r0, r8
 8000f08:	4249      	negs	r1, r1
 8000f0a:	1847      	adds	r7, r0, r1
 8000f0c:	e6dd      	b.n	8000cca <__aeabi_dadd+0x3ee>
 8000f0e:	0023      	movs	r3, r4
 8000f10:	433b      	orrs	r3, r7
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dadd+0x63a>
 8000f14:	e6ad      	b.n	8000c72 <__aeabi_dadd+0x396>
 8000f16:	e606      	b.n	8000b26 <__aeabi_dadd+0x24a>
 8000f18:	0744      	lsls	r4, r0, #29
 8000f1a:	4323      	orrs	r3, r4
 8000f1c:	2480      	movs	r4, #128	; 0x80
 8000f1e:	08c0      	lsrs	r0, r0, #3
 8000f20:	0324      	lsls	r4, r4, #12
 8000f22:	4220      	tst	r0, r4
 8000f24:	d008      	beq.n	8000f38 <__aeabi_dadd+0x65c>
 8000f26:	4642      	mov	r2, r8
 8000f28:	08d6      	lsrs	r6, r2, #3
 8000f2a:	4226      	tst	r6, r4
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_dadd+0x65c>
 8000f2e:	4655      	mov	r5, sl
 8000f30:	0030      	movs	r0, r6
 8000f32:	08cb      	lsrs	r3, r1, #3
 8000f34:	0751      	lsls	r1, r2, #29
 8000f36:	430b      	orrs	r3, r1
 8000f38:	0f5a      	lsrs	r2, r3, #29
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	0752      	lsls	r2, r2, #29
 8000f40:	4313      	orrs	r3, r2
 8000f42:	e619      	b.n	8000b78 <__aeabi_dadd+0x29c>
 8000f44:	2300      	movs	r3, #0
 8000f46:	4a01      	ldr	r2, [pc, #4]	; (8000f4c <__aeabi_dadd+0x670>)
 8000f48:	001f      	movs	r7, r3
 8000f4a:	e55e      	b.n	8000a0a <__aeabi_dadd+0x12e>
 8000f4c:	000007ff 	.word	0x000007ff
 8000f50:	ff7fffff 	.word	0xff7fffff

08000f54 <__aeabi_ddiv>:
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	4657      	mov	r7, sl
 8000f58:	464e      	mov	r6, r9
 8000f5a:	4645      	mov	r5, r8
 8000f5c:	46de      	mov	lr, fp
 8000f5e:	b5e0      	push	{r5, r6, r7, lr}
 8000f60:	4681      	mov	r9, r0
 8000f62:	0005      	movs	r5, r0
 8000f64:	030c      	lsls	r4, r1, #12
 8000f66:	0048      	lsls	r0, r1, #1
 8000f68:	4692      	mov	sl, r2
 8000f6a:	001f      	movs	r7, r3
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	0b24      	lsrs	r4, r4, #12
 8000f70:	0d40      	lsrs	r0, r0, #21
 8000f72:	0fce      	lsrs	r6, r1, #31
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x26>
 8000f78:	e156      	b.n	8001228 <__aeabi_ddiv+0x2d4>
 8000f7a:	4bd4      	ldr	r3, [pc, #848]	; (80012cc <__aeabi_ddiv+0x378>)
 8000f7c:	4298      	cmp	r0, r3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x2e>
 8000f80:	e172      	b.n	8001268 <__aeabi_ddiv+0x314>
 8000f82:	0f6b      	lsrs	r3, r5, #29
 8000f84:	00e4      	lsls	r4, r4, #3
 8000f86:	431c      	orrs	r4, r3
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	4323      	orrs	r3, r4
 8000f8e:	4698      	mov	r8, r3
 8000f90:	4bcf      	ldr	r3, [pc, #828]	; (80012d0 <__aeabi_ddiv+0x37c>)
 8000f92:	00ed      	lsls	r5, r5, #3
 8000f94:	469b      	mov	fp, r3
 8000f96:	2300      	movs	r3, #0
 8000f98:	4699      	mov	r9, r3
 8000f9a:	4483      	add	fp, r0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	033c      	lsls	r4, r7, #12
 8000fa0:	007b      	lsls	r3, r7, #1
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	0b24      	lsrs	r4, r4, #12
 8000fa6:	0d5b      	lsrs	r3, r3, #21
 8000fa8:	0fff      	lsrs	r7, r7, #31
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_ddiv+0x5c>
 8000fae:	e11f      	b.n	80011f0 <__aeabi_ddiv+0x29c>
 8000fb0:	4ac6      	ldr	r2, [pc, #792]	; (80012cc <__aeabi_ddiv+0x378>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0x64>
 8000fb6:	e162      	b.n	800127e <__aeabi_ddiv+0x32a>
 8000fb8:	49c5      	ldr	r1, [pc, #788]	; (80012d0 <__aeabi_ddiv+0x37c>)
 8000fba:	0f42      	lsrs	r2, r0, #29
 8000fbc:	468c      	mov	ip, r1
 8000fbe:	00e4      	lsls	r4, r4, #3
 8000fc0:	4659      	mov	r1, fp
 8000fc2:	4314      	orrs	r4, r2
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	4463      	add	r3, ip
 8000fc8:	0412      	lsls	r2, r2, #16
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	4314      	orrs	r4, r2
 8000fce:	469b      	mov	fp, r3
 8000fd0:	00c2      	lsls	r2, r0, #3
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	0033      	movs	r3, r6
 8000fd6:	407b      	eors	r3, r7
 8000fd8:	469a      	mov	sl, r3
 8000fda:	464b      	mov	r3, r9
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d827      	bhi.n	8001030 <__aeabi_ddiv+0xdc>
 8000fe0:	49bc      	ldr	r1, [pc, #752]	; (80012d4 <__aeabi_ddiv+0x380>)
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	58cb      	ldr	r3, [r1, r3]
 8000fe6:	469f      	mov	pc, r3
 8000fe8:	46b2      	mov	sl, r6
 8000fea:	9b00      	ldr	r3, [sp, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d016      	beq.n	800101e <__aeabi_ddiv+0xca>
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0xa2>
 8000ff4:	e28e      	b.n	8001514 <__aeabi_ddiv+0x5c0>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_ddiv+0xa8>
 8000ffa:	e0d9      	b.n	80011b0 <__aeabi_ddiv+0x25c>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2400      	movs	r4, #0
 8001000:	2500      	movs	r5, #0
 8001002:	4652      	mov	r2, sl
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	4323      	orrs	r3, r4
 8001008:	07d2      	lsls	r2, r2, #31
 800100a:	4313      	orrs	r3, r2
 800100c:	0028      	movs	r0, r5
 800100e:	0019      	movs	r1, r3
 8001010:	b005      	add	sp, #20
 8001012:	bcf0      	pop	{r4, r5, r6, r7}
 8001014:	46bb      	mov	fp, r7
 8001016:	46b2      	mov	sl, r6
 8001018:	46a9      	mov	r9, r5
 800101a:	46a0      	mov	r8, r4
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101e:	2400      	movs	r4, #0
 8001020:	2500      	movs	r5, #0
 8001022:	4baa      	ldr	r3, [pc, #680]	; (80012cc <__aeabi_ddiv+0x378>)
 8001024:	e7ed      	b.n	8001002 <__aeabi_ddiv+0xae>
 8001026:	46ba      	mov	sl, r7
 8001028:	46a0      	mov	r8, r4
 800102a:	0015      	movs	r5, r2
 800102c:	9000      	str	r0, [sp, #0]
 800102e:	e7dc      	b.n	8000fea <__aeabi_ddiv+0x96>
 8001030:	4544      	cmp	r4, r8
 8001032:	d200      	bcs.n	8001036 <__aeabi_ddiv+0xe2>
 8001034:	e1c7      	b.n	80013c6 <__aeabi_ddiv+0x472>
 8001036:	d100      	bne.n	800103a <__aeabi_ddiv+0xe6>
 8001038:	e1c2      	b.n	80013c0 <__aeabi_ddiv+0x46c>
 800103a:	2301      	movs	r3, #1
 800103c:	425b      	negs	r3, r3
 800103e:	469c      	mov	ip, r3
 8001040:	002e      	movs	r6, r5
 8001042:	4640      	mov	r0, r8
 8001044:	2500      	movs	r5, #0
 8001046:	44e3      	add	fp, ip
 8001048:	0223      	lsls	r3, r4, #8
 800104a:	0e14      	lsrs	r4, r2, #24
 800104c:	431c      	orrs	r4, r3
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	4699      	mov	r9, r3
 8001052:	0423      	lsls	r3, r4, #16
 8001054:	0c1f      	lsrs	r7, r3, #16
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	4649      	mov	r1, r9
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	9701      	str	r7, [sp, #4]
 800105e:	f7ff f8d7 	bl	8000210 <__aeabi_uidivmod>
 8001062:	0002      	movs	r2, r0
 8001064:	437a      	muls	r2, r7
 8001066:	040b      	lsls	r3, r1, #16
 8001068:	0c31      	lsrs	r1, r6, #16
 800106a:	4680      	mov	r8, r0
 800106c:	4319      	orrs	r1, r3
 800106e:	428a      	cmp	r2, r1
 8001070:	d907      	bls.n	8001082 <__aeabi_ddiv+0x12e>
 8001072:	2301      	movs	r3, #1
 8001074:	425b      	negs	r3, r3
 8001076:	469c      	mov	ip, r3
 8001078:	1909      	adds	r1, r1, r4
 800107a:	44e0      	add	r8, ip
 800107c:	428c      	cmp	r4, r1
 800107e:	d800      	bhi.n	8001082 <__aeabi_ddiv+0x12e>
 8001080:	e207      	b.n	8001492 <__aeabi_ddiv+0x53e>
 8001082:	1a88      	subs	r0, r1, r2
 8001084:	4649      	mov	r1, r9
 8001086:	f7ff f8c3 	bl	8000210 <__aeabi_uidivmod>
 800108a:	0409      	lsls	r1, r1, #16
 800108c:	468c      	mov	ip, r1
 800108e:	0431      	lsls	r1, r6, #16
 8001090:	4666      	mov	r6, ip
 8001092:	9a01      	ldr	r2, [sp, #4]
 8001094:	0c09      	lsrs	r1, r1, #16
 8001096:	4342      	muls	r2, r0
 8001098:	0003      	movs	r3, r0
 800109a:	4331      	orrs	r1, r6
 800109c:	428a      	cmp	r2, r1
 800109e:	d904      	bls.n	80010aa <__aeabi_ddiv+0x156>
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	3b01      	subs	r3, #1
 80010a4:	428c      	cmp	r4, r1
 80010a6:	d800      	bhi.n	80010aa <__aeabi_ddiv+0x156>
 80010a8:	e1ed      	b.n	8001486 <__aeabi_ddiv+0x532>
 80010aa:	1a88      	subs	r0, r1, r2
 80010ac:	4642      	mov	r2, r8
 80010ae:	0412      	lsls	r2, r2, #16
 80010b0:	431a      	orrs	r2, r3
 80010b2:	4690      	mov	r8, r2
 80010b4:	4641      	mov	r1, r8
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	040e      	lsls	r6, r1, #16
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	001f      	movs	r7, r3
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	9b00      	ldr	r3, [sp, #0]
 80010c2:	0c36      	lsrs	r6, r6, #16
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	0c19      	lsrs	r1, r3, #16
 80010c8:	000b      	movs	r3, r1
 80010ca:	4373      	muls	r3, r6
 80010cc:	0c12      	lsrs	r2, r2, #16
 80010ce:	437e      	muls	r6, r7
 80010d0:	9103      	str	r1, [sp, #12]
 80010d2:	4351      	muls	r1, r2
 80010d4:	437a      	muls	r2, r7
 80010d6:	0c1f      	lsrs	r7, r3, #16
 80010d8:	46bc      	mov	ip, r7
 80010da:	1876      	adds	r6, r6, r1
 80010dc:	4466      	add	r6, ip
 80010de:	42b1      	cmp	r1, r6
 80010e0:	d903      	bls.n	80010ea <__aeabi_ddiv+0x196>
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0249      	lsls	r1, r1, #9
 80010e6:	468c      	mov	ip, r1
 80010e8:	4462      	add	r2, ip
 80010ea:	0c31      	lsrs	r1, r6, #16
 80010ec:	188a      	adds	r2, r1, r2
 80010ee:	0431      	lsls	r1, r6, #16
 80010f0:	041e      	lsls	r6, r3, #16
 80010f2:	0c36      	lsrs	r6, r6, #16
 80010f4:	198e      	adds	r6, r1, r6
 80010f6:	4290      	cmp	r0, r2
 80010f8:	d302      	bcc.n	8001100 <__aeabi_ddiv+0x1ac>
 80010fa:	d112      	bne.n	8001122 <__aeabi_ddiv+0x1ce>
 80010fc:	42b5      	cmp	r5, r6
 80010fe:	d210      	bcs.n	8001122 <__aeabi_ddiv+0x1ce>
 8001100:	4643      	mov	r3, r8
 8001102:	1e59      	subs	r1, r3, #1
 8001104:	9b00      	ldr	r3, [sp, #0]
 8001106:	469c      	mov	ip, r3
 8001108:	4465      	add	r5, ip
 800110a:	001f      	movs	r7, r3
 800110c:	429d      	cmp	r5, r3
 800110e:	419b      	sbcs	r3, r3
 8001110:	425b      	negs	r3, r3
 8001112:	191b      	adds	r3, r3, r4
 8001114:	18c0      	adds	r0, r0, r3
 8001116:	4284      	cmp	r4, r0
 8001118:	d200      	bcs.n	800111c <__aeabi_ddiv+0x1c8>
 800111a:	e1a0      	b.n	800145e <__aeabi_ddiv+0x50a>
 800111c:	d100      	bne.n	8001120 <__aeabi_ddiv+0x1cc>
 800111e:	e19b      	b.n	8001458 <__aeabi_ddiv+0x504>
 8001120:	4688      	mov	r8, r1
 8001122:	1bae      	subs	r6, r5, r6
 8001124:	42b5      	cmp	r5, r6
 8001126:	41ad      	sbcs	r5, r5
 8001128:	1a80      	subs	r0, r0, r2
 800112a:	426d      	negs	r5, r5
 800112c:	1b40      	subs	r0, r0, r5
 800112e:	4284      	cmp	r4, r0
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x1e0>
 8001132:	e1d5      	b.n	80014e0 <__aeabi_ddiv+0x58c>
 8001134:	4649      	mov	r1, r9
 8001136:	f7ff f86b 	bl	8000210 <__aeabi_uidivmod>
 800113a:	9a01      	ldr	r2, [sp, #4]
 800113c:	040b      	lsls	r3, r1, #16
 800113e:	4342      	muls	r2, r0
 8001140:	0c31      	lsrs	r1, r6, #16
 8001142:	0005      	movs	r5, r0
 8001144:	4319      	orrs	r1, r3
 8001146:	428a      	cmp	r2, r1
 8001148:	d900      	bls.n	800114c <__aeabi_ddiv+0x1f8>
 800114a:	e16c      	b.n	8001426 <__aeabi_ddiv+0x4d2>
 800114c:	1a88      	subs	r0, r1, r2
 800114e:	4649      	mov	r1, r9
 8001150:	f7ff f85e 	bl	8000210 <__aeabi_uidivmod>
 8001154:	9a01      	ldr	r2, [sp, #4]
 8001156:	0436      	lsls	r6, r6, #16
 8001158:	4342      	muls	r2, r0
 800115a:	0409      	lsls	r1, r1, #16
 800115c:	0c36      	lsrs	r6, r6, #16
 800115e:	0003      	movs	r3, r0
 8001160:	430e      	orrs	r6, r1
 8001162:	42b2      	cmp	r2, r6
 8001164:	d900      	bls.n	8001168 <__aeabi_ddiv+0x214>
 8001166:	e153      	b.n	8001410 <__aeabi_ddiv+0x4bc>
 8001168:	9803      	ldr	r0, [sp, #12]
 800116a:	1ab6      	subs	r6, r6, r2
 800116c:	0002      	movs	r2, r0
 800116e:	042d      	lsls	r5, r5, #16
 8001170:	431d      	orrs	r5, r3
 8001172:	9f02      	ldr	r7, [sp, #8]
 8001174:	042b      	lsls	r3, r5, #16
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	435a      	muls	r2, r3
 800117a:	437b      	muls	r3, r7
 800117c:	469c      	mov	ip, r3
 800117e:	0c29      	lsrs	r1, r5, #16
 8001180:	4348      	muls	r0, r1
 8001182:	0c13      	lsrs	r3, r2, #16
 8001184:	4484      	add	ip, r0
 8001186:	4463      	add	r3, ip
 8001188:	4379      	muls	r1, r7
 800118a:	4298      	cmp	r0, r3
 800118c:	d903      	bls.n	8001196 <__aeabi_ddiv+0x242>
 800118e:	2080      	movs	r0, #128	; 0x80
 8001190:	0240      	lsls	r0, r0, #9
 8001192:	4684      	mov	ip, r0
 8001194:	4461      	add	r1, ip
 8001196:	0c18      	lsrs	r0, r3, #16
 8001198:	0412      	lsls	r2, r2, #16
 800119a:	041b      	lsls	r3, r3, #16
 800119c:	0c12      	lsrs	r2, r2, #16
 800119e:	1841      	adds	r1, r0, r1
 80011a0:	189b      	adds	r3, r3, r2
 80011a2:	428e      	cmp	r6, r1
 80011a4:	d200      	bcs.n	80011a8 <__aeabi_ddiv+0x254>
 80011a6:	e0ff      	b.n	80013a8 <__aeabi_ddiv+0x454>
 80011a8:	d100      	bne.n	80011ac <__aeabi_ddiv+0x258>
 80011aa:	e0fa      	b.n	80013a2 <__aeabi_ddiv+0x44e>
 80011ac:	2301      	movs	r3, #1
 80011ae:	431d      	orrs	r5, r3
 80011b0:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <__aeabi_ddiv+0x384>)
 80011b2:	445a      	add	r2, fp
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_ddiv+0x266>
 80011b8:	e0aa      	b.n	8001310 <__aeabi_ddiv+0x3bc>
 80011ba:	076b      	lsls	r3, r5, #29
 80011bc:	d000      	beq.n	80011c0 <__aeabi_ddiv+0x26c>
 80011be:	e13d      	b.n	800143c <__aeabi_ddiv+0x4e8>
 80011c0:	08ed      	lsrs	r5, r5, #3
 80011c2:	4643      	mov	r3, r8
 80011c4:	01db      	lsls	r3, r3, #7
 80011c6:	d506      	bpl.n	80011d6 <__aeabi_ddiv+0x282>
 80011c8:	4642      	mov	r2, r8
 80011ca:	4b44      	ldr	r3, [pc, #272]	; (80012dc <__aeabi_ddiv+0x388>)
 80011cc:	401a      	ands	r2, r3
 80011ce:	4690      	mov	r8, r2
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	445a      	add	r2, fp
 80011d6:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <__aeabi_ddiv+0x38c>)
 80011d8:	429a      	cmp	r2, r3
 80011da:	dd00      	ble.n	80011de <__aeabi_ddiv+0x28a>
 80011dc:	e71f      	b.n	800101e <__aeabi_ddiv+0xca>
 80011de:	4643      	mov	r3, r8
 80011e0:	075b      	lsls	r3, r3, #29
 80011e2:	431d      	orrs	r5, r3
 80011e4:	4643      	mov	r3, r8
 80011e6:	0552      	lsls	r2, r2, #21
 80011e8:	025c      	lsls	r4, r3, #9
 80011ea:	0b24      	lsrs	r4, r4, #12
 80011ec:	0d53      	lsrs	r3, r2, #21
 80011ee:	e708      	b.n	8001002 <__aeabi_ddiv+0xae>
 80011f0:	4652      	mov	r2, sl
 80011f2:	4322      	orrs	r2, r4
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x2a4>
 80011f6:	e07b      	b.n	80012f0 <__aeabi_ddiv+0x39c>
 80011f8:	2c00      	cmp	r4, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x2aa>
 80011fc:	e0fa      	b.n	80013f4 <__aeabi_ddiv+0x4a0>
 80011fe:	0020      	movs	r0, r4
 8001200:	f001 f952 	bl	80024a8 <__clzsi2>
 8001204:	0002      	movs	r2, r0
 8001206:	3a0b      	subs	r2, #11
 8001208:	231d      	movs	r3, #29
 800120a:	0001      	movs	r1, r0
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	4652      	mov	r2, sl
 8001210:	3908      	subs	r1, #8
 8001212:	40da      	lsrs	r2, r3
 8001214:	408c      	lsls	r4, r1
 8001216:	4314      	orrs	r4, r2
 8001218:	4652      	mov	r2, sl
 800121a:	408a      	lsls	r2, r1
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <__aeabi_ddiv+0x390>)
 800121e:	4458      	add	r0, fp
 8001220:	469b      	mov	fp, r3
 8001222:	4483      	add	fp, r0
 8001224:	2000      	movs	r0, #0
 8001226:	e6d5      	b.n	8000fd4 <__aeabi_ddiv+0x80>
 8001228:	464b      	mov	r3, r9
 800122a:	4323      	orrs	r3, r4
 800122c:	4698      	mov	r8, r3
 800122e:	d044      	beq.n	80012ba <__aeabi_ddiv+0x366>
 8001230:	2c00      	cmp	r4, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x2e2>
 8001234:	e0ce      	b.n	80013d4 <__aeabi_ddiv+0x480>
 8001236:	0020      	movs	r0, r4
 8001238:	f001 f936 	bl	80024a8 <__clzsi2>
 800123c:	0001      	movs	r1, r0
 800123e:	0002      	movs	r2, r0
 8001240:	390b      	subs	r1, #11
 8001242:	231d      	movs	r3, #29
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	4649      	mov	r1, r9
 8001248:	0010      	movs	r0, r2
 800124a:	40d9      	lsrs	r1, r3
 800124c:	3808      	subs	r0, #8
 800124e:	4084      	lsls	r4, r0
 8001250:	000b      	movs	r3, r1
 8001252:	464d      	mov	r5, r9
 8001254:	4323      	orrs	r3, r4
 8001256:	4698      	mov	r8, r3
 8001258:	4085      	lsls	r5, r0
 800125a:	4823      	ldr	r0, [pc, #140]	; (80012e8 <__aeabi_ddiv+0x394>)
 800125c:	1a83      	subs	r3, r0, r2
 800125e:	469b      	mov	fp, r3
 8001260:	2300      	movs	r3, #0
 8001262:	4699      	mov	r9, r3
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	e69a      	b.n	8000f9e <__aeabi_ddiv+0x4a>
 8001268:	464b      	mov	r3, r9
 800126a:	4323      	orrs	r3, r4
 800126c:	4698      	mov	r8, r3
 800126e:	d11d      	bne.n	80012ac <__aeabi_ddiv+0x358>
 8001270:	2308      	movs	r3, #8
 8001272:	4699      	mov	r9, r3
 8001274:	3b06      	subs	r3, #6
 8001276:	2500      	movs	r5, #0
 8001278:	4683      	mov	fp, r0
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	e68f      	b.n	8000f9e <__aeabi_ddiv+0x4a>
 800127e:	4652      	mov	r2, sl
 8001280:	4322      	orrs	r2, r4
 8001282:	d109      	bne.n	8001298 <__aeabi_ddiv+0x344>
 8001284:	2302      	movs	r3, #2
 8001286:	4649      	mov	r1, r9
 8001288:	4319      	orrs	r1, r3
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <__aeabi_ddiv+0x398>)
 800128c:	4689      	mov	r9, r1
 800128e:	469c      	mov	ip, r3
 8001290:	2400      	movs	r4, #0
 8001292:	2002      	movs	r0, #2
 8001294:	44e3      	add	fp, ip
 8001296:	e69d      	b.n	8000fd4 <__aeabi_ddiv+0x80>
 8001298:	2303      	movs	r3, #3
 800129a:	464a      	mov	r2, r9
 800129c:	431a      	orrs	r2, r3
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <__aeabi_ddiv+0x398>)
 80012a0:	4691      	mov	r9, r2
 80012a2:	469c      	mov	ip, r3
 80012a4:	4652      	mov	r2, sl
 80012a6:	2003      	movs	r0, #3
 80012a8:	44e3      	add	fp, ip
 80012aa:	e693      	b.n	8000fd4 <__aeabi_ddiv+0x80>
 80012ac:	230c      	movs	r3, #12
 80012ae:	4699      	mov	r9, r3
 80012b0:	3b09      	subs	r3, #9
 80012b2:	46a0      	mov	r8, r4
 80012b4:	4683      	mov	fp, r0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	e671      	b.n	8000f9e <__aeabi_ddiv+0x4a>
 80012ba:	2304      	movs	r3, #4
 80012bc:	4699      	mov	r9, r3
 80012be:	2300      	movs	r3, #0
 80012c0:	469b      	mov	fp, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	2500      	movs	r5, #0
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	e669      	b.n	8000f9e <__aeabi_ddiv+0x4a>
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	000007ff 	.word	0x000007ff
 80012d0:	fffffc01 	.word	0xfffffc01
 80012d4:	08007018 	.word	0x08007018
 80012d8:	000003ff 	.word	0x000003ff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	000007fe 	.word	0x000007fe
 80012e4:	000003f3 	.word	0x000003f3
 80012e8:	fffffc0d 	.word	0xfffffc0d
 80012ec:	fffff801 	.word	0xfffff801
 80012f0:	4649      	mov	r1, r9
 80012f2:	2301      	movs	r3, #1
 80012f4:	4319      	orrs	r1, r3
 80012f6:	4689      	mov	r9, r1
 80012f8:	2400      	movs	r4, #0
 80012fa:	2001      	movs	r0, #1
 80012fc:	e66a      	b.n	8000fd4 <__aeabi_ddiv+0x80>
 80012fe:	2300      	movs	r3, #0
 8001300:	2480      	movs	r4, #128	; 0x80
 8001302:	469a      	mov	sl, r3
 8001304:	2500      	movs	r5, #0
 8001306:	4b8a      	ldr	r3, [pc, #552]	; (8001530 <__aeabi_ddiv+0x5dc>)
 8001308:	0324      	lsls	r4, r4, #12
 800130a:	e67a      	b.n	8001002 <__aeabi_ddiv+0xae>
 800130c:	2501      	movs	r5, #1
 800130e:	426d      	negs	r5, r5
 8001310:	2301      	movs	r3, #1
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	2b38      	cmp	r3, #56	; 0x38
 8001316:	dd00      	ble.n	800131a <__aeabi_ddiv+0x3c6>
 8001318:	e670      	b.n	8000ffc <__aeabi_ddiv+0xa8>
 800131a:	2b1f      	cmp	r3, #31
 800131c:	dc00      	bgt.n	8001320 <__aeabi_ddiv+0x3cc>
 800131e:	e0bf      	b.n	80014a0 <__aeabi_ddiv+0x54c>
 8001320:	211f      	movs	r1, #31
 8001322:	4249      	negs	r1, r1
 8001324:	1a8a      	subs	r2, r1, r2
 8001326:	4641      	mov	r1, r8
 8001328:	40d1      	lsrs	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	2b20      	cmp	r3, #32
 800132e:	d004      	beq.n	800133a <__aeabi_ddiv+0x3e6>
 8001330:	4641      	mov	r1, r8
 8001332:	4b80      	ldr	r3, [pc, #512]	; (8001534 <__aeabi_ddiv+0x5e0>)
 8001334:	445b      	add	r3, fp
 8001336:	4099      	lsls	r1, r3
 8001338:	430d      	orrs	r5, r1
 800133a:	1e6b      	subs	r3, r5, #1
 800133c:	419d      	sbcs	r5, r3
 800133e:	2307      	movs	r3, #7
 8001340:	432a      	orrs	r2, r5
 8001342:	001d      	movs	r5, r3
 8001344:	2400      	movs	r4, #0
 8001346:	4015      	ands	r5, r2
 8001348:	4213      	tst	r3, r2
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x3fa>
 800134c:	e0d4      	b.n	80014f8 <__aeabi_ddiv+0x5a4>
 800134e:	210f      	movs	r1, #15
 8001350:	2300      	movs	r3, #0
 8001352:	4011      	ands	r1, r2
 8001354:	2904      	cmp	r1, #4
 8001356:	d100      	bne.n	800135a <__aeabi_ddiv+0x406>
 8001358:	e0cb      	b.n	80014f2 <__aeabi_ddiv+0x59e>
 800135a:	1d11      	adds	r1, r2, #4
 800135c:	4291      	cmp	r1, r2
 800135e:	4192      	sbcs	r2, r2
 8001360:	4252      	negs	r2, r2
 8001362:	189b      	adds	r3, r3, r2
 8001364:	000a      	movs	r2, r1
 8001366:	0219      	lsls	r1, r3, #8
 8001368:	d400      	bmi.n	800136c <__aeabi_ddiv+0x418>
 800136a:	e0c2      	b.n	80014f2 <__aeabi_ddiv+0x59e>
 800136c:	2301      	movs	r3, #1
 800136e:	2400      	movs	r4, #0
 8001370:	2500      	movs	r5, #0
 8001372:	e646      	b.n	8001002 <__aeabi_ddiv+0xae>
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	4641      	mov	r1, r8
 8001378:	031b      	lsls	r3, r3, #12
 800137a:	4219      	tst	r1, r3
 800137c:	d008      	beq.n	8001390 <__aeabi_ddiv+0x43c>
 800137e:	421c      	tst	r4, r3
 8001380:	d106      	bne.n	8001390 <__aeabi_ddiv+0x43c>
 8001382:	431c      	orrs	r4, r3
 8001384:	0324      	lsls	r4, r4, #12
 8001386:	46ba      	mov	sl, r7
 8001388:	0015      	movs	r5, r2
 800138a:	4b69      	ldr	r3, [pc, #420]	; (8001530 <__aeabi_ddiv+0x5dc>)
 800138c:	0b24      	lsrs	r4, r4, #12
 800138e:	e638      	b.n	8001002 <__aeabi_ddiv+0xae>
 8001390:	2480      	movs	r4, #128	; 0x80
 8001392:	4643      	mov	r3, r8
 8001394:	0324      	lsls	r4, r4, #12
 8001396:	431c      	orrs	r4, r3
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	46b2      	mov	sl, r6
 800139c:	4b64      	ldr	r3, [pc, #400]	; (8001530 <__aeabi_ddiv+0x5dc>)
 800139e:	0b24      	lsrs	r4, r4, #12
 80013a0:	e62f      	b.n	8001002 <__aeabi_ddiv+0xae>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d100      	bne.n	80013a8 <__aeabi_ddiv+0x454>
 80013a6:	e703      	b.n	80011b0 <__aeabi_ddiv+0x25c>
 80013a8:	19a6      	adds	r6, r4, r6
 80013aa:	1e68      	subs	r0, r5, #1
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d200      	bcs.n	80013b2 <__aeabi_ddiv+0x45e>
 80013b0:	e08d      	b.n	80014ce <__aeabi_ddiv+0x57a>
 80013b2:	428e      	cmp	r6, r1
 80013b4:	d200      	bcs.n	80013b8 <__aeabi_ddiv+0x464>
 80013b6:	e0a3      	b.n	8001500 <__aeabi_ddiv+0x5ac>
 80013b8:	d100      	bne.n	80013bc <__aeabi_ddiv+0x468>
 80013ba:	e0b3      	b.n	8001524 <__aeabi_ddiv+0x5d0>
 80013bc:	0005      	movs	r5, r0
 80013be:	e6f5      	b.n	80011ac <__aeabi_ddiv+0x258>
 80013c0:	42aa      	cmp	r2, r5
 80013c2:	d900      	bls.n	80013c6 <__aeabi_ddiv+0x472>
 80013c4:	e639      	b.n	800103a <__aeabi_ddiv+0xe6>
 80013c6:	4643      	mov	r3, r8
 80013c8:	07de      	lsls	r6, r3, #31
 80013ca:	0858      	lsrs	r0, r3, #1
 80013cc:	086b      	lsrs	r3, r5, #1
 80013ce:	431e      	orrs	r6, r3
 80013d0:	07ed      	lsls	r5, r5, #31
 80013d2:	e639      	b.n	8001048 <__aeabi_ddiv+0xf4>
 80013d4:	4648      	mov	r0, r9
 80013d6:	f001 f867 	bl	80024a8 <__clzsi2>
 80013da:	0001      	movs	r1, r0
 80013dc:	0002      	movs	r2, r0
 80013de:	3115      	adds	r1, #21
 80013e0:	3220      	adds	r2, #32
 80013e2:	291c      	cmp	r1, #28
 80013e4:	dc00      	bgt.n	80013e8 <__aeabi_ddiv+0x494>
 80013e6:	e72c      	b.n	8001242 <__aeabi_ddiv+0x2ee>
 80013e8:	464b      	mov	r3, r9
 80013ea:	3808      	subs	r0, #8
 80013ec:	4083      	lsls	r3, r0
 80013ee:	2500      	movs	r5, #0
 80013f0:	4698      	mov	r8, r3
 80013f2:	e732      	b.n	800125a <__aeabi_ddiv+0x306>
 80013f4:	f001 f858 	bl	80024a8 <__clzsi2>
 80013f8:	0003      	movs	r3, r0
 80013fa:	001a      	movs	r2, r3
 80013fc:	3215      	adds	r2, #21
 80013fe:	3020      	adds	r0, #32
 8001400:	2a1c      	cmp	r2, #28
 8001402:	dc00      	bgt.n	8001406 <__aeabi_ddiv+0x4b2>
 8001404:	e700      	b.n	8001208 <__aeabi_ddiv+0x2b4>
 8001406:	4654      	mov	r4, sl
 8001408:	3b08      	subs	r3, #8
 800140a:	2200      	movs	r2, #0
 800140c:	409c      	lsls	r4, r3
 800140e:	e705      	b.n	800121c <__aeabi_ddiv+0x2c8>
 8001410:	1936      	adds	r6, r6, r4
 8001412:	3b01      	subs	r3, #1
 8001414:	42b4      	cmp	r4, r6
 8001416:	d900      	bls.n	800141a <__aeabi_ddiv+0x4c6>
 8001418:	e6a6      	b.n	8001168 <__aeabi_ddiv+0x214>
 800141a:	42b2      	cmp	r2, r6
 800141c:	d800      	bhi.n	8001420 <__aeabi_ddiv+0x4cc>
 800141e:	e6a3      	b.n	8001168 <__aeabi_ddiv+0x214>
 8001420:	1e83      	subs	r3, r0, #2
 8001422:	1936      	adds	r6, r6, r4
 8001424:	e6a0      	b.n	8001168 <__aeabi_ddiv+0x214>
 8001426:	1909      	adds	r1, r1, r4
 8001428:	3d01      	subs	r5, #1
 800142a:	428c      	cmp	r4, r1
 800142c:	d900      	bls.n	8001430 <__aeabi_ddiv+0x4dc>
 800142e:	e68d      	b.n	800114c <__aeabi_ddiv+0x1f8>
 8001430:	428a      	cmp	r2, r1
 8001432:	d800      	bhi.n	8001436 <__aeabi_ddiv+0x4e2>
 8001434:	e68a      	b.n	800114c <__aeabi_ddiv+0x1f8>
 8001436:	1e85      	subs	r5, r0, #2
 8001438:	1909      	adds	r1, r1, r4
 800143a:	e687      	b.n	800114c <__aeabi_ddiv+0x1f8>
 800143c:	230f      	movs	r3, #15
 800143e:	402b      	ands	r3, r5
 8001440:	2b04      	cmp	r3, #4
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0x4f2>
 8001444:	e6bc      	b.n	80011c0 <__aeabi_ddiv+0x26c>
 8001446:	2305      	movs	r3, #5
 8001448:	425b      	negs	r3, r3
 800144a:	42ab      	cmp	r3, r5
 800144c:	419b      	sbcs	r3, r3
 800144e:	3504      	adds	r5, #4
 8001450:	425b      	negs	r3, r3
 8001452:	08ed      	lsrs	r5, r5, #3
 8001454:	4498      	add	r8, r3
 8001456:	e6b4      	b.n	80011c2 <__aeabi_ddiv+0x26e>
 8001458:	42af      	cmp	r7, r5
 800145a:	d900      	bls.n	800145e <__aeabi_ddiv+0x50a>
 800145c:	e660      	b.n	8001120 <__aeabi_ddiv+0x1cc>
 800145e:	4282      	cmp	r2, r0
 8001460:	d804      	bhi.n	800146c <__aeabi_ddiv+0x518>
 8001462:	d000      	beq.n	8001466 <__aeabi_ddiv+0x512>
 8001464:	e65c      	b.n	8001120 <__aeabi_ddiv+0x1cc>
 8001466:	42ae      	cmp	r6, r5
 8001468:	d800      	bhi.n	800146c <__aeabi_ddiv+0x518>
 800146a:	e659      	b.n	8001120 <__aeabi_ddiv+0x1cc>
 800146c:	2302      	movs	r3, #2
 800146e:	425b      	negs	r3, r3
 8001470:	469c      	mov	ip, r3
 8001472:	9b00      	ldr	r3, [sp, #0]
 8001474:	44e0      	add	r8, ip
 8001476:	469c      	mov	ip, r3
 8001478:	4465      	add	r5, ip
 800147a:	429d      	cmp	r5, r3
 800147c:	419b      	sbcs	r3, r3
 800147e:	425b      	negs	r3, r3
 8001480:	191b      	adds	r3, r3, r4
 8001482:	18c0      	adds	r0, r0, r3
 8001484:	e64d      	b.n	8001122 <__aeabi_ddiv+0x1ce>
 8001486:	428a      	cmp	r2, r1
 8001488:	d800      	bhi.n	800148c <__aeabi_ddiv+0x538>
 800148a:	e60e      	b.n	80010aa <__aeabi_ddiv+0x156>
 800148c:	1e83      	subs	r3, r0, #2
 800148e:	1909      	adds	r1, r1, r4
 8001490:	e60b      	b.n	80010aa <__aeabi_ddiv+0x156>
 8001492:	428a      	cmp	r2, r1
 8001494:	d800      	bhi.n	8001498 <__aeabi_ddiv+0x544>
 8001496:	e5f4      	b.n	8001082 <__aeabi_ddiv+0x12e>
 8001498:	1e83      	subs	r3, r0, #2
 800149a:	4698      	mov	r8, r3
 800149c:	1909      	adds	r1, r1, r4
 800149e:	e5f0      	b.n	8001082 <__aeabi_ddiv+0x12e>
 80014a0:	4925      	ldr	r1, [pc, #148]	; (8001538 <__aeabi_ddiv+0x5e4>)
 80014a2:	0028      	movs	r0, r5
 80014a4:	4459      	add	r1, fp
 80014a6:	408d      	lsls	r5, r1
 80014a8:	4642      	mov	r2, r8
 80014aa:	408a      	lsls	r2, r1
 80014ac:	1e69      	subs	r1, r5, #1
 80014ae:	418d      	sbcs	r5, r1
 80014b0:	4641      	mov	r1, r8
 80014b2:	40d8      	lsrs	r0, r3
 80014b4:	40d9      	lsrs	r1, r3
 80014b6:	4302      	orrs	r2, r0
 80014b8:	432a      	orrs	r2, r5
 80014ba:	000b      	movs	r3, r1
 80014bc:	0751      	lsls	r1, r2, #29
 80014be:	d100      	bne.n	80014c2 <__aeabi_ddiv+0x56e>
 80014c0:	e751      	b.n	8001366 <__aeabi_ddiv+0x412>
 80014c2:	210f      	movs	r1, #15
 80014c4:	4011      	ands	r1, r2
 80014c6:	2904      	cmp	r1, #4
 80014c8:	d000      	beq.n	80014cc <__aeabi_ddiv+0x578>
 80014ca:	e746      	b.n	800135a <__aeabi_ddiv+0x406>
 80014cc:	e74b      	b.n	8001366 <__aeabi_ddiv+0x412>
 80014ce:	0005      	movs	r5, r0
 80014d0:	428e      	cmp	r6, r1
 80014d2:	d000      	beq.n	80014d6 <__aeabi_ddiv+0x582>
 80014d4:	e66a      	b.n	80011ac <__aeabi_ddiv+0x258>
 80014d6:	9a00      	ldr	r2, [sp, #0]
 80014d8:	4293      	cmp	r3, r2
 80014da:	d000      	beq.n	80014de <__aeabi_ddiv+0x58a>
 80014dc:	e666      	b.n	80011ac <__aeabi_ddiv+0x258>
 80014de:	e667      	b.n	80011b0 <__aeabi_ddiv+0x25c>
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <__aeabi_ddiv+0x5e8>)
 80014e2:	445a      	add	r2, fp
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_ddiv+0x596>
 80014e8:	e710      	b.n	800130c <__aeabi_ddiv+0x3b8>
 80014ea:	2301      	movs	r3, #1
 80014ec:	2500      	movs	r5, #0
 80014ee:	4498      	add	r8, r3
 80014f0:	e667      	b.n	80011c2 <__aeabi_ddiv+0x26e>
 80014f2:	075d      	lsls	r5, r3, #29
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	0b1c      	lsrs	r4, r3, #12
 80014f8:	08d2      	lsrs	r2, r2, #3
 80014fa:	2300      	movs	r3, #0
 80014fc:	4315      	orrs	r5, r2
 80014fe:	e580      	b.n	8001002 <__aeabi_ddiv+0xae>
 8001500:	9800      	ldr	r0, [sp, #0]
 8001502:	3d02      	subs	r5, #2
 8001504:	0042      	lsls	r2, r0, #1
 8001506:	4282      	cmp	r2, r0
 8001508:	41bf      	sbcs	r7, r7
 800150a:	427f      	negs	r7, r7
 800150c:	193c      	adds	r4, r7, r4
 800150e:	1936      	adds	r6, r6, r4
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	e7dd      	b.n	80014d0 <__aeabi_ddiv+0x57c>
 8001514:	2480      	movs	r4, #128	; 0x80
 8001516:	4643      	mov	r3, r8
 8001518:	0324      	lsls	r4, r4, #12
 800151a:	431c      	orrs	r4, r3
 800151c:	0324      	lsls	r4, r4, #12
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__aeabi_ddiv+0x5dc>)
 8001520:	0b24      	lsrs	r4, r4, #12
 8001522:	e56e      	b.n	8001002 <__aeabi_ddiv+0xae>
 8001524:	9a00      	ldr	r2, [sp, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3ea      	bcc.n	8001500 <__aeabi_ddiv+0x5ac>
 800152a:	0005      	movs	r5, r0
 800152c:	e7d3      	b.n	80014d6 <__aeabi_ddiv+0x582>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	000007ff 	.word	0x000007ff
 8001534:	0000043e 	.word	0x0000043e
 8001538:	0000041e 	.word	0x0000041e
 800153c:	000003ff 	.word	0x000003ff

08001540 <__eqdf2>:
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	464e      	mov	r6, r9
 8001544:	4645      	mov	r5, r8
 8001546:	46de      	mov	lr, fp
 8001548:	4657      	mov	r7, sl
 800154a:	4690      	mov	r8, r2
 800154c:	b5e0      	push	{r5, r6, r7, lr}
 800154e:	0017      	movs	r7, r2
 8001550:	031a      	lsls	r2, r3, #12
 8001552:	0b12      	lsrs	r2, r2, #12
 8001554:	0005      	movs	r5, r0
 8001556:	4684      	mov	ip, r0
 8001558:	4819      	ldr	r0, [pc, #100]	; (80015c0 <__eqdf2+0x80>)
 800155a:	030e      	lsls	r6, r1, #12
 800155c:	004c      	lsls	r4, r1, #1
 800155e:	4691      	mov	r9, r2
 8001560:	005a      	lsls	r2, r3, #1
 8001562:	0fdb      	lsrs	r3, r3, #31
 8001564:	469b      	mov	fp, r3
 8001566:	0b36      	lsrs	r6, r6, #12
 8001568:	0d64      	lsrs	r4, r4, #21
 800156a:	0fc9      	lsrs	r1, r1, #31
 800156c:	0d52      	lsrs	r2, r2, #21
 800156e:	4284      	cmp	r4, r0
 8001570:	d019      	beq.n	80015a6 <__eqdf2+0x66>
 8001572:	4282      	cmp	r2, r0
 8001574:	d010      	beq.n	8001598 <__eqdf2+0x58>
 8001576:	2001      	movs	r0, #1
 8001578:	4294      	cmp	r4, r2
 800157a:	d10e      	bne.n	800159a <__eqdf2+0x5a>
 800157c:	454e      	cmp	r6, r9
 800157e:	d10c      	bne.n	800159a <__eqdf2+0x5a>
 8001580:	2001      	movs	r0, #1
 8001582:	45c4      	cmp	ip, r8
 8001584:	d109      	bne.n	800159a <__eqdf2+0x5a>
 8001586:	4559      	cmp	r1, fp
 8001588:	d017      	beq.n	80015ba <__eqdf2+0x7a>
 800158a:	2c00      	cmp	r4, #0
 800158c:	d105      	bne.n	800159a <__eqdf2+0x5a>
 800158e:	0030      	movs	r0, r6
 8001590:	4328      	orrs	r0, r5
 8001592:	1e43      	subs	r3, r0, #1
 8001594:	4198      	sbcs	r0, r3
 8001596:	e000      	b.n	800159a <__eqdf2+0x5a>
 8001598:	2001      	movs	r0, #1
 800159a:	bcf0      	pop	{r4, r5, r6, r7}
 800159c:	46bb      	mov	fp, r7
 800159e:	46b2      	mov	sl, r6
 80015a0:	46a9      	mov	r9, r5
 80015a2:	46a0      	mov	r8, r4
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a6:	0033      	movs	r3, r6
 80015a8:	2001      	movs	r0, #1
 80015aa:	432b      	orrs	r3, r5
 80015ac:	d1f5      	bne.n	800159a <__eqdf2+0x5a>
 80015ae:	42a2      	cmp	r2, r4
 80015b0:	d1f3      	bne.n	800159a <__eqdf2+0x5a>
 80015b2:	464b      	mov	r3, r9
 80015b4:	433b      	orrs	r3, r7
 80015b6:	d1f0      	bne.n	800159a <__eqdf2+0x5a>
 80015b8:	e7e2      	b.n	8001580 <__eqdf2+0x40>
 80015ba:	2000      	movs	r0, #0
 80015bc:	e7ed      	b.n	800159a <__eqdf2+0x5a>
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	000007ff 	.word	0x000007ff

080015c4 <__gedf2>:
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	4647      	mov	r7, r8
 80015c8:	46ce      	mov	lr, r9
 80015ca:	0004      	movs	r4, r0
 80015cc:	0018      	movs	r0, r3
 80015ce:	0016      	movs	r6, r2
 80015d0:	031b      	lsls	r3, r3, #12
 80015d2:	0b1b      	lsrs	r3, r3, #12
 80015d4:	4d2d      	ldr	r5, [pc, #180]	; (800168c <__gedf2+0xc8>)
 80015d6:	004a      	lsls	r2, r1, #1
 80015d8:	4699      	mov	r9, r3
 80015da:	b580      	push	{r7, lr}
 80015dc:	0043      	lsls	r3, r0, #1
 80015de:	030f      	lsls	r7, r1, #12
 80015e0:	46a4      	mov	ip, r4
 80015e2:	46b0      	mov	r8, r6
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	0d52      	lsrs	r2, r2, #21
 80015e8:	0fc9      	lsrs	r1, r1, #31
 80015ea:	0d5b      	lsrs	r3, r3, #21
 80015ec:	0fc0      	lsrs	r0, r0, #31
 80015ee:	42aa      	cmp	r2, r5
 80015f0:	d021      	beq.n	8001636 <__gedf2+0x72>
 80015f2:	42ab      	cmp	r3, r5
 80015f4:	d013      	beq.n	800161e <__gedf2+0x5a>
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d122      	bne.n	8001640 <__gedf2+0x7c>
 80015fa:	433c      	orrs	r4, r7
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <__gedf2+0x42>
 8001600:	464d      	mov	r5, r9
 8001602:	432e      	orrs	r6, r5
 8001604:	d022      	beq.n	800164c <__gedf2+0x88>
 8001606:	2c00      	cmp	r4, #0
 8001608:	d010      	beq.n	800162c <__gedf2+0x68>
 800160a:	4281      	cmp	r1, r0
 800160c:	d022      	beq.n	8001654 <__gedf2+0x90>
 800160e:	2002      	movs	r0, #2
 8001610:	3901      	subs	r1, #1
 8001612:	4008      	ands	r0, r1
 8001614:	3801      	subs	r0, #1
 8001616:	bcc0      	pop	{r6, r7}
 8001618:	46b9      	mov	r9, r7
 800161a:	46b0      	mov	r8, r6
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161e:	464d      	mov	r5, r9
 8001620:	432e      	orrs	r6, r5
 8001622:	d129      	bne.n	8001678 <__gedf2+0xb4>
 8001624:	2a00      	cmp	r2, #0
 8001626:	d1f0      	bne.n	800160a <__gedf2+0x46>
 8001628:	433c      	orrs	r4, r7
 800162a:	d1ee      	bne.n	800160a <__gedf2+0x46>
 800162c:	2800      	cmp	r0, #0
 800162e:	d1f2      	bne.n	8001616 <__gedf2+0x52>
 8001630:	2001      	movs	r0, #1
 8001632:	4240      	negs	r0, r0
 8001634:	e7ef      	b.n	8001616 <__gedf2+0x52>
 8001636:	003d      	movs	r5, r7
 8001638:	4325      	orrs	r5, r4
 800163a:	d11d      	bne.n	8001678 <__gedf2+0xb4>
 800163c:	4293      	cmp	r3, r2
 800163e:	d0ee      	beq.n	800161e <__gedf2+0x5a>
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e2      	bne.n	800160a <__gedf2+0x46>
 8001644:	464c      	mov	r4, r9
 8001646:	4326      	orrs	r6, r4
 8001648:	d1df      	bne.n	800160a <__gedf2+0x46>
 800164a:	e7e0      	b.n	800160e <__gedf2+0x4a>
 800164c:	2000      	movs	r0, #0
 800164e:	2c00      	cmp	r4, #0
 8001650:	d0e1      	beq.n	8001616 <__gedf2+0x52>
 8001652:	e7dc      	b.n	800160e <__gedf2+0x4a>
 8001654:	429a      	cmp	r2, r3
 8001656:	dc0a      	bgt.n	800166e <__gedf2+0xaa>
 8001658:	dbe8      	blt.n	800162c <__gedf2+0x68>
 800165a:	454f      	cmp	r7, r9
 800165c:	d8d7      	bhi.n	800160e <__gedf2+0x4a>
 800165e:	d00e      	beq.n	800167e <__gedf2+0xba>
 8001660:	2000      	movs	r0, #0
 8001662:	454f      	cmp	r7, r9
 8001664:	d2d7      	bcs.n	8001616 <__gedf2+0x52>
 8001666:	2900      	cmp	r1, #0
 8001668:	d0e2      	beq.n	8001630 <__gedf2+0x6c>
 800166a:	0008      	movs	r0, r1
 800166c:	e7d3      	b.n	8001616 <__gedf2+0x52>
 800166e:	4243      	negs	r3, r0
 8001670:	4158      	adcs	r0, r3
 8001672:	0040      	lsls	r0, r0, #1
 8001674:	3801      	subs	r0, #1
 8001676:	e7ce      	b.n	8001616 <__gedf2+0x52>
 8001678:	2002      	movs	r0, #2
 800167a:	4240      	negs	r0, r0
 800167c:	e7cb      	b.n	8001616 <__gedf2+0x52>
 800167e:	45c4      	cmp	ip, r8
 8001680:	d8c5      	bhi.n	800160e <__gedf2+0x4a>
 8001682:	2000      	movs	r0, #0
 8001684:	45c4      	cmp	ip, r8
 8001686:	d2c6      	bcs.n	8001616 <__gedf2+0x52>
 8001688:	e7ed      	b.n	8001666 <__gedf2+0xa2>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	000007ff 	.word	0x000007ff

08001690 <__ledf2>:
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	4647      	mov	r7, r8
 8001694:	46ce      	mov	lr, r9
 8001696:	0004      	movs	r4, r0
 8001698:	0018      	movs	r0, r3
 800169a:	0016      	movs	r6, r2
 800169c:	031b      	lsls	r3, r3, #12
 800169e:	0b1b      	lsrs	r3, r3, #12
 80016a0:	4d2c      	ldr	r5, [pc, #176]	; (8001754 <__ledf2+0xc4>)
 80016a2:	004a      	lsls	r2, r1, #1
 80016a4:	4699      	mov	r9, r3
 80016a6:	b580      	push	{r7, lr}
 80016a8:	0043      	lsls	r3, r0, #1
 80016aa:	030f      	lsls	r7, r1, #12
 80016ac:	46a4      	mov	ip, r4
 80016ae:	46b0      	mov	r8, r6
 80016b0:	0b3f      	lsrs	r7, r7, #12
 80016b2:	0d52      	lsrs	r2, r2, #21
 80016b4:	0fc9      	lsrs	r1, r1, #31
 80016b6:	0d5b      	lsrs	r3, r3, #21
 80016b8:	0fc0      	lsrs	r0, r0, #31
 80016ba:	42aa      	cmp	r2, r5
 80016bc:	d00d      	beq.n	80016da <__ledf2+0x4a>
 80016be:	42ab      	cmp	r3, r5
 80016c0:	d010      	beq.n	80016e4 <__ledf2+0x54>
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d127      	bne.n	8001716 <__ledf2+0x86>
 80016c6:	433c      	orrs	r4, r7
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <__ledf2+0x60>
 80016cc:	464d      	mov	r5, r9
 80016ce:	432e      	orrs	r6, r5
 80016d0:	d10e      	bne.n	80016f0 <__ledf2+0x60>
 80016d2:	2000      	movs	r0, #0
 80016d4:	2c00      	cmp	r4, #0
 80016d6:	d015      	beq.n	8001704 <__ledf2+0x74>
 80016d8:	e00e      	b.n	80016f8 <__ledf2+0x68>
 80016da:	003d      	movs	r5, r7
 80016dc:	4325      	orrs	r5, r4
 80016de:	d110      	bne.n	8001702 <__ledf2+0x72>
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d118      	bne.n	8001716 <__ledf2+0x86>
 80016e4:	464d      	mov	r5, r9
 80016e6:	432e      	orrs	r6, r5
 80016e8:	d10b      	bne.n	8001702 <__ledf2+0x72>
 80016ea:	2a00      	cmp	r2, #0
 80016ec:	d102      	bne.n	80016f4 <__ledf2+0x64>
 80016ee:	433c      	orrs	r4, r7
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d00b      	beq.n	800170c <__ledf2+0x7c>
 80016f4:	4281      	cmp	r1, r0
 80016f6:	d014      	beq.n	8001722 <__ledf2+0x92>
 80016f8:	2002      	movs	r0, #2
 80016fa:	3901      	subs	r1, #1
 80016fc:	4008      	ands	r0, r1
 80016fe:	3801      	subs	r0, #1
 8001700:	e000      	b.n	8001704 <__ledf2+0x74>
 8001702:	2002      	movs	r0, #2
 8001704:	bcc0      	pop	{r6, r7}
 8001706:	46b9      	mov	r9, r7
 8001708:	46b0      	mov	r8, r6
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170c:	2800      	cmp	r0, #0
 800170e:	d1f9      	bne.n	8001704 <__ledf2+0x74>
 8001710:	2001      	movs	r0, #1
 8001712:	4240      	negs	r0, r0
 8001714:	e7f6      	b.n	8001704 <__ledf2+0x74>
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ec      	bne.n	80016f4 <__ledf2+0x64>
 800171a:	464c      	mov	r4, r9
 800171c:	4326      	orrs	r6, r4
 800171e:	d1e9      	bne.n	80016f4 <__ledf2+0x64>
 8001720:	e7ea      	b.n	80016f8 <__ledf2+0x68>
 8001722:	429a      	cmp	r2, r3
 8001724:	dd04      	ble.n	8001730 <__ledf2+0xa0>
 8001726:	4243      	negs	r3, r0
 8001728:	4158      	adcs	r0, r3
 800172a:	0040      	lsls	r0, r0, #1
 800172c:	3801      	subs	r0, #1
 800172e:	e7e9      	b.n	8001704 <__ledf2+0x74>
 8001730:	429a      	cmp	r2, r3
 8001732:	dbeb      	blt.n	800170c <__ledf2+0x7c>
 8001734:	454f      	cmp	r7, r9
 8001736:	d8df      	bhi.n	80016f8 <__ledf2+0x68>
 8001738:	d006      	beq.n	8001748 <__ledf2+0xb8>
 800173a:	2000      	movs	r0, #0
 800173c:	454f      	cmp	r7, r9
 800173e:	d2e1      	bcs.n	8001704 <__ledf2+0x74>
 8001740:	2900      	cmp	r1, #0
 8001742:	d0e5      	beq.n	8001710 <__ledf2+0x80>
 8001744:	0008      	movs	r0, r1
 8001746:	e7dd      	b.n	8001704 <__ledf2+0x74>
 8001748:	45c4      	cmp	ip, r8
 800174a:	d8d5      	bhi.n	80016f8 <__ledf2+0x68>
 800174c:	2000      	movs	r0, #0
 800174e:	45c4      	cmp	ip, r8
 8001750:	d2d8      	bcs.n	8001704 <__ledf2+0x74>
 8001752:	e7f5      	b.n	8001740 <__ledf2+0xb0>
 8001754:	000007ff 	.word	0x000007ff

08001758 <__aeabi_dmul>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	464e      	mov	r6, r9
 800175e:	4645      	mov	r5, r8
 8001760:	46de      	mov	lr, fp
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	4698      	mov	r8, r3
 8001766:	030c      	lsls	r4, r1, #12
 8001768:	004b      	lsls	r3, r1, #1
 800176a:	0006      	movs	r6, r0
 800176c:	4692      	mov	sl, r2
 800176e:	b087      	sub	sp, #28
 8001770:	0b24      	lsrs	r4, r4, #12
 8001772:	0d5b      	lsrs	r3, r3, #21
 8001774:	0fcf      	lsrs	r7, r1, #31
 8001776:	2b00      	cmp	r3, #0
 8001778:	d100      	bne.n	800177c <__aeabi_dmul+0x24>
 800177a:	e15c      	b.n	8001a36 <__aeabi_dmul+0x2de>
 800177c:	4ad9      	ldr	r2, [pc, #868]	; (8001ae4 <__aeabi_dmul+0x38c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d100      	bne.n	8001784 <__aeabi_dmul+0x2c>
 8001782:	e175      	b.n	8001a70 <__aeabi_dmul+0x318>
 8001784:	0f42      	lsrs	r2, r0, #29
 8001786:	00e4      	lsls	r4, r4, #3
 8001788:	4314      	orrs	r4, r2
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	0412      	lsls	r2, r2, #16
 800178e:	4314      	orrs	r4, r2
 8001790:	4ad5      	ldr	r2, [pc, #852]	; (8001ae8 <__aeabi_dmul+0x390>)
 8001792:	00c5      	lsls	r5, r0, #3
 8001794:	4694      	mov	ip, r2
 8001796:	4463      	add	r3, ip
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	4699      	mov	r9, r3
 800179e:	469b      	mov	fp, r3
 80017a0:	4643      	mov	r3, r8
 80017a2:	4642      	mov	r2, r8
 80017a4:	031e      	lsls	r6, r3, #12
 80017a6:	0fd2      	lsrs	r2, r2, #31
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4650      	mov	r0, sl
 80017ac:	4690      	mov	r8, r2
 80017ae:	0b36      	lsrs	r6, r6, #12
 80017b0:	0d5b      	lsrs	r3, r3, #21
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x5e>
 80017b4:	e120      	b.n	80019f8 <__aeabi_dmul+0x2a0>
 80017b6:	4acb      	ldr	r2, [pc, #812]	; (8001ae4 <__aeabi_dmul+0x38c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d100      	bne.n	80017be <__aeabi_dmul+0x66>
 80017bc:	e162      	b.n	8001a84 <__aeabi_dmul+0x32c>
 80017be:	49ca      	ldr	r1, [pc, #808]	; (8001ae8 <__aeabi_dmul+0x390>)
 80017c0:	0f42      	lsrs	r2, r0, #29
 80017c2:	468c      	mov	ip, r1
 80017c4:	9900      	ldr	r1, [sp, #0]
 80017c6:	4463      	add	r3, ip
 80017c8:	00f6      	lsls	r6, r6, #3
 80017ca:	468c      	mov	ip, r1
 80017cc:	4316      	orrs	r6, r2
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	449c      	add	ip, r3
 80017d2:	0412      	lsls	r2, r2, #16
 80017d4:	4663      	mov	r3, ip
 80017d6:	4316      	orrs	r6, r2
 80017d8:	00c2      	lsls	r2, r0, #3
 80017da:	2000      	movs	r0, #0
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	9900      	ldr	r1, [sp, #0]
 80017e0:	4643      	mov	r3, r8
 80017e2:	3101      	adds	r1, #1
 80017e4:	468c      	mov	ip, r1
 80017e6:	4649      	mov	r1, r9
 80017e8:	407b      	eors	r3, r7
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	290f      	cmp	r1, #15
 80017ee:	d826      	bhi.n	800183e <__aeabi_dmul+0xe6>
 80017f0:	4bbe      	ldr	r3, [pc, #760]	; (8001aec <__aeabi_dmul+0x394>)
 80017f2:	0089      	lsls	r1, r1, #2
 80017f4:	5859      	ldr	r1, [r3, r1]
 80017f6:	468f      	mov	pc, r1
 80017f8:	4643      	mov	r3, r8
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	0034      	movs	r4, r6
 80017fe:	0015      	movs	r5, r2
 8001800:	4683      	mov	fp, r0
 8001802:	465b      	mov	r3, fp
 8001804:	2b02      	cmp	r3, #2
 8001806:	d016      	beq.n	8001836 <__aeabi_dmul+0xde>
 8001808:	2b03      	cmp	r3, #3
 800180a:	d100      	bne.n	800180e <__aeabi_dmul+0xb6>
 800180c:	e203      	b.n	8001c16 <__aeabi_dmul+0x4be>
 800180e:	2b01      	cmp	r3, #1
 8001810:	d000      	beq.n	8001814 <__aeabi_dmul+0xbc>
 8001812:	e0cd      	b.n	80019b0 <__aeabi_dmul+0x258>
 8001814:	2200      	movs	r2, #0
 8001816:	2400      	movs	r4, #0
 8001818:	2500      	movs	r5, #0
 800181a:	9b01      	ldr	r3, [sp, #4]
 800181c:	0512      	lsls	r2, r2, #20
 800181e:	4322      	orrs	r2, r4
 8001820:	07db      	lsls	r3, r3, #31
 8001822:	431a      	orrs	r2, r3
 8001824:	0028      	movs	r0, r5
 8001826:	0011      	movs	r1, r2
 8001828:	b007      	add	sp, #28
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2400      	movs	r4, #0
 8001838:	2500      	movs	r5, #0
 800183a:	4aaa      	ldr	r2, [pc, #680]	; (8001ae4 <__aeabi_dmul+0x38c>)
 800183c:	e7ed      	b.n	800181a <__aeabi_dmul+0xc2>
 800183e:	0c28      	lsrs	r0, r5, #16
 8001840:	042d      	lsls	r5, r5, #16
 8001842:	0c2d      	lsrs	r5, r5, #16
 8001844:	002b      	movs	r3, r5
 8001846:	0c11      	lsrs	r1, r2, #16
 8001848:	0412      	lsls	r2, r2, #16
 800184a:	0c12      	lsrs	r2, r2, #16
 800184c:	4353      	muls	r3, r2
 800184e:	4698      	mov	r8, r3
 8001850:	0013      	movs	r3, r2
 8001852:	002f      	movs	r7, r5
 8001854:	4343      	muls	r3, r0
 8001856:	4699      	mov	r9, r3
 8001858:	434f      	muls	r7, r1
 800185a:	444f      	add	r7, r9
 800185c:	46bb      	mov	fp, r7
 800185e:	4647      	mov	r7, r8
 8001860:	000b      	movs	r3, r1
 8001862:	0c3f      	lsrs	r7, r7, #16
 8001864:	46ba      	mov	sl, r7
 8001866:	4343      	muls	r3, r0
 8001868:	44da      	add	sl, fp
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	45d1      	cmp	r9, sl
 800186e:	d904      	bls.n	800187a <__aeabi_dmul+0x122>
 8001870:	2780      	movs	r7, #128	; 0x80
 8001872:	027f      	lsls	r7, r7, #9
 8001874:	46b9      	mov	r9, r7
 8001876:	444b      	add	r3, r9
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	4653      	mov	r3, sl
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	469b      	mov	fp, r3
 8001880:	4653      	mov	r3, sl
 8001882:	041f      	lsls	r7, r3, #16
 8001884:	4643      	mov	r3, r8
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	4698      	mov	r8, r3
 800188c:	003b      	movs	r3, r7
 800188e:	4443      	add	r3, r8
 8001890:	9304      	str	r3, [sp, #16]
 8001892:	0c33      	lsrs	r3, r6, #16
 8001894:	0436      	lsls	r6, r6, #16
 8001896:	0c36      	lsrs	r6, r6, #16
 8001898:	4698      	mov	r8, r3
 800189a:	0033      	movs	r3, r6
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4643      	mov	r3, r8
 80018a2:	4343      	muls	r3, r0
 80018a4:	002f      	movs	r7, r5
 80018a6:	469a      	mov	sl, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	4377      	muls	r7, r6
 80018ac:	435d      	muls	r5, r3
 80018ae:	0c38      	lsrs	r0, r7, #16
 80018b0:	444d      	add	r5, r9
 80018b2:	1945      	adds	r5, r0, r5
 80018b4:	45a9      	cmp	r9, r5
 80018b6:	d903      	bls.n	80018c0 <__aeabi_dmul+0x168>
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	025b      	lsls	r3, r3, #9
 80018bc:	4699      	mov	r9, r3
 80018be:	44ca      	add	sl, r9
 80018c0:	043f      	lsls	r7, r7, #16
 80018c2:	0c28      	lsrs	r0, r5, #16
 80018c4:	0c3f      	lsrs	r7, r7, #16
 80018c6:	042d      	lsls	r5, r5, #16
 80018c8:	19ed      	adds	r5, r5, r7
 80018ca:	0c27      	lsrs	r7, r4, #16
 80018cc:	0424      	lsls	r4, r4, #16
 80018ce:	0c24      	lsrs	r4, r4, #16
 80018d0:	0003      	movs	r3, r0
 80018d2:	0020      	movs	r0, r4
 80018d4:	4350      	muls	r0, r2
 80018d6:	437a      	muls	r2, r7
 80018d8:	4691      	mov	r9, r2
 80018da:	003a      	movs	r2, r7
 80018dc:	4453      	add	r3, sl
 80018de:	9305      	str	r3, [sp, #20]
 80018e0:	0c03      	lsrs	r3, r0, #16
 80018e2:	469a      	mov	sl, r3
 80018e4:	434a      	muls	r2, r1
 80018e6:	4361      	muls	r1, r4
 80018e8:	4449      	add	r1, r9
 80018ea:	4451      	add	r1, sl
 80018ec:	44ab      	add	fp, r5
 80018ee:	4589      	cmp	r9, r1
 80018f0:	d903      	bls.n	80018fa <__aeabi_dmul+0x1a2>
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	4699      	mov	r9, r3
 80018f8:	444a      	add	r2, r9
 80018fa:	0400      	lsls	r0, r0, #16
 80018fc:	0c0b      	lsrs	r3, r1, #16
 80018fe:	0c00      	lsrs	r0, r0, #16
 8001900:	0409      	lsls	r1, r1, #16
 8001902:	1809      	adds	r1, r1, r0
 8001904:	0020      	movs	r0, r4
 8001906:	4699      	mov	r9, r3
 8001908:	4643      	mov	r3, r8
 800190a:	4370      	muls	r0, r6
 800190c:	435c      	muls	r4, r3
 800190e:	437e      	muls	r6, r7
 8001910:	435f      	muls	r7, r3
 8001912:	0c03      	lsrs	r3, r0, #16
 8001914:	4698      	mov	r8, r3
 8001916:	19a4      	adds	r4, r4, r6
 8001918:	4444      	add	r4, r8
 800191a:	444a      	add	r2, r9
 800191c:	9703      	str	r7, [sp, #12]
 800191e:	42a6      	cmp	r6, r4
 8001920:	d904      	bls.n	800192c <__aeabi_dmul+0x1d4>
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	4698      	mov	r8, r3
 8001928:	4447      	add	r7, r8
 800192a:	9703      	str	r7, [sp, #12]
 800192c:	0423      	lsls	r3, r4, #16
 800192e:	9e02      	ldr	r6, [sp, #8]
 8001930:	469a      	mov	sl, r3
 8001932:	9b05      	ldr	r3, [sp, #20]
 8001934:	445e      	add	r6, fp
 8001936:	4698      	mov	r8, r3
 8001938:	42ae      	cmp	r6, r5
 800193a:	41ad      	sbcs	r5, r5
 800193c:	1876      	adds	r6, r6, r1
 800193e:	428e      	cmp	r6, r1
 8001940:	4189      	sbcs	r1, r1
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	0c00      	lsrs	r0, r0, #16
 8001946:	4450      	add	r0, sl
 8001948:	4440      	add	r0, r8
 800194a:	426d      	negs	r5, r5
 800194c:	1947      	adds	r7, r0, r5
 800194e:	46b8      	mov	r8, r7
 8001950:	4693      	mov	fp, r2
 8001952:	4249      	negs	r1, r1
 8001954:	4689      	mov	r9, r1
 8001956:	44c3      	add	fp, r8
 8001958:	44d9      	add	r9, fp
 800195a:	4298      	cmp	r0, r3
 800195c:	4180      	sbcs	r0, r0
 800195e:	45a8      	cmp	r8, r5
 8001960:	41ad      	sbcs	r5, r5
 8001962:	4593      	cmp	fp, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4589      	cmp	r9, r1
 8001968:	4189      	sbcs	r1, r1
 800196a:	426d      	negs	r5, r5
 800196c:	4240      	negs	r0, r0
 800196e:	4328      	orrs	r0, r5
 8001970:	0c24      	lsrs	r4, r4, #16
 8001972:	4252      	negs	r2, r2
 8001974:	4249      	negs	r1, r1
 8001976:	430a      	orrs	r2, r1
 8001978:	9b03      	ldr	r3, [sp, #12]
 800197a:	1900      	adds	r0, r0, r4
 800197c:	1880      	adds	r0, r0, r2
 800197e:	18c7      	adds	r7, r0, r3
 8001980:	464b      	mov	r3, r9
 8001982:	0ddc      	lsrs	r4, r3, #23
 8001984:	9b04      	ldr	r3, [sp, #16]
 8001986:	0275      	lsls	r5, r6, #9
 8001988:	431d      	orrs	r5, r3
 800198a:	1e6a      	subs	r2, r5, #1
 800198c:	4195      	sbcs	r5, r2
 800198e:	464b      	mov	r3, r9
 8001990:	0df6      	lsrs	r6, r6, #23
 8001992:	027f      	lsls	r7, r7, #9
 8001994:	4335      	orrs	r5, r6
 8001996:	025a      	lsls	r2, r3, #9
 8001998:	433c      	orrs	r4, r7
 800199a:	4315      	orrs	r5, r2
 800199c:	01fb      	lsls	r3, r7, #7
 800199e:	d400      	bmi.n	80019a2 <__aeabi_dmul+0x24a>
 80019a0:	e11c      	b.n	8001bdc <__aeabi_dmul+0x484>
 80019a2:	2101      	movs	r1, #1
 80019a4:	086a      	lsrs	r2, r5, #1
 80019a6:	400d      	ands	r5, r1
 80019a8:	4315      	orrs	r5, r2
 80019aa:	07e2      	lsls	r2, r4, #31
 80019ac:	4315      	orrs	r5, r2
 80019ae:	0864      	lsrs	r4, r4, #1
 80019b0:	494f      	ldr	r1, [pc, #316]	; (8001af0 <__aeabi_dmul+0x398>)
 80019b2:	4461      	add	r1, ip
 80019b4:	2900      	cmp	r1, #0
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dmul+0x262>
 80019b8:	e0b0      	b.n	8001b1c <__aeabi_dmul+0x3c4>
 80019ba:	076b      	lsls	r3, r5, #29
 80019bc:	d009      	beq.n	80019d2 <__aeabi_dmul+0x27a>
 80019be:	220f      	movs	r2, #15
 80019c0:	402a      	ands	r2, r5
 80019c2:	2a04      	cmp	r2, #4
 80019c4:	d005      	beq.n	80019d2 <__aeabi_dmul+0x27a>
 80019c6:	1d2a      	adds	r2, r5, #4
 80019c8:	42aa      	cmp	r2, r5
 80019ca:	41ad      	sbcs	r5, r5
 80019cc:	426d      	negs	r5, r5
 80019ce:	1964      	adds	r4, r4, r5
 80019d0:	0015      	movs	r5, r2
 80019d2:	01e3      	lsls	r3, r4, #7
 80019d4:	d504      	bpl.n	80019e0 <__aeabi_dmul+0x288>
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	4a46      	ldr	r2, [pc, #280]	; (8001af4 <__aeabi_dmul+0x39c>)
 80019da:	00c9      	lsls	r1, r1, #3
 80019dc:	4014      	ands	r4, r2
 80019de:	4461      	add	r1, ip
 80019e0:	4a45      	ldr	r2, [pc, #276]	; (8001af8 <__aeabi_dmul+0x3a0>)
 80019e2:	4291      	cmp	r1, r2
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dmul+0x290>
 80019e6:	e726      	b.n	8001836 <__aeabi_dmul+0xde>
 80019e8:	0762      	lsls	r2, r4, #29
 80019ea:	08ed      	lsrs	r5, r5, #3
 80019ec:	0264      	lsls	r4, r4, #9
 80019ee:	0549      	lsls	r1, r1, #21
 80019f0:	4315      	orrs	r5, r2
 80019f2:	0b24      	lsrs	r4, r4, #12
 80019f4:	0d4a      	lsrs	r2, r1, #21
 80019f6:	e710      	b.n	800181a <__aeabi_dmul+0xc2>
 80019f8:	4652      	mov	r2, sl
 80019fa:	4332      	orrs	r2, r6
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dmul+0x2a8>
 80019fe:	e07f      	b.n	8001b00 <__aeabi_dmul+0x3a8>
 8001a00:	2e00      	cmp	r6, #0
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dmul+0x2ae>
 8001a04:	e0dc      	b.n	8001bc0 <__aeabi_dmul+0x468>
 8001a06:	0030      	movs	r0, r6
 8001a08:	f000 fd4e 	bl	80024a8 <__clzsi2>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	3a0b      	subs	r2, #11
 8001a10:	231d      	movs	r3, #29
 8001a12:	0001      	movs	r1, r0
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	4652      	mov	r2, sl
 8001a18:	3908      	subs	r1, #8
 8001a1a:	40da      	lsrs	r2, r3
 8001a1c:	408e      	lsls	r6, r1
 8001a1e:	4316      	orrs	r6, r2
 8001a20:	4652      	mov	r2, sl
 8001a22:	408a      	lsls	r2, r1
 8001a24:	9b00      	ldr	r3, [sp, #0]
 8001a26:	4935      	ldr	r1, [pc, #212]	; (8001afc <__aeabi_dmul+0x3a4>)
 8001a28:	1a18      	subs	r0, r3, r0
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	468c      	mov	ip, r1
 8001a2e:	4463      	add	r3, ip
 8001a30:	2000      	movs	r0, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	e6d3      	b.n	80017de <__aeabi_dmul+0x86>
 8001a36:	0025      	movs	r5, r4
 8001a38:	4305      	orrs	r5, r0
 8001a3a:	d04a      	beq.n	8001ad2 <__aeabi_dmul+0x37a>
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dmul+0x2ea>
 8001a40:	e0b0      	b.n	8001ba4 <__aeabi_dmul+0x44c>
 8001a42:	0020      	movs	r0, r4
 8001a44:	f000 fd30 	bl	80024a8 <__clzsi2>
 8001a48:	0001      	movs	r1, r0
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	390b      	subs	r1, #11
 8001a4e:	231d      	movs	r3, #29
 8001a50:	0010      	movs	r0, r2
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	0031      	movs	r1, r6
 8001a56:	0035      	movs	r5, r6
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	4085      	lsls	r5, r0
 8001a60:	430c      	orrs	r4, r1
 8001a62:	4826      	ldr	r0, [pc, #152]	; (8001afc <__aeabi_dmul+0x3a4>)
 8001a64:	1a83      	subs	r3, r0, r2
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	469b      	mov	fp, r3
 8001a6e:	e697      	b.n	80017a0 <__aeabi_dmul+0x48>
 8001a70:	0005      	movs	r5, r0
 8001a72:	4325      	orrs	r5, r4
 8001a74:	d126      	bne.n	8001ac4 <__aeabi_dmul+0x36c>
 8001a76:	2208      	movs	r2, #8
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	2400      	movs	r4, #0
 8001a7e:	4691      	mov	r9, r2
 8001a80:	469b      	mov	fp, r3
 8001a82:	e68d      	b.n	80017a0 <__aeabi_dmul+0x48>
 8001a84:	4652      	mov	r2, sl
 8001a86:	9b00      	ldr	r3, [sp, #0]
 8001a88:	4332      	orrs	r2, r6
 8001a8a:	d110      	bne.n	8001aae <__aeabi_dmul+0x356>
 8001a8c:	4915      	ldr	r1, [pc, #84]	; (8001ae4 <__aeabi_dmul+0x38c>)
 8001a8e:	2600      	movs	r6, #0
 8001a90:	468c      	mov	ip, r1
 8001a92:	4463      	add	r3, ip
 8001a94:	4649      	mov	r1, r9
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	4319      	orrs	r1, r3
 8001a9c:	4689      	mov	r9, r1
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	e69d      	b.n	80017de <__aeabi_dmul+0x86>
 8001aa2:	465b      	mov	r3, fp
 8001aa4:	9701      	str	r7, [sp, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d000      	beq.n	8001aac <__aeabi_dmul+0x354>
 8001aaa:	e6ad      	b.n	8001808 <__aeabi_dmul+0xb0>
 8001aac:	e6c3      	b.n	8001836 <__aeabi_dmul+0xde>
 8001aae:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <__aeabi_dmul+0x38c>)
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	4694      	mov	ip, r2
 8001ab4:	4463      	add	r3, ip
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2303      	movs	r3, #3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	4691      	mov	r9, r2
 8001ac0:	4652      	mov	r2, sl
 8001ac2:	e68c      	b.n	80017de <__aeabi_dmul+0x86>
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2303      	movs	r3, #3
 8001aca:	0005      	movs	r5, r0
 8001acc:	4691      	mov	r9, r2
 8001ace:	469b      	mov	fp, r3
 8001ad0:	e666      	b.n	80017a0 <__aeabi_dmul+0x48>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	2400      	movs	r4, #0
 8001ade:	469b      	mov	fp, r3
 8001ae0:	e65e      	b.n	80017a0 <__aeabi_dmul+0x48>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	000007ff 	.word	0x000007ff
 8001ae8:	fffffc01 	.word	0xfffffc01
 8001aec:	08007058 	.word	0x08007058
 8001af0:	000003ff 	.word	0x000003ff
 8001af4:	feffffff 	.word	0xfeffffff
 8001af8:	000007fe 	.word	0x000007fe
 8001afc:	fffffc0d 	.word	0xfffffc0d
 8001b00:	4649      	mov	r1, r9
 8001b02:	2301      	movs	r3, #1
 8001b04:	4319      	orrs	r1, r3
 8001b06:	4689      	mov	r9, r1
 8001b08:	2600      	movs	r6, #0
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e667      	b.n	80017de <__aeabi_dmul+0x86>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2480      	movs	r4, #128	; 0x80
 8001b12:	2500      	movs	r5, #0
 8001b14:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	0324      	lsls	r4, r4, #12
 8001b1a:	e67e      	b.n	800181a <__aeabi_dmul+0xc2>
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	1a40      	subs	r0, r0, r1
 8001b20:	2838      	cmp	r0, #56	; 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dmul+0x3ce>
 8001b24:	e676      	b.n	8001814 <__aeabi_dmul+0xbc>
 8001b26:	281f      	cmp	r0, #31
 8001b28:	dd5b      	ble.n	8001be2 <__aeabi_dmul+0x48a>
 8001b2a:	221f      	movs	r2, #31
 8001b2c:	0023      	movs	r3, r4
 8001b2e:	4252      	negs	r2, r2
 8001b30:	1a51      	subs	r1, r2, r1
 8001b32:	40cb      	lsrs	r3, r1
 8001b34:	0019      	movs	r1, r3
 8001b36:	2820      	cmp	r0, #32
 8001b38:	d003      	beq.n	8001b42 <__aeabi_dmul+0x3ea>
 8001b3a:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <__aeabi_dmul+0x4d0>)
 8001b3c:	4462      	add	r2, ip
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	4325      	orrs	r5, r4
 8001b42:	1e6a      	subs	r2, r5, #1
 8001b44:	4195      	sbcs	r5, r2
 8001b46:	002a      	movs	r2, r5
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	000d      	movs	r5, r1
 8001b4e:	2400      	movs	r4, #0
 8001b50:	4015      	ands	r5, r2
 8001b52:	4211      	tst	r1, r2
 8001b54:	d05b      	beq.n	8001c0e <__aeabi_dmul+0x4b6>
 8001b56:	210f      	movs	r1, #15
 8001b58:	2400      	movs	r4, #0
 8001b5a:	4011      	ands	r1, r2
 8001b5c:	2904      	cmp	r1, #4
 8001b5e:	d053      	beq.n	8001c08 <__aeabi_dmul+0x4b0>
 8001b60:	1d11      	adds	r1, r2, #4
 8001b62:	4291      	cmp	r1, r2
 8001b64:	4192      	sbcs	r2, r2
 8001b66:	4252      	negs	r2, r2
 8001b68:	18a4      	adds	r4, r4, r2
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	0223      	lsls	r3, r4, #8
 8001b6e:	d54b      	bpl.n	8001c08 <__aeabi_dmul+0x4b0>
 8001b70:	2201      	movs	r2, #1
 8001b72:	2400      	movs	r4, #0
 8001b74:	2500      	movs	r5, #0
 8001b76:	e650      	b.n	800181a <__aeabi_dmul+0xc2>
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	031b      	lsls	r3, r3, #12
 8001b7c:	421c      	tst	r4, r3
 8001b7e:	d009      	beq.n	8001b94 <__aeabi_dmul+0x43c>
 8001b80:	421e      	tst	r6, r3
 8001b82:	d107      	bne.n	8001b94 <__aeabi_dmul+0x43c>
 8001b84:	4333      	orrs	r3, r6
 8001b86:	031c      	lsls	r4, r3, #12
 8001b88:	4643      	mov	r3, r8
 8001b8a:	0015      	movs	r5, r2
 8001b8c:	0b24      	lsrs	r4, r4, #12
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	e642      	b.n	800181a <__aeabi_dmul+0xc2>
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	0312      	lsls	r2, r2, #12
 8001b98:	4314      	orrs	r4, r2
 8001b9a:	0324      	lsls	r4, r4, #12
 8001b9c:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001b9e:	0b24      	lsrs	r4, r4, #12
 8001ba0:	9701      	str	r7, [sp, #4]
 8001ba2:	e63a      	b.n	800181a <__aeabi_dmul+0xc2>
 8001ba4:	f000 fc80 	bl	80024a8 <__clzsi2>
 8001ba8:	0001      	movs	r1, r0
 8001baa:	0002      	movs	r2, r0
 8001bac:	3115      	adds	r1, #21
 8001bae:	3220      	adds	r2, #32
 8001bb0:	291c      	cmp	r1, #28
 8001bb2:	dc00      	bgt.n	8001bb6 <__aeabi_dmul+0x45e>
 8001bb4:	e74b      	b.n	8001a4e <__aeabi_dmul+0x2f6>
 8001bb6:	0034      	movs	r4, r6
 8001bb8:	3808      	subs	r0, #8
 8001bba:	2500      	movs	r5, #0
 8001bbc:	4084      	lsls	r4, r0
 8001bbe:	e750      	b.n	8001a62 <__aeabi_dmul+0x30a>
 8001bc0:	f000 fc72 	bl	80024a8 <__clzsi2>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	3215      	adds	r2, #21
 8001bca:	3020      	adds	r0, #32
 8001bcc:	2a1c      	cmp	r2, #28
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dmul+0x47a>
 8001bd0:	e71e      	b.n	8001a10 <__aeabi_dmul+0x2b8>
 8001bd2:	4656      	mov	r6, sl
 8001bd4:	3b08      	subs	r3, #8
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	409e      	lsls	r6, r3
 8001bda:	e723      	b.n	8001a24 <__aeabi_dmul+0x2cc>
 8001bdc:	9b00      	ldr	r3, [sp, #0]
 8001bde:	469c      	mov	ip, r3
 8001be0:	e6e6      	b.n	80019b0 <__aeabi_dmul+0x258>
 8001be2:	4912      	ldr	r1, [pc, #72]	; (8001c2c <__aeabi_dmul+0x4d4>)
 8001be4:	0022      	movs	r2, r4
 8001be6:	4461      	add	r1, ip
 8001be8:	002e      	movs	r6, r5
 8001bea:	408d      	lsls	r5, r1
 8001bec:	408a      	lsls	r2, r1
 8001bee:	40c6      	lsrs	r6, r0
 8001bf0:	1e69      	subs	r1, r5, #1
 8001bf2:	418d      	sbcs	r5, r1
 8001bf4:	4332      	orrs	r2, r6
 8001bf6:	432a      	orrs	r2, r5
 8001bf8:	40c4      	lsrs	r4, r0
 8001bfa:	0753      	lsls	r3, r2, #29
 8001bfc:	d0b6      	beq.n	8001b6c <__aeabi_dmul+0x414>
 8001bfe:	210f      	movs	r1, #15
 8001c00:	4011      	ands	r1, r2
 8001c02:	2904      	cmp	r1, #4
 8001c04:	d1ac      	bne.n	8001b60 <__aeabi_dmul+0x408>
 8001c06:	e7b1      	b.n	8001b6c <__aeabi_dmul+0x414>
 8001c08:	0765      	lsls	r5, r4, #29
 8001c0a:	0264      	lsls	r4, r4, #9
 8001c0c:	0b24      	lsrs	r4, r4, #12
 8001c0e:	08d2      	lsrs	r2, r2, #3
 8001c10:	4315      	orrs	r5, r2
 8001c12:	2200      	movs	r2, #0
 8001c14:	e601      	b.n	800181a <__aeabi_dmul+0xc2>
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	0312      	lsls	r2, r2, #12
 8001c1a:	4314      	orrs	r4, r2
 8001c1c:	0324      	lsls	r4, r4, #12
 8001c1e:	4a01      	ldr	r2, [pc, #4]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	e5fa      	b.n	800181a <__aeabi_dmul+0xc2>
 8001c24:	000007ff 	.word	0x000007ff
 8001c28:	0000043e 	.word	0x0000043e
 8001c2c:	0000041e 	.word	0x0000041e

08001c30 <__aeabi_dsub>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	4657      	mov	r7, sl
 8001c34:	464e      	mov	r6, r9
 8001c36:	4645      	mov	r5, r8
 8001c38:	46de      	mov	lr, fp
 8001c3a:	b5e0      	push	{r5, r6, r7, lr}
 8001c3c:	001e      	movs	r6, r3
 8001c3e:	0017      	movs	r7, r2
 8001c40:	004a      	lsls	r2, r1, #1
 8001c42:	030b      	lsls	r3, r1, #12
 8001c44:	0d52      	lsrs	r2, r2, #21
 8001c46:	0a5b      	lsrs	r3, r3, #9
 8001c48:	4690      	mov	r8, r2
 8001c4a:	0f42      	lsrs	r2, r0, #29
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	0fcd      	lsrs	r5, r1, #31
 8001c50:	4ccd      	ldr	r4, [pc, #820]	; (8001f88 <__aeabi_dsub+0x358>)
 8001c52:	0331      	lsls	r1, r6, #12
 8001c54:	00c3      	lsls	r3, r0, #3
 8001c56:	4694      	mov	ip, r2
 8001c58:	0070      	lsls	r0, r6, #1
 8001c5a:	0f7a      	lsrs	r2, r7, #29
 8001c5c:	0a49      	lsrs	r1, r1, #9
 8001c5e:	00ff      	lsls	r7, r7, #3
 8001c60:	469a      	mov	sl, r3
 8001c62:	46b9      	mov	r9, r7
 8001c64:	0d40      	lsrs	r0, r0, #21
 8001c66:	0ff6      	lsrs	r6, r6, #31
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	42a0      	cmp	r0, r4
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x40>
 8001c6e:	e0b1      	b.n	8001dd4 <__aeabi_dsub+0x1a4>
 8001c70:	2201      	movs	r2, #1
 8001c72:	4056      	eors	r6, r2
 8001c74:	46b3      	mov	fp, r6
 8001c76:	42b5      	cmp	r5, r6
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x4c>
 8001c7a:	e088      	b.n	8001d8e <__aeabi_dsub+0x15e>
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	1a12      	subs	r2, r2, r0
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	dc00      	bgt.n	8001c86 <__aeabi_dsub+0x56>
 8001c84:	e0ae      	b.n	8001de4 <__aeabi_dsub+0x1b4>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x5c>
 8001c8a:	e0c1      	b.n	8001e10 <__aeabi_dsub+0x1e0>
 8001c8c:	48be      	ldr	r0, [pc, #760]	; (8001f88 <__aeabi_dsub+0x358>)
 8001c8e:	4580      	cmp	r8, r0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x64>
 8001c92:	e151      	b.n	8001f38 <__aeabi_dsub+0x308>
 8001c94:	2080      	movs	r0, #128	; 0x80
 8001c96:	0400      	lsls	r0, r0, #16
 8001c98:	4301      	orrs	r1, r0
 8001c9a:	2a38      	cmp	r2, #56	; 0x38
 8001c9c:	dd00      	ble.n	8001ca0 <__aeabi_dsub+0x70>
 8001c9e:	e17b      	b.n	8001f98 <__aeabi_dsub+0x368>
 8001ca0:	2a1f      	cmp	r2, #31
 8001ca2:	dd00      	ble.n	8001ca6 <__aeabi_dsub+0x76>
 8001ca4:	e1ee      	b.n	8002084 <__aeabi_dsub+0x454>
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	003e      	movs	r6, r7
 8001caa:	1a80      	subs	r0, r0, r2
 8001cac:	000c      	movs	r4, r1
 8001cae:	40d6      	lsrs	r6, r2
 8001cb0:	40d1      	lsrs	r1, r2
 8001cb2:	4087      	lsls	r7, r0
 8001cb4:	4662      	mov	r2, ip
 8001cb6:	4084      	lsls	r4, r0
 8001cb8:	1a52      	subs	r2, r2, r1
 8001cba:	1e78      	subs	r0, r7, #1
 8001cbc:	4187      	sbcs	r7, r0
 8001cbe:	4694      	mov	ip, r2
 8001cc0:	4334      	orrs	r4, r6
 8001cc2:	4327      	orrs	r7, r4
 8001cc4:	1bdc      	subs	r4, r3, r7
 8001cc6:	42a3      	cmp	r3, r4
 8001cc8:	419b      	sbcs	r3, r3
 8001cca:	4662      	mov	r2, ip
 8001ccc:	425b      	negs	r3, r3
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	d400      	bmi.n	8001cda <__aeabi_dsub+0xaa>
 8001cd8:	e118      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 8001cda:	464b      	mov	r3, r9
 8001cdc:	0258      	lsls	r0, r3, #9
 8001cde:	0a43      	lsrs	r3, r0, #9
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0xba>
 8001ce8:	e137      	b.n	8001f5a <__aeabi_dsub+0x32a>
 8001cea:	4648      	mov	r0, r9
 8001cec:	f000 fbdc 	bl	80024a8 <__clzsi2>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	3908      	subs	r1, #8
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	0022      	movs	r2, r4
 8001cf8:	4648      	mov	r0, r9
 8001cfa:	1a5b      	subs	r3, r3, r1
 8001cfc:	40da      	lsrs	r2, r3
 8001cfe:	4088      	lsls	r0, r1
 8001d00:	408c      	lsls	r4, r1
 8001d02:	4643      	mov	r3, r8
 8001d04:	4310      	orrs	r0, r2
 8001d06:	4588      	cmp	r8, r1
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_dsub+0xdc>
 8001d0a:	e136      	b.n	8001f7a <__aeabi_dsub+0x34a>
 8001d0c:	1ac9      	subs	r1, r1, r3
 8001d0e:	1c4b      	adds	r3, r1, #1
 8001d10:	2b1f      	cmp	r3, #31
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dsub+0xe6>
 8001d14:	e0ea      	b.n	8001eec <__aeabi_dsub+0x2bc>
 8001d16:	2220      	movs	r2, #32
 8001d18:	0026      	movs	r6, r4
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	0001      	movs	r1, r0
 8001d1e:	4094      	lsls	r4, r2
 8001d20:	40de      	lsrs	r6, r3
 8001d22:	40d8      	lsrs	r0, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	4091      	lsls	r1, r2
 8001d28:	1e62      	subs	r2, r4, #1
 8001d2a:	4194      	sbcs	r4, r2
 8001d2c:	4681      	mov	r9, r0
 8001d2e:	4698      	mov	r8, r3
 8001d30:	4331      	orrs	r1, r6
 8001d32:	430c      	orrs	r4, r1
 8001d34:	0763      	lsls	r3, r4, #29
 8001d36:	d009      	beq.n	8001d4c <__aeabi_dsub+0x11c>
 8001d38:	230f      	movs	r3, #15
 8001d3a:	4023      	ands	r3, r4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d005      	beq.n	8001d4c <__aeabi_dsub+0x11c>
 8001d40:	1d23      	adds	r3, r4, #4
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	41a4      	sbcs	r4, r4
 8001d46:	4264      	negs	r4, r4
 8001d48:	44a1      	add	r9, r4
 8001d4a:	001c      	movs	r4, r3
 8001d4c:	464b      	mov	r3, r9
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	d400      	bmi.n	8001d54 <__aeabi_dsub+0x124>
 8001d52:	e0de      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 8001d54:	4641      	mov	r1, r8
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <__aeabi_dsub+0x358>)
 8001d58:	3101      	adds	r1, #1
 8001d5a:	4299      	cmp	r1, r3
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x130>
 8001d5e:	e0e7      	b.n	8001f30 <__aeabi_dsub+0x300>
 8001d60:	464b      	mov	r3, r9
 8001d62:	488a      	ldr	r0, [pc, #552]	; (8001f8c <__aeabi_dsub+0x35c>)
 8001d64:	08e4      	lsrs	r4, r4, #3
 8001d66:	4003      	ands	r3, r0
 8001d68:	0018      	movs	r0, r3
 8001d6a:	0549      	lsls	r1, r1, #21
 8001d6c:	075b      	lsls	r3, r3, #29
 8001d6e:	0240      	lsls	r0, r0, #9
 8001d70:	4323      	orrs	r3, r4
 8001d72:	0d4a      	lsrs	r2, r1, #21
 8001d74:	0b04      	lsrs	r4, r0, #12
 8001d76:	0512      	lsls	r2, r2, #20
 8001d78:	07ed      	lsls	r5, r5, #31
 8001d7a:	4322      	orrs	r2, r4
 8001d7c:	432a      	orrs	r2, r5
 8001d7e:	0018      	movs	r0, r3
 8001d80:	0011      	movs	r1, r2
 8001d82:	bcf0      	pop	{r4, r5, r6, r7}
 8001d84:	46bb      	mov	fp, r7
 8001d86:	46b2      	mov	sl, r6
 8001d88:	46a9      	mov	r9, r5
 8001d8a:	46a0      	mov	r8, r4
 8001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d8e:	4642      	mov	r2, r8
 8001d90:	1a12      	subs	r2, r2, r0
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	dd52      	ble.n	8001e3c <__aeabi_dsub+0x20c>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x16c>
 8001d9a:	e09c      	b.n	8001ed6 <__aeabi_dsub+0x2a6>
 8001d9c:	45a0      	cmp	r8, r4
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x172>
 8001da0:	e0ca      	b.n	8001f38 <__aeabi_dsub+0x308>
 8001da2:	2080      	movs	r0, #128	; 0x80
 8001da4:	0400      	lsls	r0, r0, #16
 8001da6:	4301      	orrs	r1, r0
 8001da8:	2a38      	cmp	r2, #56	; 0x38
 8001daa:	dd00      	ble.n	8001dae <__aeabi_dsub+0x17e>
 8001dac:	e149      	b.n	8002042 <__aeabi_dsub+0x412>
 8001dae:	2a1f      	cmp	r2, #31
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_dsub+0x184>
 8001db2:	e197      	b.n	80020e4 <__aeabi_dsub+0x4b4>
 8001db4:	0010      	movs	r0, r2
 8001db6:	000e      	movs	r6, r1
 8001db8:	3820      	subs	r0, #32
 8001dba:	40c6      	lsrs	r6, r0
 8001dbc:	2a20      	cmp	r2, #32
 8001dbe:	d004      	beq.n	8001dca <__aeabi_dsub+0x19a>
 8001dc0:	2040      	movs	r0, #64	; 0x40
 8001dc2:	1a82      	subs	r2, r0, r2
 8001dc4:	4091      	lsls	r1, r2
 8001dc6:	430f      	orrs	r7, r1
 8001dc8:	46b9      	mov	r9, r7
 8001dca:	464c      	mov	r4, r9
 8001dcc:	1e62      	subs	r2, r4, #1
 8001dce:	4194      	sbcs	r4, r2
 8001dd0:	4334      	orrs	r4, r6
 8001dd2:	e13a      	b.n	800204a <__aeabi_dsub+0x41a>
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	433a      	orrs	r2, r7
 8001dd8:	d028      	beq.n	8001e2c <__aeabi_dsub+0x1fc>
 8001dda:	46b3      	mov	fp, r6
 8001ddc:	42b5      	cmp	r5, r6
 8001dde:	d02b      	beq.n	8001e38 <__aeabi_dsub+0x208>
 8001de0:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <__aeabi_dsub+0x360>)
 8001de2:	4442      	add	r2, r8
 8001de4:	2a00      	cmp	r2, #0
 8001de6:	d05d      	beq.n	8001ea4 <__aeabi_dsub+0x274>
 8001de8:	4642      	mov	r2, r8
 8001dea:	4644      	mov	r4, r8
 8001dec:	1a82      	subs	r2, r0, r2
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x1c4>
 8001df2:	e0f5      	b.n	8001fe0 <__aeabi_dsub+0x3b0>
 8001df4:	4665      	mov	r5, ip
 8001df6:	431d      	orrs	r5, r3
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x1cc>
 8001dfa:	e19c      	b.n	8002136 <__aeabi_dsub+0x506>
 8001dfc:	1e55      	subs	r5, r2, #1
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x1d4>
 8001e02:	e1fb      	b.n	80021fc <__aeabi_dsub+0x5cc>
 8001e04:	4c60      	ldr	r4, [pc, #384]	; (8001f88 <__aeabi_dsub+0x358>)
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x1dc>
 8001e0a:	e1bd      	b.n	8002188 <__aeabi_dsub+0x558>
 8001e0c:	002a      	movs	r2, r5
 8001e0e:	e0f0      	b.n	8001ff2 <__aeabi_dsub+0x3c2>
 8001e10:	0008      	movs	r0, r1
 8001e12:	4338      	orrs	r0, r7
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x1e8>
 8001e16:	e0c3      	b.n	8001fa0 <__aeabi_dsub+0x370>
 8001e18:	1e50      	subs	r0, r2, #1
 8001e1a:	2a01      	cmp	r2, #1
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x1f0>
 8001e1e:	e1a8      	b.n	8002172 <__aeabi_dsub+0x542>
 8001e20:	4c59      	ldr	r4, [pc, #356]	; (8001f88 <__aeabi_dsub+0x358>)
 8001e22:	42a2      	cmp	r2, r4
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x1f8>
 8001e26:	e087      	b.n	8001f38 <__aeabi_dsub+0x308>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	e736      	b.n	8001c9a <__aeabi_dsub+0x6a>
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4056      	eors	r6, r2
 8001e30:	46b3      	mov	fp, r6
 8001e32:	42b5      	cmp	r5, r6
 8001e34:	d000      	beq.n	8001e38 <__aeabi_dsub+0x208>
 8001e36:	e721      	b.n	8001c7c <__aeabi_dsub+0x4c>
 8001e38:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <__aeabi_dsub+0x360>)
 8001e3a:	4442      	add	r2, r8
 8001e3c:	2a00      	cmp	r2, #0
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_dsub+0x212>
 8001e40:	e0b5      	b.n	8001fae <__aeabi_dsub+0x37e>
 8001e42:	4642      	mov	r2, r8
 8001e44:	4644      	mov	r4, r8
 8001e46:	1a82      	subs	r2, r0, r2
 8001e48:	2c00      	cmp	r4, #0
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x21e>
 8001e4c:	e138      	b.n	80020c0 <__aeabi_dsub+0x490>
 8001e4e:	4e4e      	ldr	r6, [pc, #312]	; (8001f88 <__aeabi_dsub+0x358>)
 8001e50:	42b0      	cmp	r0, r6
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x226>
 8001e54:	e1de      	b.n	8002214 <__aeabi_dsub+0x5e4>
 8001e56:	2680      	movs	r6, #128	; 0x80
 8001e58:	4664      	mov	r4, ip
 8001e5a:	0436      	lsls	r6, r6, #16
 8001e5c:	4334      	orrs	r4, r6
 8001e5e:	46a4      	mov	ip, r4
 8001e60:	2a38      	cmp	r2, #56	; 0x38
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x236>
 8001e64:	e196      	b.n	8002194 <__aeabi_dsub+0x564>
 8001e66:	2a1f      	cmp	r2, #31
 8001e68:	dd00      	ble.n	8001e6c <__aeabi_dsub+0x23c>
 8001e6a:	e224      	b.n	80022b6 <__aeabi_dsub+0x686>
 8001e6c:	2620      	movs	r6, #32
 8001e6e:	1ab4      	subs	r4, r6, r2
 8001e70:	46a2      	mov	sl, r4
 8001e72:	4664      	mov	r4, ip
 8001e74:	4656      	mov	r6, sl
 8001e76:	40b4      	lsls	r4, r6
 8001e78:	46a1      	mov	r9, r4
 8001e7a:	001c      	movs	r4, r3
 8001e7c:	464e      	mov	r6, r9
 8001e7e:	40d4      	lsrs	r4, r2
 8001e80:	4326      	orrs	r6, r4
 8001e82:	0034      	movs	r4, r6
 8001e84:	4656      	mov	r6, sl
 8001e86:	40b3      	lsls	r3, r6
 8001e88:	1e5e      	subs	r6, r3, #1
 8001e8a:	41b3      	sbcs	r3, r6
 8001e8c:	431c      	orrs	r4, r3
 8001e8e:	4663      	mov	r3, ip
 8001e90:	40d3      	lsrs	r3, r2
 8001e92:	18c9      	adds	r1, r1, r3
 8001e94:	19e4      	adds	r4, r4, r7
 8001e96:	42bc      	cmp	r4, r7
 8001e98:	41bf      	sbcs	r7, r7
 8001e9a:	427f      	negs	r7, r7
 8001e9c:	46b9      	mov	r9, r7
 8001e9e:	4680      	mov	r8, r0
 8001ea0:	4489      	add	r9, r1
 8001ea2:	e0d8      	b.n	8002056 <__aeabi_dsub+0x426>
 8001ea4:	4640      	mov	r0, r8
 8001ea6:	4c3b      	ldr	r4, [pc, #236]	; (8001f94 <__aeabi_dsub+0x364>)
 8001ea8:	3001      	adds	r0, #1
 8001eaa:	4220      	tst	r0, r4
 8001eac:	d000      	beq.n	8001eb0 <__aeabi_dsub+0x280>
 8001eae:	e0b4      	b.n	800201a <__aeabi_dsub+0x3ea>
 8001eb0:	4640      	mov	r0, r8
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x288>
 8001eb6:	e144      	b.n	8002142 <__aeabi_dsub+0x512>
 8001eb8:	4660      	mov	r0, ip
 8001eba:	4318      	orrs	r0, r3
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x290>
 8001ebe:	e190      	b.n	80021e2 <__aeabi_dsub+0x5b2>
 8001ec0:	0008      	movs	r0, r1
 8001ec2:	4338      	orrs	r0, r7
 8001ec4:	d000      	beq.n	8001ec8 <__aeabi_dsub+0x298>
 8001ec6:	e1aa      	b.n	800221e <__aeabi_dsub+0x5ee>
 8001ec8:	4661      	mov	r1, ip
 8001eca:	08db      	lsrs	r3, r3, #3
 8001ecc:	0749      	lsls	r1, r1, #29
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	4661      	mov	r1, ip
 8001ed2:	08cc      	lsrs	r4, r1, #3
 8001ed4:	e027      	b.n	8001f26 <__aeabi_dsub+0x2f6>
 8001ed6:	0008      	movs	r0, r1
 8001ed8:	4338      	orrs	r0, r7
 8001eda:	d061      	beq.n	8001fa0 <__aeabi_dsub+0x370>
 8001edc:	1e50      	subs	r0, r2, #1
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x2b4>
 8001ee2:	e139      	b.n	8002158 <__aeabi_dsub+0x528>
 8001ee4:	42a2      	cmp	r2, r4
 8001ee6:	d027      	beq.n	8001f38 <__aeabi_dsub+0x308>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	e75d      	b.n	8001da8 <__aeabi_dsub+0x178>
 8001eec:	0002      	movs	r2, r0
 8001eee:	391f      	subs	r1, #31
 8001ef0:	40ca      	lsrs	r2, r1
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d003      	beq.n	8001f00 <__aeabi_dsub+0x2d0>
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4098      	lsls	r0, r3
 8001efe:	4304      	orrs	r4, r0
 8001f00:	1e63      	subs	r3, r4, #1
 8001f02:	419c      	sbcs	r4, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	4699      	mov	r9, r3
 8001f08:	4698      	mov	r8, r3
 8001f0a:	430c      	orrs	r4, r1
 8001f0c:	0763      	lsls	r3, r4, #29
 8001f0e:	d000      	beq.n	8001f12 <__aeabi_dsub+0x2e2>
 8001f10:	e712      	b.n	8001d38 <__aeabi_dsub+0x108>
 8001f12:	464b      	mov	r3, r9
 8001f14:	464a      	mov	r2, r9
 8001f16:	08e4      	lsrs	r4, r4, #3
 8001f18:	075b      	lsls	r3, r3, #29
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	08d4      	lsrs	r4, r2, #3
 8001f1e:	4642      	mov	r2, r8
 8001f20:	4919      	ldr	r1, [pc, #100]	; (8001f88 <__aeabi_dsub+0x358>)
 8001f22:	428a      	cmp	r2, r1
 8001f24:	d00e      	beq.n	8001f44 <__aeabi_dsub+0x314>
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	0d52      	lsrs	r2, r2, #21
 8001f2e:	e722      	b.n	8001d76 <__aeabi_dsub+0x146>
 8001f30:	000a      	movs	r2, r1
 8001f32:	2400      	movs	r4, #0
 8001f34:	2300      	movs	r3, #0
 8001f36:	e71e      	b.n	8001d76 <__aeabi_dsub+0x146>
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	0752      	lsls	r2, r2, #29
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	4662      	mov	r2, ip
 8001f42:	08d4      	lsrs	r4, r2, #3
 8001f44:	001a      	movs	r2, r3
 8001f46:	4322      	orrs	r2, r4
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x31c>
 8001f4a:	e1fc      	b.n	8002346 <__aeabi_dsub+0x716>
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	0312      	lsls	r2, r2, #12
 8001f50:	4314      	orrs	r4, r2
 8001f52:	0324      	lsls	r4, r4, #12
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <__aeabi_dsub+0x358>)
 8001f56:	0b24      	lsrs	r4, r4, #12
 8001f58:	e70d      	b.n	8001d76 <__aeabi_dsub+0x146>
 8001f5a:	0020      	movs	r0, r4
 8001f5c:	f000 faa4 	bl	80024a8 <__clzsi2>
 8001f60:	0001      	movs	r1, r0
 8001f62:	3118      	adds	r1, #24
 8001f64:	291f      	cmp	r1, #31
 8001f66:	dc00      	bgt.n	8001f6a <__aeabi_dsub+0x33a>
 8001f68:	e6c4      	b.n	8001cf4 <__aeabi_dsub+0xc4>
 8001f6a:	3808      	subs	r0, #8
 8001f6c:	4084      	lsls	r4, r0
 8001f6e:	4643      	mov	r3, r8
 8001f70:	0020      	movs	r0, r4
 8001f72:	2400      	movs	r4, #0
 8001f74:	4588      	cmp	r8, r1
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_dsub+0x34a>
 8001f78:	e6c8      	b.n	8001d0c <__aeabi_dsub+0xdc>
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__aeabi_dsub+0x35c>)
 8001f7c:	1a5b      	subs	r3, r3, r1
 8001f7e:	4010      	ands	r0, r2
 8001f80:	4698      	mov	r8, r3
 8001f82:	4681      	mov	r9, r0
 8001f84:	e6d6      	b.n	8001d34 <__aeabi_dsub+0x104>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	000007ff 	.word	0x000007ff
 8001f8c:	ff7fffff 	.word	0xff7fffff
 8001f90:	fffff801 	.word	0xfffff801
 8001f94:	000007fe 	.word	0x000007fe
 8001f98:	430f      	orrs	r7, r1
 8001f9a:	1e7a      	subs	r2, r7, #1
 8001f9c:	4197      	sbcs	r7, r2
 8001f9e:	e691      	b.n	8001cc4 <__aeabi_dsub+0x94>
 8001fa0:	4661      	mov	r1, ip
 8001fa2:	08db      	lsrs	r3, r3, #3
 8001fa4:	0749      	lsls	r1, r1, #29
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	4661      	mov	r1, ip
 8001faa:	08cc      	lsrs	r4, r1, #3
 8001fac:	e7b8      	b.n	8001f20 <__aeabi_dsub+0x2f0>
 8001fae:	4640      	mov	r0, r8
 8001fb0:	4cd3      	ldr	r4, [pc, #844]	; (8002300 <__aeabi_dsub+0x6d0>)
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	4220      	tst	r0, r4
 8001fb6:	d000      	beq.n	8001fba <__aeabi_dsub+0x38a>
 8001fb8:	e0a2      	b.n	8002100 <__aeabi_dsub+0x4d0>
 8001fba:	4640      	mov	r0, r8
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d000      	beq.n	8001fc2 <__aeabi_dsub+0x392>
 8001fc0:	e101      	b.n	80021c6 <__aeabi_dsub+0x596>
 8001fc2:	4660      	mov	r0, ip
 8001fc4:	4318      	orrs	r0, r3
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dsub+0x39a>
 8001fc8:	e15e      	b.n	8002288 <__aeabi_dsub+0x658>
 8001fca:	0008      	movs	r0, r1
 8001fcc:	4338      	orrs	r0, r7
 8001fce:	d000      	beq.n	8001fd2 <__aeabi_dsub+0x3a2>
 8001fd0:	e15f      	b.n	8002292 <__aeabi_dsub+0x662>
 8001fd2:	4661      	mov	r1, ip
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	0749      	lsls	r1, r1, #29
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	4661      	mov	r1, ip
 8001fdc:	08cc      	lsrs	r4, r1, #3
 8001fde:	e7a2      	b.n	8001f26 <__aeabi_dsub+0x2f6>
 8001fe0:	4dc8      	ldr	r5, [pc, #800]	; (8002304 <__aeabi_dsub+0x6d4>)
 8001fe2:	42a8      	cmp	r0, r5
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3b8>
 8001fe6:	e0cf      	b.n	8002188 <__aeabi_dsub+0x558>
 8001fe8:	2580      	movs	r5, #128	; 0x80
 8001fea:	4664      	mov	r4, ip
 8001fec:	042d      	lsls	r5, r5, #16
 8001fee:	432c      	orrs	r4, r5
 8001ff0:	46a4      	mov	ip, r4
 8001ff2:	2a38      	cmp	r2, #56	; 0x38
 8001ff4:	dc56      	bgt.n	80020a4 <__aeabi_dsub+0x474>
 8001ff6:	2a1f      	cmp	r2, #31
 8001ff8:	dd00      	ble.n	8001ffc <__aeabi_dsub+0x3cc>
 8001ffa:	e0d1      	b.n	80021a0 <__aeabi_dsub+0x570>
 8001ffc:	2520      	movs	r5, #32
 8001ffe:	001e      	movs	r6, r3
 8002000:	1aad      	subs	r5, r5, r2
 8002002:	4664      	mov	r4, ip
 8002004:	40ab      	lsls	r3, r5
 8002006:	40ac      	lsls	r4, r5
 8002008:	40d6      	lsrs	r6, r2
 800200a:	1e5d      	subs	r5, r3, #1
 800200c:	41ab      	sbcs	r3, r5
 800200e:	4334      	orrs	r4, r6
 8002010:	4323      	orrs	r3, r4
 8002012:	4664      	mov	r4, ip
 8002014:	40d4      	lsrs	r4, r2
 8002016:	1b09      	subs	r1, r1, r4
 8002018:	e049      	b.n	80020ae <__aeabi_dsub+0x47e>
 800201a:	4660      	mov	r0, ip
 800201c:	1bdc      	subs	r4, r3, r7
 800201e:	1a46      	subs	r6, r0, r1
 8002020:	42a3      	cmp	r3, r4
 8002022:	4180      	sbcs	r0, r0
 8002024:	4240      	negs	r0, r0
 8002026:	4681      	mov	r9, r0
 8002028:	0030      	movs	r0, r6
 800202a:	464e      	mov	r6, r9
 800202c:	1b80      	subs	r0, r0, r6
 800202e:	4681      	mov	r9, r0
 8002030:	0200      	lsls	r0, r0, #8
 8002032:	d476      	bmi.n	8002122 <__aeabi_dsub+0x4f2>
 8002034:	464b      	mov	r3, r9
 8002036:	4323      	orrs	r3, r4
 8002038:	d000      	beq.n	800203c <__aeabi_dsub+0x40c>
 800203a:	e652      	b.n	8001ce2 <__aeabi_dsub+0xb2>
 800203c:	2400      	movs	r4, #0
 800203e:	2500      	movs	r5, #0
 8002040:	e771      	b.n	8001f26 <__aeabi_dsub+0x2f6>
 8002042:	4339      	orrs	r1, r7
 8002044:	000c      	movs	r4, r1
 8002046:	1e62      	subs	r2, r4, #1
 8002048:	4194      	sbcs	r4, r2
 800204a:	18e4      	adds	r4, r4, r3
 800204c:	429c      	cmp	r4, r3
 800204e:	419b      	sbcs	r3, r3
 8002050:	425b      	negs	r3, r3
 8002052:	4463      	add	r3, ip
 8002054:	4699      	mov	r9, r3
 8002056:	464b      	mov	r3, r9
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	d400      	bmi.n	800205e <__aeabi_dsub+0x42e>
 800205c:	e756      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 800205e:	2301      	movs	r3, #1
 8002060:	469c      	mov	ip, r3
 8002062:	4ba8      	ldr	r3, [pc, #672]	; (8002304 <__aeabi_dsub+0x6d4>)
 8002064:	44e0      	add	r8, ip
 8002066:	4598      	cmp	r8, r3
 8002068:	d038      	beq.n	80020dc <__aeabi_dsub+0x4ac>
 800206a:	464b      	mov	r3, r9
 800206c:	48a6      	ldr	r0, [pc, #664]	; (8002308 <__aeabi_dsub+0x6d8>)
 800206e:	2201      	movs	r2, #1
 8002070:	4003      	ands	r3, r0
 8002072:	0018      	movs	r0, r3
 8002074:	0863      	lsrs	r3, r4, #1
 8002076:	4014      	ands	r4, r2
 8002078:	431c      	orrs	r4, r3
 800207a:	07c3      	lsls	r3, r0, #31
 800207c:	431c      	orrs	r4, r3
 800207e:	0843      	lsrs	r3, r0, #1
 8002080:	4699      	mov	r9, r3
 8002082:	e657      	b.n	8001d34 <__aeabi_dsub+0x104>
 8002084:	0010      	movs	r0, r2
 8002086:	000e      	movs	r6, r1
 8002088:	3820      	subs	r0, #32
 800208a:	40c6      	lsrs	r6, r0
 800208c:	2a20      	cmp	r2, #32
 800208e:	d004      	beq.n	800209a <__aeabi_dsub+0x46a>
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	1a82      	subs	r2, r0, r2
 8002094:	4091      	lsls	r1, r2
 8002096:	430f      	orrs	r7, r1
 8002098:	46b9      	mov	r9, r7
 800209a:	464f      	mov	r7, r9
 800209c:	1e7a      	subs	r2, r7, #1
 800209e:	4197      	sbcs	r7, r2
 80020a0:	4337      	orrs	r7, r6
 80020a2:	e60f      	b.n	8001cc4 <__aeabi_dsub+0x94>
 80020a4:	4662      	mov	r2, ip
 80020a6:	431a      	orrs	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	4193      	sbcs	r3, r2
 80020ae:	1afc      	subs	r4, r7, r3
 80020b0:	42a7      	cmp	r7, r4
 80020b2:	41bf      	sbcs	r7, r7
 80020b4:	427f      	negs	r7, r7
 80020b6:	1bcb      	subs	r3, r1, r7
 80020b8:	4699      	mov	r9, r3
 80020ba:	465d      	mov	r5, fp
 80020bc:	4680      	mov	r8, r0
 80020be:	e608      	b.n	8001cd2 <__aeabi_dsub+0xa2>
 80020c0:	4666      	mov	r6, ip
 80020c2:	431e      	orrs	r6, r3
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x498>
 80020c6:	e0be      	b.n	8002246 <__aeabi_dsub+0x616>
 80020c8:	1e56      	subs	r6, r2, #1
 80020ca:	2a01      	cmp	r2, #1
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x4a0>
 80020ce:	e109      	b.n	80022e4 <__aeabi_dsub+0x6b4>
 80020d0:	4c8c      	ldr	r4, [pc, #560]	; (8002304 <__aeabi_dsub+0x6d4>)
 80020d2:	42a2      	cmp	r2, r4
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x4a8>
 80020d6:	e119      	b.n	800230c <__aeabi_dsub+0x6dc>
 80020d8:	0032      	movs	r2, r6
 80020da:	e6c1      	b.n	8001e60 <__aeabi_dsub+0x230>
 80020dc:	4642      	mov	r2, r8
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e648      	b.n	8001d76 <__aeabi_dsub+0x146>
 80020e4:	2020      	movs	r0, #32
 80020e6:	000c      	movs	r4, r1
 80020e8:	1a80      	subs	r0, r0, r2
 80020ea:	003e      	movs	r6, r7
 80020ec:	4087      	lsls	r7, r0
 80020ee:	4084      	lsls	r4, r0
 80020f0:	40d6      	lsrs	r6, r2
 80020f2:	1e78      	subs	r0, r7, #1
 80020f4:	4187      	sbcs	r7, r0
 80020f6:	40d1      	lsrs	r1, r2
 80020f8:	4334      	orrs	r4, r6
 80020fa:	433c      	orrs	r4, r7
 80020fc:	448c      	add	ip, r1
 80020fe:	e7a4      	b.n	800204a <__aeabi_dsub+0x41a>
 8002100:	4a80      	ldr	r2, [pc, #512]	; (8002304 <__aeabi_dsub+0x6d4>)
 8002102:	4290      	cmp	r0, r2
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x4d8>
 8002106:	e0e9      	b.n	80022dc <__aeabi_dsub+0x6ac>
 8002108:	19df      	adds	r7, r3, r7
 800210a:	429f      	cmp	r7, r3
 800210c:	419b      	sbcs	r3, r3
 800210e:	4461      	add	r1, ip
 8002110:	425b      	negs	r3, r3
 8002112:	18c9      	adds	r1, r1, r3
 8002114:	07cc      	lsls	r4, r1, #31
 8002116:	087f      	lsrs	r7, r7, #1
 8002118:	084b      	lsrs	r3, r1, #1
 800211a:	4699      	mov	r9, r3
 800211c:	4680      	mov	r8, r0
 800211e:	433c      	orrs	r4, r7
 8002120:	e6f4      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 8002122:	1afc      	subs	r4, r7, r3
 8002124:	42a7      	cmp	r7, r4
 8002126:	41bf      	sbcs	r7, r7
 8002128:	4663      	mov	r3, ip
 800212a:	427f      	negs	r7, r7
 800212c:	1ac9      	subs	r1, r1, r3
 800212e:	1bcb      	subs	r3, r1, r7
 8002130:	4699      	mov	r9, r3
 8002132:	465d      	mov	r5, fp
 8002134:	e5d5      	b.n	8001ce2 <__aeabi_dsub+0xb2>
 8002136:	08ff      	lsrs	r7, r7, #3
 8002138:	074b      	lsls	r3, r1, #29
 800213a:	465d      	mov	r5, fp
 800213c:	433b      	orrs	r3, r7
 800213e:	08cc      	lsrs	r4, r1, #3
 8002140:	e6ee      	b.n	8001f20 <__aeabi_dsub+0x2f0>
 8002142:	4662      	mov	r2, ip
 8002144:	431a      	orrs	r2, r3
 8002146:	d000      	beq.n	800214a <__aeabi_dsub+0x51a>
 8002148:	e082      	b.n	8002250 <__aeabi_dsub+0x620>
 800214a:	000b      	movs	r3, r1
 800214c:	433b      	orrs	r3, r7
 800214e:	d11b      	bne.n	8002188 <__aeabi_dsub+0x558>
 8002150:	2480      	movs	r4, #128	; 0x80
 8002152:	2500      	movs	r5, #0
 8002154:	0324      	lsls	r4, r4, #12
 8002156:	e6f9      	b.n	8001f4c <__aeabi_dsub+0x31c>
 8002158:	19dc      	adds	r4, r3, r7
 800215a:	429c      	cmp	r4, r3
 800215c:	419b      	sbcs	r3, r3
 800215e:	4461      	add	r1, ip
 8002160:	4689      	mov	r9, r1
 8002162:	425b      	negs	r3, r3
 8002164:	4499      	add	r9, r3
 8002166:	464b      	mov	r3, r9
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	d444      	bmi.n	80021f6 <__aeabi_dsub+0x5c6>
 800216c:	2301      	movs	r3, #1
 800216e:	4698      	mov	r8, r3
 8002170:	e6cc      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 8002172:	1bdc      	subs	r4, r3, r7
 8002174:	4662      	mov	r2, ip
 8002176:	42a3      	cmp	r3, r4
 8002178:	419b      	sbcs	r3, r3
 800217a:	1a51      	subs	r1, r2, r1
 800217c:	425b      	negs	r3, r3
 800217e:	1acb      	subs	r3, r1, r3
 8002180:	4699      	mov	r9, r3
 8002182:	2301      	movs	r3, #1
 8002184:	4698      	mov	r8, r3
 8002186:	e5a4      	b.n	8001cd2 <__aeabi_dsub+0xa2>
 8002188:	08ff      	lsrs	r7, r7, #3
 800218a:	074b      	lsls	r3, r1, #29
 800218c:	465d      	mov	r5, fp
 800218e:	433b      	orrs	r3, r7
 8002190:	08cc      	lsrs	r4, r1, #3
 8002192:	e6d7      	b.n	8001f44 <__aeabi_dsub+0x314>
 8002194:	4662      	mov	r2, ip
 8002196:	431a      	orrs	r2, r3
 8002198:	0014      	movs	r4, r2
 800219a:	1e63      	subs	r3, r4, #1
 800219c:	419c      	sbcs	r4, r3
 800219e:	e679      	b.n	8001e94 <__aeabi_dsub+0x264>
 80021a0:	0015      	movs	r5, r2
 80021a2:	4664      	mov	r4, ip
 80021a4:	3d20      	subs	r5, #32
 80021a6:	40ec      	lsrs	r4, r5
 80021a8:	46a0      	mov	r8, r4
 80021aa:	2a20      	cmp	r2, #32
 80021ac:	d005      	beq.n	80021ba <__aeabi_dsub+0x58a>
 80021ae:	2540      	movs	r5, #64	; 0x40
 80021b0:	4664      	mov	r4, ip
 80021b2:	1aaa      	subs	r2, r5, r2
 80021b4:	4094      	lsls	r4, r2
 80021b6:	4323      	orrs	r3, r4
 80021b8:	469a      	mov	sl, r3
 80021ba:	4654      	mov	r4, sl
 80021bc:	1e63      	subs	r3, r4, #1
 80021be:	419c      	sbcs	r4, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	4323      	orrs	r3, r4
 80021c4:	e773      	b.n	80020ae <__aeabi_dsub+0x47e>
 80021c6:	4662      	mov	r2, ip
 80021c8:	431a      	orrs	r2, r3
 80021ca:	d023      	beq.n	8002214 <__aeabi_dsub+0x5e4>
 80021cc:	000a      	movs	r2, r1
 80021ce:	433a      	orrs	r2, r7
 80021d0:	d000      	beq.n	80021d4 <__aeabi_dsub+0x5a4>
 80021d2:	e0a0      	b.n	8002316 <__aeabi_dsub+0x6e6>
 80021d4:	4662      	mov	r2, ip
 80021d6:	08db      	lsrs	r3, r3, #3
 80021d8:	0752      	lsls	r2, r2, #29
 80021da:	4313      	orrs	r3, r2
 80021dc:	4662      	mov	r2, ip
 80021de:	08d4      	lsrs	r4, r2, #3
 80021e0:	e6b0      	b.n	8001f44 <__aeabi_dsub+0x314>
 80021e2:	000b      	movs	r3, r1
 80021e4:	433b      	orrs	r3, r7
 80021e6:	d100      	bne.n	80021ea <__aeabi_dsub+0x5ba>
 80021e8:	e728      	b.n	800203c <__aeabi_dsub+0x40c>
 80021ea:	08ff      	lsrs	r7, r7, #3
 80021ec:	074b      	lsls	r3, r1, #29
 80021ee:	465d      	mov	r5, fp
 80021f0:	433b      	orrs	r3, r7
 80021f2:	08cc      	lsrs	r4, r1, #3
 80021f4:	e697      	b.n	8001f26 <__aeabi_dsub+0x2f6>
 80021f6:	2302      	movs	r3, #2
 80021f8:	4698      	mov	r8, r3
 80021fa:	e736      	b.n	800206a <__aeabi_dsub+0x43a>
 80021fc:	1afc      	subs	r4, r7, r3
 80021fe:	42a7      	cmp	r7, r4
 8002200:	41bf      	sbcs	r7, r7
 8002202:	4663      	mov	r3, ip
 8002204:	427f      	negs	r7, r7
 8002206:	1ac9      	subs	r1, r1, r3
 8002208:	1bcb      	subs	r3, r1, r7
 800220a:	4699      	mov	r9, r3
 800220c:	2301      	movs	r3, #1
 800220e:	465d      	mov	r5, fp
 8002210:	4698      	mov	r8, r3
 8002212:	e55e      	b.n	8001cd2 <__aeabi_dsub+0xa2>
 8002214:	074b      	lsls	r3, r1, #29
 8002216:	08ff      	lsrs	r7, r7, #3
 8002218:	433b      	orrs	r3, r7
 800221a:	08cc      	lsrs	r4, r1, #3
 800221c:	e692      	b.n	8001f44 <__aeabi_dsub+0x314>
 800221e:	1bdc      	subs	r4, r3, r7
 8002220:	4660      	mov	r0, ip
 8002222:	42a3      	cmp	r3, r4
 8002224:	41b6      	sbcs	r6, r6
 8002226:	1a40      	subs	r0, r0, r1
 8002228:	4276      	negs	r6, r6
 800222a:	1b80      	subs	r0, r0, r6
 800222c:	4681      	mov	r9, r0
 800222e:	0200      	lsls	r0, r0, #8
 8002230:	d560      	bpl.n	80022f4 <__aeabi_dsub+0x6c4>
 8002232:	1afc      	subs	r4, r7, r3
 8002234:	42a7      	cmp	r7, r4
 8002236:	41bf      	sbcs	r7, r7
 8002238:	4663      	mov	r3, ip
 800223a:	427f      	negs	r7, r7
 800223c:	1ac9      	subs	r1, r1, r3
 800223e:	1bcb      	subs	r3, r1, r7
 8002240:	4699      	mov	r9, r3
 8002242:	465d      	mov	r5, fp
 8002244:	e576      	b.n	8001d34 <__aeabi_dsub+0x104>
 8002246:	08ff      	lsrs	r7, r7, #3
 8002248:	074b      	lsls	r3, r1, #29
 800224a:	433b      	orrs	r3, r7
 800224c:	08cc      	lsrs	r4, r1, #3
 800224e:	e667      	b.n	8001f20 <__aeabi_dsub+0x2f0>
 8002250:	000a      	movs	r2, r1
 8002252:	08db      	lsrs	r3, r3, #3
 8002254:	433a      	orrs	r2, r7
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x62a>
 8002258:	e66f      	b.n	8001f3a <__aeabi_dsub+0x30a>
 800225a:	4662      	mov	r2, ip
 800225c:	0752      	lsls	r2, r2, #29
 800225e:	4313      	orrs	r3, r2
 8002260:	4662      	mov	r2, ip
 8002262:	08d4      	lsrs	r4, r2, #3
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	0312      	lsls	r2, r2, #12
 8002268:	4214      	tst	r4, r2
 800226a:	d007      	beq.n	800227c <__aeabi_dsub+0x64c>
 800226c:	08c8      	lsrs	r0, r1, #3
 800226e:	4210      	tst	r0, r2
 8002270:	d104      	bne.n	800227c <__aeabi_dsub+0x64c>
 8002272:	465d      	mov	r5, fp
 8002274:	0004      	movs	r4, r0
 8002276:	08fb      	lsrs	r3, r7, #3
 8002278:	0749      	lsls	r1, r1, #29
 800227a:	430b      	orrs	r3, r1
 800227c:	0f5a      	lsrs	r2, r3, #29
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	0752      	lsls	r2, r2, #29
 8002284:	4313      	orrs	r3, r2
 8002286:	e65d      	b.n	8001f44 <__aeabi_dsub+0x314>
 8002288:	074b      	lsls	r3, r1, #29
 800228a:	08ff      	lsrs	r7, r7, #3
 800228c:	433b      	orrs	r3, r7
 800228e:	08cc      	lsrs	r4, r1, #3
 8002290:	e649      	b.n	8001f26 <__aeabi_dsub+0x2f6>
 8002292:	19dc      	adds	r4, r3, r7
 8002294:	429c      	cmp	r4, r3
 8002296:	419b      	sbcs	r3, r3
 8002298:	4461      	add	r1, ip
 800229a:	4689      	mov	r9, r1
 800229c:	425b      	negs	r3, r3
 800229e:	4499      	add	r9, r3
 80022a0:	464b      	mov	r3, r9
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	d400      	bmi.n	80022a8 <__aeabi_dsub+0x678>
 80022a6:	e631      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 80022a8:	464a      	mov	r2, r9
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <__aeabi_dsub+0x6d8>)
 80022ac:	401a      	ands	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	4691      	mov	r9, r2
 80022b2:	4698      	mov	r8, r3
 80022b4:	e62a      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 80022b6:	0016      	movs	r6, r2
 80022b8:	4664      	mov	r4, ip
 80022ba:	3e20      	subs	r6, #32
 80022bc:	40f4      	lsrs	r4, r6
 80022be:	46a0      	mov	r8, r4
 80022c0:	2a20      	cmp	r2, #32
 80022c2:	d005      	beq.n	80022d0 <__aeabi_dsub+0x6a0>
 80022c4:	2640      	movs	r6, #64	; 0x40
 80022c6:	4664      	mov	r4, ip
 80022c8:	1ab2      	subs	r2, r6, r2
 80022ca:	4094      	lsls	r4, r2
 80022cc:	4323      	orrs	r3, r4
 80022ce:	469a      	mov	sl, r3
 80022d0:	4654      	mov	r4, sl
 80022d2:	1e63      	subs	r3, r4, #1
 80022d4:	419c      	sbcs	r4, r3
 80022d6:	4643      	mov	r3, r8
 80022d8:	431c      	orrs	r4, r3
 80022da:	e5db      	b.n	8001e94 <__aeabi_dsub+0x264>
 80022dc:	0002      	movs	r2, r0
 80022de:	2400      	movs	r4, #0
 80022e0:	2300      	movs	r3, #0
 80022e2:	e548      	b.n	8001d76 <__aeabi_dsub+0x146>
 80022e4:	19dc      	adds	r4, r3, r7
 80022e6:	42bc      	cmp	r4, r7
 80022e8:	41bf      	sbcs	r7, r7
 80022ea:	4461      	add	r1, ip
 80022ec:	4689      	mov	r9, r1
 80022ee:	427f      	negs	r7, r7
 80022f0:	44b9      	add	r9, r7
 80022f2:	e738      	b.n	8002166 <__aeabi_dsub+0x536>
 80022f4:	464b      	mov	r3, r9
 80022f6:	4323      	orrs	r3, r4
 80022f8:	d100      	bne.n	80022fc <__aeabi_dsub+0x6cc>
 80022fa:	e69f      	b.n	800203c <__aeabi_dsub+0x40c>
 80022fc:	e606      	b.n	8001f0c <__aeabi_dsub+0x2dc>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	000007fe 	.word	0x000007fe
 8002304:	000007ff 	.word	0x000007ff
 8002308:	ff7fffff 	.word	0xff7fffff
 800230c:	08ff      	lsrs	r7, r7, #3
 800230e:	074b      	lsls	r3, r1, #29
 8002310:	433b      	orrs	r3, r7
 8002312:	08cc      	lsrs	r4, r1, #3
 8002314:	e616      	b.n	8001f44 <__aeabi_dsub+0x314>
 8002316:	4662      	mov	r2, ip
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	0752      	lsls	r2, r2, #29
 800231c:	4313      	orrs	r3, r2
 800231e:	4662      	mov	r2, ip
 8002320:	08d4      	lsrs	r4, r2, #3
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	0312      	lsls	r2, r2, #12
 8002326:	4214      	tst	r4, r2
 8002328:	d007      	beq.n	800233a <__aeabi_dsub+0x70a>
 800232a:	08c8      	lsrs	r0, r1, #3
 800232c:	4210      	tst	r0, r2
 800232e:	d104      	bne.n	800233a <__aeabi_dsub+0x70a>
 8002330:	465d      	mov	r5, fp
 8002332:	0004      	movs	r4, r0
 8002334:	08fb      	lsrs	r3, r7, #3
 8002336:	0749      	lsls	r1, r1, #29
 8002338:	430b      	orrs	r3, r1
 800233a:	0f5a      	lsrs	r2, r3, #29
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	0752      	lsls	r2, r2, #29
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	4313      	orrs	r3, r2
 8002344:	e5fe      	b.n	8001f44 <__aeabi_dsub+0x314>
 8002346:	2300      	movs	r3, #0
 8002348:	4a01      	ldr	r2, [pc, #4]	; (8002350 <__aeabi_dsub+0x720>)
 800234a:	001c      	movs	r4, r3
 800234c:	e513      	b.n	8001d76 <__aeabi_dsub+0x146>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_dcmpun>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	0005      	movs	r5, r0
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <__aeabi_dcmpun+0x38>)
 800235a:	031c      	lsls	r4, r3, #12
 800235c:	0016      	movs	r6, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	030a      	lsls	r2, r1, #12
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	0b12      	lsrs	r2, r2, #12
 8002366:	0d49      	lsrs	r1, r1, #21
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	4281      	cmp	r1, r0
 800236e:	d008      	beq.n	8002382 <__aeabi_dcmpun+0x2e>
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <__aeabi_dcmpun+0x38>)
 8002372:	2000      	movs	r0, #0
 8002374:	4293      	cmp	r3, r2
 8002376:	d103      	bne.n	8002380 <__aeabi_dcmpun+0x2c>
 8002378:	0020      	movs	r0, r4
 800237a:	4330      	orrs	r0, r6
 800237c:	1e43      	subs	r3, r0, #1
 800237e:	4198      	sbcs	r0, r3
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	2001      	movs	r0, #1
 8002384:	432a      	orrs	r2, r5
 8002386:	d1fb      	bne.n	8002380 <__aeabi_dcmpun+0x2c>
 8002388:	e7f2      	b.n	8002370 <__aeabi_dcmpun+0x1c>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	000007ff 	.word	0x000007ff

08002390 <__aeabi_d2iz>:
 8002390:	000a      	movs	r2, r1
 8002392:	b530      	push	{r4, r5, lr}
 8002394:	4c13      	ldr	r4, [pc, #76]	; (80023e4 <__aeabi_d2iz+0x54>)
 8002396:	0053      	lsls	r3, r2, #1
 8002398:	0309      	lsls	r1, r1, #12
 800239a:	0005      	movs	r5, r0
 800239c:	0b09      	lsrs	r1, r1, #12
 800239e:	2000      	movs	r0, #0
 80023a0:	0d5b      	lsrs	r3, r3, #21
 80023a2:	0fd2      	lsrs	r2, r2, #31
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	dd04      	ble.n	80023b2 <__aeabi_d2iz+0x22>
 80023a8:	480f      	ldr	r0, [pc, #60]	; (80023e8 <__aeabi_d2iz+0x58>)
 80023aa:	4283      	cmp	r3, r0
 80023ac:	dd02      	ble.n	80023b4 <__aeabi_d2iz+0x24>
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <__aeabi_d2iz+0x5c>)
 80023b0:	18d0      	adds	r0, r2, r3
 80023b2:	bd30      	pop	{r4, r5, pc}
 80023b4:	2080      	movs	r0, #128	; 0x80
 80023b6:	0340      	lsls	r0, r0, #13
 80023b8:	4301      	orrs	r1, r0
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <__aeabi_d2iz+0x60>)
 80023bc:	1ac0      	subs	r0, r0, r3
 80023be:	281f      	cmp	r0, #31
 80023c0:	dd08      	ble.n	80023d4 <__aeabi_d2iz+0x44>
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <__aeabi_d2iz+0x64>)
 80023c4:	1ac3      	subs	r3, r0, r3
 80023c6:	40d9      	lsrs	r1, r3
 80023c8:	000b      	movs	r3, r1
 80023ca:	4258      	negs	r0, r3
 80023cc:	2a00      	cmp	r2, #0
 80023ce:	d1f0      	bne.n	80023b2 <__aeabi_d2iz+0x22>
 80023d0:	0018      	movs	r0, r3
 80023d2:	e7ee      	b.n	80023b2 <__aeabi_d2iz+0x22>
 80023d4:	4c08      	ldr	r4, [pc, #32]	; (80023f8 <__aeabi_d2iz+0x68>)
 80023d6:	40c5      	lsrs	r5, r0
 80023d8:	46a4      	mov	ip, r4
 80023da:	4463      	add	r3, ip
 80023dc:	4099      	lsls	r1, r3
 80023de:	000b      	movs	r3, r1
 80023e0:	432b      	orrs	r3, r5
 80023e2:	e7f2      	b.n	80023ca <__aeabi_d2iz+0x3a>
 80023e4:	000003fe 	.word	0x000003fe
 80023e8:	0000041d 	.word	0x0000041d
 80023ec:	7fffffff 	.word	0x7fffffff
 80023f0:	00000433 	.word	0x00000433
 80023f4:	00000413 	.word	0x00000413
 80023f8:	fffffbed 	.word	0xfffffbed

080023fc <__aeabi_i2d>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	2800      	cmp	r0, #0
 8002400:	d016      	beq.n	8002430 <__aeabi_i2d+0x34>
 8002402:	17c3      	asrs	r3, r0, #31
 8002404:	18c5      	adds	r5, r0, r3
 8002406:	405d      	eors	r5, r3
 8002408:	0fc4      	lsrs	r4, r0, #31
 800240a:	0028      	movs	r0, r5
 800240c:	f000 f84c 	bl	80024a8 <__clzsi2>
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <__aeabi_i2d+0x5c>)
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	280a      	cmp	r0, #10
 8002416:	dc16      	bgt.n	8002446 <__aeabi_i2d+0x4a>
 8002418:	0003      	movs	r3, r0
 800241a:	002e      	movs	r6, r5
 800241c:	3315      	adds	r3, #21
 800241e:	409e      	lsls	r6, r3
 8002420:	230b      	movs	r3, #11
 8002422:	1a18      	subs	r0, r3, r0
 8002424:	40c5      	lsrs	r5, r0
 8002426:	0552      	lsls	r2, r2, #21
 8002428:	032d      	lsls	r5, r5, #12
 800242a:	0b2d      	lsrs	r5, r5, #12
 800242c:	0d53      	lsrs	r3, r2, #21
 800242e:	e003      	b.n	8002438 <__aeabi_i2d+0x3c>
 8002430:	2400      	movs	r4, #0
 8002432:	2300      	movs	r3, #0
 8002434:	2500      	movs	r5, #0
 8002436:	2600      	movs	r6, #0
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	432b      	orrs	r3, r5
 800243c:	07e4      	lsls	r4, r4, #31
 800243e:	4323      	orrs	r3, r4
 8002440:	0030      	movs	r0, r6
 8002442:	0019      	movs	r1, r3
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	380b      	subs	r0, #11
 8002448:	4085      	lsls	r5, r0
 800244a:	0552      	lsls	r2, r2, #21
 800244c:	032d      	lsls	r5, r5, #12
 800244e:	2600      	movs	r6, #0
 8002450:	0b2d      	lsrs	r5, r5, #12
 8002452:	0d53      	lsrs	r3, r2, #21
 8002454:	e7f0      	b.n	8002438 <__aeabi_i2d+0x3c>
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	0000041e 	.word	0x0000041e

0800245c <__aeabi_ui2d>:
 800245c:	b510      	push	{r4, lr}
 800245e:	1e04      	subs	r4, r0, #0
 8002460:	d010      	beq.n	8002484 <__aeabi_ui2d+0x28>
 8002462:	f000 f821 	bl	80024a8 <__clzsi2>
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <__aeabi_ui2d+0x48>)
 8002468:	1a1b      	subs	r3, r3, r0
 800246a:	280a      	cmp	r0, #10
 800246c:	dc11      	bgt.n	8002492 <__aeabi_ui2d+0x36>
 800246e:	220b      	movs	r2, #11
 8002470:	0021      	movs	r1, r4
 8002472:	1a12      	subs	r2, r2, r0
 8002474:	40d1      	lsrs	r1, r2
 8002476:	3015      	adds	r0, #21
 8002478:	030a      	lsls	r2, r1, #12
 800247a:	055b      	lsls	r3, r3, #21
 800247c:	4084      	lsls	r4, r0
 800247e:	0b12      	lsrs	r2, r2, #12
 8002480:	0d5b      	lsrs	r3, r3, #21
 8002482:	e001      	b.n	8002488 <__aeabi_ui2d+0x2c>
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	051b      	lsls	r3, r3, #20
 800248a:	4313      	orrs	r3, r2
 800248c:	0020      	movs	r0, r4
 800248e:	0019      	movs	r1, r3
 8002490:	bd10      	pop	{r4, pc}
 8002492:	0022      	movs	r2, r4
 8002494:	380b      	subs	r0, #11
 8002496:	4082      	lsls	r2, r0
 8002498:	055b      	lsls	r3, r3, #21
 800249a:	0312      	lsls	r2, r2, #12
 800249c:	2400      	movs	r4, #0
 800249e:	0b12      	lsrs	r2, r2, #12
 80024a0:	0d5b      	lsrs	r3, r3, #21
 80024a2:	e7f1      	b.n	8002488 <__aeabi_ui2d+0x2c>
 80024a4:	0000041e 	.word	0x0000041e

080024a8 <__clzsi2>:
 80024a8:	211c      	movs	r1, #28
 80024aa:	2301      	movs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	4298      	cmp	r0, r3
 80024b0:	d301      	bcc.n	80024b6 <__clzsi2+0xe>
 80024b2:	0c00      	lsrs	r0, r0, #16
 80024b4:	3910      	subs	r1, #16
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	4298      	cmp	r0, r3
 80024ba:	d301      	bcc.n	80024c0 <__clzsi2+0x18>
 80024bc:	0a00      	lsrs	r0, r0, #8
 80024be:	3908      	subs	r1, #8
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0x22>
 80024c6:	0900      	lsrs	r0, r0, #4
 80024c8:	3904      	subs	r1, #4
 80024ca:	a202      	add	r2, pc, #8	; (adr r2, 80024d4 <__clzsi2+0x2c>)
 80024cc:	5c10      	ldrb	r0, [r2, r0]
 80024ce:	1840      	adds	r0, r0, r1
 80024d0:	4770      	bx	lr
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	02020304 	.word	0x02020304
 80024d8:	01010101 	.word	0x01010101
	...

080024e4 <hoverInit>:
void pwmToAscii(typMotorHandler *hmotor,char *buff);
void deathzonefit(double *delta_x,double pmax,double nmax,double death_zone);
uint8_t vectorState(typVector *vector);
/********    ********/

void hoverInit(typHoverHandler *hhov){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

	hhov->status=0;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
	hhov->motorA.motorCode = 'A';
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2241      	movs	r2, #65	; 0x41
 80024f6:	705a      	strb	r2, [r3, #1]
	hhov->motorB.motorCode = 'B';
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2242      	movs	r2, #66	; 0x42
 80024fc:	70da      	strb	r2, [r3, #3]
	hhov->motorC.motorCode = 'C';
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2243      	movs	r2, #67	; 0x43
 8002502:	715a      	strb	r2, [r3, #5]
	hhov->motorD.motorCode = 'D';
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2244      	movs	r2, #68	; 0x44
 8002508:	71da      	strb	r2, [r3, #7]
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <pwmSmooting>:


void pwmSmooting(typHoverHandler *hHov,typPWMInputHandler *input,double kf){
 8002514:	b5b0      	push	{r4, r5, r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6178      	str	r0, [r7, #20]
 800251c:	6139      	str	r1, [r7, #16]
 800251e:	60ba      	str	r2, [r7, #8]
 8002520:	60fb      	str	r3, [r7, #12]
	hHov->motorA.speed = kf * hHov->motorA.speed + input->pwmInputA *(1-kf);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	789b      	ldrb	r3, [r3, #2]
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff ff68 	bl	80023fc <__aeabi_i2d>
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f7ff f912 	bl	8001758 <__aeabi_dmul>
 8002534:	0002      	movs	r2, r0
 8002536:	000b      	movs	r3, r1
 8002538:	603a      	str	r2, [r7, #0]
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ff5b 	bl	80023fc <__aeabi_i2d>
 8002546:	0004      	movs	r4, r0
 8002548:	000d      	movs	r5, r1
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2000      	movs	r0, #0
 8002550:	4956      	ldr	r1, [pc, #344]	; (80026ac <pwmSmooting+0x198>)
 8002552:	f7ff fb6d 	bl	8001c30 <__aeabi_dsub>
 8002556:	0002      	movs	r2, r0
 8002558:	000b      	movs	r3, r1
 800255a:	0020      	movs	r0, r4
 800255c:	0029      	movs	r1, r5
 800255e:	f7ff f8fb 	bl	8001758 <__aeabi_dmul>
 8002562:	0002      	movs	r2, r0
 8002564:	000b      	movs	r3, r1
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	f7fe f9b7 	bl	80008dc <__aeabi_dadd>
 800256e:	0002      	movs	r2, r0
 8002570:	000b      	movs	r3, r1
 8002572:	0010      	movs	r0, r2
 8002574:	0019      	movs	r1, r3
 8002576:	f7fd fe8f 	bl	8000298 <__aeabi_d2uiz>
 800257a:	0003      	movs	r3, r0
 800257c:	b2da      	uxtb	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	709a      	strb	r2, [r3, #2]
	hHov->motorB.speed = kf * hHov->motorB.speed + input->pwmInputB *(1-kf);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	791b      	ldrb	r3, [r3, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff ff38 	bl	80023fc <__aeabi_i2d>
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f7ff f8e2 	bl	8001758 <__aeabi_dmul>
 8002594:	0002      	movs	r2, r0
 8002596:	000b      	movs	r3, r1
 8002598:	603a      	str	r2, [r7, #0]
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff ff2b 	bl	80023fc <__aeabi_i2d>
 80025a6:	0004      	movs	r4, r0
 80025a8:	000d      	movs	r5, r1
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2000      	movs	r0, #0
 80025b0:	493e      	ldr	r1, [pc, #248]	; (80026ac <pwmSmooting+0x198>)
 80025b2:	f7ff fb3d 	bl	8001c30 <__aeabi_dsub>
 80025b6:	0002      	movs	r2, r0
 80025b8:	000b      	movs	r3, r1
 80025ba:	0020      	movs	r0, r4
 80025bc:	0029      	movs	r1, r5
 80025be:	f7ff f8cb 	bl	8001758 <__aeabi_dmul>
 80025c2:	0002      	movs	r2, r0
 80025c4:	000b      	movs	r3, r1
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	f7fe f987 	bl	80008dc <__aeabi_dadd>
 80025ce:	0002      	movs	r2, r0
 80025d0:	000b      	movs	r3, r1
 80025d2:	0010      	movs	r0, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	f7fd fe5f 	bl	8000298 <__aeabi_d2uiz>
 80025da:	0003      	movs	r3, r0
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	711a      	strb	r2, [r3, #4]
	hHov->motorC.speed = kf * hHov->motorC.speed + input->pwmInputC *(1-kf);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	799b      	ldrb	r3, [r3, #6]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ff08 	bl	80023fc <__aeabi_i2d>
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f7ff f8b2 	bl	8001758 <__aeabi_dmul>
 80025f4:	0002      	movs	r2, r0
 80025f6:	000b      	movs	r3, r1
 80025f8:	603a      	str	r2, [r7, #0]
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fefb 	bl	80023fc <__aeabi_i2d>
 8002606:	0004      	movs	r4, r0
 8002608:	000d      	movs	r5, r1
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2000      	movs	r0, #0
 8002610:	4926      	ldr	r1, [pc, #152]	; (80026ac <pwmSmooting+0x198>)
 8002612:	f7ff fb0d 	bl	8001c30 <__aeabi_dsub>
 8002616:	0002      	movs	r2, r0
 8002618:	000b      	movs	r3, r1
 800261a:	0020      	movs	r0, r4
 800261c:	0029      	movs	r1, r5
 800261e:	f7ff f89b 	bl	8001758 <__aeabi_dmul>
 8002622:	0002      	movs	r2, r0
 8002624:	000b      	movs	r3, r1
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	f7fe f957 	bl	80008dc <__aeabi_dadd>
 800262e:	0002      	movs	r2, r0
 8002630:	000b      	movs	r3, r1
 8002632:	0010      	movs	r0, r2
 8002634:	0019      	movs	r1, r3
 8002636:	f7fd fe2f 	bl	8000298 <__aeabi_d2uiz>
 800263a:	0003      	movs	r3, r0
 800263c:	b2da      	uxtb	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	719a      	strb	r2, [r3, #6]
	hHov->motorD.speed = kf * hHov->motorD.speed + input->pwmInputD *(1-kf);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	7a1b      	ldrb	r3, [r3, #8]
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff fed8 	bl	80023fc <__aeabi_i2d>
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f7ff f882 	bl	8001758 <__aeabi_dmul>
 8002654:	0002      	movs	r2, r0
 8002656:	000b      	movs	r3, r1
 8002658:	603a      	str	r2, [r7, #0]
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff fecb 	bl	80023fc <__aeabi_i2d>
 8002666:	0004      	movs	r4, r0
 8002668:	000d      	movs	r5, r1
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2000      	movs	r0, #0
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <pwmSmooting+0x198>)
 8002672:	f7ff fadd 	bl	8001c30 <__aeabi_dsub>
 8002676:	0002      	movs	r2, r0
 8002678:	000b      	movs	r3, r1
 800267a:	0020      	movs	r0, r4
 800267c:	0029      	movs	r1, r5
 800267e:	f7ff f86b 	bl	8001758 <__aeabi_dmul>
 8002682:	0002      	movs	r2, r0
 8002684:	000b      	movs	r3, r1
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	f7fe f927 	bl	80008dc <__aeabi_dadd>
 800268e:	0002      	movs	r2, r0
 8002690:	000b      	movs	r3, r1
 8002692:	0010      	movs	r0, r2
 8002694:	0019      	movs	r1, r3
 8002696:	f7fd fdff 	bl	8000298 <__aeabi_d2uiz>
 800269a:	0003      	movs	r3, r0
 800269c:	b2da      	uxtb	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	721a      	strb	r2, [r3, #8]

}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b006      	add	sp, #24
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	3ff00000 	.word	0x3ff00000

080026b0 <vectorState>:


uint8_t vectorState(typVector *vector){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	if((vector->forward=0)&&(vector->left=0)&&(vector->right=0)&&(vector->backward=0)){
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
		return idle;
	}
	if(vector->backward>15){
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	78db      	ldrb	r3, [r3, #3]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	d901      	bls.n	80026ca <vectorState+0x1a>
		return halt;
 80026c6:	2306      	movs	r3, #6
 80026c8:	e02b      	b.n	8002722 <vectorState+0x72>
	}
	if((vector->forward>0)&&(vector->left=0)&&(vector->right=0)&&(vector->backward=0)){
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <vectorState+0x28>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	705a      	strb	r2, [r3, #1]
			return forward;
		}
	if((vector->left>0)&&(vector->forward=0)&&(vector->right=0)&&(vector->backward=0)){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <vectorState+0x36>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
		return turn_left;
	}
	if((vector->right>0)&&(vector->forward=0)&&(vector->left=0)&&(vector->backward=0)){
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	789b      	ldrb	r3, [r3, #2]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <vectorState+0x44>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
		return turn_right;
	}
	if((vector->left>0)&&(vector->forward>0)&&(vector->right=0)&&(vector->backward=0)){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <vectorState+0x5a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <vectorState+0x5a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	709a      	strb	r2, [r3, #2]
		return forward_left;
	}
	if((vector->right>0)&&(vector->forward>0)&&(vector->left=0)&&(vector->backward=0)){
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	789b      	ldrb	r3, [r3, #2]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <vectorState+0x70>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <vectorState+0x70>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
		return forward_right;
	}
	else return idle;
 8002720:	2305      	movs	r3, #5

}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <vectorToPwm>:

void vectorToPwm(typVector *hVec, typPWMInputHandler *pwmInput){
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	uint8_t state;
	state = vectorState(hVec);
 8002736:	250f      	movs	r5, #15
 8002738:	197c      	adds	r4, r7, r5
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff ffb7 	bl	80026b0 <vectorState>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
	switch (state) {
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d853      	bhi.n	80027f6 <vectorToPwm+0xca>
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <vectorToPwm+0xd4>)
 8002752:	18d3      	adds	r3, r2, r3
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	469f      	mov	pc, r3
		case forward:
			pwmInput->pwmInputA=hVec->forward;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=hVec->forward;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	705a      	strb	r2, [r3, #1]
			break;
 8002768:	e046      	b.n	80027f8 <vectorToPwm+0xcc>
		case turn_left:
			pwmInput->pwmInputB=hVec->left;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	785a      	ldrb	r2, [r3, #1]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	705a      	strb	r2, [r3, #1]
			break;
 8002772:	e041      	b.n	80027f8 <vectorToPwm+0xcc>
		case turn_right:
			pwmInput->pwmInputA=hVec->right;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	789a      	ldrb	r2, [r3, #2]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	701a      	strb	r2, [r3, #0]
			break;
 800277c:	e03c      	b.n	80027f8 <vectorToPwm+0xcc>
		case forward_left:
			pwmInput->pwmInputA=(hVec->forward)/2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=(hVec->forward+hVec->left)/2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	001a      	movs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	18d3      	adds	r3, r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	da00      	bge.n	800279c <vectorToPwm+0x70>
 800279a:	3301      	adds	r3, #1
 800279c:	105b      	asrs	r3, r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	705a      	strb	r2, [r3, #1]
			break;
 80027a4:	e028      	b.n	80027f8 <vectorToPwm+0xcc>
		case forward_right:
			pwmInput->pwmInputB=(hVec->forward)/2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	705a      	strb	r2, [r3, #1]
			pwmInput->pwmInputA=(hVec->forward+hVec->right)/2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	001a      	movs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	18d3      	adds	r3, r2, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da00      	bge.n	80027c4 <vectorToPwm+0x98>
 80027c2:	3301      	adds	r3, #1
 80027c4:	105b      	asrs	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	701a      	strb	r2, [r3, #0]
			break;
 80027cc:	e014      	b.n	80027f8 <vectorToPwm+0xcc>
		case halt:
			pwmInput->pwmInputA=0;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			pwmInput->pwmInputB=0;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	705a      	strb	r2, [r3, #1]
			pwmInput->pwmInputC=0;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	709a      	strb	r2, [r3, #2]
			pwmInput->pwmInputD=0;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	70da      	strb	r2, [r3, #3]
			break;
 80027e6:	e007      	b.n	80027f8 <vectorToPwm+0xcc>
		case idle:
			pwmInput->pwmInputC=120;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2278      	movs	r2, #120	; 0x78
 80027ec:	709a      	strb	r2, [r3, #2]
			pwmInput->pwmInputD=120;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2278      	movs	r2, #120	; 0x78
 80027f2:	70da      	strb	r2, [r3, #3]
			break;
 80027f4:	e000      	b.n	80027f8 <vectorToPwm+0xcc>
		default:
			break;
 80027f6:	46c0      	nop			; (mov r8, r8)
	}
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	08007098 	.word	0x08007098

08002804 <deathzonefit>:

void deathzonefit(double *delta_x,double pmax,double nmax,double death_zone){
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	603a      	str	r2, [r7, #0]
 800280e:	607b      	str	r3, [r7, #4]
		if(*delta_x>pmax){
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	f7fd fd15 	bl	8000248 <__aeabi_dcmplt>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d004      	beq.n	800282c <deathzonefit+0x28>
			 *delta_x=pmax;
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	600a      	str	r2, [r1, #0]
 800282a:	604b      	str	r3, [r1, #4]
		}
		if(*delta_x<nmax){
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	6a38      	ldr	r0, [r7, #32]
 8002834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002836:	f7fd fd1b 	bl	8000270 <__aeabi_dcmpgt>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d004      	beq.n	8002848 <deathzonefit+0x44>
			*delta_x=nmax;
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	600a      	str	r2, [r1, #0]
 8002846:	604b      	str	r3, [r1, #4]
		}
		if ((*delta_x<death_zone)&&(*delta_x>0)) {
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002852:	f7fd fd0d 	bl	8000270 <__aeabi_dcmpgt>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d00d      	beq.n	8002876 <deathzonefit+0x72>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	2300      	movs	r3, #0
 8002864:	f7fd fd04 	bl	8000270 <__aeabi_dcmpgt>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d004      	beq.n	8002876 <deathzonefit+0x72>
			*delta_x=0;
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	2300      	movs	r3, #0
 8002872:	600a      	str	r2, [r1, #0]
 8002874:	604b      	str	r3, [r1, #4]
		}
		if ((*delta_x > (-1*death_zone))&&(*delta_x<0)) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	001c      	movs	r4, r3
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0612      	lsls	r2, r2, #24
 8002886:	405a      	eors	r2, r3
 8002888:	0015      	movs	r5, r2
 800288a:	0022      	movs	r2, r4
 800288c:	002b      	movs	r3, r5
 800288e:	f7fd fcef 	bl	8000270 <__aeabi_dcmpgt>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d100      	bne.n	8002898 <deathzonefit+0x94>
			*delta_x=0;
		}
	}
 8002896:	e00e      	b.n	80028b6 <deathzonefit+0xb2>
		if ((*delta_x > (-1*death_zone))&&(*delta_x<0)) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	2300      	movs	r3, #0
 80028a2:	f7fd fcd1 	bl	8000248 <__aeabi_dcmplt>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d100      	bne.n	80028ac <deathzonefit+0xa8>
	}
 80028aa:	e004      	b.n	80028b6 <deathzonefit+0xb2>
			*delta_x=0;
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2300      	movs	r3, #0
 80028b2:	600a      	str	r2, [r1, #0]
 80028b4:	604b      	str	r3, [r1, #4]
	}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080028c0 <angleToVector>:

void angleToVector(typVector *hVec,double curr_angle_x,double start_angle_x,double curr_angle_y,double start_angle_y ,double death_zone){
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b091      	sub	sp, #68	; 0x44
 80028c4:	af04      	add	r7, sp, #16
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	603a      	str	r2, [r7, #0]
 80028ca:	607b      	str	r3, [r7, #4]
	 double pmax = 45;
 80028cc:	2200      	movs	r2, #0
 80028ce:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <angleToVector+0x170>)
 80028d0:	62ba      	str	r2, [r7, #40]	; 0x28
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	 double nmax = -45;
 80028d4:	2200      	movs	r2, #0
 80028d6:	4b57      	ldr	r3, [pc, #348]	; (8002a34 <angleToVector+0x174>)
 80028d8:	623a      	str	r2, [r7, #32]
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
	 double delta_x = curr_angle_x - start_angle_x;
 80028dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	6838      	ldr	r0, [r7, #0]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f7ff f9a4 	bl	8001c30 <__aeabi_dsub>
 80028e8:	0002      	movs	r2, r0
 80028ea:	000b      	movs	r3, r1
 80028ec:	61ba      	str	r2, [r7, #24]
 80028ee:	61fb      	str	r3, [r7, #28]
	 double delta_y = curr_angle_y - start_angle_y;
 80028f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028f8:	f7ff f99a 	bl	8001c30 <__aeabi_dsub>
 80028fc:	0002      	movs	r2, r0
 80028fe:	000b      	movs	r3, r1
 8002900:	613a      	str	r2, [r7, #16]
 8002902:	617b      	str	r3, [r7, #20]
	 deathzonefit(&delta_x, pmax, nmax, death_zone);
 8002904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002908:	2318      	movs	r3, #24
 800290a:	18fc      	adds	r4, r7, r3
 800290c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002910:	9202      	str	r2, [sp, #8]
 8002912:	9303      	str	r3, [sp, #12]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	0002      	movs	r2, r0
 800291e:	000b      	movs	r3, r1
 8002920:	0020      	movs	r0, r4
 8002922:	f7ff ff6f 	bl	8002804 <deathzonefit>
	 deathzonefit(&delta_y, pmax, nmax, death_zone);
 8002926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800292a:	2310      	movs	r3, #16
 800292c:	18fc      	adds	r4, r7, r3
 800292e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002932:	9202      	str	r2, [sp, #8]
 8002934:	9303      	str	r3, [sp, #12]
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	9200      	str	r2, [sp, #0]
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	0020      	movs	r0, r4
 8002944:	f7ff ff5e 	bl	8002804 <deathzonefit>
	 if(delta_y>=0){
 8002948:	6938      	ldr	r0, [r7, #16]
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	2200      	movs	r2, #0
 800294e:	2300      	movs	r3, #0
 8002950:	f7fd fc98 	bl	8000284 <__aeabi_dcmpge>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d05a      	beq.n	8002a0e <angleToVector+0x14e>
		 if(delta_x<0){
 8002958:	69b8      	ldr	r0, [r7, #24]
 800295a:	69f9      	ldr	r1, [r7, #28]
 800295c:	2200      	movs	r2, #0
 800295e:	2300      	movs	r3, #0
 8002960:	f7fd fc72 	bl	8000248 <__aeabi_dcmplt>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d01b      	beq.n	80029a0 <angleToVector+0xe0>
			 hVec->left = delta_x*255/nmax;
 8002968:	69b8      	ldr	r0, [r7, #24]
 800296a:	69f9      	ldr	r1, [r7, #28]
 800296c:	2200      	movs	r2, #0
 800296e:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <angleToVector+0x178>)
 8002970:	f7fe fef2 	bl	8001758 <__aeabi_dmul>
 8002974:	0002      	movs	r2, r0
 8002976:	000b      	movs	r3, r1
 8002978:	0010      	movs	r0, r2
 800297a:	0019      	movs	r1, r3
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f7fe fae8 	bl	8000f54 <__aeabi_ddiv>
 8002984:	0002      	movs	r2, r0
 8002986:	000b      	movs	r3, r1
 8002988:	0010      	movs	r0, r2
 800298a:	0019      	movs	r1, r3
 800298c:	f7fd fc84 	bl	8000298 <__aeabi_d2uiz>
 8002990:	0003      	movs	r3, r0
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	705a      	strb	r2, [r3, #1]
			 hVec->right = 0;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	709a      	strb	r2, [r3, #2]
 800299e:	e01a      	b.n	80029d6 <angleToVector+0x116>
		 }
		 else{
			 hVec->right = delta_x*255/pmax;
 80029a0:	69b8      	ldr	r0, [r7, #24]
 80029a2:	69f9      	ldr	r1, [r7, #28]
 80029a4:	2200      	movs	r2, #0
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <angleToVector+0x178>)
 80029a8:	f7fe fed6 	bl	8001758 <__aeabi_dmul>
 80029ac:	0002      	movs	r2, r0
 80029ae:	000b      	movs	r3, r1
 80029b0:	0010      	movs	r0, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	f7fe facc 	bl	8000f54 <__aeabi_ddiv>
 80029bc:	0002      	movs	r2, r0
 80029be:	000b      	movs	r3, r1
 80029c0:	0010      	movs	r0, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	f7fd fc68 	bl	8000298 <__aeabi_d2uiz>
 80029c8:	0003      	movs	r3, r0
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	709a      	strb	r2, [r3, #2]
			 hVec->left = 0;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	705a      	strb	r2, [r3, #1]
		 }
		 hVec->forward= delta_y*255/pmax;
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	2200      	movs	r2, #0
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <angleToVector+0x178>)
 80029de:	f7fe febb 	bl	8001758 <__aeabi_dmul>
 80029e2:	0002      	movs	r2, r0
 80029e4:	000b      	movs	r3, r1
 80029e6:	0010      	movs	r0, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	f7fe fab1 	bl	8000f54 <__aeabi_ddiv>
 80029f2:	0002      	movs	r2, r0
 80029f4:	000b      	movs	r3, r1
 80029f6:	0010      	movs	r0, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	f7fd fc4d 	bl	8000298 <__aeabi_d2uiz>
 80029fe:	0003      	movs	r3, r0
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	701a      	strb	r2, [r3, #0]
		 hVec->backward= 0;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	70da      	strb	r2, [r3, #3]
	 else{
		 hVec->backward=0;
		 hVec->left=0; hVec->right=0; hVec->forward=0;
	 }

}
 8002a0c:	e00b      	b.n	8002a26 <angleToVector+0x166>
		 hVec->backward=0;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	70da      	strb	r2, [r3, #3]
		 hVec->left=0; hVec->right=0; hVec->forward=0;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	705a      	strb	r2, [r3, #1]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	709a      	strb	r2, [r3, #2]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b00d      	add	sp, #52	; 0x34
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40468000 	.word	0x40468000
 8002a34:	c0468000 	.word	0xc0468000
 8002a38:	406fe000 	.word	0x406fe000

08002a3c <command>:

void command(typHoverHandler *hHov,char *buff){
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
	char buffA[3],buffB[3],buffC[3],buffD[3];
	pwmToAscii(&(hHov->motorA), buffA);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	18ba      	adds	r2, r7, r2
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f8a6 	bl	8002ba2 <pwmToAscii>
	pwmToAscii(&(hHov->motorB), buffB);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3303      	adds	r3, #3
 8002a5a:	2214      	movs	r2, #20
 8002a5c:	18ba      	adds	r2, r7, r2
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f89e 	bl	8002ba2 <pwmToAscii>
	pwmToAscii(&(hHov->motorC), buffC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3305      	adds	r3, #5
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	18ba      	adds	r2, r7, r2
 8002a6e:	0011      	movs	r1, r2
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f896 	bl	8002ba2 <pwmToAscii>
	pwmToAscii(&(hHov->motorD), buffD);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	18ba      	adds	r2, r7, r2
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f88e 	bl	8002ba2 <pwmToAscii>
	uint8_t i=0;
 8002a86:	231f      	movs	r3, #31
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	uint8_t j=0;
 8002a8e:	231e      	movs	r3, #30
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	while(i<12){
 8002a96:	e077      	b.n	8002b88 <command+0x14c>
		while(j<3){
			buff[i]=buffA[j];
 8002a98:	201e      	movs	r0, #30
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	241f      	movs	r4, #31
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	18cb      	adds	r3, r1, r3
 8002aa8:	2118      	movs	r1, #24
 8002aaa:	1879      	adds	r1, r7, r1
 8002aac:	5c8a      	ldrb	r2, [r1, r2]
 8002aae:	701a      	strb	r2, [r3, #0]
			i++;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	3201      	adds	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
			j++;
 8002aba:	183b      	adds	r3, r7, r0
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	183b      	adds	r3, r7, r0
 8002ac0:	3201      	adds	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002ac4:	221e      	movs	r2, #30
 8002ac6:	18bb      	adds	r3, r7, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d9e4      	bls.n	8002a98 <command+0x5c>
		}
		j=0;
 8002ace:	18bb      	adds	r3, r7, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002ad4:	e015      	b.n	8002b02 <command+0xc6>
			buff[i]=buffB[j];
 8002ad6:	201e      	movs	r0, #30
 8002ad8:	183b      	adds	r3, r7, r0
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	241f      	movs	r4, #31
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	18cb      	adds	r3, r1, r3
 8002ae6:	2114      	movs	r1, #20
 8002ae8:	1879      	adds	r1, r7, r1
 8002aea:	5c8a      	ldrb	r2, [r1, r2]
 8002aec:	701a      	strb	r2, [r3, #0]
			i++;
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	3201      	adds	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
			j++;
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	3201      	adds	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002b02:	221e      	movs	r2, #30
 8002b04:	18bb      	adds	r3, r7, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d9e4      	bls.n	8002ad6 <command+0x9a>
		}
		j=0;
 8002b0c:	18bb      	adds	r3, r7, r2
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002b12:	e015      	b.n	8002b40 <command+0x104>
			buff[i]=buffC[j];
 8002b14:	201e      	movs	r0, #30
 8002b16:	183b      	adds	r3, r7, r0
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	241f      	movs	r4, #31
 8002b1c:	193b      	adds	r3, r7, r4
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	18cb      	adds	r3, r1, r3
 8002b24:	2110      	movs	r1, #16
 8002b26:	1879      	adds	r1, r7, r1
 8002b28:	5c8a      	ldrb	r2, [r1, r2]
 8002b2a:	701a      	strb	r2, [r3, #0]
			i++;
 8002b2c:	193b      	adds	r3, r7, r4
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	3201      	adds	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
			j++;
 8002b36:	183b      	adds	r3, r7, r0
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	3201      	adds	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002b40:	221e      	movs	r2, #30
 8002b42:	18bb      	adds	r3, r7, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d9e4      	bls.n	8002b14 <command+0xd8>
		}
		j=0;
 8002b4a:	18bb      	adds	r3, r7, r2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002b50:	e015      	b.n	8002b7e <command+0x142>
			buff[i]=buffD[j];
 8002b52:	201e      	movs	r0, #30
 8002b54:	183b      	adds	r3, r7, r0
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	241f      	movs	r4, #31
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	18cb      	adds	r3, r1, r3
 8002b62:	210c      	movs	r1, #12
 8002b64:	1879      	adds	r1, r7, r1
 8002b66:	5c8a      	ldrb	r2, [r1, r2]
 8002b68:	701a      	strb	r2, [r3, #0]
			i++;
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	3201      	adds	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
			j++;
 8002b74:	183b      	adds	r3, r7, r0
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	183b      	adds	r3, r7, r0
 8002b7a:	3201      	adds	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
		while(j<3){
 8002b7e:	231e      	movs	r3, #30
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d9e4      	bls.n	8002b52 <command+0x116>
	while(i<12){
 8002b88:	231f      	movs	r3, #31
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b0b      	cmp	r3, #11
 8002b90:	d998      	bls.n	8002ac4 <command+0x88>
		}
	}
	buff[13]=OK;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	330d      	adds	r3, #13
 8002b96:	2246      	movs	r2, #70	; 0x46
 8002b98:	701a      	strb	r2, [r3, #0]
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b009      	add	sp, #36	; 0x24
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <pwmToAscii>:

void pwmToAscii(typMotorHandler *hmotor,char *buff){
 8002ba2:	b590      	push	{r4, r7, lr}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
	char highbytes =(char) hmotor->speed >> 4;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	785a      	ldrb	r2, [r3, #1]
 8002bb0:	210f      	movs	r1, #15
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	0912      	lsrs	r2, r2, #4
 8002bb6:	701a      	strb	r2, [r3, #0]
	char sendfirst = highbytes+97;
 8002bb8:	200e      	movs	r0, #14
 8002bba:	183b      	adds	r3, r7, r0
 8002bbc:	187a      	adds	r2, r7, r1
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	3261      	adds	r2, #97	; 0x61
 8002bc2:	701a      	strb	r2, [r3, #0]
	char lowbytes = (char)hmotor->speed & 0x0F;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	785a      	ldrb	r2, [r3, #1]
 8002bc8:	240d      	movs	r4, #13
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	210f      	movs	r1, #15
 8002bce:	400a      	ands	r2, r1
 8002bd0:	701a      	strb	r2, [r3, #0]
	char sendlast = lowbytes+97;
 8002bd2:	210c      	movs	r1, #12
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	193a      	adds	r2, r7, r4
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	3261      	adds	r2, #97	; 0x61
 8002bdc:	701a      	strb	r2, [r3, #0]
	buff[0]=hmotor->motorCode;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	701a      	strb	r2, [r3, #0]
	buff[1]=sendfirst;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	183a      	adds	r2, r7, r0
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	701a      	strb	r2, [r3, #0]
	buff[2]=sendlast;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	187a      	adds	r2, r7, r1
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b005      	add	sp, #20
 8002c00:	bd90      	pop	{r4, r7, pc}
	...

08002c04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]
	if( GPIO_PIN_13 == GPIO_Pin){
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d10b      	bne.n	8002c34 <HAL_GPIO_EXTI_Callback+0x30>
		x_angle_base=MPU6050.KalmanAngleX;
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_GPIO_EXTI_Callback+0x38>)
 8002c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	4907      	ldr	r1, [pc, #28]	; (8002c40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c24:	600a      	str	r2, [r1, #0]
 8002c26:	604b      	str	r3, [r1, #4]
		y_angle_base=MPU6050.KalmanAngleY;
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_GPIO_EXTI_Callback+0x38>)
 8002c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	4905      	ldr	r1, [pc, #20]	; (8002c44 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c30:	600a      	str	r2, [r1, #0]
 8002c32:	604b      	str	r3, [r1, #4]
	}
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000270 	.word	0x20000270
 8002c40:	200002e0 	.word	0x200002e0
 8002c44:	200002e8 	.word	0x200002e8

08002c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	b08d      	sub	sp, #52	; 0x34
 8002c4c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4e:	f000 ff2f 	bl	8003ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c52:	f000 f87b 	bl	8002d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c56:	f000 f981 	bl	8002f5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c5a:	f000 f94f 	bl	8002efc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c5e:	f000 f8dd 	bl	8002e1c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002c62:	f000 f91b 	bl	8002e9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <main+0xd8>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f9fc 	bl	8003066 <MPU6050_Init>

  hoverInit(&hHover);
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <main+0xdc>)
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff fc37 	bl	80024e4 <hoverInit>

  HAL_Delay(500);
 8002c76:	23fa      	movs	r3, #250	; 0xfa
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 ff7c 	bl	8003b78 <HAL_Delay>
  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002c80:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <main+0xe0>)
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <main+0xd8>)
 8002c84:	0011      	movs	r1, r2
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fa52 	bl	8003130 <MPU6050_Read_All>
//  T+ADDR?
//
//  +ADDR:0021:11:01C461
  x_angle_base=MPU6050.KalmanAngleX;
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <main+0xe0>)
 8002c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4926      	ldr	r1, [pc, #152]	; (8002d2c <main+0xe4>)
 8002c94:	600a      	str	r2, [r1, #0]
 8002c96:	604b      	str	r3, [r1, #4]
  y_angle_base=MPU6050.KalmanAngleY;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <main+0xe0>)
 8002c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	4924      	ldr	r1, [pc, #144]	; (8002d30 <main+0xe8>)
 8002ca0:	600a      	str	r2, [r1, #0]
 8002ca2:	604b      	str	r3, [r1, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002ca4:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <main+0xe0>)
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <main+0xd8>)
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 fa40 	bl	8003130 <MPU6050_Read_All>
	  angleToVector(&hVector, MPU6050.KalmanAngleX, x_angle_base, MPU6050.KalmanAngleY, y_angle_base, 3);
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <main+0xe0>)
 8002cb2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	60fc      	str	r4, [r7, #12]
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <main+0xe4>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4919      	ldr	r1, [pc, #100]	; (8002d28 <main+0xe0>)
 8002cc2:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8002cc4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002cc6:	6038      	str	r0, [r7, #0]
 8002cc8:	6079      	str	r1, [r7, #4]
 8002cca:	4c19      	ldr	r4, [pc, #100]	; (8002d30 <main+0xe8>)
 8002ccc:	6865      	ldr	r5, [r4, #4]
 8002cce:	6824      	ldr	r4, [r4, #0]
 8002cd0:	4e18      	ldr	r6, [pc, #96]	; (8002d34 <main+0xec>)
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	4918      	ldr	r1, [pc, #96]	; (8002d38 <main+0xf0>)
 8002cd6:	9006      	str	r0, [sp, #24]
 8002cd8:	9107      	str	r1, [sp, #28]
 8002cda:	9404      	str	r4, [sp, #16]
 8002cdc:	9505      	str	r5, [sp, #20]
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	9002      	str	r0, [sp, #8]
 8002ce4:	9103      	str	r1, [sp, #12]
 8002ce6:	9200      	str	r2, [sp, #0]
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	0030      	movs	r0, r6
 8002cf0:	f7ff fde6 	bl	80028c0 <angleToVector>
	  vectorToPwm(&hVector, &hInput);
 8002cf4:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <main+0xf4>)
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <main+0xec>)
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fd16 	bl	800272c <vectorToPwm>
	  pwmSmooting(&hHover,&hInput, KF);
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <main+0xf8>)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <main+0xfc>)
 8002d04:	490d      	ldr	r1, [pc, #52]	; (8002d3c <main+0xf4>)
 8002d06:	4807      	ldr	r0, [pc, #28]	; (8002d24 <main+0xdc>)
 8002d08:	f7ff fc04 	bl	8002514 <pwmSmooting>
	  command(&hHover, tx_buffer);
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <main+0x100>)
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <main+0xdc>)
 8002d10:	0011      	movs	r1, r2
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff fe92 	bl	8002a3c <command>


	  HAL_Delay(20);
 8002d18:	2014      	movs	r0, #20
 8002d1a:	f000 ff2d 	bl	8003b78 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002d1e:	e7c1      	b.n	8002ca4 <main+0x5c>
 8002d20:	2000011c 	.word	0x2000011c
 8002d24:	200002c8 	.word	0x200002c8
 8002d28:	20000270 	.word	0x20000270
 8002d2c:	200002e0 	.word	0x200002e0
 8002d30:	200002e8 	.word	0x200002e8
 8002d34:	200002d8 	.word	0x200002d8
 8002d38:	40080000 	.word	0x40080000
 8002d3c:	200002d4 	.word	0x200002d4
 8002d40:	9999999a 	.word	0x9999999a
 8002d44:	3fe99999 	.word	0x3fe99999
 8002d48:	200002f0 	.word	0x200002f0

08002d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b099      	sub	sp, #100	; 0x64
 8002d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d52:	242c      	movs	r4, #44	; 0x2c
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	0018      	movs	r0, r3
 8002d58:	2334      	movs	r3, #52	; 0x34
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f003 fde5 	bl	800692c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d62:	231c      	movs	r3, #28
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	0018      	movs	r0, r3
 8002d68:	2310      	movs	r3, #16
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f003 fddd 	bl	800692c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d72:	003b      	movs	r3, r7
 8002d74:	0018      	movs	r0, r3
 8002d76:	231c      	movs	r3, #28
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f003 fdd6 	bl	800692c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d80:	0021      	movs	r1, r4
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2210      	movs	r2, #16
 8002d92:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2202      	movs	r2, #2
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	0212      	lsls	r2, r2, #8
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	0352      	lsls	r2, r2, #13
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	0018      	movs	r0, r3
 8002db4:	f001 fff4 	bl	8004da0 <HAL_RCC_OscConfig>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d001      	beq.n	8002dc0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002dbc:	f000 f94e 	bl	800305c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc0:	211c      	movs	r1, #28
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2202      	movs	r2, #2
 8002dcc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2101      	movs	r1, #1
 8002dde:	0018      	movs	r0, r3
 8002de0:	f002 fb64 	bl	80054ac <HAL_RCC_ClockConfig>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002de8:	f000 f938 	bl	800305c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002dec:	003b      	movs	r3, r7
 8002dee:	2223      	movs	r2, #35	; 0x23
 8002df0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002df2:	003b      	movs	r3, r7
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002df8:	003b      	movs	r3, r7
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002dfe:	003b      	movs	r3, r7
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e04:	003b      	movs	r3, r7
 8002e06:	0018      	movs	r0, r3
 8002e08:	f002 fcca 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d001      	beq.n	8002e14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002e10:	f000 f924 	bl	800305c <Error_Handler>
  }
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b019      	add	sp, #100	; 0x64
 8002e1a:	bd90      	pop	{r4, r7, pc}

08002e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e22:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <MX_I2C1_Init+0x78>)
 8002e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e28:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <MX_I2C1_Init+0x7c>)
 8002e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f001 f9bf 	bl	80041dc <HAL_I2C_Init>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d001      	beq.n	8002e66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e62:	f000 f8fb 	bl	800305c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 ff00 	bl	8004c70 <HAL_I2CEx_ConfigAnalogFilter>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d001      	beq.n	8002e78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e74:	f000 f8f2 	bl	800305c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <MX_I2C1_Init+0x74>)
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 ff43 	bl	8004d08 <HAL_I2CEx_ConfigDigitalFilter>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d001      	beq.n	8002e8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e86:	f000 f8e9 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000011c 	.word	0x2000011c
 8002e94:	40005400 	.word	0x40005400
 8002e98:	2000090e 	.word	0x2000090e

08002e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <MX_USART1_UART_Init+0x5c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ea8:	2296      	movs	r2, #150	; 0x96
 8002eaa:	0192      	lsls	r2, r2, #6
 8002eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <MX_USART1_UART_Init+0x58>)
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f002 fd5d 	bl	80059a0 <HAL_UART_Init>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d001      	beq.n	8002eee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002eea:	f000 f8b7 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000168 	.word	0x20000168
 8002ef8:	40013800 	.word	0x40013800

08002efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f02:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <MX_USART2_UART_Init+0x5c>)
 8002f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f08:	2296      	movs	r2, #150	; 0x96
 8002f0a:	0192      	lsls	r2, r2, #6
 8002f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f22:	220c      	movs	r2, #12
 8002f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <MX_USART2_UART_Init+0x58>)
 8002f40:	0018      	movs	r0, r3
 8002f42:	f002 fd2d 	bl	80059a0 <HAL_UART_Init>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f4a:	f000 f887 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200001ec 	.word	0x200001ec
 8002f58:	40004400 	.word	0x40004400

08002f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b08b      	sub	sp, #44	; 0x2c
 8002f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f62:	2414      	movs	r4, #20
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	0018      	movs	r0, r3
 8002f68:	2314      	movs	r3, #20
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f003 fcdd 	bl	800692c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	0309      	lsls	r1, r1, #12
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	615a      	str	r2, [r3, #20]
 8002f80:	4b34      	ldr	r3, [pc, #208]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	031b      	lsls	r3, r3, #12
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	4b30      	ldr	r3, [pc, #192]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	03c9      	lsls	r1, r1, #15
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	615a      	str	r2, [r3, #20]
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	03db      	lsls	r3, r3, #15
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	4b29      	ldr	r3, [pc, #164]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0289      	lsls	r1, r1, #10
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	615a      	str	r2, [r3, #20]
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	02c9      	lsls	r1, r1, #11
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	615a      	str	r2, [r3, #20]
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <MX_GPIO_Init+0xf8>)
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	02db      	lsls	r3, r3, #11
 8002fdc:	4013      	ands	r3, r2
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fe2:	2390      	movs	r3, #144	; 0x90
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2120      	movs	r1, #32
 8002fea:	0018      	movs	r0, r3
 8002fec:	f001 f8bc 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	0192      	lsls	r2, r2, #6
 8002ff6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2284      	movs	r2, #132	; 0x84
 8002ffc:	0392      	lsls	r2, r2, #14
 8002ffe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003006:	193b      	adds	r3, r7, r4
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <MX_GPIO_Init+0xfc>)
 800300a:	0019      	movs	r1, r3
 800300c:	0010      	movs	r0, r2
 800300e:	f000 ff33 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003012:	0021      	movs	r1, r4
 8003014:	187b      	adds	r3, r7, r1
 8003016:	2220      	movs	r2, #32
 8003018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301a:	187b      	adds	r3, r7, r1
 800301c:	2201      	movs	r2, #1
 800301e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	187b      	adds	r3, r7, r1
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800302c:	187a      	adds	r2, r7, r1
 800302e:	2390      	movs	r3, #144	; 0x90
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f000 ff1f 	bl	8003e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	2007      	movs	r0, #7
 8003040:	f000 fe6a 	bl	8003d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003044:	2007      	movs	r0, #7
 8003046:	f000 fe7c 	bl	8003d42 <HAL_NVIC_EnableIRQ>

}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b00b      	add	sp, #44	; 0x2c
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	40021000 	.word	0x40021000
 8003058:	48000800 	.word	0x48000800

0800305c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
}
 8003062:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003064:	e7fe      	b.n	8003064 <Error_Handler+0x8>

08003066 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003066:	b590      	push	{r4, r7, lr}
 8003068:	b089      	sub	sp, #36	; 0x24
 800306a:	af04      	add	r7, sp, #16
 800306c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800306e:	23fa      	movs	r3, #250	; 0xfa
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	2301      	movs	r3, #1
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	240f      	movs	r4, #15
 800307c:	193b      	adds	r3, r7, r4
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2301      	movs	r3, #1
 8003082:	2275      	movs	r2, #117	; 0x75
 8003084:	21d0      	movs	r1, #208	; 0xd0
 8003086:	f001 fa6d 	bl	8004564 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800308a:	193b      	adds	r3, r7, r4
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b68      	cmp	r3, #104	; 0x68
 8003090:	d148      	bne.n	8003124 <MPU6050_Init+0xbe>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003092:	210e      	movs	r1, #14
 8003094:	187b      	adds	r3, r7, r1
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800309a:	23fa      	movs	r3, #250	; 0xfa
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	9302      	str	r3, [sp, #8]
 80030a2:	2301      	movs	r3, #1
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	000c      	movs	r4, r1
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	226b      	movs	r2, #107	; 0x6b
 80030b0:	21d0      	movs	r1, #208	; 0xd0
 80030b2:	f001 f929 	bl	8004308 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80030b6:	0021      	movs	r1, r4
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	2207      	movs	r2, #7
 80030bc:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80030be:	23fa      	movs	r3, #250	; 0xfa
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	2301      	movs	r3, #1
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	000c      	movs	r4, r1
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2301      	movs	r3, #1
 80030d2:	2219      	movs	r2, #25
 80030d4:	21d0      	movs	r1, #208	; 0xd0
 80030d6:	f001 f917 	bl	8004308 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80030da:	0021      	movs	r1, r4
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80030e2:	23fa      	movs	r3, #250	; 0xfa
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	2301      	movs	r3, #1
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	000c      	movs	r4, r1
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2301      	movs	r3, #1
 80030f6:	221c      	movs	r2, #28
 80030f8:	21d0      	movs	r1, #208	; 0xd0
 80030fa:	f001 f905 	bl	8004308 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80030fe:	0021      	movs	r1, r4
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003106:	23fa      	movs	r3, #250	; 0xfa
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	2301      	movs	r3, #1
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	187b      	adds	r3, r7, r1
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2301      	movs	r3, #1
 8003118:	221b      	movs	r2, #27
 800311a:	21d0      	movs	r1, #208	; 0xd0
 800311c:	f001 f8f4 	bl	8004308 <HAL_I2C_Mem_Write>
        return 0;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <MPU6050_Init+0xc0>
    }
    return 1;
 8003124:	2301      	movs	r3, #1
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b005      	add	sp, #20
 800312c:	bd90      	pop	{r4, r7, pc}
	...

08003130 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	b099      	sub	sp, #100	; 0x64
 8003134:	af04      	add	r7, sp, #16
 8003136:	6178      	str	r0, [r7, #20]
 8003138:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800313a:	23fa      	movs	r3, #250	; 0xfa
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	9302      	str	r3, [sp, #8]
 8003142:	230e      	movs	r3, #14
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2408      	movs	r4, #8
 8003148:	2510      	movs	r5, #16
 800314a:	1963      	adds	r3, r4, r5
 800314c:	19db      	adds	r3, r3, r7
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2301      	movs	r3, #1
 8003152:	223b      	movs	r2, #59	; 0x3b
 8003154:	21d0      	movs	r1, #208	; 0xd0
 8003156:	f001 fa05 	bl	8004564 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800315a:	0020      	movs	r0, r4
 800315c:	0029      	movs	r1, r5
 800315e:	1843      	adds	r3, r0, r1
 8003160:	19db      	adds	r3, r3, r7
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	b21a      	sxth	r2, r3
 8003168:	1843      	adds	r3, r0, r1
 800316a:	19db      	adds	r3, r3, r7
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	b21b      	sxth	r3, r3
 8003170:	4313      	orrs	r3, r2
 8003172:	b21a      	sxth	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003178:	1843      	adds	r3, r0, r1
 800317a:	19db      	adds	r3, r3, r7
 800317c:	789b      	ldrb	r3, [r3, #2]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	b21a      	sxth	r2, r3
 8003182:	1843      	adds	r3, r0, r1
 8003184:	19db      	adds	r3, r3, r7
 8003186:	78db      	ldrb	r3, [r3, #3]
 8003188:	b21b      	sxth	r3, r3
 800318a:	4313      	orrs	r3, r2
 800318c:	b21a      	sxth	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003192:	1843      	adds	r3, r0, r1
 8003194:	19db      	adds	r3, r3, r7
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	b21a      	sxth	r2, r3
 800319c:	1843      	adds	r3, r0, r1
 800319e:	19db      	adds	r3, r3, r7
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	b21b      	sxth	r3, r3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80031ac:	000d      	movs	r5, r1
 80031ae:	1843      	adds	r3, r0, r1
 80031b0:	19db      	adds	r3, r3, r7
 80031b2:	799b      	ldrb	r3, [r3, #6]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	b219      	sxth	r1, r3
 80031b8:	1943      	adds	r3, r0, r5
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	79db      	ldrb	r3, [r3, #7]
 80031be:	b21a      	sxth	r2, r3
 80031c0:	2436      	movs	r4, #54	; 0x36
 80031c2:	1963      	adds	r3, r4, r5
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	430a      	orrs	r2, r1
 80031c8:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80031ca:	0001      	movs	r1, r0
 80031cc:	194b      	adds	r3, r1, r5
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	7a1b      	ldrb	r3, [r3, #8]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	194b      	adds	r3, r1, r5
 80031d8:	19db      	adds	r3, r3, r7
 80031da:	7a5b      	ldrb	r3, [r3, #9]
 80031dc:	b21b      	sxth	r3, r3
 80031de:	4313      	orrs	r3, r2
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80031e6:	194b      	adds	r3, r1, r5
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	7a9b      	ldrb	r3, [r3, #10]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	194b      	adds	r3, r1, r5
 80031f2:	19db      	adds	r3, r3, r7
 80031f4:	7adb      	ldrb	r3, [r3, #11]
 80031f6:	b21b      	sxth	r3, r3
 80031f8:	4313      	orrs	r3, r2
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003200:	194b      	adds	r3, r1, r5
 8003202:	19db      	adds	r3, r3, r7
 8003204:	7b1b      	ldrb	r3, [r3, #12]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	194b      	adds	r3, r1, r5
 800320c:	19db      	adds	r3, r3, r7
 800320e:	7b5b      	ldrb	r3, [r3, #13]
 8003210:	b21b      	sxth	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b21a      	sxth	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2200      	movs	r2, #0
 800321e:	5e9b      	ldrsh	r3, [r3, r2]
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff f8eb 	bl	80023fc <__aeabi_i2d>
 8003226:	2200      	movs	r2, #0
 8003228:	4bac      	ldr	r3, [pc, #688]	; (80034dc <MPU6050_Read_All+0x3ac>)
 800322a:	f7fd fe93 	bl	8000f54 <__aeabi_ddiv>
 800322e:	0002      	movs	r2, r0
 8003230:	000b      	movs	r3, r1
 8003232:	6939      	ldr	r1, [r7, #16]
 8003234:	608a      	str	r2, [r1, #8]
 8003236:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2202      	movs	r2, #2
 800323c:	5e9b      	ldrsh	r3, [r3, r2]
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff f8dc 	bl	80023fc <__aeabi_i2d>
 8003244:	2200      	movs	r2, #0
 8003246:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <MPU6050_Read_All+0x3ac>)
 8003248:	f7fd fe84 	bl	8000f54 <__aeabi_ddiv>
 800324c:	0002      	movs	r2, r0
 800324e:	000b      	movs	r3, r1
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	610a      	str	r2, [r1, #16]
 8003254:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2204      	movs	r2, #4
 800325a:	5e9b      	ldrsh	r3, [r3, r2]
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff f8cd 	bl	80023fc <__aeabi_i2d>
 8003262:	2200      	movs	r2, #0
 8003264:	4b9e      	ldr	r3, [pc, #632]	; (80034e0 <MPU6050_Read_All+0x3b0>)
 8003266:	f7fd fe75 	bl	8000f54 <__aeabi_ddiv>
 800326a:	0002      	movs	r2, r0
 800326c:	000b      	movs	r3, r1
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	618a      	str	r2, [r1, #24]
 8003272:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003274:	1963      	adds	r3, r4, r5
 8003276:	19db      	adds	r3, r3, r7
 8003278:	2200      	movs	r2, #0
 800327a:	5e9b      	ldrsh	r3, [r3, r2]
 800327c:	0018      	movs	r0, r3
 800327e:	f7fd fadf 	bl	8000840 <__aeabi_i2f>
 8003282:	1c03      	adds	r3, r0, #0
 8003284:	4997      	ldr	r1, [pc, #604]	; (80034e4 <MPU6050_Read_All+0x3b4>)
 8003286:	1c18      	adds	r0, r3, #0
 8003288:	f7fd f9c2 	bl	8000610 <__aeabi_fdiv>
 800328c:	1c03      	adds	r3, r0, #0
 800328e:	4996      	ldr	r1, [pc, #600]	; (80034e8 <MPU6050_Read_All+0x3b8>)
 8003290:	1c18      	adds	r0, r3, #0
 8003292:	f7fd f81f 	bl	80002d4 <__aeabi_fadd>
 8003296:	1c03      	adds	r3, r0, #0
 8003298:	1c1a      	adds	r2, r3, #0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2220      	movs	r2, #32
 80032a2:	5e9b      	ldrsh	r3, [r3, r2]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff f8a9 	bl	80023fc <__aeabi_i2d>
 80032aa:	2200      	movs	r2, #0
 80032ac:	4b8f      	ldr	r3, [pc, #572]	; (80034ec <MPU6050_Read_All+0x3bc>)
 80032ae:	f7fd fe51 	bl	8000f54 <__aeabi_ddiv>
 80032b2:	0002      	movs	r2, r0
 80032b4:	000b      	movs	r3, r1
 80032b6:	6939      	ldr	r1, [r7, #16]
 80032b8:	628a      	str	r2, [r1, #40]	; 0x28
 80032ba:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2222      	movs	r2, #34	; 0x22
 80032c0:	5e9b      	ldrsh	r3, [r3, r2]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff f89a 	bl	80023fc <__aeabi_i2d>
 80032c8:	2200      	movs	r2, #0
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <MPU6050_Read_All+0x3bc>)
 80032cc:	f7fd fe42 	bl	8000f54 <__aeabi_ddiv>
 80032d0:	0002      	movs	r2, r0
 80032d2:	000b      	movs	r3, r1
 80032d4:	6939      	ldr	r1, [r7, #16]
 80032d6:	630a      	str	r2, [r1, #48]	; 0x30
 80032d8:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2224      	movs	r2, #36	; 0x24
 80032de:	5e9b      	ldrsh	r3, [r3, r2]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff f88b 	bl	80023fc <__aeabi_i2d>
 80032e6:	2200      	movs	r2, #0
 80032e8:	4b80      	ldr	r3, [pc, #512]	; (80034ec <MPU6050_Read_All+0x3bc>)
 80032ea:	f7fd fe33 	bl	8000f54 <__aeabi_ddiv>
 80032ee:	0002      	movs	r2, r0
 80032f0:	000b      	movs	r3, r1
 80032f2:	6939      	ldr	r1, [r7, #16]
 80032f4:	638a      	str	r2, [r1, #56]	; 0x38
 80032f6:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80032f8:	f000 fc34 	bl	8003b64 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	4b7c      	ldr	r3, [pc, #496]	; (80034f0 <MPU6050_Read_All+0x3c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff f8a9 	bl	800245c <__aeabi_ui2d>
 800330a:	2200      	movs	r2, #0
 800330c:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <MPU6050_Read_All+0x3c4>)
 800330e:	f7fd fe21 	bl	8000f54 <__aeabi_ddiv>
 8003312:	0002      	movs	r2, r0
 8003314:	000b      	movs	r3, r1
 8003316:	63ba      	str	r2, [r7, #56]	; 0x38
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 800331a:	f000 fc23 	bl	8003b64 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	4b73      	ldr	r3, [pc, #460]	; (80034f0 <MPU6050_Read_All+0x3c0>)
 8003322:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2200      	movs	r2, #0
 8003328:	5e9b      	ldrsh	r3, [r3, r2]
 800332a:	001a      	movs	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2100      	movs	r1, #0
 8003330:	5e5b      	ldrsh	r3, [r3, r1]
 8003332:	435a      	muls	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2104      	movs	r1, #4
 8003338:	5e5b      	ldrsh	r3, [r3, r1]
 800333a:	0019      	movs	r1, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2004      	movs	r0, #4
 8003340:	5e1b      	ldrsh	r3, [r3, r0]
 8003342:	434b      	muls	r3, r1
 8003344:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff f858 	bl	80023fc <__aeabi_i2d>
 800334c:	0002      	movs	r2, r0
 800334e:	000b      	movs	r3, r1
 8003350:	0010      	movs	r0, r2
 8003352:	0019      	movs	r1, r3
 8003354:	f003 fc79 	bl	8006c4a <sqrt>
 8003358:	0002      	movs	r2, r0
 800335a:	000b      	movs	r3, r1
 800335c:	633a      	str	r2, [r7, #48]	; 0x30
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 8003360:	2200      	movs	r2, #0
 8003362:	2300      	movs	r3, #0
 8003364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003368:	f7fc ff68 	bl	800023c <__aeabi_dcmpeq>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d118      	bne.n	80033a2 <MPU6050_Read_All+0x272>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2202      	movs	r2, #2
 8003374:	5e9b      	ldrsh	r3, [r3, r2]
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff f840 	bl	80023fc <__aeabi_i2d>
 800337c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003380:	f7fd fde8 	bl	8000f54 <__aeabi_ddiv>
 8003384:	0002      	movs	r2, r0
 8003386:	000b      	movs	r3, r1
 8003388:	0010      	movs	r0, r2
 800338a:	0019      	movs	r1, r3
 800338c:	f003 fad6 	bl	800693c <atan>
 8003390:	4a59      	ldr	r2, [pc, #356]	; (80034f8 <MPU6050_Read_All+0x3c8>)
 8003392:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <MPU6050_Read_All+0x3cc>)
 8003394:	f7fe f9e0 	bl	8001758 <__aeabi_dmul>
 8003398:	0002      	movs	r2, r0
 800339a:	000b      	movs	r3, r1
 800339c:	64ba      	str	r2, [r7, #72]	; 0x48
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	e003      	b.n	80033aa <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 80033a2:	2200      	movs	r2, #0
 80033a4:	2300      	movs	r3, #0
 80033a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2200      	movs	r2, #0
 80033ae:	5e9b      	ldrsh	r3, [r3, r2]
 80033b0:	425b      	negs	r3, r3
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7ff f822 	bl	80023fc <__aeabi_i2d>
 80033b8:	0004      	movs	r4, r0
 80033ba:	000d      	movs	r5, r1
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2204      	movs	r2, #4
 80033c0:	5e9b      	ldrsh	r3, [r3, r2]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7ff f81a 	bl	80023fc <__aeabi_i2d>
 80033c8:	0002      	movs	r2, r0
 80033ca:	000b      	movs	r3, r1
 80033cc:	0020      	movs	r0, r4
 80033ce:	0029      	movs	r1, r5
 80033d0:	f003 fc37 	bl	8006c42 <atan2>
 80033d4:	4a48      	ldr	r2, [pc, #288]	; (80034f8 <MPU6050_Read_All+0x3c8>)
 80033d6:	4b49      	ldr	r3, [pc, #292]	; (80034fc <MPU6050_Read_All+0x3cc>)
 80033d8:	f7fe f9be 	bl	8001758 <__aeabi_dmul>
 80033dc:	0002      	movs	r2, r0
 80033de:	000b      	movs	r3, r1
 80033e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80033e4:	2200      	movs	r2, #0
 80033e6:	4b46      	ldr	r3, [pc, #280]	; (8003500 <MPU6050_Read_All+0x3d0>)
 80033e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ec:	f7fc ff2c 	bl	8000248 <__aeabi_dcmplt>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d008      	beq.n	8003406 <MPU6050_Read_All+0x2d6>
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80033f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033fa:	2200      	movs	r2, #0
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <MPU6050_Read_All+0x3d4>)
 80033fe:	f7fc ff37 	bl	8000270 <__aeabi_dcmpgt>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d110      	bne.n	8003428 <MPU6050_Read_All+0x2f8>
 8003406:	2200      	movs	r2, #0
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <MPU6050_Read_All+0x3d4>)
 800340a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800340c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800340e:	f7fc ff2f 	bl	8000270 <__aeabi_dcmpgt>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d013      	beq.n	800343e <MPU6050_Read_All+0x30e>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800341a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800341c:	2200      	movs	r2, #0
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <MPU6050_Read_All+0x3d0>)
 8003420:	f7fc ff12 	bl	8000248 <__aeabi_dcmplt>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d00a      	beq.n	800343e <MPU6050_Read_All+0x30e>
    {
        KalmanY.angle = pitch;
 8003428:	4937      	ldr	r1, [pc, #220]	; (8003508 <MPU6050_Read_All+0x3d8>)
 800342a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	618a      	str	r2, [r1, #24]
 8003430:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 8003432:	6939      	ldr	r1, [r7, #16]
 8003434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	650a      	str	r2, [r1, #80]	; 0x50
 800343a:	654b      	str	r3, [r1, #84]	; 0x54
 800343c:	e015      	b.n	800346a <MPU6050_Read_All+0x33a>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003444:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003446:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8003448:	4e2f      	ldr	r6, [pc, #188]	; (8003508 <MPU6050_Read_All+0x3d8>)
 800344a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800344c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800344e:	9002      	str	r0, [sp, #8]
 8003450:	9103      	str	r1, [sp, #12]
 8003452:	9200      	str	r2, [sp, #0]
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	0022      	movs	r2, r4
 8003458:	002b      	movs	r3, r5
 800345a:	0030      	movs	r0, r6
 800345c:	f000 f858 	bl	8003510 <Kalman_getAngle>
 8003460:	0002      	movs	r2, r0
 8003462:	000b      	movs	r3, r1
 8003464:	6939      	ldr	r1, [r7, #16]
 8003466:	650a      	str	r2, [r1, #80]	; 0x50
 8003468:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	0011      	movs	r1, r2
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <MPU6050_Read_All+0x3d4>)
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	f7fc fef5 	bl	8000270 <__aeabi_dcmpgt>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d00d      	beq.n	80034a6 <MPU6050_Read_All+0x376>
        DataStruct->Gx = -DataStruct->Gx;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	0011      	movs	r1, r2
 8003492:	6039      	str	r1, [r7, #0]
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0609      	lsls	r1, r1, #24
 8003498:	4059      	eors	r1, r3
 800349a:	6079      	str	r1, [r7, #4]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6299      	str	r1, [r3, #40]	; 0x28
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80034ae:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80034b0:	4e16      	ldr	r6, [pc, #88]	; (800350c <MPU6050_Read_All+0x3dc>)
 80034b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034b6:	9002      	str	r0, [sp, #8]
 80034b8:	9103      	str	r1, [sp, #12]
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	0022      	movs	r2, r4
 80034c0:	002b      	movs	r3, r5
 80034c2:	0030      	movs	r0, r6
 80034c4:	f000 f824 	bl	8003510 <Kalman_getAngle>
 80034c8:	0002      	movs	r2, r0
 80034ca:	000b      	movs	r3, r1
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	648a      	str	r2, [r1, #72]	; 0x48
 80034d0:	64cb      	str	r3, [r1, #76]	; 0x4c


}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b015      	add	sp, #84	; 0x54
 80034d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	40d00000 	.word	0x40d00000
 80034e0:	40cc2900 	.word	0x40cc2900
 80034e4:	43aa0000 	.word	0x43aa0000
 80034e8:	42121eb8 	.word	0x42121eb8
 80034ec:	40606000 	.word	0x40606000
 80034f0:	20000300 	.word	0x20000300
 80034f4:	408f4000 	.word	0x408f4000
 80034f8:	1a63c1f8 	.word	0x1a63c1f8
 80034fc:	404ca5dc 	.word	0x404ca5dc
 8003500:	c0568000 	.word	0xc0568000
 8003504:	40568000 	.word	0x40568000
 8003508:	20000048 	.word	0x20000048
 800350c:	20000000 	.word	0x20000000

08003510 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b093      	sub	sp, #76	; 0x4c
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	603a      	str	r2, [r7, #0]
 800351a:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003524:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003526:	f7fe fb83 	bl	8001c30 <__aeabi_dsub>
 800352a:	0002      	movs	r2, r0
 800352c:	000b      	movs	r3, r1
 800352e:	643a      	str	r2, [r7, #64]	; 0x40
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699c      	ldr	r4, [r3, #24]
 8003536:	69dd      	ldr	r5, [r3, #28]
 8003538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800353a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800353e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003540:	f7fe f90a 	bl	8001758 <__aeabi_dmul>
 8003544:	0002      	movs	r2, r0
 8003546:	000b      	movs	r3, r1
 8003548:	0020      	movs	r0, r4
 800354a:	0029      	movs	r1, r5
 800354c:	f7fd f9c6 	bl	80008dc <__aeabi_dadd>
 8003550:	0002      	movs	r2, r0
 8003552:	000b      	movs	r3, r1
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	618a      	str	r2, [r1, #24]
 8003558:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800355e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003564:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003566:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	f7fe f8f5 	bl	8001758 <__aeabi_dmul>
 800356e:	0002      	movs	r2, r0
 8003570:	000b      	movs	r3, r1
 8003572:	0010      	movs	r0, r2
 8003574:	0019      	movs	r1, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	f7fe fb58 	bl	8001c30 <__aeabi_dsub>
 8003580:	0002      	movs	r2, r0
 8003582:	000b      	movs	r3, r1
 8003584:	0010      	movs	r0, r2
 8003586:	0019      	movs	r1, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	f7fe fb4f 	bl	8001c30 <__aeabi_dsub>
 8003592:	0002      	movs	r2, r0
 8003594:	000b      	movs	r3, r1
 8003596:	0010      	movs	r0, r2
 8003598:	0019      	movs	r1, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f7fd f99c 	bl	80008dc <__aeabi_dadd>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0010      	movs	r0, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b0:	f7fe f8d2 	bl	8001758 <__aeabi_dmul>
 80035b4:	0002      	movs	r2, r0
 80035b6:	000b      	movs	r3, r1
 80035b8:	0020      	movs	r0, r4
 80035ba:	0029      	movs	r1, r5
 80035bc:	f7fd f98e 	bl	80008dc <__aeabi_dadd>
 80035c0:	0002      	movs	r2, r0
 80035c2:	000b      	movs	r3, r1
 80035c4:	68f9      	ldr	r1, [r7, #12]
 80035c6:	628a      	str	r2, [r1, #40]	; 0x28
 80035c8:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80035ce:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80035d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80035d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035da:	f7fe f8bd 	bl	8001758 <__aeabi_dmul>
 80035de:	0002      	movs	r2, r0
 80035e0:	000b      	movs	r3, r1
 80035e2:	0020      	movs	r0, r4
 80035e4:	0029      	movs	r1, r5
 80035e6:	f7fe fb23 	bl	8001c30 <__aeabi_dsub>
 80035ea:	0002      	movs	r2, r0
 80035ec:	000b      	movs	r3, r1
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	630a      	str	r2, [r1, #48]	; 0x30
 80035f2:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80035f8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80035fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003604:	f7fe f8a8 	bl	8001758 <__aeabi_dmul>
 8003608:	0002      	movs	r2, r0
 800360a:	000b      	movs	r3, r1
 800360c:	0020      	movs	r0, r4
 800360e:	0029      	movs	r1, r5
 8003610:	f7fe fb0e 	bl	8001c30 <__aeabi_dsub>
 8003614:	0002      	movs	r2, r0
 8003616:	000b      	movs	r3, r1
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	638a      	str	r2, [r1, #56]	; 0x38
 800361c:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003622:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6898      	ldr	r0, [r3, #8]
 8003628:	68d9      	ldr	r1, [r3, #12]
 800362a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800362c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362e:	f7fe f893 	bl	8001758 <__aeabi_dmul>
 8003632:	0002      	movs	r2, r0
 8003634:	000b      	movs	r3, r1
 8003636:	0020      	movs	r0, r4
 8003638:	0029      	movs	r1, r5
 800363a:	f7fd f94f 	bl	80008dc <__aeabi_dadd>
 800363e:	0002      	movs	r2, r0
 8003640:	000b      	movs	r3, r1
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	640a      	str	r2, [r1, #64]	; 0x40
 8003646:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800364c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f7fd f942 	bl	80008dc <__aeabi_dadd>
 8003658:	0002      	movs	r2, r0
 800365a:	000b      	movs	r3, r1
 800365c:	63ba      	str	r2, [r7, #56]	; 0x38
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	f7fd fc73 	bl	8000f54 <__aeabi_ddiv>
 800366e:	0002      	movs	r2, r0
 8003670:	000b      	movs	r3, r1
 8003672:	2610      	movs	r6, #16
 8003674:	19b9      	adds	r1, r7, r6
 8003676:	600a      	str	r2, [r1, #0]
 8003678:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800367e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	f7fd fc66 	bl	8000f54 <__aeabi_ddiv>
 8003688:	0002      	movs	r2, r0
 800368a:	000b      	movs	r3, r1
 800368c:	19b9      	adds	r1, r7, r6
 800368e:	608a      	str	r2, [r1, #8]
 8003690:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	6838      	ldr	r0, [r7, #0]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	f7fe fac8 	bl	8001c30 <__aeabi_dsub>
 80036a0:	0002      	movs	r2, r0
 80036a2:	000b      	movs	r3, r1
 80036a4:	633a      	str	r2, [r7, #48]	; 0x30
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	699c      	ldr	r4, [r3, #24]
 80036ac:	69dd      	ldr	r5, [r3, #28]
 80036ae:	19bb      	adds	r3, r7, r6
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	f7fe f84e 	bl	8001758 <__aeabi_dmul>
 80036bc:	0002      	movs	r2, r0
 80036be:	000b      	movs	r3, r1
 80036c0:	0020      	movs	r0, r4
 80036c2:	0029      	movs	r1, r5
 80036c4:	f7fd f90a 	bl	80008dc <__aeabi_dadd>
 80036c8:	0002      	movs	r2, r0
 80036ca:	000b      	movs	r3, r1
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	618a      	str	r2, [r1, #24]
 80036d0:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1c      	ldr	r4, [r3, #32]
 80036d6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80036d8:	19bb      	adds	r3, r7, r6
 80036da:	6898      	ldr	r0, [r3, #8]
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e2:	f7fe f839 	bl	8001758 <__aeabi_dmul>
 80036e6:	0002      	movs	r2, r0
 80036e8:	000b      	movs	r3, r1
 80036ea:	0020      	movs	r0, r4
 80036ec:	0029      	movs	r1, r5
 80036ee:	f7fd f8f5 	bl	80008dc <__aeabi_dadd>
 80036f2:	0002      	movs	r2, r0
 80036f4:	000b      	movs	r3, r1
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	620a      	str	r2, [r1, #32]
 80036fa:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	62ba      	str	r2, [r7, #40]	; 0x28
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	623a      	str	r2, [r7, #32]
 800370e:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003714:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003716:	19bb      	adds	r3, r7, r6
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	f7fe f81a 	bl	8001758 <__aeabi_dmul>
 8003724:	0002      	movs	r2, r0
 8003726:	000b      	movs	r3, r1
 8003728:	0020      	movs	r0, r4
 800372a:	0029      	movs	r1, r5
 800372c:	f7fe fa80 	bl	8001c30 <__aeabi_dsub>
 8003730:	0002      	movs	r2, r0
 8003732:	000b      	movs	r3, r1
 8003734:	68f9      	ldr	r1, [r7, #12]
 8003736:	628a      	str	r2, [r1, #40]	; 0x28
 8003738:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800373e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003740:	19bb      	adds	r3, r7, r6
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f7fe f805 	bl	8001758 <__aeabi_dmul>
 800374e:	0002      	movs	r2, r0
 8003750:	000b      	movs	r3, r1
 8003752:	0020      	movs	r0, r4
 8003754:	0029      	movs	r1, r5
 8003756:	f7fe fa6b 	bl	8001c30 <__aeabi_dsub>
 800375a:	0002      	movs	r2, r0
 800375c:	000b      	movs	r3, r1
 800375e:	68f9      	ldr	r1, [r7, #12]
 8003760:	630a      	str	r2, [r1, #48]	; 0x30
 8003762:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003768:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800376a:	19bb      	adds	r3, r7, r6
 800376c:	6898      	ldr	r0, [r3, #8]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	f7fd fff0 	bl	8001758 <__aeabi_dmul>
 8003778:	0002      	movs	r2, r0
 800377a:	000b      	movs	r3, r1
 800377c:	0020      	movs	r0, r4
 800377e:	0029      	movs	r1, r5
 8003780:	f7fe fa56 	bl	8001c30 <__aeabi_dsub>
 8003784:	0002      	movs	r2, r0
 8003786:	000b      	movs	r3, r1
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	638a      	str	r2, [r1, #56]	; 0x38
 800378c:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003792:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003794:	19bb      	adds	r3, r7, r6
 8003796:	6898      	ldr	r0, [r3, #8]
 8003798:	68d9      	ldr	r1, [r3, #12]
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f7fd ffdb 	bl	8001758 <__aeabi_dmul>
 80037a2:	0002      	movs	r2, r0
 80037a4:	000b      	movs	r3, r1
 80037a6:	0020      	movs	r0, r4
 80037a8:	0029      	movs	r1, r5
 80037aa:	f7fe fa41 	bl	8001c30 <__aeabi_dsub>
 80037ae:	0002      	movs	r2, r0
 80037b0:	000b      	movs	r3, r1
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	640a      	str	r2, [r1, #64]	; 0x40
 80037b6:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	69db      	ldr	r3, [r3, #28]
};
 80037be:	0010      	movs	r0, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b013      	add	sp, #76	; 0x4c
 80037c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <HAL_MspInit+0x44>)
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_MspInit+0x44>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_MspInit+0x44>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2201      	movs	r2, #1
 80037e0:	4013      	ands	r3, r2
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_MspInit+0x44>)
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_MspInit+0x44>)
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	0549      	lsls	r1, r1, #21
 80037f0:	430a      	orrs	r2, r1
 80037f2:	61da      	str	r2, [r3, #28]
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_MspInit+0x44>)
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	055b      	lsls	r3, r3, #21
 80037fc:	4013      	ands	r3, r2
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b08b      	sub	sp, #44	; 0x2c
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	2414      	movs	r4, #20
 800381a:	193b      	adds	r3, r7, r4
 800381c:	0018      	movs	r0, r3
 800381e:	2314      	movs	r3, #20
 8003820:	001a      	movs	r2, r3
 8003822:	2100      	movs	r1, #0
 8003824:	f003 f882 	bl	800692c <memset>
  if(hi2c->Instance==I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_I2C_MspInit+0x90>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d132      	bne.n	8003898 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_I2C_MspInit+0x94>)
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_I2C_MspInit+0x94>)
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	02c9      	lsls	r1, r1, #11
 800383c:	430a      	orrs	r2, r1
 800383e:	615a      	str	r2, [r3, #20]
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_I2C_MspInit+0x94>)
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	02db      	lsls	r3, r3, #11
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800384e:	193b      	adds	r3, r7, r4
 8003850:	22c0      	movs	r2, #192	; 0xc0
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003856:	0021      	movs	r1, r4
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2212      	movs	r2, #18
 800385c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2203      	movs	r2, #3
 8003868:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2201      	movs	r2, #1
 800386e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003870:	187b      	adds	r3, r7, r1
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <HAL_I2C_MspInit+0x98>)
 8003874:	0019      	movs	r1, r3
 8003876:	0010      	movs	r0, r2
 8003878:	f000 fafe 	bl	8003e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_I2C_MspInit+0x94>)
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_I2C_MspInit+0x94>)
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	0389      	lsls	r1, r1, #14
 8003886:	430a      	orrs	r2, r1
 8003888:	61da      	str	r2, [r3, #28]
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_I2C_MspInit+0x94>)
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	039b      	lsls	r3, r3, #14
 8003892:	4013      	ands	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b00b      	add	sp, #44	; 0x2c
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	40005400 	.word	0x40005400
 80038a4:	40021000 	.word	0x40021000
 80038a8:	48000400 	.word	0x48000400

080038ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b08d      	sub	sp, #52	; 0x34
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	241c      	movs	r4, #28
 80038b6:	193b      	adds	r3, r7, r4
 80038b8:	0018      	movs	r0, r3
 80038ba:	2314      	movs	r3, #20
 80038bc:	001a      	movs	r2, r3
 80038be:	2100      	movs	r1, #0
 80038c0:	f003 f834 	bl	800692c <memset>
  if(huart->Instance==USART1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a41      	ldr	r2, [pc, #260]	; (80039d0 <HAL_UART_MspInit+0x124>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d13c      	bne.n	8003948 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_UART_MspInit+0x128>)
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_UART_MspInit+0x128>)
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	01c9      	lsls	r1, r1, #7
 80038d8:	430a      	orrs	r2, r1
 80038da:	619a      	str	r2, [r3, #24]
 80038dc:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_UART_MspInit+0x128>)
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	01db      	lsls	r3, r3, #7
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_UART_MspInit+0x128>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_UART_MspInit+0x128>)
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	0289      	lsls	r1, r1, #10
 80038f4:	430a      	orrs	r2, r1
 80038f6:	615a      	str	r2, [r3, #20]
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_UART_MspInit+0x128>)
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	4013      	ands	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003906:	193b      	adds	r3, r7, r4
 8003908:	22c0      	movs	r2, #192	; 0xc0
 800390a:	00d2      	lsls	r2, r2, #3
 800390c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	0021      	movs	r1, r4
 8003910:	187b      	adds	r3, r7, r1
 8003912:	2202      	movs	r2, #2
 8003914:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	187b      	adds	r3, r7, r1
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800391c:	187b      	adds	r3, r7, r1
 800391e:	2203      	movs	r2, #3
 8003920:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003922:	187b      	adds	r3, r7, r1
 8003924:	2201      	movs	r2, #1
 8003926:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003928:	187a      	adds	r2, r7, r1
 800392a:	2390      	movs	r3, #144	; 0x90
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f000 faa1 	bl	8003e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	201b      	movs	r0, #27
 800393c:	f000 f9ec 	bl	8003d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003940:	201b      	movs	r0, #27
 8003942:	f000 f9fe 	bl	8003d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003946:	e03f      	b.n	80039c8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_UART_MspInit+0x12c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d13a      	bne.n	80039c8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_UART_MspInit+0x128>)
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_UART_MspInit+0x128>)
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0289      	lsls	r1, r1, #10
 800395c:	430a      	orrs	r2, r1
 800395e:	61da      	str	r2, [r3, #28]
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <HAL_UART_MspInit+0x128>)
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	029b      	lsls	r3, r3, #10
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_UART_MspInit+0x128>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_UART_MspInit+0x128>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0289      	lsls	r1, r1, #10
 8003978:	430a      	orrs	r2, r1
 800397a:	615a      	str	r2, [r3, #20]
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_UART_MspInit+0x128>)
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800398a:	211c      	movs	r1, #28
 800398c:	187b      	adds	r3, r7, r1
 800398e:	220c      	movs	r2, #12
 8003990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	187b      	adds	r3, r7, r1
 8003994:	2202      	movs	r2, #2
 8003996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	187b      	adds	r3, r7, r1
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2200      	movs	r2, #0
 80039a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2201      	movs	r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	187a      	adds	r2, r7, r1
 80039ac:	2390      	movs	r3, #144	; 0x90
 80039ae:	05db      	lsls	r3, r3, #23
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fa60 	bl	8003e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2100      	movs	r1, #0
 80039bc:	201c      	movs	r0, #28
 80039be:	f000 f9ab 	bl	8003d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039c2:	201c      	movs	r0, #28
 80039c4:	f000 f9bd 	bl	8003d42 <HAL_NVIC_EnableIRQ>
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b00d      	add	sp, #52	; 0x34
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40004400 	.word	0x40004400

080039dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <NMI_Handler+0x4>

080039e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e6:	e7fe      	b.n	80039e6 <HardFault_Handler+0x4>

080039e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a00:	f000 f89e 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fbc6 	bl	80041a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <USART1_IRQHandler+0x14>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f002 f80e 	bl	8005a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	20000168 	.word	0x20000168

08003a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <USART2_IRQHandler+0x14>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f002 f802 	bl	8005a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	200001ec 	.word	0x200001ec

08003a50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a5c:	480d      	ldr	r0, [pc, #52]	; (8003a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a60:	480d      	ldr	r0, [pc, #52]	; (8003a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a62:	490e      	ldr	r1, [pc, #56]	; (8003a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <LoopForever+0xe>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a68:	e002      	b.n	8003a70 <LoopCopyDataInit>

08003a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6e:	3304      	adds	r3, #4

08003a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a74:	d3f9      	bcc.n	8003a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a76:	4a0b      	ldr	r2, [pc, #44]	; (8003aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a78:	4c0b      	ldr	r4, [pc, #44]	; (8003aa8 <LoopForever+0x16>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a7c:	e001      	b.n	8003a82 <LoopFillZerobss>

08003a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a80:	3204      	adds	r2, #4

08003a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a84:	d3fb      	bcc.n	8003a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a86:	f7ff ffe3 	bl	8003a50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003a8a:	f002 ff2b 	bl	80068e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a8e:	f7ff f8db 	bl	8002c48 <main>

08003a92 <LoopForever>:

LoopForever:
    b LoopForever
 8003a92:	e7fe      	b.n	8003a92 <LoopForever>
  ldr   r0, =_estack
 8003a94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a9c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003aa0:	08007148 	.word	0x08007148
  ldr r2, =_sbss
 8003aa4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003aa8:	20000308 	.word	0x20000308

08003aac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aac:	e7fe      	b.n	8003aac <ADC1_COMP_IRQHandler>
	...

08003ab0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_Init+0x24>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_Init+0x24>)
 8003aba:	2110      	movs	r1, #16
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f000 f809 	bl	8003ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac6:	f7ff fe7f 	bl	80037c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	40022000 	.word	0x40022000

08003ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_InitTick+0x5c>)
 8003ae2:	681c      	ldr	r4, [r3, #0]
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_InitTick+0x60>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	23fa      	movs	r3, #250	; 0xfa
 8003aec:	0098      	lsls	r0, r3, #2
 8003aee:	f7fc fb09 	bl	8000104 <__udivsi3>
 8003af2:	0003      	movs	r3, r0
 8003af4:	0019      	movs	r1, r3
 8003af6:	0020      	movs	r0, r4
 8003af8:	f7fc fb04 	bl	8000104 <__udivsi3>
 8003afc:	0003      	movs	r3, r0
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f92f 	bl	8003d62 <HAL_SYSTICK_Config>
 8003b04:	1e03      	subs	r3, r0, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e00f      	b.n	8003b2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d80b      	bhi.n	8003b2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	2301      	movs	r3, #1
 8003b16:	425b      	negs	r3, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f8fc 	bl	8003d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_InitTick+0x64>)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b003      	add	sp, #12
 8003b32:	bd90      	pop	{r4, r7, pc}
 8003b34:	20000090 	.word	0x20000090
 8003b38:	20000098 	.word	0x20000098
 8003b3c:	20000094 	.word	0x20000094

08003b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_IncTick+0x1c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	001a      	movs	r2, r3
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_IncTick+0x20>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	18d2      	adds	r2, r2, r3
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_IncTick+0x20>)
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	20000098 	.word	0x20000098
 8003b60:	20000304 	.word	0x20000304

08003b64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <HAL_GetTick+0x10>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	20000304 	.word	0x20000304

08003b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	d005      	beq.n	8003b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_Delay+0x44>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	001a      	movs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	f7ff ffe0 	bl	8003b64 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d8f7      	bhi.n	8003ba0 <HAL_Delay+0x28>
  {
  }
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000098 	.word	0x20000098

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	1dfb      	adds	r3, r7, #7
 8003bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd2:	d809      	bhi.n	8003be8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	001a      	movs	r2, r3
 8003bda:	231f      	movs	r3, #31
 8003bdc:	401a      	ands	r2, r3
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <__NVIC_EnableIRQ+0x30>)
 8003be0:	2101      	movs	r1, #1
 8003be2:	4091      	lsls	r1, r2
 8003be4:	000a      	movs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
  }
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	e000e100 	.word	0xe000e100

08003bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	1dfb      	adds	r3, r7, #7
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b7f      	cmp	r3, #127	; 0x7f
 8003c08:	d828      	bhi.n	8003c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c0a:	4a2f      	ldr	r2, [pc, #188]	; (8003cc8 <__NVIC_SetPriority+0xd4>)
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	33c0      	adds	r3, #192	; 0xc0
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	1dfa      	adds	r2, r7, #7
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0011      	movs	r1, r2
 8003c20:	2203      	movs	r2, #3
 8003c22:	400a      	ands	r2, r1
 8003c24:	00d2      	lsls	r2, r2, #3
 8003c26:	21ff      	movs	r1, #255	; 0xff
 8003c28:	4091      	lsls	r1, r2
 8003c2a:	000a      	movs	r2, r1
 8003c2c:	43d2      	mvns	r2, r2
 8003c2e:	401a      	ands	r2, r3
 8003c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	401a      	ands	r2, r3
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	2303      	movs	r3, #3
 8003c42:	4003      	ands	r3, r0
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c48:	481f      	ldr	r0, [pc, #124]	; (8003cc8 <__NVIC_SetPriority+0xd4>)
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	430a      	orrs	r2, r1
 8003c54:	33c0      	adds	r3, #192	; 0xc0
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c5a:	e031      	b.n	8003cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <__NVIC_SetPriority+0xd8>)
 8003c5e:	1dfb      	adds	r3, r7, #7
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	0019      	movs	r1, r3
 8003c64:	230f      	movs	r3, #15
 8003c66:	400b      	ands	r3, r1
 8003c68:	3b08      	subs	r3, #8
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3306      	adds	r3, #6
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	18d3      	adds	r3, r2, r3
 8003c72:	3304      	adds	r3, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	1dfa      	adds	r2, r7, #7
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	400a      	ands	r2, r1
 8003c80:	00d2      	lsls	r2, r2, #3
 8003c82:	21ff      	movs	r1, #255	; 0xff
 8003c84:	4091      	lsls	r1, r2
 8003c86:	000a      	movs	r2, r1
 8003c88:	43d2      	mvns	r2, r2
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	401a      	ands	r2, r3
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	4003      	ands	r3, r0
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ca4:	4809      	ldr	r0, [pc, #36]	; (8003ccc <__NVIC_SetPriority+0xd8>)
 8003ca6:	1dfb      	adds	r3, r7, #7
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	001c      	movs	r4, r3
 8003cac:	230f      	movs	r3, #15
 8003cae:	4023      	ands	r3, r4
 8003cb0:	3b08      	subs	r3, #8
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	3306      	adds	r3, #6
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	18c3      	adds	r3, r0, r3
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	601a      	str	r2, [r3, #0]
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b003      	add	sp, #12
 8003cc6:	bd90      	pop	{r4, r7, pc}
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	045b      	lsls	r3, r3, #17
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d301      	bcc.n	8003ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e010      	b.n	8003d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <SysTick_Config+0x44>)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	3a01      	subs	r2, #1
 8003cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	425b      	negs	r3, r3
 8003cf4:	2103      	movs	r1, #3
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7ff ff7c 	bl	8003bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <SysTick_Config+0x44>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <SysTick_Config+0x44>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	e000e010 	.word	0xe000e010

08003d18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	210f      	movs	r1, #15
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	1c02      	adds	r2, r0, #0
 8003d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	0011      	movs	r1, r2
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff ff5d 	bl	8003bf4 <__NVIC_SetPriority>
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	0002      	movs	r2, r0
 8003d4a:	1dfb      	adds	r3, r7, #7
 8003d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d4e:	1dfb      	adds	r3, r7, #7
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff ff33 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7ff ffaf 	bl	8003cd0 <SysTick_Config>
 8003d72:	0003      	movs	r3, r0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2221      	movs	r2, #33	; 0x21
 8003d88:	5c9b      	ldrb	r3, [r3, r2]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e020      	b.n	8003de4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	210e      	movs	r1, #14
 8003dae:	438a      	bics	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4091      	lsls	r1, r2
 8003dce:	000a      	movs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2221      	movs	r2, #33	; 0x21
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	2100      	movs	r1, #0
 8003de0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	210f      	movs	r1, #15
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2221      	movs	r2, #33	; 0x21
 8003e00:	5c9b      	ldrb	r3, [r3, r2]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d006      	beq.n	8003e16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e028      	b.n	8003e68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	210e      	movs	r1, #14
 8003e22:	438a      	bics	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	438a      	bics	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4091      	lsls	r1, r2
 8003e42:	000a      	movs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2221      	movs	r2, #33	; 0x21
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	0010      	movs	r0, r2
 8003e66:	4798      	blx	r3
    } 
  }
  return status;
 8003e68:	230f      	movs	r3, #15
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	781b      	ldrb	r3, [r3, #0]
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e86:	e155      	b.n	8004134 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4091      	lsls	r1, r2
 8003e92:	000a      	movs	r2, r1
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d100      	bne.n	8003ea0 <HAL_GPIO_Init+0x28>
 8003e9e:	e146      	b.n	800412e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d005      	beq.n	8003eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d130      	bne.n	8003f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	0013      	movs	r3, r2
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eee:	2201      	movs	r2, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	2201      	movs	r2, #1
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2203      	movs	r2, #3
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d017      	beq.n	8003f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	409a      	lsls	r2, r3
 8003f34:	0013      	movs	r3, r2
 8003f36:	43da      	mvns	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d123      	bne.n	8003faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	08da      	lsrs	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3208      	adds	r2, #8
 8003f6a:	0092      	lsls	r2, r2, #2
 8003f6c:	58d3      	ldr	r3, [r2, r3]
 8003f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2207      	movs	r2, #7
 8003f74:	4013      	ands	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	220f      	movs	r2, #15
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2107      	movs	r1, #7
 8003f8e:	400b      	ands	r3, r1
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	0013      	movs	r3, r2
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	401a      	ands	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	23c0      	movs	r3, #192	; 0xc0
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d100      	bne.n	8003fec <HAL_GPIO_Init+0x174>
 8003fea:	e0a0      	b.n	800412e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fec:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_GPIO_Init+0x2d4>)
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	4b56      	ldr	r3, [pc, #344]	; (800414c <HAL_GPIO_Init+0x2d4>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	619a      	str	r2, [r3, #24]
 8003ff8:	4b54      	ldr	r3, [pc, #336]	; (800414c <HAL_GPIO_Init+0x2d4>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_GPIO_Init+0x2d8>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	589b      	ldr	r3, [r3, r2]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2203      	movs	r2, #3
 8004016:	4013      	ands	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	220f      	movs	r2, #15
 800401c:	409a      	lsls	r2, r3
 800401e:	0013      	movs	r3, r2
 8004020:	43da      	mvns	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	2390      	movs	r3, #144	; 0x90
 800402c:	05db      	lsls	r3, r3, #23
 800402e:	429a      	cmp	r2, r3
 8004030:	d019      	beq.n	8004066 <HAL_GPIO_Init+0x1ee>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_GPIO_Init+0x2dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_GPIO_Init+0x1ea>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a46      	ldr	r2, [pc, #280]	; (8004158 <HAL_GPIO_Init+0x2e0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00d      	beq.n	800405e <HAL_GPIO_Init+0x1e6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a45      	ldr	r2, [pc, #276]	; (800415c <HAL_GPIO_Init+0x2e4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <HAL_GPIO_Init+0x1e2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a44      	ldr	r2, [pc, #272]	; (8004160 <HAL_GPIO_Init+0x2e8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_GPIO_Init+0x1de>
 8004052:	2304      	movs	r3, #4
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x1f0>
 8004056:	2305      	movs	r3, #5
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x1f0>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x1f0>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x1f0>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x1f0>
 8004066:	2300      	movs	r3, #0
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	2103      	movs	r1, #3
 800406c:	400a      	ands	r2, r1
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004078:	4935      	ldr	r1, [pc, #212]	; (8004150 <HAL_GPIO_Init+0x2d8>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004086:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43da      	mvns	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	4013      	ands	r3, r2
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43da      	mvns	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	4013      	ands	r3, r2
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	035b      	lsls	r3, r3, #13
 80040f2:	4013      	ands	r3, r2
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	43da      	mvns	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	039b      	lsls	r3, r3, #14
 800411c:	4013      	ands	r3, r2
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_GPIO_Init+0x2ec>)
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3301      	adds	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	40da      	lsrs	r2, r3
 800413c:	1e13      	subs	r3, r2, #0
 800413e:	d000      	beq.n	8004142 <HAL_GPIO_Init+0x2ca>
 8004140:	e6a2      	b.n	8003e88 <HAL_GPIO_Init+0x10>
  } 
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b006      	add	sp, #24
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	40010000 	.word	0x40010000
 8004154:	48000400 	.word	0x48000400
 8004158:	48000800 	.word	0x48000800
 800415c:	48000c00 	.word	0x48000c00
 8004160:	48001000 	.word	0x48001000
 8004164:	40010400 	.word	0x40010400

08004168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	0008      	movs	r0, r1
 8004172:	0011      	movs	r1, r2
 8004174:	1cbb      	adds	r3, r7, #2
 8004176:	1c02      	adds	r2, r0, #0
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	1c7b      	adds	r3, r7, #1
 800417c:	1c0a      	adds	r2, r1, #0
 800417e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004180:	1c7b      	adds	r3, r7, #1
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004188:	1cbb      	adds	r3, r7, #2
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004192:	1cbb      	adds	r3, r7, #2
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	b002      	add	sp, #8
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	0002      	movs	r2, r0
 80041ac:	1dbb      	adds	r3, r7, #6
 80041ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	1dba      	adds	r2, r7, #6
 80041b6:	8812      	ldrh	r2, [r2, #0]
 80041b8:	4013      	ands	r3, r2
 80041ba:	d008      	beq.n	80041ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80041be:	1dba      	adds	r2, r7, #6
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c4:	1dbb      	adds	r3, r7, #6
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7fe fd1b 	bl	8002c04 <HAL_GPIO_EXTI_Callback>
  }
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b002      	add	sp, #8
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e082      	b.n	80042f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2241      	movs	r2, #65	; 0x41
 80041f2:	5c9b      	ldrb	r3, [r3, r2]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2240      	movs	r2, #64	; 0x40
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f7ff fb03 	bl	8003810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2241      	movs	r2, #65	; 0x41
 800420e:	2124      	movs	r1, #36	; 0x24
 8004210:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	438a      	bics	r2, r1
 8004220:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4934      	ldr	r1, [pc, #208]	; (80042fc <HAL_I2C_Init+0x120>)
 800422c:	400a      	ands	r2, r1
 800422e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4931      	ldr	r1, [pc, #196]	; (8004300 <HAL_I2C_Init+0x124>)
 800423c:	400a      	ands	r2, r1
 800423e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d108      	bne.n	800425a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	0209      	lsls	r1, r1, #8
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	e007      	b.n	800426a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2184      	movs	r1, #132	; 0x84
 8004264:	0209      	lsls	r1, r1, #8
 8004266:	430a      	orrs	r2, r1
 8004268:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d104      	bne.n	800427c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	491f      	ldr	r1, [pc, #124]	; (8004304 <HAL_I2C_Init+0x128>)
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	491a      	ldr	r1, [pc, #104]	; (8004300 <HAL_I2C_Init+0x124>)
 8004298:	400a      	ands	r2, r1
 800429a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69d9      	ldr	r1, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2241      	movs	r2, #65	; 0x41
 80042e0:	2120      	movs	r1, #32
 80042e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2242      	movs	r2, #66	; 0x42
 80042ee:	2100      	movs	r1, #0
 80042f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	f0ffffff 	.word	0xf0ffffff
 8004300:	ffff7fff 	.word	0xffff7fff
 8004304:	02008000 	.word	0x02008000

08004308 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	000c      	movs	r4, r1
 8004312:	0010      	movs	r0, r2
 8004314:	0019      	movs	r1, r3
 8004316:	230a      	movs	r3, #10
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	1c22      	adds	r2, r4, #0
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	2308      	movs	r3, #8
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	1c02      	adds	r2, r0, #0
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	1dbb      	adds	r3, r7, #6
 8004328:	1c0a      	adds	r2, r1, #0
 800432a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2241      	movs	r2, #65	; 0x41
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b20      	cmp	r3, #32
 8004336:	d000      	beq.n	800433a <HAL_I2C_Mem_Write+0x32>
 8004338:	e10c      	b.n	8004554 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_I2C_Mem_Write+0x42>
 8004340:	232c      	movs	r3, #44	; 0x2c
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	0092      	lsls	r2, r2, #2
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e0ff      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2240      	movs	r2, #64	; 0x40
 800435a:	5c9b      	ldrb	r3, [r3, r2]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_I2C_Mem_Write+0x5c>
 8004360:	2302      	movs	r3, #2
 8004362:	e0f8      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	2101      	movs	r1, #1
 800436a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800436c:	f7ff fbfa 	bl	8003b64 <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	0219      	lsls	r1, r3, #8
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	2319      	movs	r3, #25
 8004380:	2201      	movs	r2, #1
 8004382:	f000 fb0b 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0e3      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2241      	movs	r2, #65	; 0x41
 8004392:	2121      	movs	r1, #33	; 0x21
 8004394:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2242      	movs	r2, #66	; 0x42
 800439a:	2140      	movs	r1, #64	; 0x40
 800439c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	222c      	movs	r2, #44	; 0x2c
 80043ae:	18ba      	adds	r2, r7, r2
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ba:	1dbb      	adds	r3, r7, #6
 80043bc:	881c      	ldrh	r4, [r3, #0]
 80043be:	2308      	movs	r3, #8
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	881a      	ldrh	r2, [r3, #0]
 80043c4:	230a      	movs	r3, #10
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	8819      	ldrh	r1, [r3, #0]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	0023      	movs	r3, r4
 80043d6:	f000 f9f9 	bl	80047cc <I2C_RequestMemoryWrite>
 80043da:	1e03      	subs	r3, r0, #0
 80043dc:	d005      	beq.n	80043ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e0b5      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2bff      	cmp	r3, #255	; 0xff
 80043f2:	d911      	bls.n	8004418 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	045c      	lsls	r4, r3, #17
 8004404:	230a      	movs	r3, #10
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	8819      	ldrh	r1, [r3, #0]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	0023      	movs	r3, r4
 8004412:	f000 fbf7 	bl	8004c04 <I2C_TransferConfig>
 8004416:	e012      	b.n	800443e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	b2da      	uxtb	r2, r3
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	049c      	lsls	r4, r3, #18
 800442c:	230a      	movs	r3, #10
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	8819      	ldrh	r1, [r3, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	0023      	movs	r3, r4
 800443a:	f000 fbe3 	bl	8004c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 fae8 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e081      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d03a      	beq.n	8004502 <HAL_I2C_Mem_Write+0x1fa>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d136      	bne.n	8004502 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	0013      	movs	r3, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	f000 fa7b 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 80044a6:	1e03      	subs	r3, r0, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e053      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2bff      	cmp	r3, #255	; 0xff
 80044b6:	d911      	bls.n	80044dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	22ff      	movs	r2, #255	; 0xff
 80044bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	045c      	lsls	r4, r3, #17
 80044c8:	230a      	movs	r3, #10
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	8819      	ldrh	r1, [r3, #0]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	0023      	movs	r3, r4
 80044d6:	f000 fb95 	bl	8004c04 <I2C_TransferConfig>
 80044da:	e012      	b.n	8004502 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	049c      	lsls	r4, r3, #18
 80044f0:	230a      	movs	r3, #10
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	8819      	ldrh	r1, [r3, #0]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	0023      	movs	r3, r4
 80044fe:	f000 fb81 	bl	8004c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d198      	bne.n	800443e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	0018      	movs	r0, r3
 8004514:	f000 fac0 	bl	8004a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004518:	1e03      	subs	r3, r0, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e01a      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2220      	movs	r2, #32
 8004526:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	490b      	ldr	r1, [pc, #44]	; (8004560 <HAL_I2C_Mem_Write+0x258>)
 8004534:	400a      	ands	r2, r1
 8004536:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2241      	movs	r2, #65	; 0x41
 800453c:	2120      	movs	r1, #32
 800453e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2242      	movs	r2, #66	; 0x42
 8004544:	2100      	movs	r1, #0
 8004546:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	2100      	movs	r1, #0
 800454e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b007      	add	sp, #28
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	fe00e800 	.word	0xfe00e800

08004564 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	000c      	movs	r4, r1
 800456e:	0010      	movs	r0, r2
 8004570:	0019      	movs	r1, r3
 8004572:	230a      	movs	r3, #10
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	1c22      	adds	r2, r4, #0
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	2308      	movs	r3, #8
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	1c02      	adds	r2, r0, #0
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	1dbb      	adds	r3, r7, #6
 8004584:	1c0a      	adds	r2, r1, #0
 8004586:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2241      	movs	r2, #65	; 0x41
 800458c:	5c9b      	ldrb	r3, [r3, r2]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b20      	cmp	r3, #32
 8004592:	d000      	beq.n	8004596 <HAL_I2C_Mem_Read+0x32>
 8004594:	e110      	b.n	80047b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <HAL_I2C_Mem_Read+0x42>
 800459c:	232c      	movs	r3, #44	; 0x2c
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	0092      	lsls	r2, r2, #2
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e103      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2240      	movs	r2, #64	; 0x40
 80045b6:	5c9b      	ldrb	r3, [r3, r2]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_I2C_Mem_Read+0x5c>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0fc      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	2101      	movs	r1, #1
 80045c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045c8:	f7ff facc 	bl	8003b64 <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	0219      	lsls	r1, r3, #8
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2319      	movs	r3, #25
 80045dc:	2201      	movs	r2, #1
 80045de:	f000 f9dd 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 80045e2:	1e03      	subs	r3, r0, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0e7      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2241      	movs	r2, #65	; 0x41
 80045ee:	2122      	movs	r1, #34	; 0x22
 80045f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2242      	movs	r2, #66	; 0x42
 80045f6:	2140      	movs	r1, #64	; 0x40
 80045f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	222c      	movs	r2, #44	; 0x2c
 800460a:	18ba      	adds	r2, r7, r2
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004616:	1dbb      	adds	r3, r7, #6
 8004618:	881c      	ldrh	r4, [r3, #0]
 800461a:	2308      	movs	r3, #8
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	881a      	ldrh	r2, [r3, #0]
 8004620:	230a      	movs	r3, #10
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	8819      	ldrh	r1, [r3, #0]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	0023      	movs	r3, r4
 8004632:	f000 f92f 	bl	8004894 <I2C_RequestMemoryRead>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d005      	beq.n	8004646 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2240      	movs	r2, #64	; 0x40
 800463e:	2100      	movs	r1, #0
 8004640:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0b9      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2bff      	cmp	r3, #255	; 0xff
 800464e:	d911      	bls.n	8004674 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	22ff      	movs	r2, #255	; 0xff
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	b2da      	uxtb	r2, r3
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	045c      	lsls	r4, r3, #17
 8004660:	230a      	movs	r3, #10
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	8819      	ldrh	r1, [r3, #0]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	4b56      	ldr	r3, [pc, #344]	; (80047c4 <HAL_I2C_Mem_Read+0x260>)
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	0023      	movs	r3, r4
 800466e:	f000 fac9 	bl	8004c04 <I2C_TransferConfig>
 8004672:	e012      	b.n	800469a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004682:	b2da      	uxtb	r2, r3
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	049c      	lsls	r4, r3, #18
 8004688:	230a      	movs	r3, #10
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	8819      	ldrh	r1, [r3, #0]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	4b4c      	ldr	r3, [pc, #304]	; (80047c4 <HAL_I2C_Mem_Read+0x260>)
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	0023      	movs	r3, r4
 8004696:	f000 fab5 	bl	8004c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800469a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0013      	movs	r3, r2
 80046a4:	2200      	movs	r2, #0
 80046a6:	2104      	movs	r1, #4
 80046a8:	f000 f978 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 80046ac:	1e03      	subs	r3, r0, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e082      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d03a      	beq.n	8004766 <HAL_I2C_Mem_Read+0x202>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d136      	bne.n	8004766 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	0013      	movs	r3, r2
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	f000 f949 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e053      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2bff      	cmp	r3, #255	; 0xff
 800471a:	d911      	bls.n	8004740 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	b2da      	uxtb	r2, r3
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	045c      	lsls	r4, r3, #17
 800472c:	230a      	movs	r3, #10
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	8819      	ldrh	r1, [r3, #0]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	2300      	movs	r3, #0
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	0023      	movs	r3, r4
 800473a:	f000 fa63 	bl	8004c04 <I2C_TransferConfig>
 800473e:	e012      	b.n	8004766 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	b2da      	uxtb	r2, r3
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	049c      	lsls	r4, r3, #18
 8004754:	230a      	movs	r3, #10
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	8819      	ldrh	r1, [r3, #0]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	2300      	movs	r3, #0
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	0023      	movs	r3, r4
 8004762:	f000 fa4f 	bl	8004c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d194      	bne.n	800469a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	0018      	movs	r0, r3
 8004778:	f000 f98e 	bl	8004a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800477c:	1e03      	subs	r3, r0, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e01a      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2220      	movs	r2, #32
 800478a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	490c      	ldr	r1, [pc, #48]	; (80047c8 <HAL_I2C_Mem_Read+0x264>)
 8004798:	400a      	ands	r2, r1
 800479a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2241      	movs	r2, #65	; 0x41
 80047a0:	2120      	movs	r1, #32
 80047a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2242      	movs	r2, #66	; 0x42
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2240      	movs	r2, #64	; 0x40
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b007      	add	sp, #28
 80047c0:	bd90      	pop	{r4, r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	80002400 	.word	0x80002400
 80047c8:	fe00e800 	.word	0xfe00e800

080047cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	000c      	movs	r4, r1
 80047d6:	0010      	movs	r0, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	250a      	movs	r5, #10
 80047dc:	197b      	adds	r3, r7, r5
 80047de:	1c22      	adds	r2, r4, #0
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	2308      	movs	r3, #8
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	1c02      	adds	r2, r0, #0
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	1dbb      	adds	r3, r7, #6
 80047ec:	1c0a      	adds	r2, r1, #0
 80047ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047f0:	1dbb      	adds	r3, r7, #6
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	045c      	lsls	r4, r3, #17
 80047fa:	197b      	adds	r3, r7, r5
 80047fc:	8819      	ldrh	r1, [r3, #0]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	4b23      	ldr	r3, [pc, #140]	; (8004890 <I2C_RequestMemoryWrite+0xc4>)
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	0023      	movs	r3, r4
 8004806:	f000 f9fd 	bl	8004c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	6a39      	ldr	r1, [r7, #32]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f902 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004816:	1e03      	subs	r3, r0, #0
 8004818:	d001      	beq.n	800481e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e033      	b.n	8004886 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800481e:	1dbb      	adds	r3, r7, #6
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004826:	2308      	movs	r3, #8
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
 8004834:	e019      	b.n	800486a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004836:	2308      	movs	r3, #8
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	b29b      	uxth	r3, r3
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	6a39      	ldr	r1, [r7, #32]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 f8e3 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d001      	beq.n	800485c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e014      	b.n	8004886 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800485c:	2308      	movs	r3, #8
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	0013      	movs	r3, r2
 8004874:	2200      	movs	r2, #0
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	f000 f890 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800487c:	1e03      	subs	r3, r0, #0
 800487e:	d001      	beq.n	8004884 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bdb0      	pop	{r4, r5, r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	80002000 	.word	0x80002000

08004894 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004894:	b5b0      	push	{r4, r5, r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	000c      	movs	r4, r1
 800489e:	0010      	movs	r0, r2
 80048a0:	0019      	movs	r1, r3
 80048a2:	250a      	movs	r5, #10
 80048a4:	197b      	adds	r3, r7, r5
 80048a6:	1c22      	adds	r2, r4, #0
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	2308      	movs	r3, #8
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	1c02      	adds	r2, r0, #0
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	1dbb      	adds	r3, r7, #6
 80048b4:	1c0a      	adds	r2, r1, #0
 80048b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	197b      	adds	r3, r7, r5
 80048c0:	8819      	ldrh	r1, [r3, #0]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <I2C_RequestMemoryRead+0xc0>)
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	f000 f99b 	bl	8004c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	6a39      	ldr	r1, [r7, #32]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f8a0 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e033      	b.n	800494a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048e2:	1dbb      	adds	r3, r7, #6
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ea:	2308      	movs	r3, #8
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28
 80048f8:	e019      	b.n	800492e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048fa:	2308      	movs	r3, #8
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	b29b      	uxth	r3, r3
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	6a39      	ldr	r1, [r7, #32]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	0018      	movs	r0, r3
 8004914:	f000 f881 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d001      	beq.n	8004920 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e014      	b.n	800494a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004920:	2308      	movs	r3, #8
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800492e:	6a3a      	ldr	r2, [r7, #32]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	0013      	movs	r3, r2
 8004938:	2200      	movs	r2, #0
 800493a:	2140      	movs	r1, #64	; 0x40
 800493c:	f000 f82e 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 8004940:	1e03      	subs	r3, r0, #0
 8004942:	d001      	beq.n	8004948 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b004      	add	sp, #16
 8004950:	bdb0      	pop	{r4, r5, r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	80002000 	.word	0x80002000

08004958 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2202      	movs	r2, #2
 8004968:	4013      	ands	r3, r2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d103      	bne.n	8004976 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2201      	movs	r2, #1
 800497e:	4013      	ands	r3, r2
 8004980:	2b01      	cmp	r3, #1
 8004982:	d007      	beq.n	8004994 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2101      	movs	r1, #1
 8004990:	430a      	orrs	r2, r1
 8004992:	619a      	str	r2, [r3, #24]
  }
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	1dfb      	adds	r3, r7, #7
 80049aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ac:	e021      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	d01e      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b4:	f7ff f8d6 	bl	8003b64 <HAL_GetTick>
 80049b8:	0002      	movs	r2, r0
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d113      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	2220      	movs	r2, #32
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2241      	movs	r2, #65	; 0x41
 80049da:	2120      	movs	r1, #32
 80049dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2242      	movs	r2, #66	; 0x42
 80049e2:	2100      	movs	r1, #0
 80049e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2240      	movs	r2, #64	; 0x40
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00f      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4013      	ands	r3, r2
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	425a      	negs	r2, r3
 8004a02:	4153      	adcs	r3, r2
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	001a      	movs	r2, r3
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d0ce      	beq.n	80049ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b004      	add	sp, #16
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a26:	e02b      	b.n	8004a80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f86e 	bl	8004b10 <I2C_IsAcknowledgeFailed>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d001      	beq.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e029      	b.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	d01e      	beq.n	8004a80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7ff f88f 	bl	8003b64 <HAL_GetTick>
 8004a46:	0002      	movs	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d113      	bne.n	8004a80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2241      	movs	r2, #65	; 0x41
 8004a68:	2120      	movs	r1, #32
 8004a6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2242      	movs	r2, #66	; 0x42
 8004a70:	2100      	movs	r1, #0
 8004a72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	2100      	movs	r1, #0
 8004a7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e007      	b.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2202      	movs	r2, #2
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d1cc      	bne.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b004      	add	sp, #16
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa4:	e028      	b.n	8004af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 f82f 	bl	8004b10 <I2C_IsAcknowledgeFailed>
 8004ab2:	1e03      	subs	r3, r0, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e026      	b.n	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7ff f853 	bl	8003b64 <HAL_GetTick>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d113      	bne.n	8004af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2241      	movs	r2, #65	; 0x41
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2242      	movs	r2, #66	; 0x42
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2240      	movs	r2, #64	; 0x40
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e007      	b.n	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2220      	movs	r2, #32
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d1cf      	bne.n	8004aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b004      	add	sp, #16
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2210      	movs	r2, #16
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d164      	bne.n	8004bf4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	049b      	lsls	r3, r3, #18
 8004b34:	401a      	ands	r2, r3
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	049b      	lsls	r3, r3, #18
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d02b      	beq.n	8004b96 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2180      	movs	r1, #128	; 0x80
 8004b4a:	01c9      	lsls	r1, r1, #7
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b50:	e021      	b.n	8004b96 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3301      	adds	r3, #1
 8004b56:	d01e      	beq.n	8004b96 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b58:	f7ff f804 	bl	8003b64 <HAL_GetTick>
 8004b5c:	0002      	movs	r2, r0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <I2C_IsAcknowledgeFailed+0x5e>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d113      	bne.n	8004b96 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	2220      	movs	r2, #32
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2241      	movs	r2, #65	; 0x41
 8004b7e:	2120      	movs	r1, #32
 8004b80:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2242      	movs	r2, #66	; 0x42
 8004b86:	2100      	movs	r1, #0
 8004b88:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2240      	movs	r2, #64	; 0x40
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02f      	b.n	8004bf6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d1d6      	bne.n	8004b52 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7ff fece 	bl	8004958 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	490e      	ldr	r1, [pc, #56]	; (8004c00 <I2C_IsAcknowledgeFailed+0xf0>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2241      	movs	r2, #65	; 0x41
 8004bdc:	2120      	movs	r1, #32
 8004bde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2242      	movs	r2, #66	; 0x42
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2240      	movs	r2, #64	; 0x40
 8004bec:	2100      	movs	r1, #0
 8004bee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b004      	add	sp, #16
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	fe00e800 	.word	0xfe00e800

08004c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	0008      	movs	r0, r1
 8004c0e:	0011      	movs	r1, r2
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	240a      	movs	r4, #10
 8004c14:	193b      	adds	r3, r7, r4
 8004c16:	1c02      	adds	r2, r0, #0
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	2009      	movs	r0, #9
 8004c1c:	183b      	adds	r3, r7, r0
 8004c1e:	1c0a      	adds	r2, r1, #0
 8004c20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	0d51      	lsrs	r1, r2, #21
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	400a      	ands	r2, r1
 8004c32:	490e      	ldr	r1, [pc, #56]	; (8004c6c <I2C_TransferConfig+0x68>)
 8004c34:	430a      	orrs	r2, r1
 8004c36:	43d2      	mvns	r2, r2
 8004c38:	401a      	ands	r2, r3
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	0d9a      	lsrs	r2, r3, #22
 8004c44:	183b      	adds	r3, r7, r0
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	0418      	lsls	r0, r3, #16
 8004c4a:	23ff      	movs	r3, #255	; 0xff
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	4003      	ands	r3, r0
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b005      	add	sp, #20
 8004c68:	bd90      	pop	{r4, r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	03ff63ff 	.word	0x03ff63ff

08004c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2241      	movs	r2, #65	; 0x41
 8004c7e:	5c9b      	ldrb	r3, [r3, r2]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d138      	bne.n	8004cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	5c9b      	ldrb	r3, [r3, r2]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e032      	b.n	8004cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	2101      	movs	r1, #1
 8004c9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2241      	movs	r2, #65	; 0x41
 8004ca0:	2124      	movs	r1, #36	; 0x24
 8004ca2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2101      	movs	r1, #1
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4911      	ldr	r1, [pc, #68]	; (8004d04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2101      	movs	r1, #1
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2241      	movs	r2, #65	; 0x41
 8004ce8:	2120      	movs	r1, #32
 8004cea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e000      	b.n	8004cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
  }
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b002      	add	sp, #8
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	ffffefff 	.word	0xffffefff

08004d08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2241      	movs	r2, #65	; 0x41
 8004d16:	5c9b      	ldrb	r3, [r3, r2]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d139      	bne.n	8004d92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2240      	movs	r2, #64	; 0x40
 8004d22:	5c9b      	ldrb	r3, [r3, r2]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e033      	b.n	8004d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2240      	movs	r2, #64	; 0x40
 8004d30:	2101      	movs	r1, #1
 8004d32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2241      	movs	r2, #65	; 0x41
 8004d38:	2124      	movs	r1, #36	; 0x24
 8004d3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2101      	movs	r1, #1
 8004d48:	438a      	bics	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2241      	movs	r2, #65	; 0x41
 8004d82:	2120      	movs	r1, #32
 8004d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2240      	movs	r2, #64	; 0x40
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	0018      	movs	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b004      	add	sp, #16
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	fffff0ff 	.word	0xfffff0ff

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f000 fb76 	bl	80054a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d100      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x20>
 8004dbe:	e08e      	b.n	8004ede <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004dc0:	4bc5      	ldr	r3, [pc, #788]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	220c      	movs	r2, #12
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d00e      	beq.n	8004dea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dcc:	4bc2      	ldr	r3, [pc, #776]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	220c      	movs	r2, #12
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d117      	bne.n	8004e08 <HAL_RCC_OscConfig+0x68>
 8004dd8:	4bbf      	ldr	r3, [pc, #764]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	23c0      	movs	r3, #192	; 0xc0
 8004dde:	025b      	lsls	r3, r3, #9
 8004de0:	401a      	ands	r2, r3
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	025b      	lsls	r3, r3, #9
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10e      	bne.n	8004e08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dea:	4bbb      	ldr	r3, [pc, #748]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	029b      	lsls	r3, r3, #10
 8004df2:	4013      	ands	r3, r2
 8004df4:	d100      	bne.n	8004df8 <HAL_RCC_OscConfig+0x58>
 8004df6:	e071      	b.n	8004edc <HAL_RCC_OscConfig+0x13c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d000      	beq.n	8004e02 <HAL_RCC_OscConfig+0x62>
 8004e00:	e06c      	b.n	8004edc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f000 fb4c 	bl	80054a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_OscConfig+0x80>
 8004e10:	4bb1      	ldr	r3, [pc, #708]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4bb0      	ldr	r3, [pc, #704]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	0249      	lsls	r1, r1, #9
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e02f      	b.n	8004e80 <HAL_RCC_OscConfig+0xe0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCC_OscConfig+0xa2>
 8004e28:	4bab      	ldr	r3, [pc, #684]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4baa      	ldr	r3, [pc, #680]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e2e:	49ab      	ldr	r1, [pc, #684]	; (80050dc <HAL_RCC_OscConfig+0x33c>)
 8004e30:	400a      	ands	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	4ba8      	ldr	r3, [pc, #672]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4ba7      	ldr	r3, [pc, #668]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e3a:	49a9      	ldr	r1, [pc, #676]	; (80050e0 <HAL_RCC_OscConfig+0x340>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e01e      	b.n	8004e80 <HAL_RCC_OscConfig+0xe0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d10e      	bne.n	8004e68 <HAL_RCC_OscConfig+0xc8>
 8004e4a:	4ba3      	ldr	r3, [pc, #652]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4ba2      	ldr	r3, [pc, #648]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	02c9      	lsls	r1, r1, #11
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	4b9f      	ldr	r3, [pc, #636]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b9e      	ldr	r3, [pc, #632]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	0249      	lsls	r1, r1, #9
 8004e62:	430a      	orrs	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00b      	b.n	8004e80 <HAL_RCC_OscConfig+0xe0>
 8004e68:	4b9b      	ldr	r3, [pc, #620]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b9a      	ldr	r3, [pc, #616]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e6e:	499b      	ldr	r1, [pc, #620]	; (80050dc <HAL_RCC_OscConfig+0x33c>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	4b98      	ldr	r3, [pc, #608]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b97      	ldr	r3, [pc, #604]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004e7a:	4999      	ldr	r1, [pc, #612]	; (80050e0 <HAL_RCC_OscConfig+0x340>)
 8004e7c:	400a      	ands	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fe fe6c 	bl	8003b64 <HAL_GetTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e92:	f7fe fe67 	bl	8003b64 <HAL_GetTick>
 8004e96:	0002      	movs	r2, r0
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b64      	cmp	r3, #100	; 0x64
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e2fd      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea4:	4b8c      	ldr	r3, [pc, #560]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	029b      	lsls	r3, r3, #10
 8004eac:	4013      	ands	r3, r2
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0xf2>
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fe fe57 	bl	8003b64 <HAL_GetTick>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fe fe52 	bl	8003b64 <HAL_GetTick>
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e2e8      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	4b82      	ldr	r3, [pc, #520]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	029b      	lsls	r3, r3, #10
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x11c>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d100      	bne.n	8004eea <HAL_RCC_OscConfig+0x14a>
 8004ee8:	e06c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004eea:	4b7b      	ldr	r3, [pc, #492]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	220c      	movs	r2, #12
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	220c      	movs	r2, #12
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d11f      	bne.n	8004f40 <HAL_RCC_OscConfig+0x1a0>
 8004f00:	4b75      	ldr	r3, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	23c0      	movs	r3, #192	; 0xc0
 8004f06:	025b      	lsls	r3, r3, #9
 8004f08:	401a      	ands	r2, r3
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d116      	bne.n	8004f40 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	4b71      	ldr	r3, [pc, #452]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2202      	movs	r2, #2
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_OscConfig+0x188>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e2bb      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f28:	4b6b      	ldr	r3, [pc, #428]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	22f8      	movs	r2, #248	; 0xf8
 8004f2e:	4393      	bics	r3, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00da      	lsls	r2, r3, #3
 8004f38:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	e041      	b.n	8004fc4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d024      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f48:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b62      	ldr	r3, [pc, #392]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f4e:	2101      	movs	r1, #1
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fe fe06 	bl	8003b64 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fe fe01 	bl	8003b64 <HAL_GetTick>
 8004f62:	0002      	movs	r2, r0
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e297      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2202      	movs	r2, #2
 8004f76:	4013      	ands	r3, r2
 8004f78:	d0f1      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7a:	4b57      	ldr	r3, [pc, #348]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	22f8      	movs	r2, #248	; 0xf8
 8004f80:	4393      	bics	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00da      	lsls	r2, r3, #3
 8004f8a:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e018      	b.n	8004fc4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f92:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004f98:	2101      	movs	r1, #1
 8004f9a:	438a      	bics	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fde1 	bl	8003b64 <HAL_GetTick>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fe fddc 	bl	8003b64 <HAL_GetTick>
 8004fac:	0002      	movs	r2, r0
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e272      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d1f1      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d036      	beq.n	800503c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d019      	beq.n	800500a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd6:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe2:	f7fe fdbf 	bl	8003b64 <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fec:	f7fe fdba 	bl	8003b64 <HAL_GetTick>
 8004ff0:	0002      	movs	r2, r0
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e250      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2202      	movs	r2, #2
 8005004:	4013      	ands	r3, r2
 8005006:	d0f1      	beq.n	8004fec <HAL_RCC_OscConfig+0x24c>
 8005008:	e018      	b.n	800503c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500a:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 800500c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500e:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8005010:	2101      	movs	r1, #1
 8005012:	438a      	bics	r2, r1
 8005014:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005016:	f7fe fda5 	bl	8003b64 <HAL_GetTick>
 800501a:	0003      	movs	r3, r0
 800501c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005020:	f7fe fda0 	bl	8003b64 <HAL_GetTick>
 8005024:	0002      	movs	r2, r0
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e236      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005032:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2202      	movs	r2, #2
 8005038:	4013      	ands	r3, r2
 800503a:	d1f1      	bne.n	8005020 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2204      	movs	r2, #4
 8005042:	4013      	ands	r3, r2
 8005044:	d100      	bne.n	8005048 <HAL_RCC_OscConfig+0x2a8>
 8005046:	e0b5      	b.n	80051b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005048:	201f      	movs	r0, #31
 800504a:	183b      	adds	r3, r7, r0
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005050:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	055b      	lsls	r3, r3, #21
 8005058:	4013      	ands	r3, r2
 800505a:	d110      	bne.n	800507e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	0549      	lsls	r1, r1, #21
 8005066:	430a      	orrs	r2, r1
 8005068:	61da      	str	r2, [r3, #28]
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	055b      	lsls	r3, r3, #21
 8005072:	4013      	ands	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005078:	183b      	adds	r3, r7, r0
 800507a:	2201      	movs	r2, #1
 800507c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_OscConfig+0x344>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4013      	ands	r3, r2
 8005088:	d11a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508a:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <HAL_RCC_OscConfig+0x344>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <HAL_RCC_OscConfig+0x344>)
 8005090:	2180      	movs	r1, #128	; 0x80
 8005092:	0049      	lsls	r1, r1, #1
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005098:	f7fe fd64 	bl	8003b64 <HAL_GetTick>
 800509c:	0003      	movs	r3, r0
 800509e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fe fd5f 	bl	8003b64 <HAL_GetTick>
 80050a6:	0002      	movs	r2, r0
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	; 0x64
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e1f5      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_OscConfig+0x344>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4013      	ands	r3, r2
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10f      	bne.n	80050e8 <HAL_RCC_OscConfig+0x348>
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	4b02      	ldr	r3, [pc, #8]	; (80050d8 <HAL_RCC_OscConfig+0x338>)
 80050ce:	2101      	movs	r1, #1
 80050d0:	430a      	orrs	r2, r1
 80050d2:	621a      	str	r2, [r3, #32]
 80050d4:	e036      	b.n	8005144 <HAL_RCC_OscConfig+0x3a4>
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	40021000 	.word	0x40021000
 80050dc:	fffeffff 	.word	0xfffeffff
 80050e0:	fffbffff 	.word	0xfffbffff
 80050e4:	40007000 	.word	0x40007000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <HAL_RCC_OscConfig+0x36a>
 80050f0:	4bca      	ldr	r3, [pc, #808]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	4bc9      	ldr	r3, [pc, #804]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80050f6:	2101      	movs	r1, #1
 80050f8:	438a      	bics	r2, r1
 80050fa:	621a      	str	r2, [r3, #32]
 80050fc:	4bc7      	ldr	r3, [pc, #796]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	4bc6      	ldr	r3, [pc, #792]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005102:	2104      	movs	r1, #4
 8005104:	438a      	bics	r2, r1
 8005106:	621a      	str	r2, [r3, #32]
 8005108:	e01c      	b.n	8005144 <HAL_RCC_OscConfig+0x3a4>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b05      	cmp	r3, #5
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x38c>
 8005112:	4bc2      	ldr	r3, [pc, #776]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	4bc1      	ldr	r3, [pc, #772]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005118:	2104      	movs	r1, #4
 800511a:	430a      	orrs	r2, r1
 800511c:	621a      	str	r2, [r3, #32]
 800511e:	4bbf      	ldr	r3, [pc, #764]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	4bbe      	ldr	r3, [pc, #760]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005124:	2101      	movs	r1, #1
 8005126:	430a      	orrs	r2, r1
 8005128:	621a      	str	r2, [r3, #32]
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0x3a4>
 800512c:	4bbb      	ldr	r3, [pc, #748]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800512e:	6a1a      	ldr	r2, [r3, #32]
 8005130:	4bba      	ldr	r3, [pc, #744]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005132:	2101      	movs	r1, #1
 8005134:	438a      	bics	r2, r1
 8005136:	621a      	str	r2, [r3, #32]
 8005138:	4bb8      	ldr	r3, [pc, #736]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	4bb7      	ldr	r3, [pc, #732]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800513e:	2104      	movs	r1, #4
 8005140:	438a      	bics	r2, r1
 8005142:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d014      	beq.n	8005176 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514c:	f7fe fd0a 	bl	8003b64 <HAL_GetTick>
 8005150:	0003      	movs	r3, r0
 8005152:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005154:	e009      	b.n	800516a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fe fd05 	bl	8003b64 <HAL_GetTick>
 800515a:	0002      	movs	r2, r0
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	4aaf      	ldr	r2, [pc, #700]	; (8005420 <HAL_RCC_OscConfig+0x680>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e19a      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	4bac      	ldr	r3, [pc, #688]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	2202      	movs	r2, #2
 8005170:	4013      	ands	r3, r2
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x3b6>
 8005174:	e013      	b.n	800519e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005176:	f7fe fcf5 	bl	8003b64 <HAL_GetTick>
 800517a:	0003      	movs	r3, r0
 800517c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	e009      	b.n	8005194 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fe fcf0 	bl	8003b64 <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	4aa5      	ldr	r2, [pc, #660]	; (8005420 <HAL_RCC_OscConfig+0x680>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e185      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005194:	4ba1      	ldr	r3, [pc, #644]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	2202      	movs	r2, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800519e:	231f      	movs	r3, #31
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b9c      	ldr	r3, [pc, #624]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	4b9b      	ldr	r3, [pc, #620]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051ae:	499d      	ldr	r1, [pc, #628]	; (8005424 <HAL_RCC_OscConfig+0x684>)
 80051b0:	400a      	ands	r2, r1
 80051b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2210      	movs	r2, #16
 80051ba:	4013      	ands	r3, r2
 80051bc:	d063      	beq.n	8005286 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d12a      	bne.n	800521c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80051c6:	4b95      	ldr	r3, [pc, #596]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ca:	4b94      	ldr	r3, [pc, #592]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051cc:	2104      	movs	r1, #4
 80051ce:	430a      	orrs	r2, r1
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80051d2:	4b92      	ldr	r3, [pc, #584]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	4b91      	ldr	r3, [pc, #580]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051d8:	2101      	movs	r1, #1
 80051da:	430a      	orrs	r2, r1
 80051dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051de:	f7fe fcc1 	bl	8003b64 <HAL_GetTick>
 80051e2:	0003      	movs	r3, r0
 80051e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80051e8:	f7fe fcbc 	bl	8003b64 <HAL_GetTick>
 80051ec:	0002      	movs	r2, r0
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e152      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	2202      	movs	r2, #2
 8005200:	4013      	ands	r3, r2
 8005202:	d0f1      	beq.n	80051e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005204:	4b85      	ldr	r3, [pc, #532]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	22f8      	movs	r2, #248	; 0xf8
 800520a:	4393      	bics	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	00da      	lsls	r2, r3, #3
 8005214:	4b81      	ldr	r3, [pc, #516]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005216:	430a      	orrs	r2, r1
 8005218:	635a      	str	r2, [r3, #52]	; 0x34
 800521a:	e034      	b.n	8005286 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	3305      	adds	r3, #5
 8005222:	d111      	bne.n	8005248 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005224:	4b7d      	ldr	r3, [pc, #500]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005228:	4b7c      	ldr	r3, [pc, #496]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800522a:	2104      	movs	r1, #4
 800522c:	438a      	bics	r2, r1
 800522e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005230:	4b7a      	ldr	r3, [pc, #488]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	22f8      	movs	r2, #248	; 0xf8
 8005236:	4393      	bics	r3, r2
 8005238:	0019      	movs	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	00da      	lsls	r2, r3, #3
 8005240:	4b76      	ldr	r3, [pc, #472]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005242:	430a      	orrs	r2, r1
 8005244:	635a      	str	r2, [r3, #52]	; 0x34
 8005246:	e01e      	b.n	8005286 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005248:	4b74      	ldr	r3, [pc, #464]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800524a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524c:	4b73      	ldr	r3, [pc, #460]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800524e:	2104      	movs	r1, #4
 8005250:	430a      	orrs	r2, r1
 8005252:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005254:	4b71      	ldr	r3, [pc, #452]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005258:	4b70      	ldr	r3, [pc, #448]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800525a:	2101      	movs	r1, #1
 800525c:	438a      	bics	r2, r1
 800525e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005260:	f7fe fc80 	bl	8003b64 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800526a:	f7fe fc7b 	bl	8003b64 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e111      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800527c:	4b67      	ldr	r3, [pc, #412]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d1f1      	bne.n	800526a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2220      	movs	r2, #32
 800528c:	4013      	ands	r3, r2
 800528e:	d05c      	beq.n	800534a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005290:	4b62      	ldr	r3, [pc, #392]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	220c      	movs	r2, #12
 8005296:	4013      	ands	r3, r2
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d00e      	beq.n	80052ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800529c:	4b5f      	ldr	r3, [pc, #380]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	220c      	movs	r2, #12
 80052a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d114      	bne.n	80052d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80052a8:	4b5c      	ldr	r3, [pc, #368]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	23c0      	movs	r3, #192	; 0xc0
 80052ae:	025b      	lsls	r3, r3, #9
 80052b0:	401a      	ands	r2, r3
 80052b2:	23c0      	movs	r3, #192	; 0xc0
 80052b4:	025b      	lsls	r3, r3, #9
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d10b      	bne.n	80052d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80052ba:	4b58      	ldr	r3, [pc, #352]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	2380      	movs	r3, #128	; 0x80
 80052c0:	025b      	lsls	r3, r3, #9
 80052c2:	4013      	ands	r3, r2
 80052c4:	d040      	beq.n	8005348 <HAL_RCC_OscConfig+0x5a8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d03c      	beq.n	8005348 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0e6      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01b      	beq.n	8005312 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80052da:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80052dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052de:	4b4f      	ldr	r3, [pc, #316]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	0249      	lsls	r1, r1, #9
 80052e4:	430a      	orrs	r2, r1
 80052e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fc3c 	bl	8003b64 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f2:	f7fe fc37 	bl	8003b64 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0cd      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005304:	4b45      	ldr	r3, [pc, #276]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	025b      	lsls	r3, r3, #9
 800530c:	4013      	ands	r3, r2
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x552>
 8005310:	e01b      	b.n	800534a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005312:	4b42      	ldr	r3, [pc, #264]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005316:	4b41      	ldr	r3, [pc, #260]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005318:	4943      	ldr	r1, [pc, #268]	; (8005428 <HAL_RCC_OscConfig+0x688>)
 800531a:	400a      	ands	r2, r1
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fe fc21 	bl	8003b64 <HAL_GetTick>
 8005322:	0003      	movs	r3, r0
 8005324:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005328:	f7fe fc1c 	bl	8003b64 <HAL_GetTick>
 800532c:	0002      	movs	r2, r0
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0b2      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800533a:	4b38      	ldr	r3, [pc, #224]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800533c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	025b      	lsls	r3, r3, #9
 8005342:	4013      	ands	r3, r2
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x588>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005348:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b00      	cmp	r3, #0
 8005350:	d100      	bne.n	8005354 <HAL_RCC_OscConfig+0x5b4>
 8005352:	e0a4      	b.n	800549e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005354:	4b31      	ldr	r3, [pc, #196]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	220c      	movs	r2, #12
 800535a:	4013      	ands	r3, r2
 800535c:	2b08      	cmp	r3, #8
 800535e:	d100      	bne.n	8005362 <HAL_RCC_OscConfig+0x5c2>
 8005360:	e078      	b.n	8005454 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b02      	cmp	r3, #2
 8005368:	d14c      	bne.n	8005404 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	4b2c      	ldr	r3, [pc, #176]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b2b      	ldr	r3, [pc, #172]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005370:	492e      	ldr	r1, [pc, #184]	; (800542c <HAL_RCC_OscConfig+0x68c>)
 8005372:	400a      	ands	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005376:	f7fe fbf5 	bl	8003b64 <HAL_GetTick>
 800537a:	0003      	movs	r3, r0
 800537c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005380:	f7fe fbf0 	bl	8003b64 <HAL_GetTick>
 8005384:	0002      	movs	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e086      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	049b      	lsls	r3, r3, #18
 800539a:	4013      	ands	r3, r2
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800539e:	4b1f      	ldr	r3, [pc, #124]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	220f      	movs	r2, #15
 80053a4:	4393      	bics	r3, r2
 80053a6:	0019      	movs	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053ae:	430a      	orrs	r2, r1
 80053b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <HAL_RCC_OscConfig+0x690>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	431a      	orrs	r2, r3
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b12      	ldr	r3, [pc, #72]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	0449      	lsls	r1, r1, #17
 80053d6:	430a      	orrs	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fe fbc3 	bl	8003b64 <HAL_GetTick>
 80053de:	0003      	movs	r3, r0
 80053e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fe fbbe 	bl	8003b64 <HAL_GetTick>
 80053e8:	0002      	movs	r2, r0
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e054      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	049b      	lsls	r3, r3, #18
 80053fe:	4013      	ands	r3, r2
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x644>
 8005402:	e04c      	b.n	800549e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <HAL_RCC_OscConfig+0x67c>)
 800540a:	4908      	ldr	r1, [pc, #32]	; (800542c <HAL_RCC_OscConfig+0x68c>)
 800540c:	400a      	ands	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7fe fba8 	bl	8003b64 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005418:	e015      	b.n	8005446 <HAL_RCC_OscConfig+0x6a6>
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	40021000 	.word	0x40021000
 8005420:	00001388 	.word	0x00001388
 8005424:	efffffff 	.word	0xefffffff
 8005428:	fffeffff 	.word	0xfffeffff
 800542c:	feffffff 	.word	0xfeffffff
 8005430:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005434:	f7fe fb96 	bl	8003b64 <HAL_GetTick>
 8005438:	0002      	movs	r2, r0
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e02c      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <HAL_RCC_OscConfig+0x708>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	049b      	lsls	r3, r3, #18
 800544e:	4013      	ands	r3, r2
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x694>
 8005452:	e024      	b.n	800549e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e01f      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_RCC_OscConfig+0x708>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <HAL_RCC_OscConfig+0x708>)
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	23c0      	movs	r3, #192	; 0xc0
 8005470:	025b      	lsls	r3, r3, #9
 8005472:	401a      	ands	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	429a      	cmp	r2, r3
 800547a:	d10e      	bne.n	800549a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	220f      	movs	r2, #15
 8005480:	401a      	ands	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d107      	bne.n	800549a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	23f0      	movs	r3, #240	; 0xf0
 800548e:	039b      	lsls	r3, r3, #14
 8005490:	401a      	ands	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b008      	add	sp, #32
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000

080054ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0bf      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b61      	ldr	r3, [pc, #388]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	4013      	ands	r3, r2
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d911      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b5e      	ldr	r3, [pc, #376]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	4393      	bics	r3, r2
 80054d6:	0019      	movs	r1, r3
 80054d8:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e0:	4b59      	ldr	r3, [pc, #356]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	4013      	ands	r3, r2
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0a6      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2202      	movs	r2, #2
 80054f8:	4013      	ands	r3, r2
 80054fa:	d015      	beq.n	8005528 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2204      	movs	r2, #4
 8005502:	4013      	ands	r3, r2
 8005504:	d006      	beq.n	8005514 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005506:	4b51      	ldr	r3, [pc, #324]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	4b50      	ldr	r3, [pc, #320]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 800550c:	21e0      	movs	r1, #224	; 0xe0
 800550e:	00c9      	lsls	r1, r1, #3
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b4d      	ldr	r3, [pc, #308]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	22f0      	movs	r2, #240	; 0xf0
 800551a:	4393      	bics	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	4b4a      	ldr	r3, [pc, #296]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	4013      	ands	r3, r2
 8005530:	d04c      	beq.n	80055cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b44      	ldr	r3, [pc, #272]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	4013      	ands	r3, r2
 8005544:	d120      	bne.n	8005588 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07a      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005552:	4b3e      	ldr	r3, [pc, #248]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	049b      	lsls	r3, r3, #18
 800555a:	4013      	ands	r3, r2
 800555c:	d114      	bne.n	8005588 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e06e      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d107      	bne.n	800557a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800556a:	4b38      	ldr	r3, [pc, #224]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 800556c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	4013      	ands	r3, r2
 8005574:	d108      	bne.n	8005588 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e062      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557a:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2202      	movs	r2, #2
 8005580:	4013      	ands	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e05b      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2203      	movs	r2, #3
 800558e:	4393      	bics	r3, r2
 8005590:	0019      	movs	r1, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800559c:	f7fe fae2 	bl	8003b64 <HAL_GetTick>
 80055a0:	0003      	movs	r3, r0
 80055a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a4:	e009      	b.n	80055ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a6:	f7fe fadd 	bl	8003b64 <HAL_GetTick>
 80055aa:	0002      	movs	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	4a27      	ldr	r2, [pc, #156]	; (8005650 <HAL_RCC_ClockConfig+0x1a4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e042      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	220c      	movs	r2, #12
 80055c0:	401a      	ands	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1ec      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055cc:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	4013      	ands	r3, r2
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d211      	bcs.n	80055fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	4393      	bics	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	4b18      	ldr	r3, [pc, #96]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ec:	4b16      	ldr	r3, [pc, #88]	; (8005648 <HAL_RCC_ClockConfig+0x19c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2201      	movs	r2, #1
 80055f2:	4013      	ands	r3, r2
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d001      	beq.n	80055fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e020      	b.n	8005640 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2204      	movs	r2, #4
 8005604:	4013      	ands	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4a11      	ldr	r2, [pc, #68]	; (8005654 <HAL_RCC_ClockConfig+0x1a8>)
 800560e:	4013      	ands	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800561c:	f000 f820 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 8005620:	0001      	movs	r1, r0
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <HAL_RCC_ClockConfig+0x1a0>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	091b      	lsrs	r3, r3, #4
 8005628:	220f      	movs	r2, #15
 800562a:	4013      	ands	r3, r2
 800562c:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <HAL_RCC_ClockConfig+0x1ac>)
 800562e:	5cd3      	ldrb	r3, [r2, r3]
 8005630:	000a      	movs	r2, r1
 8005632:	40da      	lsrs	r2, r3
 8005634:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_ClockConfig+0x1b0>)
 8005636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005638:	2000      	movs	r0, #0
 800563a:	f7fe fa4d 	bl	8003ad8 <HAL_InitTick>
  
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40022000 	.word	0x40022000
 800564c:	40021000 	.word	0x40021000
 8005650:	00001388 	.word	0x00001388
 8005654:	fffff8ff 	.word	0xfffff8ff
 8005658:	080070b4 	.word	0x080070b4
 800565c:	20000090 	.word	0x20000090

08005660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b08f      	sub	sp, #60	; 0x3c
 8005664:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005666:	2314      	movs	r3, #20
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	4a38      	ldr	r2, [pc, #224]	; (800574c <HAL_RCC_GetSysClockFreq+0xec>)
 800566c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800566e:	c313      	stmia	r3!, {r0, r1, r4}
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005674:	1d3b      	adds	r3, r7, #4
 8005676:	4a36      	ldr	r2, [pc, #216]	; (8005750 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005678:	ca13      	ldmia	r2!, {r0, r1, r4}
 800567a:	c313      	stmia	r3!, {r0, r1, r4}
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005684:	2300      	movs	r3, #0
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
 8005688:	2300      	movs	r3, #0
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
 800568c:	2300      	movs	r3, #0
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005694:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	220c      	movs	r2, #12
 800569e:	4013      	ands	r3, r2
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d047      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0xd4>
 80056a4:	d849      	bhi.n	800573a <HAL_RCC_GetSysClockFreq+0xda>
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d002      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x50>
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d003      	beq.n	80056b6 <HAL_RCC_GetSysClockFreq+0x56>
 80056ae:	e044      	b.n	800573a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056b0:	4b29      	ldr	r3, [pc, #164]	; (8005758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056b4:	e044      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	0c9b      	lsrs	r3, r3, #18
 80056ba:	220f      	movs	r2, #15
 80056bc:	4013      	ands	r3, r2
 80056be:	2214      	movs	r2, #20
 80056c0:	18ba      	adds	r2, r7, r2
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80056c6:	4b23      	ldr	r3, [pc, #140]	; (8005754 <HAL_RCC_GetSysClockFreq+0xf4>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	220f      	movs	r2, #15
 80056cc:	4013      	ands	r3, r2
 80056ce:	1d3a      	adds	r2, r7, #4
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	23c0      	movs	r3, #192	; 0xc0
 80056d8:	025b      	lsls	r3, r3, #9
 80056da:	401a      	ands	r2, r3
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	025b      	lsls	r3, r3, #9
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d109      	bne.n	80056f8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056e6:	481c      	ldr	r0, [pc, #112]	; (8005758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e8:	f7fa fd0c 	bl	8000104 <__udivsi3>
 80056ec:	0003      	movs	r3, r0
 80056ee:	001a      	movs	r2, r3
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	4353      	muls	r3, r2
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
 80056f6:	e01a      	b.n	800572e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80056f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	025b      	lsls	r3, r3, #9
 80056fe:	401a      	ands	r2, r3
 8005700:	23c0      	movs	r3, #192	; 0xc0
 8005702:	025b      	lsls	r3, r3, #9
 8005704:	429a      	cmp	r2, r3
 8005706:	d109      	bne.n	800571c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800570a:	4814      	ldr	r0, [pc, #80]	; (800575c <HAL_RCC_GetSysClockFreq+0xfc>)
 800570c:	f7fa fcfa 	bl	8000104 <__udivsi3>
 8005710:	0003      	movs	r3, r0
 8005712:	001a      	movs	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	4353      	muls	r3, r2
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	e008      	b.n	800572e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800571c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571e:	480e      	ldr	r0, [pc, #56]	; (8005758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005720:	f7fa fcf0 	bl	8000104 <__udivsi3>
 8005724:	0003      	movs	r3, r0
 8005726:	001a      	movs	r2, r3
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	4353      	muls	r3, r2
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005732:	e005      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005738:	e002      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <HAL_RCC_GetSysClockFreq+0xf8>)
 800573c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800573e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005742:	0018      	movs	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	b00f      	add	sp, #60	; 0x3c
 8005748:	bd90      	pop	{r4, r7, pc}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	08006f78 	.word	0x08006f78
 8005750:	08006f88 	.word	0x08006f88
 8005754:	40021000 	.word	0x40021000
 8005758:	007a1200 	.word	0x007a1200
 800575c:	02dc6c00 	.word	0x02dc6c00

08005760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <HAL_RCC_GetHCLKFreq+0x10>)
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	20000090 	.word	0x20000090

08005774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005778:	f7ff fff2 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 800577c:	0001      	movs	r1, r0
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	2207      	movs	r2, #7
 8005786:	4013      	ands	r3, r2
 8005788:	4a04      	ldr	r2, [pc, #16]	; (800579c <HAL_RCC_GetPCLK1Freq+0x28>)
 800578a:	5cd3      	ldrb	r3, [r2, r3]
 800578c:	40d9      	lsrs	r1, r3
 800578e:	000b      	movs	r3, r1
}    
 8005790:	0018      	movs	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	40021000 	.word	0x40021000
 800579c:	080070c4 	.word	0x080070c4

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	025b      	lsls	r3, r3, #9
 80057b8:	4013      	ands	r3, r2
 80057ba:	d100      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80057bc:	e08e      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80057be:	2017      	movs	r0, #23
 80057c0:	183b      	adds	r3, r7, r0
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b6e      	ldr	r3, [pc, #440]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	055b      	lsls	r3, r3, #21
 80057ce:	4013      	ands	r3, r2
 80057d0:	d110      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b6b      	ldr	r3, [pc, #428]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	4b6a      	ldr	r3, [pc, #424]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057d8:	2180      	movs	r1, #128	; 0x80
 80057da:	0549      	lsls	r1, r1, #21
 80057dc:	430a      	orrs	r2, r1
 80057de:	61da      	str	r2, [r3, #28]
 80057e0:	4b67      	ldr	r3, [pc, #412]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	055b      	lsls	r3, r3, #21
 80057e8:	4013      	ands	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ee:	183b      	adds	r3, r7, r0
 80057f0:	2201      	movs	r2, #1
 80057f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	4b63      	ldr	r3, [pc, #396]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4013      	ands	r3, r2
 80057fe:	d11a      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005800:	4b60      	ldr	r3, [pc, #384]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b5f      	ldr	r3, [pc, #380]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	0049      	lsls	r1, r1, #1
 800580a:	430a      	orrs	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800580e:	f7fe f9a9 	bl	8003b64 <HAL_GetTick>
 8005812:	0003      	movs	r3, r0
 8005814:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005816:	e008      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005818:	f7fe f9a4 	bl	8003b64 <HAL_GetTick>
 800581c:	0002      	movs	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	; 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e0a6      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582a:	4b56      	ldr	r3, [pc, #344]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4013      	ands	r3, r2
 8005834:	d0f0      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005836:	4b52      	ldr	r3, [pc, #328]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	23c0      	movs	r3, #192	; 0xc0
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4013      	ands	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d034      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	23c0      	movs	r3, #192	; 0xc0
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4013      	ands	r3, r2
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d02c      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005858:	4b49      	ldr	r3, [pc, #292]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	4a4a      	ldr	r2, [pc, #296]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800585e:	4013      	ands	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	0249      	lsls	r1, r1, #9
 800586c:	430a      	orrs	r2, r1
 800586e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005870:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005876:	4945      	ldr	r1, [pc, #276]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005878:	400a      	ands	r2, r1
 800587a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800587c:	4b40      	ldr	r3, [pc, #256]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
 8005888:	d013      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fe f96b 	bl	8003b64 <HAL_GetTick>
 800588e:	0003      	movs	r3, r0
 8005890:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005892:	e009      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005894:	f7fe f966 	bl	8003b64 <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	4a3c      	ldr	r2, [pc, #240]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e067      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	2202      	movs	r2, #2
 80058ae:	4013      	ands	r3, r2
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b2:	4b33      	ldr	r3, [pc, #204]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4a34      	ldr	r2, [pc, #208]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	0019      	movs	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058c2:	430a      	orrs	r2, r1
 80058c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058c6:	2317      	movs	r3, #23
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d0:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058d6:	492f      	ldr	r1, [pc, #188]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80058d8:	400a      	ands	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058e6:	4b26      	ldr	r3, [pc, #152]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	2203      	movs	r2, #3
 80058ec:	4393      	bics	r3, r2
 80058ee:	0019      	movs	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058f6:	430a      	orrs	r2, r1
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2202      	movs	r2, #2
 8005900:	4013      	ands	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	4a23      	ldr	r2, [pc, #140]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005914:	430a      	orrs	r2, r1
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	02db      	lsls	r3, r3, #11
 8005920:	4013      	ands	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	4a1c      	ldr	r2, [pc, #112]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800592a:	4013      	ands	r3, r2
 800592c:	0019      	movs	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005934:	430a      	orrs	r2, r1
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2220      	movs	r2, #32
 800593e:	4013      	ands	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	2210      	movs	r2, #16
 8005948:	4393      	bics	r3, r2
 800594a:	0019      	movs	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695a      	ldr	r2, [r3, #20]
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005952:	430a      	orrs	r2, r1
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4013      	ands	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005962:	4b07      	ldr	r3, [pc, #28]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	2240      	movs	r2, #64	; 0x40
 8005968:	4393      	bics	r3, r2
 800596a:	0019      	movs	r1, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005972:	430a      	orrs	r2, r1
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b006      	add	sp, #24
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	40007000 	.word	0x40007000
 8005988:	fffffcff 	.word	0xfffffcff
 800598c:	fffeffff 	.word	0xfffeffff
 8005990:	00001388 	.word	0x00001388
 8005994:	efffffff 	.word	0xefffffff
 8005998:	fffcffff 	.word	0xfffcffff
 800599c:	fff3ffff 	.word	0xfff3ffff

080059a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e044      	b.n	8005a3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2274      	movs	r2, #116	; 0x74
 80059be:	2100      	movs	r1, #0
 80059c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7fd ff71 	bl	80038ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2224      	movs	r2, #36	; 0x24
 80059ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2101      	movs	r1, #1
 80059dc:	438a      	bics	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	0018      	movs	r0, r3
 80059e4:	f000 fb24 	bl	8006030 <UART_SetConfig>
 80059e8:	0003      	movs	r3, r0
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e024      	b.n	8005a3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 fcff 	bl	8006400 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	490d      	ldr	r1, [pc, #52]	; (8005a44 <HAL_UART_Init+0xa4>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	212a      	movs	r1, #42	; 0x2a
 8005a1e:	438a      	bics	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 fd97 	bl	8006568 <UART_CheckIdleState>
 8005a3a:	0003      	movs	r3, r0
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b002      	add	sp, #8
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	ffffb7ff 	.word	0xffffb7ff

08005a48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b0ab      	sub	sp, #172	; 0xac
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	22a4      	movs	r2, #164	; 0xa4
 8005a58:	18b9      	adds	r1, r7, r2
 8005a5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	20a0      	movs	r0, #160	; 0xa0
 8005a64:	1839      	adds	r1, r7, r0
 8005a66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	219c      	movs	r1, #156	; 0x9c
 8005a70:	1879      	adds	r1, r7, r1
 8005a72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a74:	0011      	movs	r1, r2
 8005a76:	18bb      	adds	r3, r7, r2
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a99      	ldr	r2, [pc, #612]	; (8005ce0 <HAL_UART_IRQHandler+0x298>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2298      	movs	r2, #152	; 0x98
 8005a80:	18bc      	adds	r4, r7, r2
 8005a82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005a84:	18bb      	adds	r3, r7, r2
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d114      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2220      	movs	r2, #32
 8005a92:	4013      	ands	r3, r2
 8005a94:	d00f      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a96:	183b      	adds	r3, r7, r0
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d100      	bne.n	8005aaa <HAL_UART_IRQHandler+0x62>
 8005aa8:	e296      	b.n	8005fd8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	0010      	movs	r0, r2
 8005ab2:	4798      	blx	r3
      }
      return;
 8005ab4:	e290      	b.n	8005fd8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ab6:	2398      	movs	r3, #152	; 0x98
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d100      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x7a>
 8005ac0:	e114      	b.n	8005cec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ac2:	239c      	movs	r3, #156	; 0x9c
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	4013      	ands	r3, r2
 8005acc:	d106      	bne.n	8005adc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ace:	23a0      	movs	r3, #160	; 0xa0
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a83      	ldr	r2, [pc, #524]	; (8005ce4 <HAL_UART_IRQHandler+0x29c>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d100      	bne.n	8005adc <HAL_UART_IRQHandler+0x94>
 8005ada:	e107      	b.n	8005cec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005adc:	23a4      	movs	r3, #164	; 0xa4
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d012      	beq.n	8005b0e <HAL_UART_IRQHandler+0xc6>
 8005ae8:	23a0      	movs	r3, #160	; 0xa0
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4013      	ands	r3, r2
 8005af4:	d00b      	beq.n	8005b0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2201      	movs	r2, #1
 8005afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	589b      	ldr	r3, [r3, r2]
 8005b04:	2201      	movs	r2, #1
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b0e:	23a4      	movs	r3, #164	; 0xa4
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2202      	movs	r2, #2
 8005b16:	4013      	ands	r3, r2
 8005b18:	d011      	beq.n	8005b3e <HAL_UART_IRQHandler+0xf6>
 8005b1a:	239c      	movs	r3, #156	; 0x9c
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2201      	movs	r2, #1
 8005b22:	4013      	ands	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	589b      	ldr	r3, [r3, r2]
 8005b34:	2204      	movs	r2, #4
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b3e:	23a4      	movs	r3, #164	; 0xa4
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2204      	movs	r2, #4
 8005b46:	4013      	ands	r3, r2
 8005b48:	d011      	beq.n	8005b6e <HAL_UART_IRQHandler+0x126>
 8005b4a:	239c      	movs	r3, #156	; 0x9c
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2201      	movs	r2, #1
 8005b52:	4013      	ands	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	589b      	ldr	r3, [r3, r2]
 8005b64:	2202      	movs	r2, #2
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b6e:	23a4      	movs	r3, #164	; 0xa4
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2208      	movs	r2, #8
 8005b76:	4013      	ands	r3, r2
 8005b78:	d017      	beq.n	8005baa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b7a:	23a0      	movs	r3, #160	; 0xa0
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2220      	movs	r2, #32
 8005b82:	4013      	ands	r3, r2
 8005b84:	d105      	bne.n	8005b92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b86:	239c      	movs	r3, #156	; 0x9c
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b90:	d00b      	beq.n	8005baa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2208      	movs	r2, #8
 8005b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2280      	movs	r2, #128	; 0x80
 8005b9e:	589b      	ldr	r3, [r3, r2]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005baa:	23a4      	movs	r3, #164	; 0xa4
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <HAL_UART_IRQHandler+0x198>
 8005bb8:	23a0      	movs	r3, #160	; 0xa0
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	04db      	lsls	r3, r3, #19
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d00c      	beq.n	8005be0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2280      	movs	r2, #128	; 0x80
 8005bcc:	0112      	lsls	r2, r2, #4
 8005bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	589b      	ldr	r3, [r3, r2]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	589b      	ldr	r3, [r3, r2]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d100      	bne.n	8005bec <HAL_UART_IRQHandler+0x1a4>
 8005bea:	e1f7      	b.n	8005fdc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bec:	23a4      	movs	r3, #164	; 0xa4
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bf8:	23a0      	movs	r3, #160	; 0xa0
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	4013      	ands	r3, r2
 8005c02:	d008      	beq.n	8005c16 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	0010      	movs	r0, r2
 8005c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	589b      	ldr	r3, [r3, r2]
 8005c1c:	2194      	movs	r1, #148	; 0x94
 8005c1e:	187a      	adds	r2, r7, r1
 8005c20:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2240      	movs	r2, #64	; 0x40
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d004      	beq.n	8005c3a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2228      	movs	r2, #40	; 0x28
 8005c36:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c38:	d047      	beq.n	8005cca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 fd9f 	bl	8006780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d137      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c50:	f3ef 8310 	mrs	r3, PRIMASK
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c58:	2090      	movs	r0, #144	; 0x90
 8005c5a:	183a      	adds	r2, r7, r0
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c64:	f383 8810 	msr	PRIMASK, r3
}
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2140      	movs	r1, #64	; 0x40
 8005c76:	438a      	bics	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <HAL_UART_IRQHandler+0x2a0>)
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f7fe f8a5 	bl	8003dec <HAL_DMA_Abort_IT>
 8005ca2:	1e03      	subs	r3, r0, #0
 8005ca4:	d01a      	beq.n	8005cdc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	e012      	b.n	8005cdc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 f9a5 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbe:	e00d      	b.n	8005cdc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f000 f9a0 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	e008      	b.n	8005cdc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 f99b 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2280      	movs	r2, #128	; 0x80
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005cda:	e17f      	b.n	8005fdc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cdc:	46c0      	nop			; (mov r8, r8)
    return;
 8005cde:	e17d      	b.n	8005fdc <HAL_UART_IRQHandler+0x594>
 8005ce0:	0000080f 	.word	0x0000080f
 8005ce4:	04000120 	.word	0x04000120
 8005ce8:	08006845 	.word	0x08006845

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d000      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x2ae>
 8005cf4:	e131      	b.n	8005f5a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cf6:	23a4      	movs	r3, #164	; 0xa4
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d100      	bne.n	8005d04 <HAL_UART_IRQHandler+0x2bc>
 8005d02:	e12a      	b.n	8005f5a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d04:	23a0      	movs	r3, #160	; 0xa0
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2210      	movs	r2, #16
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d100      	bne.n	8005d12 <HAL_UART_IRQHandler+0x2ca>
 8005d10:	e123      	b.n	8005f5a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2210      	movs	r2, #16
 8005d18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2240      	movs	r2, #64	; 0x40
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d000      	beq.n	8005d2a <HAL_UART_IRQHandler+0x2e2>
 8005d28:	e09b      	b.n	8005e62 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	217e      	movs	r1, #126	; 0x7e
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d100      	bne.n	8005d42 <HAL_UART_IRQHandler+0x2fa>
 8005d40:	e14e      	b.n	8005fe0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2258      	movs	r2, #88	; 0x58
 8005d46:	5a9b      	ldrh	r3, [r3, r2]
 8005d48:	187a      	adds	r2, r7, r1
 8005d4a:	8812      	ldrh	r2, [r2, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d300      	bcc.n	8005d52 <HAL_UART_IRQHandler+0x30a>
 8005d50:	e146      	b.n	8005fe0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	215a      	movs	r1, #90	; 0x5a
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d06e      	beq.n	8005e44 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d66:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d70:	2301      	movs	r3, #1
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	499a      	ldr	r1, [pc, #616]	; (8005ff0 <HAL_UART_IRQHandler+0x5a8>)
 8005d88:	400a      	ands	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	f383 8810 	msr	PRIMASK, r3
}
 8005d96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d98:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da0:	677b      	str	r3, [r7, #116]	; 0x74
 8005da2:	2301      	movs	r3, #1
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2101      	movs	r1, #1
 8005dba:	438a      	bics	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]
 8005dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc4:	f383 8810 	msr	PRIMASK, r3
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dca:	f3ef 8310 	mrs	r3, PRIMASK
 8005dce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2140      	movs	r1, #64	; 0x40
 8005dec:	438a      	bics	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e08:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e12:	2301      	movs	r3, #1
 8005e14:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e18:	f383 8810 	msr	PRIMASK, r3
}
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2110      	movs	r1, #16
 8005e2a:	438a      	bics	r2, r1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e34:	f383 8810 	msr	PRIMASK, r3
}
 8005e38:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f7fd ff9c 	bl	8003d7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2258      	movs	r2, #88	; 0x58
 8005e48:	5a9a      	ldrh	r2, [r3, r2]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	215a      	movs	r1, #90	; 0x5a
 8005e4e:	5a5b      	ldrh	r3, [r3, r1]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0011      	movs	r1, r2
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 f8dc 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e60:	e0be      	b.n	8005fe0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2258      	movs	r2, #88	; 0x58
 8005e66:	5a99      	ldrh	r1, [r3, r2]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	225a      	movs	r2, #90	; 0x5a
 8005e6c:	5a9b      	ldrh	r3, [r3, r2]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	208e      	movs	r0, #142	; 0x8e
 8005e72:	183b      	adds	r3, r7, r0
 8005e74:	1a8a      	subs	r2, r1, r2
 8005e76:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	225a      	movs	r2, #90	; 0x5a
 8005e7c:	5a9b      	ldrh	r3, [r3, r2]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d100      	bne.n	8005e86 <HAL_UART_IRQHandler+0x43e>
 8005e84:	e0ae      	b.n	8005fe4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005e86:	183b      	adds	r3, r7, r0
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d100      	bne.n	8005e90 <HAL_UART_IRQHandler+0x448>
 8005e8e:	e0a9      	b.n	8005fe4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e90:	f3ef 8310 	mrs	r3, PRIMASK
 8005e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e96:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e98:	2488      	movs	r4, #136	; 0x88
 8005e9a:	193a      	adds	r2, r7, r4
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f383 8810 	msr	PRIMASK, r3
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	494f      	ldr	r1, [pc, #316]	; (8005ff4 <HAL_UART_IRQHandler+0x5ac>)
 8005eb6:	400a      	ands	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ecc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ece:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed0:	2484      	movs	r4, #132	; 0x84
 8005ed2:	193a      	adds	r2, r7, r4
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f383 8810 	msr	PRIMASK, r3
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2101      	movs	r1, #1
 8005eee:	438a      	bics	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
 8005ef2:	193b      	adds	r3, r7, r4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	f383 8810 	msr	PRIMASK, r3
}
 8005efe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f12:	f3ef 8310 	mrs	r3, PRIMASK
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1a:	2480      	movs	r4, #128	; 0x80
 8005f1c:	193a      	adds	r2, r7, r4
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	2301      	movs	r3, #1
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	f383 8810 	msr	PRIMASK, r3
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2110      	movs	r1, #16
 8005f38:	438a      	bics	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	193b      	adds	r3, r7, r4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	f383 8810 	msr	PRIMASK, r3
}
 8005f48:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f4a:	183b      	adds	r3, r7, r0
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0011      	movs	r1, r2
 8005f52:	0018      	movs	r0, r3
 8005f54:	f000 f860 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f58:	e044      	b.n	8005fe4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f5a:	23a4      	movs	r3, #164	; 0xa4
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	035b      	lsls	r3, r3, #13
 8005f64:	4013      	ands	r3, r2
 8005f66:	d010      	beq.n	8005f8a <HAL_UART_IRQHandler+0x542>
 8005f68:	239c      	movs	r3, #156	; 0x9c
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	03db      	lsls	r3, r3, #15
 8005f72:	4013      	ands	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	0352      	lsls	r2, r2, #13
 8005f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f000 fca0 	bl	80068c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f88:	e02f      	b.n	8005fea <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f8a:	23a4      	movs	r3, #164	; 0xa4
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2280      	movs	r2, #128	; 0x80
 8005f92:	4013      	ands	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f96:	23a0      	movs	r3, #160	; 0xa0
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01e      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	0010      	movs	r0, r2
 8005fb2:	4798      	blx	r3
    }
    return;
 8005fb4:	e018      	b.n	8005fe8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fb6:	23a4      	movs	r3, #164	; 0xa4
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2240      	movs	r2, #64	; 0x40
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d013      	beq.n	8005fea <HAL_UART_IRQHandler+0x5a2>
 8005fc2:	23a0      	movs	r3, #160	; 0xa0
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2240      	movs	r2, #64	; 0x40
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d00d      	beq.n	8005fea <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f000 fc4e 	bl	8006872 <UART_EndTransmit_IT>
    return;
 8005fd6:	e008      	b.n	8005fea <HAL_UART_IRQHandler+0x5a2>
      return;
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	e006      	b.n	8005fea <HAL_UART_IRQHandler+0x5a2>
    return;
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	e004      	b.n	8005fea <HAL_UART_IRQHandler+0x5a2>
      return;
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	e002      	b.n	8005fea <HAL_UART_IRQHandler+0x5a2>
      return;
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	e000      	b.n	8005fea <HAL_UART_IRQHandler+0x5a2>
    return;
 8005fe8:	46c0      	nop			; (mov r8, r8)
  }

}
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b02b      	add	sp, #172	; 0xac
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	fffffeff 	.word	0xfffffeff
 8005ff4:	fffffedf 	.word	0xfffffedf

08005ff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	b002      	add	sp, #8
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b002      	add	sp, #8
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	000a      	movs	r2, r1
 8006022:	1cbb      	adds	r3, r7, #2
 8006024:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	46bd      	mov	sp, r7
 800602a:	b002      	add	sp, #8
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006038:	231e      	movs	r3, #30
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4abe      	ldr	r2, [pc, #760]	; (8006358 <UART_SetConfig+0x328>)
 8006060:	4013      	ands	r3, r2
 8006062:	0019      	movs	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4ab9      	ldr	r2, [pc, #740]	; (800635c <UART_SetConfig+0x32c>)
 8006076:	4013      	ands	r3, r2
 8006078:	0019      	movs	r1, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4ab0      	ldr	r2, [pc, #704]	; (8006360 <UART_SetConfig+0x330>)
 800609e:	4013      	ands	r3, r2
 80060a0:	0019      	movs	r1, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4aac      	ldr	r2, [pc, #688]	; (8006364 <UART_SetConfig+0x334>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d127      	bne.n	8006106 <UART_SetConfig+0xd6>
 80060b6:	4bac      	ldr	r3, [pc, #688]	; (8006368 <UART_SetConfig+0x338>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	2203      	movs	r2, #3
 80060bc:	4013      	ands	r3, r2
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d00d      	beq.n	80060de <UART_SetConfig+0xae>
 80060c2:	d81b      	bhi.n	80060fc <UART_SetConfig+0xcc>
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d014      	beq.n	80060f2 <UART_SetConfig+0xc2>
 80060c8:	d818      	bhi.n	80060fc <UART_SetConfig+0xcc>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <UART_SetConfig+0xa4>
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d00a      	beq.n	80060e8 <UART_SetConfig+0xb8>
 80060d2:	e013      	b.n	80060fc <UART_SetConfig+0xcc>
 80060d4:	231f      	movs	r3, #31
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e0bd      	b.n	800625a <UART_SetConfig+0x22a>
 80060de:	231f      	movs	r3, #31
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	2202      	movs	r2, #2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e0b8      	b.n	800625a <UART_SetConfig+0x22a>
 80060e8:	231f      	movs	r3, #31
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2204      	movs	r2, #4
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e0b3      	b.n	800625a <UART_SetConfig+0x22a>
 80060f2:	231f      	movs	r3, #31
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	2208      	movs	r2, #8
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e0ae      	b.n	800625a <UART_SetConfig+0x22a>
 80060fc:	231f      	movs	r3, #31
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	2210      	movs	r2, #16
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e0a9      	b.n	800625a <UART_SetConfig+0x22a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a98      	ldr	r2, [pc, #608]	; (800636c <UART_SetConfig+0x33c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d134      	bne.n	800617a <UART_SetConfig+0x14a>
 8006110:	4b95      	ldr	r3, [pc, #596]	; (8006368 <UART_SetConfig+0x338>)
 8006112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006114:	23c0      	movs	r3, #192	; 0xc0
 8006116:	029b      	lsls	r3, r3, #10
 8006118:	4013      	ands	r3, r2
 800611a:	22c0      	movs	r2, #192	; 0xc0
 800611c:	0292      	lsls	r2, r2, #10
 800611e:	4293      	cmp	r3, r2
 8006120:	d017      	beq.n	8006152 <UART_SetConfig+0x122>
 8006122:	22c0      	movs	r2, #192	; 0xc0
 8006124:	0292      	lsls	r2, r2, #10
 8006126:	4293      	cmp	r3, r2
 8006128:	d822      	bhi.n	8006170 <UART_SetConfig+0x140>
 800612a:	2280      	movs	r2, #128	; 0x80
 800612c:	0292      	lsls	r2, r2, #10
 800612e:	4293      	cmp	r3, r2
 8006130:	d019      	beq.n	8006166 <UART_SetConfig+0x136>
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	0292      	lsls	r2, r2, #10
 8006136:	4293      	cmp	r3, r2
 8006138:	d81a      	bhi.n	8006170 <UART_SetConfig+0x140>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <UART_SetConfig+0x118>
 800613e:	2280      	movs	r2, #128	; 0x80
 8006140:	0252      	lsls	r2, r2, #9
 8006142:	4293      	cmp	r3, r2
 8006144:	d00a      	beq.n	800615c <UART_SetConfig+0x12c>
 8006146:	e013      	b.n	8006170 <UART_SetConfig+0x140>
 8006148:	231f      	movs	r3, #31
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e083      	b.n	800625a <UART_SetConfig+0x22a>
 8006152:	231f      	movs	r3, #31
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	2202      	movs	r2, #2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e07e      	b.n	800625a <UART_SetConfig+0x22a>
 800615c:	231f      	movs	r3, #31
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	2204      	movs	r2, #4
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e079      	b.n	800625a <UART_SetConfig+0x22a>
 8006166:	231f      	movs	r3, #31
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	2208      	movs	r2, #8
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e074      	b.n	800625a <UART_SetConfig+0x22a>
 8006170:	231f      	movs	r3, #31
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2210      	movs	r2, #16
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	e06f      	b.n	800625a <UART_SetConfig+0x22a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a7c      	ldr	r2, [pc, #496]	; (8006370 <UART_SetConfig+0x340>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d134      	bne.n	80061ee <UART_SetConfig+0x1be>
 8006184:	4b78      	ldr	r3, [pc, #480]	; (8006368 <UART_SetConfig+0x338>)
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	23c0      	movs	r3, #192	; 0xc0
 800618a:	031b      	lsls	r3, r3, #12
 800618c:	4013      	ands	r3, r2
 800618e:	22c0      	movs	r2, #192	; 0xc0
 8006190:	0312      	lsls	r2, r2, #12
 8006192:	4293      	cmp	r3, r2
 8006194:	d017      	beq.n	80061c6 <UART_SetConfig+0x196>
 8006196:	22c0      	movs	r2, #192	; 0xc0
 8006198:	0312      	lsls	r2, r2, #12
 800619a:	4293      	cmp	r3, r2
 800619c:	d822      	bhi.n	80061e4 <UART_SetConfig+0x1b4>
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	0312      	lsls	r2, r2, #12
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d019      	beq.n	80061da <UART_SetConfig+0x1aa>
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	0312      	lsls	r2, r2, #12
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d81a      	bhi.n	80061e4 <UART_SetConfig+0x1b4>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <UART_SetConfig+0x18c>
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	02d2      	lsls	r2, r2, #11
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00a      	beq.n	80061d0 <UART_SetConfig+0x1a0>
 80061ba:	e013      	b.n	80061e4 <UART_SetConfig+0x1b4>
 80061bc:	231f      	movs	r3, #31
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e049      	b.n	800625a <UART_SetConfig+0x22a>
 80061c6:	231f      	movs	r3, #31
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	2202      	movs	r2, #2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e044      	b.n	800625a <UART_SetConfig+0x22a>
 80061d0:	231f      	movs	r3, #31
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	2204      	movs	r2, #4
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e03f      	b.n	800625a <UART_SetConfig+0x22a>
 80061da:	231f      	movs	r3, #31
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2208      	movs	r2, #8
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e03a      	b.n	800625a <UART_SetConfig+0x22a>
 80061e4:	231f      	movs	r3, #31
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2210      	movs	r2, #16
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e035      	b.n	800625a <UART_SetConfig+0x22a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a60      	ldr	r2, [pc, #384]	; (8006374 <UART_SetConfig+0x344>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d104      	bne.n	8006202 <UART_SetConfig+0x1d2>
 80061f8:	231f      	movs	r3, #31
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e02b      	b.n	800625a <UART_SetConfig+0x22a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a5c      	ldr	r2, [pc, #368]	; (8006378 <UART_SetConfig+0x348>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d104      	bne.n	8006216 <UART_SetConfig+0x1e6>
 800620c:	231f      	movs	r3, #31
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e021      	b.n	800625a <UART_SetConfig+0x22a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a58      	ldr	r2, [pc, #352]	; (800637c <UART_SetConfig+0x34c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d104      	bne.n	800622a <UART_SetConfig+0x1fa>
 8006220:	231f      	movs	r3, #31
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e017      	b.n	800625a <UART_SetConfig+0x22a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a54      	ldr	r2, [pc, #336]	; (8006380 <UART_SetConfig+0x350>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d104      	bne.n	800623e <UART_SetConfig+0x20e>
 8006234:	231f      	movs	r3, #31
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e00d      	b.n	800625a <UART_SetConfig+0x22a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a50      	ldr	r2, [pc, #320]	; (8006384 <UART_SetConfig+0x354>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d104      	bne.n	8006252 <UART_SetConfig+0x222>
 8006248:	231f      	movs	r3, #31
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e003      	b.n	800625a <UART_SetConfig+0x22a>
 8006252:	231f      	movs	r3, #31
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	2210      	movs	r2, #16
 8006258:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69da      	ldr	r2, [r3, #28]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	429a      	cmp	r2, r3
 8006264:	d15d      	bne.n	8006322 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8006266:	231f      	movs	r3, #31
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d015      	beq.n	800629c <UART_SetConfig+0x26c>
 8006270:	dc18      	bgt.n	80062a4 <UART_SetConfig+0x274>
 8006272:	2b04      	cmp	r3, #4
 8006274:	d00d      	beq.n	8006292 <UART_SetConfig+0x262>
 8006276:	dc15      	bgt.n	80062a4 <UART_SetConfig+0x274>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <UART_SetConfig+0x252>
 800627c:	2b02      	cmp	r3, #2
 800627e:	d005      	beq.n	800628c <UART_SetConfig+0x25c>
 8006280:	e010      	b.n	80062a4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006282:	f7ff fa77 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 8006286:	0003      	movs	r3, r0
 8006288:	61bb      	str	r3, [r7, #24]
        break;
 800628a:	e012      	b.n	80062b2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800628c:	4b3e      	ldr	r3, [pc, #248]	; (8006388 <UART_SetConfig+0x358>)
 800628e:	61bb      	str	r3, [r7, #24]
        break;
 8006290:	e00f      	b.n	80062b2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006292:	f7ff f9e5 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 8006296:	0003      	movs	r3, r0
 8006298:	61bb      	str	r3, [r7, #24]
        break;
 800629a:	e00a      	b.n	80062b2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	61bb      	str	r3, [r7, #24]
        break;
 80062a2:	e006      	b.n	80062b2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062a8:	231e      	movs	r3, #30
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
        break;
 80062b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d100      	bne.n	80062ba <UART_SetConfig+0x28a>
 80062b8:	e095      	b.n	80063e6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	005a      	lsls	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	18d2      	adds	r2, r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	0019      	movs	r1, r3
 80062cc:	0010      	movs	r0, r2
 80062ce:	f7f9 ff19 	bl	8000104 <__udivsi3>
 80062d2:	0003      	movs	r3, r0
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b0f      	cmp	r3, #15
 80062dc:	d91c      	bls.n	8006318 <UART_SetConfig+0x2e8>
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	025b      	lsls	r3, r3, #9
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d217      	bcs.n	8006318 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	200e      	movs	r0, #14
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	210f      	movs	r1, #15
 80062f2:	438a      	bics	r2, r1
 80062f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2207      	movs	r2, #7
 80062fe:	4013      	ands	r3, r2
 8006300:	b299      	uxth	r1, r3
 8006302:	183b      	adds	r3, r7, r0
 8006304:	183a      	adds	r2, r7, r0
 8006306:	8812      	ldrh	r2, [r2, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	183a      	adds	r2, r7, r0
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	e066      	b.n	80063e6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006318:	231e      	movs	r3, #30
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e061      	b.n	80063e6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006322:	231f      	movs	r3, #31
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b08      	cmp	r3, #8
 800632a:	d02f      	beq.n	800638c <UART_SetConfig+0x35c>
 800632c:	dc32      	bgt.n	8006394 <UART_SetConfig+0x364>
 800632e:	2b04      	cmp	r3, #4
 8006330:	d00d      	beq.n	800634e <UART_SetConfig+0x31e>
 8006332:	dc2f      	bgt.n	8006394 <UART_SetConfig+0x364>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <UART_SetConfig+0x30e>
 8006338:	2b02      	cmp	r3, #2
 800633a:	d005      	beq.n	8006348 <UART_SetConfig+0x318>
 800633c:	e02a      	b.n	8006394 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800633e:	f7ff fa19 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 8006342:	0003      	movs	r3, r0
 8006344:	61bb      	str	r3, [r7, #24]
        break;
 8006346:	e02c      	b.n	80063a2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <UART_SetConfig+0x358>)
 800634a:	61bb      	str	r3, [r7, #24]
        break;
 800634c:	e029      	b.n	80063a2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634e:	f7ff f987 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 8006352:	0003      	movs	r3, r0
 8006354:	61bb      	str	r3, [r7, #24]
        break;
 8006356:	e024      	b.n	80063a2 <UART_SetConfig+0x372>
 8006358:	efff69f3 	.word	0xefff69f3
 800635c:	ffffcfff 	.word	0xffffcfff
 8006360:	fffff4ff 	.word	0xfffff4ff
 8006364:	40013800 	.word	0x40013800
 8006368:	40021000 	.word	0x40021000
 800636c:	40004400 	.word	0x40004400
 8006370:	40004800 	.word	0x40004800
 8006374:	40004c00 	.word	0x40004c00
 8006378:	40005000 	.word	0x40005000
 800637c:	40011400 	.word	0x40011400
 8006380:	40011800 	.word	0x40011800
 8006384:	40011c00 	.word	0x40011c00
 8006388:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	61bb      	str	r3, [r7, #24]
        break;
 8006392:	e006      	b.n	80063a2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006398:	231e      	movs	r3, #30
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
        break;
 80063a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01e      	beq.n	80063e6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	085a      	lsrs	r2, r3, #1
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	18d2      	adds	r2, r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	0019      	movs	r1, r3
 80063b8:	0010      	movs	r0, r2
 80063ba:	f7f9 fea3 	bl	8000104 <__udivsi3>
 80063be:	0003      	movs	r3, r0
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d909      	bls.n	80063de <UART_SetConfig+0x3ae>
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	025b      	lsls	r3, r3, #9
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d204      	bcs.n	80063de <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	60da      	str	r2, [r3, #12]
 80063dc:	e003      	b.n	80063e6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80063de:	231e      	movs	r3, #30
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063f2:	231e      	movs	r3, #30
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	781b      	ldrb	r3, [r3, #0]
}
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b008      	add	sp, #32
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2201      	movs	r2, #1
 800640e:	4013      	ands	r3, r2
 8006410:	d00b      	beq.n	800642a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a4a      	ldr	r2, [pc, #296]	; (8006544 <UART_AdvFeatureConfig+0x144>)
 800641a:	4013      	ands	r3, r2
 800641c:	0019      	movs	r1, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	2202      	movs	r2, #2
 8006430:	4013      	ands	r3, r2
 8006432:	d00b      	beq.n	800644c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4a43      	ldr	r2, [pc, #268]	; (8006548 <UART_AdvFeatureConfig+0x148>)
 800643c:	4013      	ands	r3, r2
 800643e:	0019      	movs	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2204      	movs	r2, #4
 8006452:	4013      	ands	r3, r2
 8006454:	d00b      	beq.n	800646e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a3b      	ldr	r2, [pc, #236]	; (800654c <UART_AdvFeatureConfig+0x14c>)
 800645e:	4013      	ands	r3, r2
 8006460:	0019      	movs	r1, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2208      	movs	r2, #8
 8006474:	4013      	ands	r3, r2
 8006476:	d00b      	beq.n	8006490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4a34      	ldr	r2, [pc, #208]	; (8006550 <UART_AdvFeatureConfig+0x150>)
 8006480:	4013      	ands	r3, r2
 8006482:	0019      	movs	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	2210      	movs	r2, #16
 8006496:	4013      	ands	r3, r2
 8006498:	d00b      	beq.n	80064b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	; (8006554 <UART_AdvFeatureConfig+0x154>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	2220      	movs	r2, #32
 80064b8:	4013      	ands	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4a25      	ldr	r2, [pc, #148]	; (8006558 <UART_AdvFeatureConfig+0x158>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	0019      	movs	r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	2240      	movs	r2, #64	; 0x40
 80064da:	4013      	ands	r3, r2
 80064dc:	d01d      	beq.n	800651a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <UART_AdvFeatureConfig+0x15c>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	0019      	movs	r1, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	035b      	lsls	r3, r3, #13
 80064fe:	429a      	cmp	r2, r3
 8006500:	d10b      	bne.n	800651a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4a15      	ldr	r2, [pc, #84]	; (8006560 <UART_AdvFeatureConfig+0x160>)
 800650a:	4013      	ands	r3, r2
 800650c:	0019      	movs	r1, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2280      	movs	r2, #128	; 0x80
 8006520:	4013      	ands	r3, r2
 8006522:	d00b      	beq.n	800653c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <UART_AdvFeatureConfig+0x164>)
 800652c:	4013      	ands	r3, r2
 800652e:	0019      	movs	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46bd      	mov	sp, r7
 8006540:	b002      	add	sp, #8
 8006542:	bd80      	pop	{r7, pc}
 8006544:	fffdffff 	.word	0xfffdffff
 8006548:	fffeffff 	.word	0xfffeffff
 800654c:	fffbffff 	.word	0xfffbffff
 8006550:	ffff7fff 	.word	0xffff7fff
 8006554:	ffffefff 	.word	0xffffefff
 8006558:	ffffdfff 	.word	0xffffdfff
 800655c:	ffefffff 	.word	0xffefffff
 8006560:	ff9fffff 	.word	0xff9fffff
 8006564:	fff7ffff 	.word	0xfff7ffff

08006568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2280      	movs	r2, #128	; 0x80
 8006574:	2100      	movs	r1, #0
 8006576:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006578:	f7fd faf4 	bl	8003b64 <HAL_GetTick>
 800657c:	0003      	movs	r3, r0
 800657e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2208      	movs	r2, #8
 8006588:	4013      	ands	r3, r2
 800658a:	2b08      	cmp	r3, #8
 800658c:	d10c      	bne.n	80065a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2280      	movs	r2, #128	; 0x80
 8006592:	0391      	lsls	r1, r2, #14
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4a17      	ldr	r2, [pc, #92]	; (80065f4 <UART_CheckIdleState+0x8c>)
 8006598:	9200      	str	r2, [sp, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	f000 f82c 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 80065a0:	1e03      	subs	r3, r0, #0
 80065a2:	d001      	beq.n	80065a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e021      	b.n	80065ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2204      	movs	r2, #4
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d10c      	bne.n	80065d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2280      	movs	r2, #128	; 0x80
 80065ba:	03d1      	lsls	r1, r2, #15
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4a0d      	ldr	r2, [pc, #52]	; (80065f4 <UART_CheckIdleState+0x8c>)
 80065c0:	9200      	str	r2, [sp, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f000 f818 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 80065c8:	1e03      	subs	r3, r0, #0
 80065ca:	d001      	beq.n	80065d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e00d      	b.n	80065ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2274      	movs	r2, #116	; 0x74
 80065e6:	2100      	movs	r1, #0
 80065e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	0018      	movs	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b004      	add	sp, #16
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	01ffffff 	.word	0x01ffffff

080065f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b094      	sub	sp, #80	; 0x50
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	1dfb      	adds	r3, r7, #7
 8006606:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006608:	e0a3      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800660c:	3301      	adds	r3, #1
 800660e:	d100      	bne.n	8006612 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006610:	e09f      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fd faa7 	bl	8003b64 <HAL_GetTick>
 8006616:	0002      	movs	r2, r0
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <UART_WaitOnFlagUntilTimeout+0x30>
 8006622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006624:	2b00      	cmp	r3, #0
 8006626:	d13d      	bne.n	80066a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006628:	f3ef 8310 	mrs	r3, PRIMASK
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006630:	647b      	str	r3, [r7, #68]	; 0x44
 8006632:	2301      	movs	r3, #1
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	f383 8810 	msr	PRIMASK, r3
}
 800663c:	46c0      	nop			; (mov r8, r8)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	494c      	ldr	r1, [pc, #304]	; (800677c <UART_WaitOnFlagUntilTimeout+0x184>)
 800664a:	400a      	ands	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006650:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	f383 8810 	msr	PRIMASK, r3
}
 8006658:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665a:	f3ef 8310 	mrs	r3, PRIMASK
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
 8006664:	2301      	movs	r3, #1
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	f383 8810 	msr	PRIMASK, r3
}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2101      	movs	r1, #1
 800667c:	438a      	bics	r2, r1
 800667e:	609a      	str	r2, [r3, #8]
 8006680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006686:	f383 8810 	msr	PRIMASK, r3
}
 800668a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2274      	movs	r2, #116	; 0x74
 800669c:	2100      	movs	r1, #0
 800669e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e067      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2204      	movs	r2, #4
 80066ac:	4013      	ands	r3, r2
 80066ae:	d050      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69da      	ldr	r2, [r3, #28]
 80066b6:	2380      	movs	r3, #128	; 0x80
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	401a      	ands	r2, r3
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d146      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2280      	movs	r2, #128	; 0x80
 80066ca:	0112      	lsls	r2, r2, #4
 80066cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ce:	f3ef 8310 	mrs	r3, PRIMASK
 80066d2:	613b      	str	r3, [r7, #16]
  return(result);
 80066d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f383 8810 	msr	PRIMASK, r3
}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4923      	ldr	r1, [pc, #140]	; (800677c <UART_WaitOnFlagUntilTimeout+0x184>)
 80066f0:	400a      	ands	r2, r1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f383 8810 	msr	PRIMASK, r3
}
 80066fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006700:	f3ef 8310 	mrs	r3, PRIMASK
 8006704:	61fb      	str	r3, [r7, #28]
  return(result);
 8006706:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	2301      	movs	r3, #1
 800670c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	f383 8810 	msr	PRIMASK, r3
}
 8006714:	46c0      	nop			; (mov r8, r8)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2101      	movs	r1, #1
 8006722:	438a      	bics	r2, r1
 8006724:	609a      	str	r2, [r3, #8]
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	f383 8810 	msr	PRIMASK, r3
}
 8006730:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	2120      	movs	r1, #32
 8006744:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2274      	movs	r2, #116	; 0x74
 800674a:	2100      	movs	r1, #0
 800674c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e010      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	425a      	negs	r2, r3
 8006762:	4153      	adcs	r3, r2
 8006764:	b2db      	uxtb	r3, r3
 8006766:	001a      	movs	r2, r3
 8006768:	1dfb      	adds	r3, r7, #7
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d100      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006770:	e74b      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b014      	add	sp, #80	; 0x50
 800677a:	bd80      	pop	{r7, pc}
 800677c:	fffffe5f 	.word	0xfffffe5f

08006780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08e      	sub	sp, #56	; 0x38
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006788:	f3ef 8310 	mrs	r3, PRIMASK
 800678c:	617b      	str	r3, [r7, #20]
  return(result);
 800678e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
 8006792:	2301      	movs	r3, #1
 8006794:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f383 8810 	msr	PRIMASK, r3
}
 800679c:	46c0      	nop			; (mov r8, r8)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4925      	ldr	r1, [pc, #148]	; (8006840 <UART_EndRxTransfer+0xc0>)
 80067aa:	400a      	ands	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	623b      	str	r3, [r7, #32]
  return(result);
 80067c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30
 80067c4:	2301      	movs	r3, #1
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	f383 8810 	msr	PRIMASK, r3
}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2101      	movs	r1, #1
 80067dc:	438a      	bics	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d118      	bne.n	8006826 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f4:	f3ef 8310 	mrs	r3, PRIMASK
 80067f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fe:	2301      	movs	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f383 8810 	msr	PRIMASK, r3
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2110      	movs	r1, #16
 8006816:	438a      	bics	r2, r1
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f383 8810 	msr	PRIMASK, r3
}
 8006824:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	b00e      	add	sp, #56	; 0x38
 800683e:	bd80      	pop	{r7, pc}
 8006840:	fffffedf 	.word	0xfffffedf

08006844 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	225a      	movs	r2, #90	; 0x5a
 8006856:	2100      	movs	r1, #0
 8006858:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2252      	movs	r2, #82	; 0x52
 800685e:	2100      	movs	r1, #0
 8006860:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	0018      	movs	r0, r3
 8006866:	f7ff fbcf 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b004      	add	sp, #16
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800687a:	f3ef 8310 	mrs	r3, PRIMASK
 800687e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006880:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f383 8810 	msr	PRIMASK, r3
}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2140      	movs	r1, #64	; 0x40
 800689c:	438a      	bics	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f383 8810 	msr	PRIMASK, r3
}
 80068aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7ff fb9c 	bl	8005ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c0:	46c0      	nop			; (mov r8, r8)
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b006      	add	sp, #24
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068d0:	46c0      	nop			; (mov r8, r8)
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b002      	add	sp, #8
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <__errno>:
 80068d8:	4b01      	ldr	r3, [pc, #4]	; (80068e0 <__errno+0x8>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	4770      	bx	lr
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	2000009c 	.word	0x2000009c

080068e4 <__libc_init_array>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	2600      	movs	r6, #0
 80068e8:	4d0c      	ldr	r5, [pc, #48]	; (800691c <__libc_init_array+0x38>)
 80068ea:	4c0d      	ldr	r4, [pc, #52]	; (8006920 <__libc_init_array+0x3c>)
 80068ec:	1b64      	subs	r4, r4, r5
 80068ee:	10a4      	asrs	r4, r4, #2
 80068f0:	42a6      	cmp	r6, r4
 80068f2:	d109      	bne.n	8006908 <__libc_init_array+0x24>
 80068f4:	2600      	movs	r6, #0
 80068f6:	f000 fb31 	bl	8006f5c <_init>
 80068fa:	4d0a      	ldr	r5, [pc, #40]	; (8006924 <__libc_init_array+0x40>)
 80068fc:	4c0a      	ldr	r4, [pc, #40]	; (8006928 <__libc_init_array+0x44>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	42a6      	cmp	r6, r4
 8006904:	d105      	bne.n	8006912 <__libc_init_array+0x2e>
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	00b3      	lsls	r3, r6, #2
 800690a:	58eb      	ldr	r3, [r5, r3]
 800690c:	4798      	blx	r3
 800690e:	3601      	adds	r6, #1
 8006910:	e7ee      	b.n	80068f0 <__libc_init_array+0xc>
 8006912:	00b3      	lsls	r3, r6, #2
 8006914:	58eb      	ldr	r3, [r5, r3]
 8006916:	4798      	blx	r3
 8006918:	3601      	adds	r6, #1
 800691a:	e7f2      	b.n	8006902 <__libc_init_array+0x1e>
 800691c:	08007140 	.word	0x08007140
 8006920:	08007140 	.word	0x08007140
 8006924:	08007140 	.word	0x08007140
 8006928:	08007144 	.word	0x08007144

0800692c <memset>:
 800692c:	0003      	movs	r3, r0
 800692e:	1882      	adds	r2, r0, r2
 8006930:	4293      	cmp	r3, r2
 8006932:	d100      	bne.n	8006936 <memset+0xa>
 8006934:	4770      	bx	lr
 8006936:	7019      	strb	r1, [r3, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	e7f9      	b.n	8006930 <memset+0x4>

0800693c <atan>:
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	4b98      	ldr	r3, [pc, #608]	; (8006ba0 <atan+0x264>)
 8006940:	b085      	sub	sp, #20
 8006942:	004e      	lsls	r6, r1, #1
 8006944:	0004      	movs	r4, r0
 8006946:	000d      	movs	r5, r1
 8006948:	9103      	str	r1, [sp, #12]
 800694a:	0876      	lsrs	r6, r6, #1
 800694c:	429e      	cmp	r6, r3
 800694e:	dd18      	ble.n	8006982 <atan+0x46>
 8006950:	4b94      	ldr	r3, [pc, #592]	; (8006ba4 <atan+0x268>)
 8006952:	429e      	cmp	r6, r3
 8006954:	dc02      	bgt.n	800695c <atan+0x20>
 8006956:	d10a      	bne.n	800696e <atan+0x32>
 8006958:	2800      	cmp	r0, #0
 800695a:	d008      	beq.n	800696e <atan+0x32>
 800695c:	0022      	movs	r2, r4
 800695e:	002b      	movs	r3, r5
 8006960:	0020      	movs	r0, r4
 8006962:	0029      	movs	r1, r5
 8006964:	f7f9 ffba 	bl	80008dc <__aeabi_dadd>
 8006968:	0004      	movs	r4, r0
 800696a:	000d      	movs	r5, r1
 800696c:	e005      	b.n	800697a <atan+0x3e>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	4c8d      	ldr	r4, [pc, #564]	; (8006ba8 <atan+0x26c>)
 8006972:	2b00      	cmp	r3, #0
 8006974:	dd00      	ble.n	8006978 <atan+0x3c>
 8006976:	e110      	b.n	8006b9a <atan+0x25e>
 8006978:	4d8c      	ldr	r5, [pc, #560]	; (8006bac <atan+0x270>)
 800697a:	0020      	movs	r0, r4
 800697c:	0029      	movs	r1, r5
 800697e:	b005      	add	sp, #20
 8006980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006982:	4b8b      	ldr	r3, [pc, #556]	; (8006bb0 <atan+0x274>)
 8006984:	429e      	cmp	r6, r3
 8006986:	dc0f      	bgt.n	80069a8 <atan+0x6c>
 8006988:	4b8a      	ldr	r3, [pc, #552]	; (8006bb4 <atan+0x278>)
 800698a:	429e      	cmp	r6, r3
 800698c:	dc09      	bgt.n	80069a2 <atan+0x66>
 800698e:	4a8a      	ldr	r2, [pc, #552]	; (8006bb8 <atan+0x27c>)
 8006990:	4b8a      	ldr	r3, [pc, #552]	; (8006bbc <atan+0x280>)
 8006992:	f7f9 ffa3 	bl	80008dc <__aeabi_dadd>
 8006996:	2200      	movs	r2, #0
 8006998:	4b89      	ldr	r3, [pc, #548]	; (8006bc0 <atan+0x284>)
 800699a:	f7f9 fc69 	bl	8000270 <__aeabi_dcmpgt>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d1eb      	bne.n	800697a <atan+0x3e>
 80069a2:	2301      	movs	r3, #1
 80069a4:	425b      	negs	r3, r3
 80069a6:	e025      	b.n	80069f4 <atan+0xb8>
 80069a8:	f000 f948 	bl	8006c3c <fabs>
 80069ac:	4b85      	ldr	r3, [pc, #532]	; (8006bc4 <atan+0x288>)
 80069ae:	0004      	movs	r4, r0
 80069b0:	000d      	movs	r5, r1
 80069b2:	429e      	cmp	r6, r3
 80069b4:	dd00      	ble.n	80069b8 <atan+0x7c>
 80069b6:	e0aa      	b.n	8006b0e <atan+0x1d2>
 80069b8:	4b83      	ldr	r3, [pc, #524]	; (8006bc8 <atan+0x28c>)
 80069ba:	429e      	cmp	r6, r3
 80069bc:	dd00      	ble.n	80069c0 <atan+0x84>
 80069be:	e090      	b.n	8006ae2 <atan+0x1a6>
 80069c0:	0002      	movs	r2, r0
 80069c2:	000b      	movs	r3, r1
 80069c4:	f7f9 ff8a 	bl	80008dc <__aeabi_dadd>
 80069c8:	2200      	movs	r2, #0
 80069ca:	4b7d      	ldr	r3, [pc, #500]	; (8006bc0 <atan+0x284>)
 80069cc:	f7fb f930 	bl	8001c30 <__aeabi_dsub>
 80069d0:	2380      	movs	r3, #128	; 0x80
 80069d2:	0006      	movs	r6, r0
 80069d4:	000f      	movs	r7, r1
 80069d6:	2200      	movs	r2, #0
 80069d8:	0020      	movs	r0, r4
 80069da:	0029      	movs	r1, r5
 80069dc:	05db      	lsls	r3, r3, #23
 80069de:	f7f9 ff7d 	bl	80008dc <__aeabi_dadd>
 80069e2:	000b      	movs	r3, r1
 80069e4:	0002      	movs	r2, r0
 80069e6:	0039      	movs	r1, r7
 80069e8:	0030      	movs	r0, r6
 80069ea:	f7fa fab3 	bl	8000f54 <__aeabi_ddiv>
 80069ee:	2300      	movs	r3, #0
 80069f0:	0004      	movs	r4, r0
 80069f2:	000d      	movs	r5, r1
 80069f4:	0022      	movs	r2, r4
 80069f6:	9302      	str	r3, [sp, #8]
 80069f8:	0020      	movs	r0, r4
 80069fa:	002b      	movs	r3, r5
 80069fc:	0029      	movs	r1, r5
 80069fe:	f7fa feab 	bl	8001758 <__aeabi_dmul>
 8006a02:	0002      	movs	r2, r0
 8006a04:	000b      	movs	r3, r1
 8006a06:	9000      	str	r0, [sp, #0]
 8006a08:	9101      	str	r1, [sp, #4]
 8006a0a:	f7fa fea5 	bl	8001758 <__aeabi_dmul>
 8006a0e:	0006      	movs	r6, r0
 8006a10:	000f      	movs	r7, r1
 8006a12:	4a6e      	ldr	r2, [pc, #440]	; (8006bcc <atan+0x290>)
 8006a14:	4b6e      	ldr	r3, [pc, #440]	; (8006bd0 <atan+0x294>)
 8006a16:	f7fa fe9f 	bl	8001758 <__aeabi_dmul>
 8006a1a:	4a6e      	ldr	r2, [pc, #440]	; (8006bd4 <atan+0x298>)
 8006a1c:	4b6e      	ldr	r3, [pc, #440]	; (8006bd8 <atan+0x29c>)
 8006a1e:	f7f9 ff5d 	bl	80008dc <__aeabi_dadd>
 8006a22:	0032      	movs	r2, r6
 8006a24:	003b      	movs	r3, r7
 8006a26:	f7fa fe97 	bl	8001758 <__aeabi_dmul>
 8006a2a:	4a6c      	ldr	r2, [pc, #432]	; (8006bdc <atan+0x2a0>)
 8006a2c:	4b6c      	ldr	r3, [pc, #432]	; (8006be0 <atan+0x2a4>)
 8006a2e:	f7f9 ff55 	bl	80008dc <__aeabi_dadd>
 8006a32:	0032      	movs	r2, r6
 8006a34:	003b      	movs	r3, r7
 8006a36:	f7fa fe8f 	bl	8001758 <__aeabi_dmul>
 8006a3a:	4a6a      	ldr	r2, [pc, #424]	; (8006be4 <atan+0x2a8>)
 8006a3c:	4b6a      	ldr	r3, [pc, #424]	; (8006be8 <atan+0x2ac>)
 8006a3e:	f7f9 ff4d 	bl	80008dc <__aeabi_dadd>
 8006a42:	0032      	movs	r2, r6
 8006a44:	003b      	movs	r3, r7
 8006a46:	f7fa fe87 	bl	8001758 <__aeabi_dmul>
 8006a4a:	4a68      	ldr	r2, [pc, #416]	; (8006bec <atan+0x2b0>)
 8006a4c:	4b68      	ldr	r3, [pc, #416]	; (8006bf0 <atan+0x2b4>)
 8006a4e:	f7f9 ff45 	bl	80008dc <__aeabi_dadd>
 8006a52:	0032      	movs	r2, r6
 8006a54:	003b      	movs	r3, r7
 8006a56:	f7fa fe7f 	bl	8001758 <__aeabi_dmul>
 8006a5a:	4a66      	ldr	r2, [pc, #408]	; (8006bf4 <atan+0x2b8>)
 8006a5c:	4b66      	ldr	r3, [pc, #408]	; (8006bf8 <atan+0x2bc>)
 8006a5e:	f7f9 ff3d 	bl	80008dc <__aeabi_dadd>
 8006a62:	9a00      	ldr	r2, [sp, #0]
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	f7fa fe77 	bl	8001758 <__aeabi_dmul>
 8006a6a:	4a64      	ldr	r2, [pc, #400]	; (8006bfc <atan+0x2c0>)
 8006a6c:	9000      	str	r0, [sp, #0]
 8006a6e:	9101      	str	r1, [sp, #4]
 8006a70:	4b63      	ldr	r3, [pc, #396]	; (8006c00 <atan+0x2c4>)
 8006a72:	0030      	movs	r0, r6
 8006a74:	0039      	movs	r1, r7
 8006a76:	f7fa fe6f 	bl	8001758 <__aeabi_dmul>
 8006a7a:	4a62      	ldr	r2, [pc, #392]	; (8006c04 <atan+0x2c8>)
 8006a7c:	4b62      	ldr	r3, [pc, #392]	; (8006c08 <atan+0x2cc>)
 8006a7e:	f7fb f8d7 	bl	8001c30 <__aeabi_dsub>
 8006a82:	0032      	movs	r2, r6
 8006a84:	003b      	movs	r3, r7
 8006a86:	f7fa fe67 	bl	8001758 <__aeabi_dmul>
 8006a8a:	4a60      	ldr	r2, [pc, #384]	; (8006c0c <atan+0x2d0>)
 8006a8c:	4b60      	ldr	r3, [pc, #384]	; (8006c10 <atan+0x2d4>)
 8006a8e:	f7fb f8cf 	bl	8001c30 <__aeabi_dsub>
 8006a92:	0032      	movs	r2, r6
 8006a94:	003b      	movs	r3, r7
 8006a96:	f7fa fe5f 	bl	8001758 <__aeabi_dmul>
 8006a9a:	4a5e      	ldr	r2, [pc, #376]	; (8006c14 <atan+0x2d8>)
 8006a9c:	4b5e      	ldr	r3, [pc, #376]	; (8006c18 <atan+0x2dc>)
 8006a9e:	f7fb f8c7 	bl	8001c30 <__aeabi_dsub>
 8006aa2:	0032      	movs	r2, r6
 8006aa4:	003b      	movs	r3, r7
 8006aa6:	f7fa fe57 	bl	8001758 <__aeabi_dmul>
 8006aaa:	4a5c      	ldr	r2, [pc, #368]	; (8006c1c <atan+0x2e0>)
 8006aac:	4b5c      	ldr	r3, [pc, #368]	; (8006c20 <atan+0x2e4>)
 8006aae:	f7fb f8bf 	bl	8001c30 <__aeabi_dsub>
 8006ab2:	0032      	movs	r2, r6
 8006ab4:	003b      	movs	r3, r7
 8006ab6:	f7fa fe4f 	bl	8001758 <__aeabi_dmul>
 8006aba:	0002      	movs	r2, r0
 8006abc:	000b      	movs	r3, r1
 8006abe:	9800      	ldr	r0, [sp, #0]
 8006ac0:	9901      	ldr	r1, [sp, #4]
 8006ac2:	f7f9 ff0b 	bl	80008dc <__aeabi_dadd>
 8006ac6:	002b      	movs	r3, r5
 8006ac8:	0022      	movs	r2, r4
 8006aca:	f7fa fe45 	bl	8001758 <__aeabi_dmul>
 8006ace:	9b02      	ldr	r3, [sp, #8]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	d143      	bne.n	8006b5c <atan+0x220>
 8006ad4:	0002      	movs	r2, r0
 8006ad6:	000b      	movs	r3, r1
 8006ad8:	0020      	movs	r0, r4
 8006ada:	0029      	movs	r1, r5
 8006adc:	f7fb f8a8 	bl	8001c30 <__aeabi_dsub>
 8006ae0:	e742      	b.n	8006968 <atan+0x2c>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4b36      	ldr	r3, [pc, #216]	; (8006bc0 <atan+0x284>)
 8006ae6:	f7fb f8a3 	bl	8001c30 <__aeabi_dsub>
 8006aea:	2200      	movs	r2, #0
 8006aec:	0006      	movs	r6, r0
 8006aee:	000f      	movs	r7, r1
 8006af0:	0020      	movs	r0, r4
 8006af2:	0029      	movs	r1, r5
 8006af4:	4b32      	ldr	r3, [pc, #200]	; (8006bc0 <atan+0x284>)
 8006af6:	f7f9 fef1 	bl	80008dc <__aeabi_dadd>
 8006afa:	000b      	movs	r3, r1
 8006afc:	0002      	movs	r2, r0
 8006afe:	0039      	movs	r1, r7
 8006b00:	0030      	movs	r0, r6
 8006b02:	f7fa fa27 	bl	8000f54 <__aeabi_ddiv>
 8006b06:	2301      	movs	r3, #1
 8006b08:	0004      	movs	r4, r0
 8006b0a:	000d      	movs	r5, r1
 8006b0c:	e772      	b.n	80069f4 <atan+0xb8>
 8006b0e:	4b45      	ldr	r3, [pc, #276]	; (8006c24 <atan+0x2e8>)
 8006b10:	429e      	cmp	r6, r3
 8006b12:	dc19      	bgt.n	8006b48 <atan+0x20c>
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b44      	ldr	r3, [pc, #272]	; (8006c28 <atan+0x2ec>)
 8006b18:	f7fb f88a 	bl	8001c30 <__aeabi_dsub>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	0006      	movs	r6, r0
 8006b20:	000f      	movs	r7, r1
 8006b22:	0020      	movs	r0, r4
 8006b24:	0029      	movs	r1, r5
 8006b26:	4b40      	ldr	r3, [pc, #256]	; (8006c28 <atan+0x2ec>)
 8006b28:	f7fa fe16 	bl	8001758 <__aeabi_dmul>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <atan+0x284>)
 8006b30:	f7f9 fed4 	bl	80008dc <__aeabi_dadd>
 8006b34:	000b      	movs	r3, r1
 8006b36:	0002      	movs	r2, r0
 8006b38:	0039      	movs	r1, r7
 8006b3a:	0030      	movs	r0, r6
 8006b3c:	f7fa fa0a 	bl	8000f54 <__aeabi_ddiv>
 8006b40:	2302      	movs	r3, #2
 8006b42:	0004      	movs	r4, r0
 8006b44:	000d      	movs	r5, r1
 8006b46:	e755      	b.n	80069f4 <atan+0xb8>
 8006b48:	000b      	movs	r3, r1
 8006b4a:	0002      	movs	r2, r0
 8006b4c:	4937      	ldr	r1, [pc, #220]	; (8006c2c <atan+0x2f0>)
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7fa fa00 	bl	8000f54 <__aeabi_ddiv>
 8006b54:	2303      	movs	r3, #3
 8006b56:	0004      	movs	r4, r0
 8006b58:	000d      	movs	r5, r1
 8006b5a:	e74b      	b.n	80069f4 <atan+0xb8>
 8006b5c:	9b02      	ldr	r3, [sp, #8]
 8006b5e:	4f34      	ldr	r7, [pc, #208]	; (8006c30 <atan+0x2f4>)
 8006b60:	00de      	lsls	r6, r3, #3
 8006b62:	4b34      	ldr	r3, [pc, #208]	; (8006c34 <atan+0x2f8>)
 8006b64:	19bf      	adds	r7, r7, r6
 8006b66:	199e      	adds	r6, r3, r6
 8006b68:	6832      	ldr	r2, [r6, #0]
 8006b6a:	6873      	ldr	r3, [r6, #4]
 8006b6c:	f7fb f860 	bl	8001c30 <__aeabi_dsub>
 8006b70:	0022      	movs	r2, r4
 8006b72:	002b      	movs	r3, r5
 8006b74:	f7fb f85c 	bl	8001c30 <__aeabi_dsub>
 8006b78:	000b      	movs	r3, r1
 8006b7a:	0002      	movs	r2, r0
 8006b7c:	6838      	ldr	r0, [r7, #0]
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	f7fb f856 	bl	8001c30 <__aeabi_dsub>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	0004      	movs	r4, r0
 8006b88:	000d      	movs	r5, r1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	db00      	blt.n	8006b90 <atan+0x254>
 8006b8e:	e6f4      	b.n	800697a <atan+0x3e>
 8006b90:	2180      	movs	r1, #128	; 0x80
 8006b92:	0609      	lsls	r1, r1, #24
 8006b94:	186b      	adds	r3, r5, r1
 8006b96:	001d      	movs	r5, r3
 8006b98:	e6ef      	b.n	800697a <atan+0x3e>
 8006b9a:	4d27      	ldr	r5, [pc, #156]	; (8006c38 <atan+0x2fc>)
 8006b9c:	e6ed      	b.n	800697a <atan+0x3e>
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	440fffff 	.word	0x440fffff
 8006ba4:	7ff00000 	.word	0x7ff00000
 8006ba8:	54442d18 	.word	0x54442d18
 8006bac:	bff921fb 	.word	0xbff921fb
 8006bb0:	3fdbffff 	.word	0x3fdbffff
 8006bb4:	3e1fffff 	.word	0x3e1fffff
 8006bb8:	8800759c 	.word	0x8800759c
 8006bbc:	7e37e43c 	.word	0x7e37e43c
 8006bc0:	3ff00000 	.word	0x3ff00000
 8006bc4:	3ff2ffff 	.word	0x3ff2ffff
 8006bc8:	3fe5ffff 	.word	0x3fe5ffff
 8006bcc:	e322da11 	.word	0xe322da11
 8006bd0:	3f90ad3a 	.word	0x3f90ad3a
 8006bd4:	24760deb 	.word	0x24760deb
 8006bd8:	3fa97b4b 	.word	0x3fa97b4b
 8006bdc:	a0d03d51 	.word	0xa0d03d51
 8006be0:	3fb10d66 	.word	0x3fb10d66
 8006be4:	c54c206e 	.word	0xc54c206e
 8006be8:	3fb745cd 	.word	0x3fb745cd
 8006bec:	920083ff 	.word	0x920083ff
 8006bf0:	3fc24924 	.word	0x3fc24924
 8006bf4:	5555550d 	.word	0x5555550d
 8006bf8:	3fd55555 	.word	0x3fd55555
 8006bfc:	2c6a6c2f 	.word	0x2c6a6c2f
 8006c00:	bfa2b444 	.word	0xbfa2b444
 8006c04:	52defd9a 	.word	0x52defd9a
 8006c08:	3fadde2d 	.word	0x3fadde2d
 8006c0c:	af749a6d 	.word	0xaf749a6d
 8006c10:	3fb3b0f2 	.word	0x3fb3b0f2
 8006c14:	fe231671 	.word	0xfe231671
 8006c18:	3fbc71c6 	.word	0x3fbc71c6
 8006c1c:	9998ebc4 	.word	0x9998ebc4
 8006c20:	3fc99999 	.word	0x3fc99999
 8006c24:	40037fff 	.word	0x40037fff
 8006c28:	3ff80000 	.word	0x3ff80000
 8006c2c:	bff00000 	.word	0xbff00000
 8006c30:	080070d0 	.word	0x080070d0
 8006c34:	080070f0 	.word	0x080070f0
 8006c38:	3ff921fb 	.word	0x3ff921fb

08006c3c <fabs>:
 8006c3c:	004b      	lsls	r3, r1, #1
 8006c3e:	0859      	lsrs	r1, r3, #1
 8006c40:	4770      	bx	lr

08006c42 <atan2>:
 8006c42:	b510      	push	{r4, lr}
 8006c44:	f000 f828 	bl	8006c98 <__ieee754_atan2>
 8006c48:	bd10      	pop	{r4, pc}

08006c4a <sqrt>:
 8006c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4c:	0004      	movs	r4, r0
 8006c4e:	000d      	movs	r5, r1
 8006c50:	f000 f8ce 	bl	8006df0 <__ieee754_sqrt>
 8006c54:	0022      	movs	r2, r4
 8006c56:	0006      	movs	r6, r0
 8006c58:	000f      	movs	r7, r1
 8006c5a:	002b      	movs	r3, r5
 8006c5c:	0020      	movs	r0, r4
 8006c5e:	0029      	movs	r1, r5
 8006c60:	f7fb fb78 	bl	8002354 <__aeabi_dcmpun>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d113      	bne.n	8006c90 <sqrt+0x46>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	0029      	movs	r1, r5
 8006c70:	f7f9 faea 	bl	8000248 <__aeabi_dcmplt>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d00b      	beq.n	8006c90 <sqrt+0x46>
 8006c78:	f7ff fe2e 	bl	80068d8 <__errno>
 8006c7c:	2321      	movs	r3, #33	; 0x21
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6003      	str	r3, [r0, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	0010      	movs	r0, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	f7fa f964 	bl	8000f54 <__aeabi_ddiv>
 8006c8c:	0006      	movs	r6, r0
 8006c8e:	000f      	movs	r7, r1
 8006c90:	0030      	movs	r0, r6
 8006c92:	0039      	movs	r1, r7
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c98 <__ieee754_atan2>:
 8006c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c9a:	0016      	movs	r6, r2
 8006c9c:	001d      	movs	r5, r3
 8006c9e:	005a      	lsls	r2, r3, #1
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4273      	negs	r3, r6
 8006ca4:	4333      	orrs	r3, r6
 8006ca6:	4f46      	ldr	r7, [pc, #280]	; (8006dc0 <__ieee754_atan2+0x128>)
 8006ca8:	0852      	lsrs	r2, r2, #1
 8006caa:	0fdb      	lsrs	r3, r3, #31
 8006cac:	4313      	orrs	r3, r2
 8006cae:	42bb      	cmp	r3, r7
 8006cb0:	d809      	bhi.n	8006cc6 <__ieee754_atan2+0x2e>
 8006cb2:	4244      	negs	r4, r0
 8006cb4:	004b      	lsls	r3, r1, #1
 8006cb6:	4304      	orrs	r4, r0
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	0fe4      	lsrs	r4, r4, #31
 8006cbc:	9100      	str	r1, [sp, #0]
 8006cbe:	9001      	str	r0, [sp, #4]
 8006cc0:	431c      	orrs	r4, r3
 8006cc2:	42bc      	cmp	r4, r7
 8006cc4:	d905      	bls.n	8006cd2 <__ieee754_atan2+0x3a>
 8006cc6:	0032      	movs	r2, r6
 8006cc8:	002b      	movs	r3, r5
 8006cca:	f7f9 fe07 	bl	80008dc <__aeabi_dadd>
 8006cce:	b003      	add	sp, #12
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd2:	4c3c      	ldr	r4, [pc, #240]	; (8006dc4 <__ieee754_atan2+0x12c>)
 8006cd4:	192c      	adds	r4, r5, r4
 8006cd6:	4334      	orrs	r4, r6
 8006cd8:	d102      	bne.n	8006ce0 <__ieee754_atan2+0x48>
 8006cda:	f7ff fe2f 	bl	800693c <atan>
 8006cde:	e7f6      	b.n	8006cce <__ieee754_atan2+0x36>
 8006ce0:	17ac      	asrs	r4, r5, #30
 8006ce2:	46a4      	mov	ip, r4
 8006ce4:	2402      	movs	r4, #2
 8006ce6:	4667      	mov	r7, ip
 8006ce8:	403c      	ands	r4, r7
 8006cea:	9f00      	ldr	r7, [sp, #0]
 8006cec:	0fff      	lsrs	r7, r7, #31
 8006cee:	433c      	orrs	r4, r7
 8006cf0:	9f01      	ldr	r7, [sp, #4]
 8006cf2:	431f      	orrs	r7, r3
 8006cf4:	d106      	bne.n	8006d04 <__ieee754_atan2+0x6c>
 8006cf6:	2c02      	cmp	r4, #2
 8006cf8:	d056      	beq.n	8006da8 <__ieee754_atan2+0x110>
 8006cfa:	2c03      	cmp	r4, #3
 8006cfc:	d1e7      	bne.n	8006cce <__ieee754_atan2+0x36>
 8006cfe:	4832      	ldr	r0, [pc, #200]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006d00:	4932      	ldr	r1, [pc, #200]	; (8006dcc <__ieee754_atan2+0x134>)
 8006d02:	e7e4      	b.n	8006cce <__ieee754_atan2+0x36>
 8006d04:	0017      	movs	r7, r2
 8006d06:	4337      	orrs	r7, r6
 8006d08:	d105      	bne.n	8006d16 <__ieee754_atan2+0x7e>
 8006d0a:	9b00      	ldr	r3, [sp, #0]
 8006d0c:	482e      	ldr	r0, [pc, #184]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da53      	bge.n	8006dba <__ieee754_atan2+0x122>
 8006d12:	492f      	ldr	r1, [pc, #188]	; (8006dd0 <__ieee754_atan2+0x138>)
 8006d14:	e7db      	b.n	8006cce <__ieee754_atan2+0x36>
 8006d16:	4f2a      	ldr	r7, [pc, #168]	; (8006dc0 <__ieee754_atan2+0x128>)
 8006d18:	42ba      	cmp	r2, r7
 8006d1a:	d10f      	bne.n	8006d3c <__ieee754_atan2+0xa4>
 8006d1c:	3c01      	subs	r4, #1
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d107      	bne.n	8006d32 <__ieee754_atan2+0x9a>
 8006d22:	2c02      	cmp	r4, #2
 8006d24:	d843      	bhi.n	8006dae <__ieee754_atan2+0x116>
 8006d26:	4b2b      	ldr	r3, [pc, #172]	; (8006dd4 <__ieee754_atan2+0x13c>)
 8006d28:	00e4      	lsls	r4, r4, #3
 8006d2a:	191c      	adds	r4, r3, r4
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	6861      	ldr	r1, [r4, #4]
 8006d30:	e7cd      	b.n	8006cce <__ieee754_atan2+0x36>
 8006d32:	2c02      	cmp	r4, #2
 8006d34:	d83e      	bhi.n	8006db4 <__ieee754_atan2+0x11c>
 8006d36:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <__ieee754_atan2+0x140>)
 8006d38:	00e4      	lsls	r4, r4, #3
 8006d3a:	e7f6      	b.n	8006d2a <__ieee754_atan2+0x92>
 8006d3c:	4f20      	ldr	r7, [pc, #128]	; (8006dc0 <__ieee754_atan2+0x128>)
 8006d3e:	42bb      	cmp	r3, r7
 8006d40:	d0e3      	beq.n	8006d0a <__ieee754_atan2+0x72>
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	151b      	asrs	r3, r3, #20
 8006d46:	2b3c      	cmp	r3, #60	; 0x3c
 8006d48:	dc18      	bgt.n	8006d7c <__ieee754_atan2+0xe4>
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	da01      	bge.n	8006d52 <__ieee754_atan2+0xba>
 8006d4e:	333c      	adds	r3, #60	; 0x3c
 8006d50:	db17      	blt.n	8006d82 <__ieee754_atan2+0xea>
 8006d52:	0032      	movs	r2, r6
 8006d54:	002b      	movs	r3, r5
 8006d56:	f7fa f8fd 	bl	8000f54 <__aeabi_ddiv>
 8006d5a:	f7ff ff6f 	bl	8006c3c <fabs>
 8006d5e:	f7ff fded 	bl	800693c <atan>
 8006d62:	2c01      	cmp	r4, #1
 8006d64:	d010      	beq.n	8006d88 <__ieee754_atan2+0xf0>
 8006d66:	2c02      	cmp	r4, #2
 8006d68:	d013      	beq.n	8006d92 <__ieee754_atan2+0xfa>
 8006d6a:	2c00      	cmp	r4, #0
 8006d6c:	d0af      	beq.n	8006cce <__ieee754_atan2+0x36>
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <__ieee754_atan2+0x144>)
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <__ieee754_atan2+0x148>)
 8006d72:	f7fa ff5d 	bl	8001c30 <__aeabi_dsub>
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <__ieee754_atan2+0x14c>)
 8006d7a:	e012      	b.n	8006da2 <__ieee754_atan2+0x10a>
 8006d7c:	4812      	ldr	r0, [pc, #72]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006d7e:	491a      	ldr	r1, [pc, #104]	; (8006de8 <__ieee754_atan2+0x150>)
 8006d80:	e7ef      	b.n	8006d62 <__ieee754_atan2+0xca>
 8006d82:	2000      	movs	r0, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	e7ec      	b.n	8006d62 <__ieee754_atan2+0xca>
 8006d88:	2480      	movs	r4, #128	; 0x80
 8006d8a:	0624      	lsls	r4, r4, #24
 8006d8c:	190b      	adds	r3, r1, r4
 8006d8e:	0019      	movs	r1, r3
 8006d90:	e79d      	b.n	8006cce <__ieee754_atan2+0x36>
 8006d92:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <__ieee754_atan2+0x144>)
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <__ieee754_atan2+0x148>)
 8006d96:	f7fa ff4b 	bl	8001c30 <__aeabi_dsub>
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	000b      	movs	r3, r1
 8006d9e:	480a      	ldr	r0, [pc, #40]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006da0:	4910      	ldr	r1, [pc, #64]	; (8006de4 <__ieee754_atan2+0x14c>)
 8006da2:	f7fa ff45 	bl	8001c30 <__aeabi_dsub>
 8006da6:	e792      	b.n	8006cce <__ieee754_atan2+0x36>
 8006da8:	4807      	ldr	r0, [pc, #28]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006daa:	490e      	ldr	r1, [pc, #56]	; (8006de4 <__ieee754_atan2+0x14c>)
 8006dac:	e78f      	b.n	8006cce <__ieee754_atan2+0x36>
 8006dae:	4806      	ldr	r0, [pc, #24]	; (8006dc8 <__ieee754_atan2+0x130>)
 8006db0:	490e      	ldr	r1, [pc, #56]	; (8006dec <__ieee754_atan2+0x154>)
 8006db2:	e78c      	b.n	8006cce <__ieee754_atan2+0x36>
 8006db4:	2000      	movs	r0, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	e789      	b.n	8006cce <__ieee754_atan2+0x36>
 8006dba:	490b      	ldr	r1, [pc, #44]	; (8006de8 <__ieee754_atan2+0x150>)
 8006dbc:	e787      	b.n	8006cce <__ieee754_atan2+0x36>
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	7ff00000 	.word	0x7ff00000
 8006dc4:	c0100000 	.word	0xc0100000
 8006dc8:	54442d18 	.word	0x54442d18
 8006dcc:	c00921fb 	.word	0xc00921fb
 8006dd0:	bff921fb 	.word	0xbff921fb
 8006dd4:	08007110 	.word	0x08007110
 8006dd8:	08007128 	.word	0x08007128
 8006ddc:	33145c07 	.word	0x33145c07
 8006de0:	3ca1a626 	.word	0x3ca1a626
 8006de4:	400921fb 	.word	0x400921fb
 8006de8:	3ff921fb 	.word	0x3ff921fb
 8006dec:	3fe921fb 	.word	0x3fe921fb

08006df0 <__ieee754_sqrt>:
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	000b      	movs	r3, r1
 8006df4:	000c      	movs	r4, r1
 8006df6:	4956      	ldr	r1, [pc, #344]	; (8006f50 <__ieee754_sqrt+0x160>)
 8006df8:	0005      	movs	r5, r0
 8006dfa:	0002      	movs	r2, r0
 8006dfc:	0008      	movs	r0, r1
 8006dfe:	b085      	sub	sp, #20
 8006e00:	4020      	ands	r0, r4
 8006e02:	4288      	cmp	r0, r1
 8006e04:	d10f      	bne.n	8006e26 <__ieee754_sqrt+0x36>
 8006e06:	0028      	movs	r0, r5
 8006e08:	0021      	movs	r1, r4
 8006e0a:	f7fa fca5 	bl	8001758 <__aeabi_dmul>
 8006e0e:	0002      	movs	r2, r0
 8006e10:	000b      	movs	r3, r1
 8006e12:	0028      	movs	r0, r5
 8006e14:	0021      	movs	r1, r4
 8006e16:	f7f9 fd61 	bl	80008dc <__aeabi_dadd>
 8006e1a:	0005      	movs	r5, r0
 8006e1c:	000c      	movs	r4, r1
 8006e1e:	0028      	movs	r0, r5
 8006e20:	0021      	movs	r1, r4
 8006e22:	b005      	add	sp, #20
 8006e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e26:	2c00      	cmp	r4, #0
 8006e28:	dc10      	bgt.n	8006e4c <__ieee754_sqrt+0x5c>
 8006e2a:	0061      	lsls	r1, r4, #1
 8006e2c:	0849      	lsrs	r1, r1, #1
 8006e2e:	4329      	orrs	r1, r5
 8006e30:	d0f5      	beq.n	8006e1e <__ieee754_sqrt+0x2e>
 8006e32:	2100      	movs	r1, #0
 8006e34:	428c      	cmp	r4, r1
 8006e36:	d100      	bne.n	8006e3a <__ieee754_sqrt+0x4a>
 8006e38:	e080      	b.n	8006f3c <__ieee754_sqrt+0x14c>
 8006e3a:	0028      	movs	r0, r5
 8006e3c:	0021      	movs	r1, r4
 8006e3e:	f7fa fef7 	bl	8001c30 <__aeabi_dsub>
 8006e42:	0002      	movs	r2, r0
 8006e44:	000b      	movs	r3, r1
 8006e46:	f7fa f885 	bl	8000f54 <__aeabi_ddiv>
 8006e4a:	e7e6      	b.n	8006e1a <__ieee754_sqrt+0x2a>
 8006e4c:	1521      	asrs	r1, r4, #20
 8006e4e:	d075      	beq.n	8006f3c <__ieee754_sqrt+0x14c>
 8006e50:	4840      	ldr	r0, [pc, #256]	; (8006f54 <__ieee754_sqrt+0x164>)
 8006e52:	031b      	lsls	r3, r3, #12
 8006e54:	180c      	adds	r4, r1, r0
 8006e56:	2080      	movs	r0, #128	; 0x80
 8006e58:	0b1b      	lsrs	r3, r3, #12
 8006e5a:	0340      	lsls	r0, r0, #13
 8006e5c:	4303      	orrs	r3, r0
 8006e5e:	07c9      	lsls	r1, r1, #31
 8006e60:	d403      	bmi.n	8006e6a <__ieee754_sqrt+0x7a>
 8006e62:	0fd1      	lsrs	r1, r2, #31
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	185b      	adds	r3, r3, r1
 8006e68:	0052      	lsls	r2, r2, #1
 8006e6a:	1061      	asrs	r1, r4, #1
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	9103      	str	r1, [sp, #12]
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	0fd1      	lsrs	r1, r2, #31
 8006e74:	185b      	adds	r3, r3, r1
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	2516      	movs	r5, #22
 8006e7a:	0020      	movs	r0, r4
 8006e7c:	0052      	lsls	r2, r2, #1
 8006e7e:	0389      	lsls	r1, r1, #14
 8006e80:	1846      	adds	r6, r0, r1
 8006e82:	429e      	cmp	r6, r3
 8006e84:	dc02      	bgt.n	8006e8c <__ieee754_sqrt+0x9c>
 8006e86:	1870      	adds	r0, r6, r1
 8006e88:	1b9b      	subs	r3, r3, r6
 8006e8a:	1864      	adds	r4, r4, r1
 8006e8c:	0fd6      	lsrs	r6, r2, #31
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	3d01      	subs	r5, #1
 8006e92:	18f3      	adds	r3, r6, r3
 8006e94:	0052      	lsls	r2, r2, #1
 8006e96:	0849      	lsrs	r1, r1, #1
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	d1f1      	bne.n	8006e80 <__ieee754_sqrt+0x90>
 8006e9c:	2620      	movs	r6, #32
 8006e9e:	2780      	movs	r7, #128	; 0x80
 8006ea0:	0029      	movs	r1, r5
 8006ea2:	9601      	str	r6, [sp, #4]
 8006ea4:	063f      	lsls	r7, r7, #24
 8006ea6:	197e      	adds	r6, r7, r5
 8006ea8:	46b4      	mov	ip, r6
 8006eaa:	4283      	cmp	r3, r0
 8006eac:	dc02      	bgt.n	8006eb4 <__ieee754_sqrt+0xc4>
 8006eae:	d114      	bne.n	8006eda <__ieee754_sqrt+0xea>
 8006eb0:	4296      	cmp	r6, r2
 8006eb2:	d812      	bhi.n	8006eda <__ieee754_sqrt+0xea>
 8006eb4:	4665      	mov	r5, ip
 8006eb6:	4666      	mov	r6, ip
 8006eb8:	19ed      	adds	r5, r5, r7
 8006eba:	9002      	str	r0, [sp, #8]
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	da03      	bge.n	8006ec8 <__ieee754_sqrt+0xd8>
 8006ec0:	43ee      	mvns	r6, r5
 8006ec2:	0ff6      	lsrs	r6, r6, #31
 8006ec4:	1986      	adds	r6, r0, r6
 8006ec6:	9602      	str	r6, [sp, #8]
 8006ec8:	1a1b      	subs	r3, r3, r0
 8006eca:	4562      	cmp	r2, ip
 8006ecc:	4180      	sbcs	r0, r0
 8006ece:	4240      	negs	r0, r0
 8006ed0:	1a1b      	subs	r3, r3, r0
 8006ed2:	4660      	mov	r0, ip
 8006ed4:	1a12      	subs	r2, r2, r0
 8006ed6:	9802      	ldr	r0, [sp, #8]
 8006ed8:	19c9      	adds	r1, r1, r7
 8006eda:	0fd6      	lsrs	r6, r2, #31
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	199b      	adds	r3, r3, r6
 8006ee0:	9e01      	ldr	r6, [sp, #4]
 8006ee2:	0052      	lsls	r2, r2, #1
 8006ee4:	3e01      	subs	r6, #1
 8006ee6:	087f      	lsrs	r7, r7, #1
 8006ee8:	9601      	str	r6, [sp, #4]
 8006eea:	2e00      	cmp	r6, #0
 8006eec:	d1db      	bne.n	8006ea6 <__ieee754_sqrt+0xb6>
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	d003      	beq.n	8006efa <__ieee754_sqrt+0x10a>
 8006ef2:	1c4b      	adds	r3, r1, #1
 8006ef4:	d127      	bne.n	8006f46 <__ieee754_sqrt+0x156>
 8006ef6:	0031      	movs	r1, r6
 8006ef8:	3401      	adds	r4, #1
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <__ieee754_sqrt+0x168>)
 8006efc:	1060      	asrs	r0, r4, #1
 8006efe:	18c0      	adds	r0, r0, r3
 8006f00:	0849      	lsrs	r1, r1, #1
 8006f02:	07e3      	lsls	r3, r4, #31
 8006f04:	d502      	bpl.n	8006f0c <__ieee754_sqrt+0x11c>
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	061b      	lsls	r3, r3, #24
 8006f0a:	4319      	orrs	r1, r3
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	000d      	movs	r5, r1
 8006f10:	051c      	lsls	r4, r3, #20
 8006f12:	1823      	adds	r3, r4, r0
 8006f14:	001c      	movs	r4, r3
 8006f16:	e782      	b.n	8006e1e <__ieee754_sqrt+0x2e>
 8006f18:	0ad3      	lsrs	r3, r2, #11
 8006f1a:	3815      	subs	r0, #21
 8006f1c:	0552      	lsls	r2, r2, #21
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0fa      	beq.n	8006f18 <__ieee754_sqrt+0x128>
 8006f22:	2480      	movs	r4, #128	; 0x80
 8006f24:	0364      	lsls	r4, r4, #13
 8006f26:	4223      	tst	r3, r4
 8006f28:	d00a      	beq.n	8006f40 <__ieee754_sqrt+0x150>
 8006f2a:	2420      	movs	r4, #32
 8006f2c:	0016      	movs	r6, r2
 8006f2e:	1a64      	subs	r4, r4, r1
 8006f30:	40e6      	lsrs	r6, r4
 8006f32:	1e4d      	subs	r5, r1, #1
 8006f34:	408a      	lsls	r2, r1
 8006f36:	4333      	orrs	r3, r6
 8006f38:	1b41      	subs	r1, r0, r5
 8006f3a:	e789      	b.n	8006e50 <__ieee754_sqrt+0x60>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e7ee      	b.n	8006f1e <__ieee754_sqrt+0x12e>
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	3101      	adds	r1, #1
 8006f44:	e7ef      	b.n	8006f26 <__ieee754_sqrt+0x136>
 8006f46:	2301      	movs	r3, #1
 8006f48:	3101      	adds	r1, #1
 8006f4a:	4399      	bics	r1, r3
 8006f4c:	e7d5      	b.n	8006efa <__ieee754_sqrt+0x10a>
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	fffffc01 	.word	0xfffffc01
 8006f58:	3fe00000 	.word	0x3fe00000

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
