<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_controller_8h_source" xml:lang="en-US">
<title>controller.h</title>
<indexterm><primary>Inc/controller.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;&#32;@file&#32;controller.h</emphasis>
3 <emphasis role="comment">&#32;*&#32;&#32;@author:&#32;Anil&#32;Ozrenk</emphasis>
4 <emphasis role="comment">&#32;*&#32;&#32;@date&#32;05/13/2022</emphasis>
5 <emphasis role="comment">&#32;*</emphasis>
6 <emphasis role="comment">&#32;*/</emphasis>
7 <emphasis role="preprocessor">#ifndef&#32;_CONTROL_H_</emphasis>
8 <emphasis role="preprocessor">#define&#32;_CONTROL_H_</emphasis>
9 
10 <emphasis role="preprocessor">#include&#32;&lt;stdint.h&gt;</emphasis>
11 
12 <emphasis role="preprocessor">#define&#32;OK&#32;&apos;F&apos;&#32;</emphasis>
13 
14 <emphasis role="preprocessor">#define&#32;MAX_POWER&#32;255</emphasis>
16 <emphasis role="keyword">enum</emphasis>&#32;vector_state{
17 &#32;&#32;&#32;&#32;forward,
18 &#32;&#32;&#32;&#32;turn_left,
19 &#32;&#32;&#32;&#32;turn_right,
20 &#32;&#32;&#32;&#32;forward_left,
21 &#32;&#32;&#32;&#32;forward_right,
22 &#32;&#32;&#32;&#32;idle,
23 &#32;&#32;&#32;&#32;halt,
24 
25 };
27 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>{
28 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structtyp_motor_handler_1a10079f56950ea7b09285bc6e25becfd3">motorCode</link>;&#32;
29 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1">speed</link>;&#32;
30 
31 }<link linkend="_structtyp_motor_handler">typMotorHandler</link>;
33 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>{
34 &#32;&#32;&#32;&#32;uint8_t&#32;status;
35 &#32;&#32;&#32;&#32;<link linkend="_structtyp_motor_handler">typMotorHandler</link>&#32;<link linkend="_structtyp_hover_handler_1a09acc8fe77efb02ae6b1a14f05819a2a">motorA</link>;&#32;
36 &#32;&#32;&#32;&#32;<link linkend="_structtyp_motor_handler">typMotorHandler</link>&#32;<link linkend="_structtyp_hover_handler_1a0bd5d107132436fb2f732e7540172897">motorB</link>;&#32;
37 &#32;&#32;&#32;&#32;<link linkend="_structtyp_motor_handler">typMotorHandler</link>&#32;<link linkend="_structtyp_hover_handler_1a6a1c1f56a0e2ff25ee2dccf464a82d48">motorC</link>;&#32;
38 &#32;&#32;&#32;&#32;<link linkend="_structtyp_motor_handler">typMotorHandler</link>&#32;<link linkend="_structtyp_hover_handler_1a27be17122a14b45bf5c07d2116336f8d">motorD</link>;&#32;
39 }<link linkend="_structtyp_hover_handler">typHoverHandler</link>;
41 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>{
42 &#32;&#32;&#32;&#32;uint8_t&#32;pwmInputA;
43 &#32;&#32;&#32;&#32;uint8_t&#32;pwmInputB;
44 &#32;&#32;&#32;&#32;uint8_t&#32;pwmInputC;
45 &#32;&#32;&#32;&#32;uint8_t&#32;pwmInputD;
46 }<link linkend="_structtyp_p_w_m_input_handler">typPWMInputHandler</link>;
52 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>{&#32;&#32;&#32;<emphasis role="comment">//0-255</emphasis>
53 &#32;&#32;&#32;&#32;uint8_t&#32;pwmOutputA;
54 &#32;&#32;&#32;&#32;uint8_t&#32;pwmOutputB;
55 &#32;&#32;&#32;&#32;uint8_t&#32;pwmOutputC;
56 &#32;&#32;&#32;&#32;uint8_t&#32;pwmOutputD;
57 }<link linkend="_structtyp_p_w_m_output_handler">typPWMOutputHandler</link>;
59 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>{
60 &#32;&#32;&#32;&#32;uint8_t&#32;forward;
61 &#32;&#32;&#32;&#32;uint8_t&#32;left;
62 &#32;&#32;&#32;&#32;uint8_t&#32;right;
63 &#32;&#32;&#32;&#32;uint8_t&#32;backward;
64 }<link linkend="_structtyp_vector">typVector</link>;
65 
66 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_controller_8c_1a725b010a425c9a3c2bda47ae81732b8c">vectorToPwm</link>(<link linkend="_structtyp_vector">typVector</link>&#32;*hVec,&#32;<link linkend="_structtyp_p_w_m_input_handler">typPWMInputHandler</link>&#32;*pwmInput);
67 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_controller_8c_1a06645bfc45724a560b1ea2dde074525d">angleToVector</link>(<link linkend="_structtyp_vector">typVector</link>&#32;*hVec,<emphasis role="keywordtype">double</emphasis>&#32;curr_angle_x,<emphasis role="keywordtype">double</emphasis>&#32;start_angle_x,<emphasis role="keywordtype">double</emphasis>&#32;curr_angle_y,<emphasis role="keywordtype">double</emphasis>&#32;start_angle_y&#32;,<emphasis role="keywordtype">double</emphasis>&#32;death_zone);
68 <emphasis role="keywordtype">void</emphasis>&#32;deathzone(<emphasis role="keywordtype">double</emphasis>&#32;*delta_x,<emphasis role="keywordtype">double</emphasis>&#32;pmax,<emphasis role="keywordtype">double</emphasis>&#32;nmax,<emphasis role="keywordtype">double</emphasis>&#32;death_zone);
69 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_controller_8c_1a50d0e2e6139d69c55c535c74d4c7077e">hoverInit</link>(<link linkend="_structtyp_hover_handler">typHoverHandler</link>&#32;*hhov);
70 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_controller_8c_1a70f9428f5c81614c11fb0ba084b70929">pwmSmooting</link>(<link linkend="_structtyp_hover_handler">typHoverHandler</link>&#32;*hHov,<link linkend="_structtyp_p_w_m_input_handler">typPWMInputHandler</link>&#32;*input,<emphasis role="keywordtype">double</emphasis>&#32;kf);
71 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_controller_8c_1aafa92e2d6ed9e557757389f828261abc">deathzonefit</link>(<emphasis role="keywordtype">double</emphasis>&#32;*delta_x,<emphasis role="keywordtype">double</emphasis>&#32;pmax,<emphasis role="keywordtype">double</emphasis>&#32;nmax,<emphasis role="keywordtype">double</emphasis>&#32;death_zone);
72 <emphasis role="keywordtype">void</emphasis>&#32;command(<link linkend="_structtyp_hover_handler">typHoverHandler</link>&#32;*hHov,<emphasis role="keywordtype">char</emphasis>&#32;*buff);
73 
74 
75 
76 
77 
78 <emphasis role="preprocessor">#endif</emphasis>
79 
80 
81 
82 
83 
</programlisting></section>
