<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="controller_8c" kind="file" language="C++">
    <compoundname>controller.c</compoundname>
    <includes refid="controller_8h" local="yes">controller.h</includes>
    <incdepgraph>
      <node id="2">
        <label>controller.h</label>
        <link refid="controller_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Src/controller.c</label>
        <link refid="controller_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="controller_8c_1a0715621232418c080f58db36d0d5e983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pwmToAscii</definition>
        <argsstring>(typMotorHandler *hmotor, char *buff)</argsstring>
        <name>pwmToAscii</name>
        <param>
          <type><ref refid="structtyp_motor_handler" kindref="compound">typMotorHandler</ref> *</type>
          <declname>hmotor</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
<para>8 bit unsigned integer value to string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_motor_handler" kindref="compound">typMotorHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>*buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="225" column="6" bodyfile="Src/controller.c" bodystart="225" bodyend="233" declfile="Src/controller.c" declline="11" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1aafa92e2d6ed9e557757389f828261abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deathzonefit</definition>
        <argsstring>(double *delta_x, double pmax, double nmax, double death_zone)</argsstring>
        <name>deathzonefit</name>
        <param>
          <type>double *</type>
          <declname>delta_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>death_zone</declname>
        </param>
        <briefdescription>
<para>limit the angle and add deathzone </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta_angle</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positive</parametername>
</parameternamelist>
<parameterdescription>
<para>max </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negative</parametername>
</parameternamelist>
<parameterdescription>
<para>max </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deathzone</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="124" column="6" bodyfile="Src/controller.c" bodystart="124" bodyend="137" declfile="Src/controller.c" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1af66b652f6a00278d8c3762fc3e0da890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t vectorState</definition>
        <argsstring>(typVector *vector)</argsstring>
        <name>vectorState</name>
        <param>
          <type><ref refid="structtyp_vector" kindref="compound">typVector</ref> *</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>decide the state of vectors </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_vector" kindref="compound">typVector</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="51" column="9" bodyfile="Src/controller.c" bodystart="51" bodyend="75" declfile="Src/controller.c" declline="13" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1a50d0e2e6139d69c55c535c74d4c7077e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hoverInit</definition>
        <argsstring>(typHoverHandler *hhov)</argsstring>
        <name>hoverInit</name>
        <param>
          <type><ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref> *</type>
          <declname>hhov</declname>
        </param>
        <briefdescription>
<para>intiate hovercraft give motors ascii characters set all motors speeds to 0 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="21" column="6" bodyfile="Src/controller.c" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1a70f9428f5c81614c11fb0ba084b70929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pwmSmooting</definition>
        <argsstring>(typHoverHandler *hHov, typPWMInputHandler *input, double kf)</argsstring>
        <name>pwmSmooting</name>
        <param>
          <type><ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref> *</type>
          <declname>hHov</declname>
        </param>
        <param>
          <type><ref refid="structtyp_p_w_m_input_handler" kindref="compound">typPWMInputHandler</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kf</declname>
        </param>
        <briefdescription>
<para>exponantiel filter for smoothing motor pwm </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_p_w_m_input_handler" kindref="compound">typPWMInputHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="39" column="6" bodyfile="Src/controller.c" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1a725b010a425c9a3c2bda47ae81732b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vectorToPwm</definition>
        <argsstring>(typVector *hVec, typPWMInputHandler *pwmInput)</argsstring>
        <name>vectorToPwm</name>
        <param>
          <type><ref refid="structtyp_vector" kindref="compound">typVector</ref> *</type>
          <declname>hVec</declname>
        </param>
        <param>
          <type><ref refid="structtyp_p_w_m_input_handler" kindref="compound">typPWMInputHandler</ref> *</type>
          <declname>pwmInput</declname>
        </param>
        <briefdescription>
<para>generate pwm value corrosponding to vector states </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_p_w_m_input_handler" kindref="compound">typPWMInputHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_vector" kindref="compound">typVector</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="81" column="6" bodyfile="Src/controller.c" bodystart="81" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1a06645bfc45724a560b1ea2dde074525d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angleToVector</definition>
        <argsstring>(typVector *hVec, double curr_angle_x, double start_angle_x, double curr_angle_y, double start_angle_y, double death_zone)</argsstring>
        <name>angleToVector</name>
        <param>
          <type><ref refid="structtyp_vector" kindref="compound">typVector</ref> *</type>
          <declname>hVec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>curr_angle_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>start_angle_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>curr_angle_y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>start_angle_y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>death_zone</declname>
        </param>
        <briefdescription>
<para>angle values to vector calues </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtyp_vector" kindref="compound">typVector</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_angle_x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_y</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_angle_y</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deathzone</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="147" column="6" bodyfile="Src/controller.c" bodystart="147" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="controller_8c_1a325f4f19b8eb9a5326bbf307f1a9dc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void command</definition>
        <argsstring>(typHoverHandler *hHov, char *buff)</argsstring>
        <name>command</name>
        <param>
          <type><ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref> *</type>
          <declname>hHov</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/controller.c" line="185" column="6" bodyfile="Src/controller.c" bodystart="185" bodyend="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>all process angle data to sendable buffer </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>05/13/2022 </para>
</simplesect>
<simplesect kind="author"><para>Anil </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;controller.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Local<sp/>Functions<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1a0715621232418c080f58db36d0d5e983" kindref="member">pwmToAscii</ref>(<ref refid="structtyp_motor_handler" kindref="compound">typMotorHandler</ref><sp/>*hmotor,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buff);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1aafa92e2d6ed9e557757389f828261abc" kindref="member">deathzonefit</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*delta_x,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pmax,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nmax,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>death_zone);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">uint8_t<sp/><ref refid="controller_8c_1af66b652f6a00278d8c3762fc3e0da890" kindref="member">vectorState</ref>(<ref refid="structtyp_vector" kindref="compound">typVector</ref><sp/>*vector);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/********<sp/><sp/><sp/><sp/>********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1a50d0e2e6139d69c55c535c74d4c7077e" kindref="member">hoverInit</ref>(<ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref><sp/>*hhov){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;status=0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a09acc8fe77efb02ae6b1a14f05819a2a" kindref="member">motorA</ref>.<ref refid="structtyp_motor_handler_1a10079f56950ea7b09285bc6e25becfd3" kindref="member">motorCode</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a0bd5d107132436fb2f732e7540172897" kindref="member">motorB</ref>.<ref refid="structtyp_motor_handler_1a10079f56950ea7b09285bc6e25becfd3" kindref="member">motorCode</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a6a1c1f56a0e2ff25ee2dccf464a82d48" kindref="member">motorC</ref>.<ref refid="structtyp_motor_handler_1a10079f56950ea7b09285bc6e25becfd3" kindref="member">motorCode</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a27be17122a14b45bf5c07d2116336f8d" kindref="member">motorD</ref>.<ref refid="structtyp_motor_handler_1a10079f56950ea7b09285bc6e25becfd3" kindref="member">motorCode</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a09acc8fe77efb02ae6b1a14f05819a2a" kindref="member">motorA</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref>=0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a0bd5d107132436fb2f732e7540172897" kindref="member">motorB</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref>=0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a6a1c1f56a0e2ff25ee2dccf464a82d48" kindref="member">motorC</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref>=0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>hhov-&gt;<ref refid="structtyp_hover_handler_1a27be17122a14b45bf5c07d2116336f8d" kindref="member">motorD</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref>=0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1a70f9428f5c81614c11fb0ba084b70929" kindref="member">pwmSmooting</ref>(<ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref><sp/>*hHov,<ref refid="structtyp_p_w_m_input_handler" kindref="compound">typPWMInputHandler</ref><sp/>*input,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kf){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a09acc8fe77efb02ae6b1a14f05819a2a" kindref="member">motorA</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>=<sp/>(1-kf)<sp/>*<sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a09acc8fe77efb02ae6b1a14f05819a2a" kindref="member">motorA</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>+<sp/>input-&gt;pwmInputA<sp/>*kf;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a0bd5d107132436fb2f732e7540172897" kindref="member">motorB</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>=<sp/>(1-kf)<sp/>*<sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a0bd5d107132436fb2f732e7540172897" kindref="member">motorB</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>+<sp/>input-&gt;pwmInputB<sp/>*kf;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a6a1c1f56a0e2ff25ee2dccf464a82d48" kindref="member">motorC</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>=<sp/>(1-kf)<sp/>*<sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a6a1c1f56a0e2ff25ee2dccf464a82d48" kindref="member">motorC</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>+<sp/>input-&gt;pwmInputC<sp/>*kf;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a27be17122a14b45bf5c07d2116336f8d" kindref="member">motorD</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>=<sp/>(1-kf)<sp/>*<sp/>hHov-&gt;<ref refid="structtyp_hover_handler_1a27be17122a14b45bf5c07d2116336f8d" kindref="member">motorD</ref>.<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>+<sp/>input-&gt;pwmInputD<sp/>*kf;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">uint8_t<sp/><ref refid="controller_8c_1af66b652f6a00278d8c3762fc3e0da890" kindref="member">vectorState</ref>(<ref refid="structtyp_vector" kindref="compound">typVector</ref><sp/>*vector){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((vector-&gt;forward==0)&amp;&amp;(vector-&gt;left==0)&amp;&amp;(vector-&gt;right==0)&amp;&amp;(vector-&gt;backward==0)){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idle;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vector-&gt;backward&gt;15){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((vector-&gt;forward&gt;0)&amp;&amp;(vector-&gt;left==0)&amp;&amp;(vector-&gt;right==0)&amp;&amp;(vector-&gt;backward==0)){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((vector-&gt;left&gt;0)&amp;&amp;(vector-&gt;forward==0)&amp;&amp;(vector-&gt;right==0)&amp;&amp;(vector-&gt;backward==0)){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>turn_left;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((vector-&gt;right&gt;0)&amp;&amp;(vector-&gt;forward==0)&amp;&amp;(vector-&gt;left==0)&amp;&amp;(vector-&gt;backward==0)){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>turn_right;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((vector-&gt;left&gt;0)&amp;&amp;(vector-&gt;forward&gt;0)&amp;&amp;(vector-&gt;right==0)&amp;&amp;(vector-&gt;backward==0)){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward_left;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((vector-&gt;right&gt;0)&amp;&amp;(vector-&gt;forward&gt;0)&amp;&amp;(vector-&gt;left==0)&amp;&amp;(vector-&gt;backward==0)){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward_right;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idle;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1a725b010a425c9a3c2bda47ae81732b8c" kindref="member">vectorToPwm</ref>(<ref refid="structtyp_vector" kindref="compound">typVector</ref><sp/>*hVec,<sp/><ref refid="structtyp_p_w_m_input_handler" kindref="compound">typPWMInputHandler</ref><sp/>*pwmInput){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>state;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/><ref refid="controller_8c_1af66b652f6a00278d8c3762fc3e0da890" kindref="member">vectorState</ref>(hVec);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>forward:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputA=hVec-&gt;forward;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputB=hVec-&gt;forward;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>turn_left:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputB=hVec-&gt;left;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>turn_right:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputA=hVec-&gt;right;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>forward_left:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputA=(hVec-&gt;forward)/2;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputB=(hVec-&gt;forward+hVec-&gt;left)/2;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>forward_right:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputB=(hVec-&gt;forward)/2;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputA=(hVec-&gt;forward+hVec-&gt;right)/2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>halt:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputA=0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputB=0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputC=0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputD=0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>idle:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputC=120;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwmInput-&gt;pwmInputD=120;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1aafa92e2d6ed9e557757389f828261abc" kindref="member">deathzonefit</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*delta_x,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pmax,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nmax,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>death_zone){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*delta_x&gt;pmax){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*delta_x=pmax;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*delta_x&lt;nmax){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*delta_x=nmax;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*delta_x&lt;death_zone)&amp;&amp;(*delta_x&gt;0))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*delta_x=0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*delta_x<sp/>&gt;<sp/>(-1*death_zone))&amp;&amp;(*delta_x&lt;0))<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*delta_x=0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1a06645bfc45724a560b1ea2dde074525d" kindref="member">angleToVector</ref>(<ref refid="structtyp_vector" kindref="compound">typVector</ref><sp/>*hVec,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr_angle_x,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start_angle_x,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr_angle_y,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start_angle_y<sp/>,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>death_zone){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pmax<sp/>=<sp/>45;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nmax<sp/>=<sp/>-45;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_x<sp/>=<sp/>curr_angle_x<sp/>-<sp/>start_angle_x;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_y<sp/>=<sp/>curr_angle_y<sp/>-<sp/>start_angle_y;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="controller_8c_1aafa92e2d6ed9e557757389f828261abc" kindref="member">deathzonefit</ref>(&amp;delta_x,<sp/>pmax,<sp/>nmax,<sp/>death_zone);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="controller_8c_1aafa92e2d6ed9e557757389f828261abc" kindref="member">deathzonefit</ref>(&amp;delta_y,<sp/>pmax,<sp/>nmax,<sp/>death_zone);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delta_y&gt;=0){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delta_x&lt;0){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;left<sp/>=<sp/>delta_x*255/nmax;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;right<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delta_x&gt;0){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;right<sp/>=<sp/>delta_x*255/pmax;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;right<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;forward=<sp/>delta_y*255/pmax;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;backward=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(-30&lt;delta_y&amp;&amp;delta_y&lt;0){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;backward=0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;left=0;<sp/>hVec-&gt;right=0;<sp/>hVec-&gt;forward=0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;backward=50;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVec-&gt;left=0;<sp/>hVec-&gt;right=0;<sp/>hVec-&gt;forward=0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@brief<sp/>generate<sp/>sendable<sp/>buffer<sp/>for<sp/>hovercraft</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param<sp/>typHoverHandler</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@param<sp/>char<sp/>*buffer</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>command(<ref refid="structtyp_hover_handler" kindref="compound">typHoverHandler</ref><sp/>*hHov,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buff){</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffA[3],buffB[3],buffC[3],buffD[3];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="controller_8c_1a0715621232418c080f58db36d0d5e983" kindref="member">pwmToAscii</ref>(&amp;(hHov-&gt;<ref refid="structtyp_hover_handler_1a09acc8fe77efb02ae6b1a14f05819a2a" kindref="member">motorA</ref>),<sp/>buffA);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="controller_8c_1a0715621232418c080f58db36d0d5e983" kindref="member">pwmToAscii</ref>(&amp;(hHov-&gt;<ref refid="structtyp_hover_handler_1a0bd5d107132436fb2f732e7540172897" kindref="member">motorB</ref>),<sp/>buffB);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="controller_8c_1a0715621232418c080f58db36d0d5e983" kindref="member">pwmToAscii</ref>(&amp;(hHov-&gt;<ref refid="structtyp_hover_handler_1a6a1c1f56a0e2ff25ee2dccf464a82d48" kindref="member">motorC</ref>),<sp/>buffC);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="controller_8c_1a0715621232418c080f58db36d0d5e983" kindref="member">pwmToAscii</ref>(&amp;(hHov-&gt;<ref refid="structtyp_hover_handler_1a27be17122a14b45bf5c07d2116336f8d" kindref="member">motorD</ref>),<sp/>buffD);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i=0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>j=0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;12){</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(j&lt;3){</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff[i]=buffA[j];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(j&lt;3){</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff[i]=buffB[j];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(j&lt;3){</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff[i]=buffC[j];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(j&lt;3){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff[i]=buffD[j];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>buff[12]=</highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="controller_8c_1a0715621232418c080f58db36d0d5e983" kindref="member">pwmToAscii</ref>(<ref refid="structtyp_motor_handler" kindref="compound">typMotorHandler</ref><sp/>*hmotor,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buff){</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>highbytes<sp/>=(char)<sp/>hmotor-&gt;<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sendfirst<sp/>=<sp/>highbytes+97;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lowbytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)hmotor-&gt;<ref refid="structtyp_motor_handler_1a4967f1adf97c765e3df9a8652fe772a1" kindref="member">speed</ref><sp/>&amp;<sp/>0x0F;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sendlast<sp/>=<sp/>lowbytes+97;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>buff[0]=hmotor-&gt;<ref refid="structtyp_motor_handler_1a10079f56950ea7b09285bc6e25becfd3" kindref="member">motorCode</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>buff[1]=sendfirst;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>buff[2]=sendlast;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Src/controller.c"/>
  </compounddef>
</doxygen>
