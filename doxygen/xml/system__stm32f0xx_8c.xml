<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="system__stm32f0xx_8c" kind="file" language="C++">
    <compoundname>system_stm32f0xx.c</compoundname>
    <includes local="yes">stm32f0xx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>Src/system_stm32f0xx.c</label>
        <link refid="system__stm32f0xx_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stm32f0xx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___s_t_m32_f0xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" prot="public" static="no">
        <name>HSE_VALUE</name>
        <initializer>((uint32_t)8000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default value of the External oscillator in Hz. This value can be provided and adapted by the user application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="67" column="11" bodyfile="Src/system_stm32f0xx.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" prot="public" static="no">
        <name>HSI_VALUE</name>
        <initializer>((uint32_t)8000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default value of the Internal oscillator in Hz. This value can be provided and adapted by the user application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="72" column="11" bodyfile="Src/system_stm32f0xx.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_m32_f0xx___system___private___defines_1ga47f01e5e3f2edfa94bf74c08835f3875" prot="public" static="no">
        <name>HSI48_VALUE</name>
        <initializer>((uint32_t)48000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default value of the HSI48 Internal oscillator in Hz. This value can be provided and adapted by the user application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="77" column="9" bodyfile="Src/system_stm32f0xx.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___s_t_m32_f0xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t SystemCoreClock</definition>
        <argsstring></argsstring>
        <name>SystemCoreClock</name>
        <initializer>= 8000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="102" column="10" bodyfile="Src/system_stm32f0xx.c" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___s_t_m32_f0xx___system___private___variables_1ga6e1d9cd666f0eacbfde31e9932a93466" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t AHBPrescTable[16]</definition>
        <argsstring>[16]</argsstring>
        <name>AHBPrescTable</name>
        <initializer>= {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="104" column="15" bodyfile="Src/system_stm32f0xx.c" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___s_t_m32_f0xx___system___private___variables_1ga5b4f8b768465842cf854a8f993b375e9" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t APBPrescTable[8]</definition>
        <argsstring>[8]</argsstring>
        <name>APBPrescTable</name>
        <initializer>= {0, 0, 0, 0, 1, 2, 3, 4}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="105" column="15" bodyfile="Src/system_stm32f0xx.c" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_t_m32_f0xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SystemInit</definition>
        <argsstring>(void)</argsstring>
        <name>SystemInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Setup the microcontroller system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="128" column="6" bodyfile="Src/system_stm32f0xx.c" bodystart="128" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_m32_f0xx___system___private___functions_1gae0c36a9591fe6e9c45ecb21a794f0f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SystemCoreClockUpdate</definition>
        <argsstring>(void)</argsstring>
        <name>SystemCoreClockUpdate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update SystemCoreClock variable according to Clock Register Values. The SystemCoreClock variable contains the core clock (HCLK), it can be used by the user application to setup the SysTick timer or configure other parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Each time the core clock (HCLK) changes, this function must be called to update SystemCoreClock variable value. Otherwise, any configuration based on this variable will be incorrect.</para>
</simplesect>
<simplesect kind="note"><para>- The system frequency computed by this function is not the real frequency in the chip. It is calculated based on the predefined constant and the selected clock source:</para>
</simplesect>
<itemizedlist>
<listitem><para>If SYSCLK source is HSI, SystemCoreClock will contain the <ref refid="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE(*)</ref></para>
</listitem><listitem><para>If SYSCLK source is HSE, SystemCoreClock will contain the <ref refid="group___s_t_m32_f0xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE(**)</ref></para>
</listitem><listitem><para>If SYSCLK source is PLL, SystemCoreClock will contain the <ref refid="group___s_t_m32_f0xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE(**)</ref> or <ref refid="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE(*)</ref> multiplied/divided by the PLL factors.</para>
</listitem></itemizedlist>
</para>
<para>(*) HSI_VALUE is a constant defined in <ref refid="stm32f0xx__hal__conf_8h" kindref="compound">stm32f0xx_hal_conf.h</ref> file (default value 8 MHz) but the real value may vary depending on the variations in voltage and temperature.</para>
<para>(**) HSE_VALUE is a constant defined in <ref refid="stm32f0xx__hal__conf_8h" kindref="compound">stm32f0xx_hal_conf.h</ref> file (its value depends on the application requirements), user has to ensure that HSE_VALUE is same as the real frequency of the crystal used. Otherwise, this function may have wrong result.</para>
<para><itemizedlist>
<listitem><para>The result of this function could be not correct when using fractional value for HSE crystal.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f0xx.c" line="174" column="6" bodyfile="Src/system_stm32f0xx.c" bodystart="174" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CMSIS Cortex-M0 Device Peripheral Access Layer System Source File. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team</para>
</simplesect>
<orderedlist>
<listitem><para>This file provides two functions and one global variable to be called from user application:<itemizedlist>
<listitem><para><ref refid="group___s_t_m32_f0xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" kindref="member">SystemInit()</ref>: This function is called at startup just after reset and before branch to main program. This call is made inside the &quot;startup_stm32f0xx.s&quot; file.</para>
</listitem><listitem><para>SystemCoreClock variable: Contains the core clock (HCLK), it can be used by the user application to setup the SysTick timer or configure other parameters.</para>
</listitem><listitem><para><ref refid="group___s_t_m32_f0xx___system___private___functions_1gae0c36a9591fe6e9c45ecb21a794f0f0f" kindref="member">SystemCoreClockUpdate()</ref>: Updates the variable SystemCoreClock and must be called whenever the core clock is changed during program execution.</para>
</listitem></itemizedlist>
</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="attention"><para></para>
</simplesect>
<heading level="2"><center><copy/> Copyright (c) 2016 STMicroelectronics. All rights reserved.</center></heading>
</para>
<para>This software component is licensed by ST under BSD 3-Clause license, the &quot;License&quot;; You may not use this file except in compliance with the License. You may obtain a copy of the License at: opensource.org/licenses/BSD-3-Clause </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stm32f0xx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/><sp/>(HSE_VALUE)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>HSE_VALUE<sp/><sp/><sp/><sp/>((uint32_t)8000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HSE_VALUE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/><sp/>(HSI_VALUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>HSI_VALUE<sp/><sp/><sp/><sp/>((uint32_t)8000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HSI_VALUE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>(HSI48_VALUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HSI48_VALUE<sp/><sp/><sp/><sp/>((uint32_t)48000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HSI48_VALUE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>variable<sp/>is<sp/>updated<sp/>in<sp/>three<sp/>ways:</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>by<sp/>calling<sp/>CMSIS<sp/>function<sp/>SystemCoreClockUpdate()</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>by<sp/>calling<sp/>HAL<sp/>API<sp/>function<sp/>HAL_RCC_GetHCLKFreq()</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>each<sp/>time<sp/>HAL_RCC_ClockConfig()<sp/>is<sp/>called<sp/>to<sp/>configure<sp/>the<sp/>system<sp/>clock<sp/>frequency</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note:<sp/>If<sp/>you<sp/>use<sp/>this<sp/>function<sp/>to<sp/>configure<sp/>the<sp/>system<sp/>clock;<sp/>then<sp/>there</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>no<sp/>need<sp/>to<sp/>call<sp/>the<sp/>2<sp/>first<sp/>functions<sp/>listed<sp/>above,<sp/>since<sp/>SystemCoreClock</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>is<sp/>updated<sp/>automatically.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">uint32_t<sp/>SystemCoreClock<sp/>=<sp/>8000000;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>AHBPrescTable[16]<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>6,<sp/>7,<sp/>8,<sp/>9};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>APBPrescTable[8]<sp/><sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_t_m32_f0xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" kindref="member">SystemInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE<sp/>:SystemInit():<sp/>This<sp/>function<sp/>is<sp/>called<sp/>at<sp/>startup<sp/>just<sp/>after<sp/>reset<sp/>and<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>branch<sp/>to<sp/>main<sp/>program.<sp/>This<sp/>call<sp/>is<sp/>made<sp/>inside</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>&quot;startup_stm32f0xx.s&quot;<sp/>file.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>User<sp/>can<sp/>setups<sp/>the<sp/>default<sp/>system<sp/>clock<sp/>(System<sp/>clock<sp/>source,<sp/>PLL<sp/>Multiplier</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>Divider<sp/>factors,<sp/>AHB/APBx<sp/>prescalers<sp/>and<sp/>Flash<sp/>settings).</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_t_m32_f0xx___system___private___functions_1gae0c36a9591fe6e9c45ecb21a794f0f0f" kindref="member">SystemCoreClockUpdate</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0,<sp/>pllmull<sp/>=<sp/>0,<sp/>pllsource<sp/>=<sp/>0,<sp/>predivfactor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>SYSCLK<sp/>source<sp/>-------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>RCC-&gt;CFGR<sp/>&amp;<sp/>RCC_CFGR_SWS;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tmp)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RCC_CFGR_SWS_HSI:<sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/><ref refid="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RCC_CFGR_SWS_HSE:<sp/><sp/></highlight><highlight class="comment">/*<sp/>HSE<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/><ref refid="group___s_t_m32_f0xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RCC_CFGR_SWS_PLL:<sp/><sp/></highlight><highlight class="comment">/*<sp/>PLL<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>PLL<sp/>clock<sp/>source<sp/>and<sp/>multiplication<sp/>factor<sp/>----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>=<sp/>RCC-&gt;CFGR<sp/>&amp;<sp/>RCC_CFGR_PLLMUL;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllsource<sp/>=<sp/>RCC-&gt;CFGR<sp/>&amp;<sp/>RCC_CFGR_PLLSRC;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>=<sp/>(<sp/>pllmull<sp/>&gt;&gt;<sp/>18)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>predivfactor<sp/>=<sp/>(RCC-&gt;CFGR2<sp/>&amp;<sp/>RCC_CFGR2_PREDIV)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pllsource<sp/>==<sp/>RCC_CFGR_PLLSRC_HSE_PREDIV)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSE<sp/>used<sp/>as<sp/>PLL<sp/>clock<sp/>source<sp/>:<sp/>SystemCoreClock<sp/>=<sp/>HSE/PREDIV<sp/>*<sp/>PLLMUL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/>(<ref refid="group___s_t_m32_f0xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref>/predivfactor)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F042x6)<sp/>||<sp/>defined(STM32F048xx)<sp/>||<sp/>defined(STM32F072xB)<sp/>||<sp/>defined(STM32F078xx)<sp/>||<sp/>defined(STM32F091xC)<sp/>||<sp/>defined(STM32F098xx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pllsource<sp/>==<sp/>RCC_CFGR_PLLSRC_HSI48_PREDIV)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI48<sp/>used<sp/>as<sp/>PLL<sp/>clock<sp/>source<sp/>:<sp/>SystemCoreClock<sp/>=<sp/>HSI48/PREDIV<sp/>*<sp/>PLLMUL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/>(<ref refid="group___s_t_m32_f0xx___system___private___defines_1ga47f01e5e3f2edfa94bf74c08835f3875" kindref="member">HSI48_VALUE</ref>/predivfactor)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F042x6<sp/>||<sp/>STM32F048xx<sp/>||<sp/>STM32F072xB<sp/>||<sp/>STM32F078xx<sp/>||<sp/>STM32F091xC<sp/>||<sp/>STM32F098xx<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F042x6)<sp/>||<sp/>defined(STM32F048xx)<sp/><sp/>||<sp/>defined(STM32F070x6)<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/>||<sp/>defined(STM32F078xx)<sp/>||<sp/>defined(STM32F071xB)<sp/><sp/>||<sp/>defined(STM32F072xB)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/>||<sp/>defined(STM32F070xB)<sp/>||<sp/>defined(STM32F091xC)<sp/>||<sp/>defined(STM32F098xx)<sp/><sp/>||<sp/>defined(STM32F030xC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>used<sp/>as<sp/>PLL<sp/>clock<sp/>source<sp/>:<sp/>SystemCoreClock<sp/>=<sp/>HSI/PREDIV<sp/>*<sp/>PLLMUL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/>(<ref refid="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref>/predivfactor)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>used<sp/>as<sp/>PLL<sp/>clock<sp/>source<sp/>:<sp/>SystemCoreClock<sp/>=<sp/>HSI/2<sp/>*<sp/>PLLMUL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/>(<ref refid="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref><sp/>&gt;&gt;<sp/>1)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F042x6<sp/>||<sp/>STM32F048xx<sp/>||<sp/>STM32F070x6<sp/>||<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STM32F071xB<sp/>||<sp/>STM32F072xB<sp/>||<sp/>STM32F078xx<sp/>||<sp/>STM32F070xB<sp/>||</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STM32F091xC<sp/>||<sp/>STM32F098xx<sp/>||<sp/>STM32F030xC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/><ref refid="group___s_t_m32_f0xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>HCLK<sp/>clock<sp/>frequency<sp/>----------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>HCLK<sp/>prescaler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>AHBPrescTable[((RCC-&gt;CFGR<sp/>&amp;<sp/>RCC_CFGR_HPRE)<sp/>&gt;&gt;<sp/>4)];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>HCLK<sp/>clock<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>SystemCoreClock<sp/>&gt;&gt;=<sp/>tmp;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/************************<sp/>(C)<sp/>COPYRIGHT<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Src/system_stm32f0xx.c"/>
  </compounddef>
</doxygen>
